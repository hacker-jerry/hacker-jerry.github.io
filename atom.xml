<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>M@tr1xの日常</title>
  
  
  <link href="https://www.blog.hackerjerry.top/atom.xml" rel="self"/>
  
  <link href="https://www.blog.hackerjerry.top/"/>
  <updated>2021-05-06T13:12:10.015Z</updated>
  <id>https://www.blog.hackerjerry.top/</id>
  
  <author>
    <name>M@tr1x</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>生活周报-May-3-to-10</title>
    <link href="https://www.blog.hackerjerry.top/2021/05/04/%E7%94%9F%E6%B4%BB%E5%91%A8%E6%8A%A5-May-3-to-10_new/"/>
    <id>https://www.blog.hackerjerry.top/2021/05/04/%E7%94%9F%E6%B4%BB%E5%91%A8%E6%8A%A5-May-3-to-10_new/</id>
    <published>2021-05-04T02:43:45.000Z</published>
    <updated>2021-05-06T13:12:10.015Z</updated>
    
    <content type="html"><![CDATA[<h1 id="时讯"><a href="#时讯" class="headerlink" title="时讯"></a>时讯</h1><ol><li>五四青年节，知乎发布微电影《重逢》，讲述了关于肖思远烈士的事，回答了这样一个时代问题——“当代年轻人还有没有不计生死的热血”，我没有看影片，只看了些许回答就已经泣不成声，酸楚涌上心头，豆大的眼泪滴落许久。是的，我在床上浏览着手机，这和平的岁月，都是这群最可爱的人为我们负重前行换来的。身为青年一代，我何曾忘记报国之志，家国之情溢于言表，流淌着的热血，奔涌的黄河，人民在召唤，时代在召唤，吾辈当不负重任，砥砺前行。</li><li>B 站发布了新的演讲，这次的演讲十分淳朴，也十分有感染力，下面是演讲全文：</li></ol><p>那些想从我们身上 看到中国未来的人<br>亲爱的父母 师长 前辈<br>其实我还不知道 想成为什么样的人<br>但能和你们分享的是<br>我不想做什么样的人<br>我不想做一个拿着锯子的人<br>随时随地 把人群锯成两半<br>这一半是女人 那一半是男人<br>这一半是盟友 那一半是对手<br>对手赞同的我们必须反对<br>对手反对的我们必须赞同<br>不论对错 只争输赢<br>我不想做一个浑身带刺的人<br>嘲讽别人的成功 嘲笑别人的失败<br>看不惯过得比他好的人<br>看不起过得没他好的人<br>一肚子抱怨和借口<br>凡事不是自己的错 都是别人的错<br>我不想做一个 流水线上制造出来的人<br>没有独立的人格 只有预定的人设<br>没有闪光的才华 只有抛光的流量<br>没有精彩的作品 只有热闹的八卦<br>我不想做一个隐身的人<br>需要挺身而出的时候 他藏在人群里<br>需要解决问题的时候 他消失在所有人的视线里<br>我不想做一个油腻的人<br>你吃亏的时候他说吃亏是福<br>该较真的时候他说难得糊涂<br>是的，我不想做这样的人<br>我不想做一个没有同情心的人<br>一个不讲义气的人<br>一个没有教养的人<br>一个半途而废的人<br>一个遗忘历史的人<br>我不想 做一个不爱国的人<br>我不想做一个 口口声声 “一代不如一代”的人<br>当我变成父母 师长 前辈的时候<br>希望 我的孩子会对我说<br>我想成为你这样的人。</p><ol start="3"><li>盖茨离婚</li></ol><h1 id="小事"><a href="#小事" class="headerlink" title="小事"></a>小事</h1><ol><li>雷姑娘送的糕点很好吃，在阳光天地的西木栗子有卖。</li><li>买了一只大吉岭的香水小样还不知道什么味道。</li><li>立夏了，气温开始在 30 度徘徊了。</li><li>买了云南的嘉华鲜花饼，送给老妈当母亲节礼物，玫瑰馅的应该挺好吃的？</li></ol><h1 id="本周收藏"><a href="#本周收藏" class="headerlink" title="本周收藏"></a>本周收藏</h1><h2 id="文章"><a href="#文章" class="headerlink" title="文章"></a>文章</h2><p>看到了哪些好文？</p><h2 id="剧集"><a href="#剧集" class="headerlink" title="剧集"></a>剧集</h2><ol><li>伍六七第三季最后一集！《你是我想保护的人》，梅小姐这次选择拼尽全力保护阿柒，爱了爱了！而阿柒，用魔刀千刃给梅小姐的剑“续命”，真爱无疑！然而，剧情戛然而止了，挖了一堆坑，注意，是一堆坑！还要出大电影，还真就从一个爆款 IP 上面疯狂捞金呗。</li></ol><h2 id="摘录"><a href="#摘录" class="headerlink" title="摘录"></a>摘录</h2><blockquote><p>来自知乎：<strong>当代社会中，青年的五四精神会有哪些具体表现？</strong></p></blockquote><ul><li>第一点就是<strong>爱国</strong>，这一条都做不到也无从谈起。任何时候，爱国都是第一位，也是不能撼动的。</li><li>第二点就是<strong>敬业</strong>，做好本职工作，脚踏实地的工作，认认真真的工作，不要得陇望蜀，好高骛远。</li><li>第三点就是<strong>明志</strong>，志即志向或者理想，一个人要有自己的目标，不能得过且过，当一天和尚撞一天钟。作为青年，需要有自己的人生规划。</li><li>第四点就是<strong>静心</strong>，国家发展越来越快，社会节奏越来越快，快节奏的生活让人一夜暴富，一夜成名，这让许多人都变得越来越浮躁，内心静不下来，空中楼阁的繁华富贵让许多人迷失了自我。</li></ul><h2 id="知识"><a href="#知识" class="headerlink" title="知识"></a>知识</h2><ol><li>如何对区块链系统测试。</li></ol><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><ol><li>又是一年青年节，在互联网多元文化的滋润下成长起来的新生代，给这个时代带来了新的课题，你不想成为一个什么样的人？</li></ol><p>我们总说，“君子有所为，有所不为”。年轻人何尝不是如此？<strong>那些非凡的勇气、思辨的精神、激扬的斗志，极尽人们对青春年华的无限想象；那些意志的消磨、生活的妥协、人生的沉沦，也在提醒人们对未老先衰的潜在担忧。</strong>从这个意义上来说，我们礼赞青年，不只是为了体现对青春年少的呵护，更是为了帮助青年扫除心灵的阴霾；我们歌颂青春，不只是为了了却人生苦短的遗憾，更是为了诠释时光荏苒的意义。要知道，青年人最大的资本，恰恰是最容易被自己忽视的青春；青春最值得的回忆，正是追逐梦想、成长奋斗的痕迹。<br>诗人塞缪尔·厄尔曼在《青春》中这样写道：“人人心中皆有一台天线，只要还能接受美好、希望、欢乐、勇气和力量的信号，就能青春永驻，风华常存。”<strong>架起这台心灵的“天线”，去感受日月星辰，去明辨是非曲直，去体悟人生百态，每一个成长的灵魂，就一定都能找到“你想成为怎样的人”和“我不想做这样的人”的完美答案。</strong><br><img src= "/img/loading.gif" data-lazy-src="https://image.hackerjerry.top/%E7%94%9F%E6%B4%BB%E5%91%A8%E6%8A%A5-May-3-to-10-1.jpeg#clientId=ud5d56b56-b62c-4&from=paste&height=505&id=u6ef2f665&margin=%5Bobject%20Object%5D&originHeight=1009&originWidth=679&originalType=url&status=done&style=none&taskId=ub78ac62c-0766-4032-984a-851d51f1c7e&width=339.5"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;时讯&quot;&gt;&lt;a href=&quot;#时讯&quot; class=&quot;headerlink&quot; title=&quot;时讯&quot;&gt;&lt;/a&gt;时讯&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;五四青年节，知乎发布微电影《重逢》，讲述了关于肖思远烈士的事，回答了这样一个时代问题——“当代年轻人还有没有不计生死的热血”，我</summary>
      
    
    
    
    <category term="周报" scheme="https://www.blog.hackerjerry.top/categories/%E5%91%A8%E6%8A%A5/"/>
    
    
  </entry>
  
  <entry>
    <title>区块链底层-状态机StateDB</title>
    <link href="https://www.blog.hackerjerry.top/2021/05/03/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%BA%95%E5%B1%82-%E7%8A%B6%E6%80%81%E6%9C%BAStateDB_new/"/>
    <id>https://www.blog.hackerjerry.top/2021/05/03/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%BA%95%E5%B1%82-%E7%8A%B6%E6%80%81%E6%9C%BAStateDB_new/</id>
    <published>2021-05-03T08:22:12.000Z</published>
    <updated>2021-05-06T13:05:07.180Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h1 id="全局"><a href="#全局" class="headerlink" title="全局"></a>全局</h1><p><img src= "/img/loading.gif" data-lazy-src="https://image.hackerjerry.top/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%BA%95%E5%B1%82-%E7%8A%B6%E6%80%81%E6%9C%BAStateDB-1.png#clientId=u1d1d90de-5c3e-4&from=paste&height=344&id=ub777611d&margin=%5Bobject%20Object%5D&name=image.png&originHeight=688&originWidth=1306&originalType=binary&size=308117&status=done&style=none&taskId=u950bfa17-cd9c-4cde-b1d9-eb903342901&width=653" alt="image.png"><br><img src= "/img/loading.gif" data-lazy-src="https://image.hackerjerry.top/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%BA%95%E5%B1%82-%E7%8A%B6%E6%80%81%E6%9C%BAStateDB-2.png#clientId=u1d1d90de-5c3e-4&from=paste&height=200&id=u4a6a08ef&margin=%5Bobject%20Object%5D&name=image.png&originHeight=399&originWidth=969&originalType=binary&size=146076&status=done&style=none&taskId=ude525437-624d-4812-952f-2b51a1576ff&width=484.5" alt="image.png"></p><h1 id="创建状态树"><a href="#创建状态树" class="headerlink" title="创建状态树"></a>创建状态树</h1><p>状态数据库的定义如下：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> StateDB <span class="keyword">struct</span> &#123;</span><br><span class="line">db   Database  <span class="comment">//操作状态的底层数据库，在实例化 StateDB 时指定 ②。</span></span><br><span class="line">trie trie.Trie <span class="comment">//世界状态所在的树实例对象</span></span><br><span class="line">stateObjects      <span class="keyword">map</span>[account.Address]*account.StateObject <span class="comment">//已账户地址为键的账户状态对象，能够在内存中维护使用过的账户</span></span><br><span class="line">stateObjectsDirty <span class="keyword">map</span>[account.Address]<span class="keyword">struct</span>&#123;&#125;<span class="comment">//标记被修改过的账户</span></span><br><span class="line">    dbErr  error</span><br><span class="line">lock sync.Mutex</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先，</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">db: = state.NewDatabase(levelDB)</span><br><span class="line">statedb, err := state.New(block.Root(), db)</span><br></pre></td></tr></table></figure><p>这里的 New 函数为：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//state/statedb.go:27</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">New</span><span class="params">(root hash.Hash, db Database)</span> <span class="params">(*StateDB, error)</span></span> &#123;</span><br><span class="line">tr, err := db.OpenTrie(root)<span class="comment">//打开指定状态版本(root)的含世界状态的顶层树</span></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> &amp;StateDB&#123;</span><br><span class="line">db:                db,<span class="comment">//②</span></span><br><span class="line">trie:              tr,</span><br><span class="line">stateObjects:      <span class="built_in">make</span>(<span class="keyword">map</span>[account.Address]*stateObject),</span><br><span class="line">        stateObjectsDirty: <span class="built_in">make</span>(<span class="keyword">map</span>[account.Address]<span class="keyword">struct</span>&#123;&#125;),</span><br><span class="line">preimages:         <span class="built_in">make</span>(<span class="keyword">map</span>[hash.Hash][]<span class="keyword">byte</span>),</span><br><span class="line">journal:           newJournal(),</span><br><span class="line">&#125;, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>世界态中的所有状态都是已账户为基础单位存在的，因此为了便于账户隔离管理，使用不开放的 stateObject 来维护某个账户下的状态。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> StateObject <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">//账户哈希</span></span><br><span class="line">addrHash <span class="keyword">string</span></span><br><span class="line">data     User <span class="comment">//账户属性</span></span><br><span class="line"><span class="comment">//底层数据库</span></span><br><span class="line">db *state.StateDB</span><br><span class="line"><span class="comment">// 写缓存</span></span><br><span class="line">trie Trie <span class="comment">// 存储树，第一次访问时初始化</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">//账户地址</span></span><br><span class="line">Address []<span class="keyword">byte</span></span><br><span class="line"><span class="comment">//账户余额</span></span><br><span class="line">Amount <span class="keyword">float64</span></span><br><span class="line"><span class="comment">//交易个数</span></span><br><span class="line">Nonce <span class="keyword">uint64</span></span><br><span class="line"><span class="comment">//storage树根哈希值</span></span><br><span class="line">Root <span class="keyword">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到 stateObject 中维护关于某个账户的所有信息，涉及账户地址、账户地址哈希、底层数据库、存储树等内容。<br>在区块中，将交易作为输入条件，来根据一系列动作修改状态。 在完成区块挖矿前，只是获得在内存中的状态树的 Root 值。 StateDB 可视为一个内存数据库，状态数据先在内存数据库中完成修改，所有关于状态的计算都在内存中完成。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//将每个交易对应的的账户状态树进行修改</span></span><br><span class="line">usr := getUserByAddress(t.Address)</span><br><span class="line"><span class="keyword">if</span> usr.Amount - t.Fee &lt;<span class="number">0</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">usr.Nonce = usr.Nonce + <span class="number">1</span></span><br><span class="line">uMPT := getMPT(usr.Root)</span><br><span class="line">data := *(*[]<span class="keyword">byte</span>)(unsafe.Pointer(&amp;t))</span><br><span class="line">uMPT.Put([]<span class="keyword">byte</span>(t.Hash),data)</span><br><span class="line">usr.Root := uMPT.RootHash()</span><br></pre></td></tr></table></figure><p>在将区块持久化时完成有内存到数据库的更新存储，此更新属于增量更新，仅仅修改涉及到被修改部分。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// state/statedb.go:122</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *StateDB)</span> <span class="title">Commit</span><span class="params">(deleteEmptyObjects <span class="keyword">bool</span>)</span> <span class="params">(root hash.Hash, err error)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> addr := <span class="keyword">range</span> s.journal.dirties &#123;<span class="comment">//①⑧⑨⑩</span></span><br><span class="line">s.stateObjectsDirty[addr] = <span class="keyword">struct</span>&#123;&#125;&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> addr, stateObject := <span class="keyword">range</span> s.stateObjects &#123;<span class="comment">//②</span></span><br><span class="line">_, isDirty := s.stateObjectsDirty[addr]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> isDirty&#123;</span><br><span class="line"><span class="comment">//如果集合中的账户有变更</span></span><br><span class="line"><span class="keyword">if</span> err := stateObject.CommitTrie(s.db); err != <span class="literal">nil</span> &#123;<span class="comment">//⑤</span></span><br><span class="line"><span class="keyword">return</span> common.Hash&#123;&#125;, err</span><br><span class="line">&#125;</span><br><span class="line">s.updateStateObject(stateObject)<span class="comment">//需要提交此账户</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="built_in">delete</span>(s.stateObjectsDirty, addr)</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">root, err = s.trie.Commit(<span class="function"><span class="keyword">func</span><span class="params">(leaf []<span class="keyword">byte</span>, parent hash.Hash)</span> <span class="title">error</span></span> &#123;<span class="comment">//⑦</span></span><br><span class="line"><span class="keyword">var</span> account Account</span><br><span class="line"><span class="keyword">if</span> err := rlp.DecodeBytes(leaf, &amp;account); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> account.Root != emptyRoot &#123;</span><br><span class="line">s.db.TrieDB().Reference(account.Root, parent)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">return</span> root, err</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>因为在修改某账户信息是，将会记录变更流水（journal），因此在提交保存修改时只需要将在流水中存在的记录作为修改集 ①。</li><li>所有访问过的账户信息，均被记录在 stateObjects 中，只需要遍历此集合 ② 便可以提交所有修改。</li><li>处理完每个需要提交的账户内容外，最后需要将账户树提交 ⑦。在提交过程中涉及账户内容作为叶子节点，在发送变动时，将更新账户节点和父节点的关系。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;

&lt;h1 id=&quot;全局&quot;&gt;&lt;a href=&quot;#全局&quot; class=&quot;headerlink&quot; title=&quot;全局&quot;&gt;&lt;/a&gt;全局&lt;/h1&gt;&lt;p&gt;&lt;img src= &quot;/img/loading.gif&quot; data-lazy-src=&quot;https:/</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>生活周报-April-26-to-May-2</title>
    <link href="https://www.blog.hackerjerry.top/2021/05/01/%E7%94%9F%E6%B4%BB%E5%91%A8%E6%8A%A5-April-26-to-May-2_new/"/>
    <id>https://www.blog.hackerjerry.top/2021/05/01/%E7%94%9F%E6%B4%BB%E5%91%A8%E6%8A%A5-April-26-to-May-2_new/</id>
    <published>2021-05-01T09:59:24.000Z</published>
    <updated>2021-05-06T13:01:24.730Z</updated>
    
    <content type="html"><![CDATA[<h1 id="时讯"><a href="#时讯" class="headerlink" title="时讯"></a>时讯</h1><ol><li>天和核心舱发射成功</li><li>郑爽阴阳合同被查</li><li>熟蛋返生论文</li><li>印度单日确诊超过 40 万</li></ol><h1 id="小事"><a href="#小事" class="headerlink" title="小事"></a>小事</h1><ol><li>导师请课题组的小伙伴一起吃了个饭，感觉老师真年轻，和现在的大学生也没啥区别，人很 nice，灌了好多啤酒哈哈哈哈哈，我也喝了两瓶，啥感觉也没有，可能我也挺能喝哈哈哈哈哈。</li><li>这周 b 测，搞了一天代码（学长的没有用，重写之），还友情帮助了小伙伴，感觉实验水的很。</li><li>这周气温上来了，中午太阳很大，要开始防晒了！</li><li>舍友欧皇附体，卖游戏账户赚了 800 块，太酸了。</li><li>5.2 日出游，品美食，玩游戏，看电影，逛街，游人如织，入夜暴雨，落汤鸡。</li></ol><h1 id="本周收藏"><a href="#本周收藏" class="headerlink" title="本周收藏"></a>本周收藏</h1><h2 id="文章"><a href="#文章" class="headerlink" title="文章"></a>文章</h2><ol><li>python 沙箱逃逸详解</li><li>fuzzingbook 学习指南</li><li>带牙套/正畸有什么好用物推荐？–知乎</li></ol><h2 id="剧集"><a href="#剧集" class="headerlink" title="剧集"></a>剧集</h2><ol><li>刺客伍六七第九集！意识流的国创，很小清新，虽然网上褒贬不一，但是我还是很喜欢滴，阿柒可能要黑化了（大概率，因为记忆中美好的事物都消散了），不过最后出现的琵琶女，居然曾经追求过阿柒！然后刚刚！发预告了！神医果然是坏的，打了阿柒一拳，琵琶女求而不得欲将阿柒毁灭之，好虐，不过这一季看样子和首领是不可能见面了，尬住。</li><li>五一趁着浪费时间没有罪恶感，看了一部高分电影《闻香识女人》。影片讲述了一个陆军退伍盲人中校与穷人家的优秀小伙子之间的故事，故事大多发生在老兵的感恩节旅途中，主角演技十分到位，刻画出一个十分有自尊心的老兵，在失明之后的易怒、自暴自弃又肆意的情感宣泄，同时对待女人十分的绅士，有着很深的阅历和极其敏锐的嗅觉，能够十分准确地说出对方香气的来历，以及不错的推理能力。这次旅途，是他早早规划好的自杀之旅，但是很庆幸，他遇到了查理，一个正值又善良的男孩，他最终感动了老兵，打消了自杀的念头，找回了自我，重拾了前进的动力，与曾经的自己和解。</li></ol><p>影片有两段十分经典的片段，一段是他邀请一位年轻的漂亮姑娘去跳探戈，很有风度，女演员也超好看，青春的那种喜悦和羞涩表现的淋漓尽致。另一段则是他在风纪委员会上作的即兴演讲，什么叫正直，什么人才能成为领袖。对于查理保持缄默的事他并没有做出评价，但他认为，查理绝不会在将来成为一个出卖朋友换取前途的人。没有什么比丑陋的灵魂更加可怕，因为灵魂没有义肢。人生的十字路口，查理选择了正确的那一条，尽管那条路很难走，时常会碰壁，但他义无反顾。</p><ol start="3"><li>《悬崖之上》和雷姑娘一起看的第一部电影，影片的基调极冷，全部外场都在下雪，很冷，演员的脸都冻得通红，老戏骨们演技很棒，但是因为内容太多，放在电影里稍显仓促，剧情推进太快。但影片很真实的反映出敌人其实很聪明，坏人也可以装好人装得很像，真实的战场比这残酷得更多，我们要相信黎明最终到来，要相信天亮了就好了。向所有战斗在隐蔽战线的英雄致敬，你们的名字无人知晓，你们的功绩永垂青史。</li></ol><h2 id="摘录"><a href="#摘录" class="headerlink" title="摘录"></a>摘录</h2><ol><li>罔谈彼短，靡恃己长；容止若思，言辞安定。</li></ol><p>不要谈论别人的短处，也不没必要将自己的长处一直挂在嘴边，给别人面子，给自己留后路。<br>常常表现出自己在思考，说话谈吐也要镇定平静，有条不紊，不慌不忙，不要轻易责怪别人，也不要迁怒于人。</p><ol start="2"><li>如何废掉一个大学生？<ol><li>只接受碎片信息，拒绝深度思考。</li><li>沉迷于迅速获得成就感的事。</li><li>无法专注做一件事–眼高手低。</li><li>想得太多，做的太少。</li></ol></li><li>失落的时候悄悄伸出手和风击个掌。</li><li>在光明之处，共赴前方。</li><li>好好等，会晚些，但会更好些。</li></ol><h2 id="知识"><a href="#知识" class="headerlink" title="知识"></a>知识</h2><ol><li>如何写出一份打动人的简历？</li><li>TCP 反射的原理</li><li>如何判断一个自然数 N 是否是质数？</li></ol><p>提出的许多快速算法，例如费马素性检测，米勒-拉宾素性检测，这些都是基于随机数的算法。<br>而 AKS 算法，是第一个解决这个问题的确定性算法，无需依靠随机数。</p><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><p><img src= "/img/loading.gif" data-lazy-src="https://image.hackerjerry.top/%E7%94%9F%E6%B4%BB%E5%91%A8%E6%8A%A5-April-26-to-May-2-1.jpeg#clientId=ue9575d9f-ed7c-4&from=drop&height=272&id=ue001c27c&margin=%5Bobject%20Object%5D&name=1620026735691.jpg&originHeight=1036&originWidth=1080&originalType=binary&size=241285&status=done&style=none&taskId=u855f4a92-f876-44fb-8a96-101805efc94&width=284" alt="1620026735691.jpg"></p><ol><li>关于自律和自省。<ol><li>虽然我知道我和她此生不会相见，这一生的过客太多，感谢你曾经对我着迷，但我依旧会努力，至少我想证明给我自己看，我希望自己能打破阶级壁垒，将来回想起来也能浅浅一笑。</li></ol></li><li>关于异性相处<ol><li>绝不要当舔狗，绝不要做无谓的感情付出，感动自己，让别人看笑话。</li><li>你要接收不断的优秀和长久的孤独，直到遇到那个你等待很久的人，直到你认为你所有的等待都值得。</li><li>你要做一个善良的人，一个有智慧的人，一个既能接收自己的平凡，又能坚持自己的理想和兴趣，并对生活报以美好的期待和长久的耐心的人。</li><li>最清澈的爱，要留给最值得的人。</li><li>不要给别人压力，也没必要让别人觉得你在追她，她就不好意思和其他异性一起玩了。这大可不必，咱也不是那种人对不对，你也没资格评价别人怎样，毕竟这世上有趣的事情有很多，大家聚在一起就是为了乐子，搞得相处起来紧张兮兮的好讨厌人。</li></ol></li><li>阶级鸿沟只有靠自己跨越。</li><li>多一点善意，少一点刻薄。</li></ol><p><img src= "/img/loading.gif" data-lazy-src="https://image.hackerjerry.top/%E7%94%9F%E6%B4%BB%E5%91%A8%E6%8A%A5-April-26-to-May-2-2.jpeg#clientId=ue9575d9f-ed7c-4&from=drop&height=328&id=uac7448db&margin=%5Bobject%20Object%5D&name=1620027231878.jpg&originHeight=673&originWidth=580&originalType=binary&size=65606&status=done&style=none&taskId=uc2cec5b3-9779-41a2-b635-fbb4cdec518&width=283" alt="1620027231878.jpg"></p><h1 id="碎碎念"><a href="#碎碎念" class="headerlink" title="碎碎念"></a>碎碎念</h1><p>我是一个很敏感的人，小心翼翼地表露爱意，生怕吓着对方。又是一个很专一的人（俗称固执），喜欢上一个姑娘如果她没有太大变化，我可能会一直喜欢下去。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;时讯&quot;&gt;&lt;a href=&quot;#时讯&quot; class=&quot;headerlink&quot; title=&quot;时讯&quot;&gt;&lt;/a&gt;时讯&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;天和核心舱发射成功&lt;/li&gt;
&lt;li&gt;郑爽阴阳合同被查&lt;/li&gt;
&lt;li&gt;熟蛋返生论文&lt;/li&gt;
&lt;li&gt;印度单日确诊超过 40</summary>
      
    
    
    
    <category term="周报" scheme="https://www.blog.hackerjerry.top/categories/%E5%91%A8%E6%8A%A5/"/>
    
    
    <category term="生活周报" scheme="https://www.blog.hackerjerry.top/tags/%E7%94%9F%E6%B4%BB%E5%91%A8%E6%8A%A5/"/>
    
  </entry>
  
  <entry>
    <title>QPSK信号调制</title>
    <link href="https://www.blog.hackerjerry.top/2021/04/27/QPSK%E4%BF%A1%E5%8F%B7%E8%B0%83%E5%88%B6_new/"/>
    <id>https://www.blog.hackerjerry.top/2021/04/27/QPSK%E4%BF%A1%E5%8F%B7%E8%B0%83%E5%88%B6_new/</id>
    <published>2021-04-27T13:46:38.000Z</published>
    <updated>2021-05-06T13:12:18.167Z</updated>
    
    <content type="html"><![CDATA[<p>b 测题目，由于学长写的代码有些步骤无法理解，而且代码不优雅，故重写之。</p><a id="more"></a><h1 id="题目要求"><a href="#题目要求" class="headerlink" title="题目要求"></a>题目要求</h1><ol><li>源码信号为周期 63bits 的 m 序列， 源码比特速率（kbps） 数值上= 载波频率（kHz），数值范围 5—100，在数值范围内任取整数；</li><li>在 MATLAB 环境中编写 M 代码搭建 QPSK 调制系统模型；</li><li>观测基带时域波形、已调信号时域波形；</li><li>观测基带发射星座图；</li><li>观测已调信号的功率谱（优先）或频谱；</li></ol><h1 id="实验原理"><a href="#实验原理" class="headerlink" title="实验原理"></a>实验原理</h1><h2 id="比特率"><a href="#比特率" class="headerlink" title="比特率"></a>比特率</h2><p>比特率(bit rate)又称传信率、信息传输速率(简称信息速率，information rate)。其定义是：<strong>通信线路(或系统)单位时间(每秒)内传输的信息量，即每秒能传输的二进制位</strong>数，通常用 Rb 表示，其单位是比特/秒(bit/s 或 b/s，英文缩略语为 bps)。　　<br>在二进制系统中，信息速率(比特率)与信号速率(波特率)相等，例如，当系统以每秒 50 个二进制符号传输时，信息速率为 50bit/s，信号速率也为 50Bd(波特)。在无调制的情况下，比特率等于波特率；采用调相技术时，比特率不等于波特率。通信系统的发送设备和接收设备必须在相同的波特率下工作，否则会出现帧同步错误。</p><h2 id="波特率"><a href="#波特率" class="headerlink" title="波特率"></a>波特率</h2><p>波特率(Baud rate)又称传码率、码元传输速率(简称码元速率)、信号传输速率(简称信号速率，signaling rate)或调制速率。其定义是：<strong>通信线路(或系统)单位时间(每秒)内传输的码元(脉冲)个数</strong>；或者表示信号调制过程中，单位时间内调制信号波形的变换次数，通常用 RB 表示，单位是波特(Bd 或 Baud，前者规范)。如果每秒传输 1 个码元就称为 1Bd；如果 1 码元的时间长短为 200ms，则每秒可传输 5 个码元，那么码元速率(波特率)就是 5Bd。　　<br>波特率(码元速率)并没有限定是何种进制的码元，所以给出波特率时必须说明这个码元的进制。对于 M 进制码元，比特率(信息速率)Rb 与波特率(码元速率)RB 的关系式为　　<br>Rb=RB·lbM 　　<br>式中：lbM=log2M，表示 M 的以 2 为底的对数。显然，对于二进制码元，由于 lb2=1，所以 Rb=RB，即波特率与比特率在数值上相等，但单位不同，也即二者代表的意义不同。　　<br>例如，波特率为 600Bd，则在二进制时，比特率也为 600bit/s；在四进制时，由于 lb4=2，所以比特率为 1200bit/s。可见，在一个码元中可以传送多个比特。</p><h2 id="数据传输率"><a href="#数据传输率" class="headerlink" title="数据传输率"></a>数据传输率</h2><p>数据传输率(data transfer rate)又称数据传输速率、数据传送率。其定义是：<strong>通信线路(或系统)单位时间(每秒)内传输的字符个数</strong>；或者单位时间(每秒)内传输的码组(字块)数或比特数。其单位是字符/秒；或者码组/秒、比特/秒(可见，当数据传输率用“bit/s”作单位时，即等于比特率)。 <strong>所以它的单位在不同的应用中是不同的。</strong>　<br>　例如，在某计算机异步串行通信系统中，数据传输率为 960 字符/s，每个字符包括 1 个起始位、8 个数据位、1 个停止位，则对应的比特率为 10×960 位/s=9600 位/s=9600bit/s；因为是二进制编码，所以对应的波特率也为 9600Bd。<strong>可见，在我们平时用的串口通信中，波特率是 9600Bd，其实比特率也是 9600bps，因为默认就是 2 进制，波特率和比特率就是 M 进制的差别。</strong></p><h2 id="采样频率-fs"><a href="#采样频率-fs" class="headerlink" title="采样频率 fs"></a>采样频率 fs</h2><p>定义：<strong>每秒从连续信号中提取并组成离散信号的采样个数。</strong><br>采样次数 Ns，每个码元被采样的次数，必须为 2 的幂。<br>fs=fb*Ns<br>其中 fb 为波特率，每秒能传输的二进制位数。</p><blockquote><p>实际中，要处理的为模拟信号，想要在数字系统中处理必须为数字信号，即采用抽样、量化、编码的处理方案。<br>处理的第一步为<strong>抽样</strong>，即模数转换。以电话为例，每秒 3000 次取样，每个取样是 7 比特，那么电话的比特率是 21000。而 CD 是每秒 44100 次取样，两个声道，每个取样是 13 位 PCM 编码，所以 CD 的比特率是 44100_2_13=1146600，这个参数也被称为数据带宽，它和 ADSL 中的带宽是一个概念。将码率除以 8,就可以得到这个它的数据速率，1146600/8=143325，也就是说 CD 每秒的数据量大约是 144KB，而一张 CD 的容量是 74 分等于 4440 秒，就是 639360KB ＝ 640MB。即刚好为一张 cd 的容量。</p></blockquote><h2 id="快速傅里叶变换-FFT"><a href="#快速傅里叶变换-FFT" class="headerlink" title="快速傅里叶变换 FFT"></a>快速傅里叶变换 FFT</h2><p>做 n 个点的 FFT，表示在时域上对原来的信号取了 n 个点来做频谱分析，n 点 FFT 变换的结果仍为 n 个点。<br>换句话说，就是将 2pi 数字频率 w 分成 n 份，而整个数字频率 w 的范围覆盖了从 0-2pi*fs 的模拟频率范围。这里的 fs 是<strong>采样频率</strong>。根据<strong>奈科斯特定律</strong>，只有 f=fs/2 范围内的信号才是被采样到的有效信号。<br>举例说，如果做了 16 个点的 FFT 分析，你原来的模拟信号的最高频率 f=32kHz，采样频率是 64kHz，n 的范围是 0,1,2…15。（注：这意味着已经将原来的模拟信号采样了 8 遍。）这时，64kHz 的模拟频率被分成了 16 分，每一份是 4kHz，这个叫<strong>频率分辨率</strong>（卢注：做 FFT 用的点越多，频率分辨率越高）。那么在横坐标中，n=1 时对应的 f 是 4kHz, n=2 对应的是 8kHz, n=15 时对应的是 60kHz，你的频谱是关于 n=8 对称的。你只需要关心 n=0 到 7 以内的频谱就足够了，因为，原来信号的最高模拟频率是 32kHz。<br><a href="https://blog.csdn.net/weixin_39591031/article/details/110392352">https://blog.csdn.net/weixin_39591031/article/details/110392352</a></p><h2 id="QPSK"><a href="#QPSK" class="headerlink" title="QPSK"></a>QPSK</h2><p>QPSK 又叫<strong>四相绝对相移调制（4PSK）</strong>，QPSK 利用载波的四种不同相位来表征数字信息。它的频带利用率高，是 BPSK(二相相移键控）的 2 倍。当数据码元速率相同时，QPSK 信号的传输波特率为 BPSK 信号的传输波特率的一半，所以 QPSK 的传输带宽是 BPSK 信号的一半。QPSK 调制技术的抗干扰能力强，采用相干检测时其误码性能与 BPSK 相同，故得到广泛应用。<br><img src= "/img/loading.gif" data-lazy-src="https://image.hackerjerry.top/QPSK%E4%BF%A1%E5%8F%B7%E8%B0%83%E5%88%B6-1.png#clientId=u6d886849-8a59-4&from=paste&height=86&id=u40231118&margin=%5Bobject%20Object%5D&name=image.png&originHeight=172&originWidth=922&originalType=binary&size=45922&status=done&style=none&taskId=u80ca2014-1869-4d49-b7f8-d1456c86125&width=461" alt="image.png"><br>写成正交形式：<br><img src= "/img/loading.gif" data-lazy-src="https://image.hackerjerry.top/QPSK%E4%BF%A1%E5%8F%B7%E8%B0%83%E5%88%B6-2.png#clientId=u6d886849-8a59-4&from=paste&height=149&id=u0c5731d0&margin=%5Bobject%20Object%5D&name=image.png&originHeight=297&originWidth=1117&originalType=binary&size=83630&status=done&style=none&taskId=u3fd5ace3-945e-4eac-bc13-dac014e29e4&width=558.5" alt="image.png"><br>QPSK 调制是利用载波的 4 种不同相位来表征数字信息。每一种载波相位代表两个比特的信息。例如，若输入二进制数字信息，序列为 10011100，…，则应该先将其进行分组，每两个比特编为一组。可将它们分为 10，01，11，00 等，然后分别用四种不同的相位来表示。故每个四进制码元又称为双比特码元。把组成双比特码元的前一个信息比特用 a 表示，后一个信息比特用 b 表示。双比特码元中两个信息比特 ab 与载波相位的矢量关系如图 1 所示。图（a）表示 A 方式时 QPSK 信号矢量图，图（b）表示 B 方式时 QPSK 信号的矢量图。由于正弦和余弦的互补特性，对于载波相位的四种取值，在 A 方式中：0°、90°、180°、270°，则数据通过处理后输岀的成形波形幅度有三种取值；B 方式中：45°、135°、225°、315°，则数据通过处理后输出的成形波形幅度有两种取值。<br><img src= "/img/loading.gif" data-lazy-src="https://image.hackerjerry.top/QPSK%E4%BF%A1%E5%8F%B7%E8%B0%83%E5%88%B6-3.png#clientId=u6d886849-8a59-4&from=paste&height=115&id=u633a436c&margin=%5Bobject%20Object%5D&name=image.png&originHeight=230&originWidth=750&originalType=binary&size=26531&status=done&style=none&taskId=u44ca49f7-2450-4bb0-841f-6fa8556732d&width=375" alt="image.png"><br><img src= "/img/loading.gif" data-lazy-src="https://image.hackerjerry.top/QPSK%E4%BF%A1%E5%8F%B7%E8%B0%83%E5%88%B6-4.png#clientId=u6d886849-8a59-4&from=paste&height=185&id=uce77a3fe&margin=%5Bobject%20Object%5D&name=image.png&originHeight=185&originWidth=446&originalType=binary&size=14966&status=done&style=none&taskId=u3c682ff6-2ff7-415e-b46c-5a165526cd4&width=446" alt="image.png"><br>在本次实验中我们采取 B 方式进行调制。<br><img src= "/img/loading.gif" data-lazy-src="https://image.hackerjerry.top/QPSK%E4%BF%A1%E5%8F%B7%E8%B0%83%E5%88%B6-5.png#clientId=u6d886849-8a59-4&from=paste&height=242&id=ucdfabb2a&margin=%5Bobject%20Object%5D&name=image.png&originHeight=284&originWidth=676&originalType=binary&size=17711&status=done&style=none&taskId=u40e11ebc-b2ee-4601-b62f-71e844d08ee&width=576" alt="image.png"><br>原理图如上。<br><img src= "/img/loading.gif" data-lazy-src="https://image.hackerjerry.top/QPSK%E4%BF%A1%E5%8F%B7%E8%B0%83%E5%88%B6-6.png#clientId=u6d886849-8a59-4&from=paste&height=185&id=u45ba068d&margin=%5Bobject%20Object%5D&name=image.png&originHeight=370&originWidth=835&originalType=binary&size=66431&status=done&style=none&taskId=u3a4a4871-452c-400d-847a-470c345f1da&width=417.5" alt="image.png"></p><h2 id="QPSK-的功率谱"><a href="#QPSK-的功率谱" class="headerlink" title="QPSK 的功率谱"></a>QPSK 的功率谱</h2><p>由于 QPSK 信号可被理解为由同相支路和正交支路两路 2PSK 叠加而成，但是载波的幅度与码元速率不同，因此 QPSK 信号的功率谱密度相当于 2PSK 信号的功率谱密度的线性叠加：<br><img src= "/img/loading.gif" data-lazy-src="https://image.hackerjerry.top/QPSK%E4%BF%A1%E5%8F%B7%E8%B0%83%E5%88%B6-7.png#clientId=u6d886849-8a59-4&from=paste&height=49&id=u60898145&margin=%5Bobject%20Object%5D&name=image.png&originHeight=98&originWidth=663&originalType=binary&size=21889&status=done&style=none&taskId=u7f7c99c7-14ab-4639-a548-05a3d1a2b02&width=331.5" alt="image.png"><br>因此 QPSK 信号的功率谱示意图如下：<br><img src= "/img/loading.gif" data-lazy-src="https://image.hackerjerry.top/QPSK%E4%BF%A1%E5%8F%B7%E8%B0%83%E5%88%B6-8.png#clientId=u6d886849-8a59-4&from=paste&height=147&id=u8a6de52d&margin=%5Bobject%20Object%5D&name=image.png&originHeight=294&originWidth=737&originalType=binary&size=35568&status=done&style=none&taskId=u57056394-5a0d-4c56-a71b-f833cbdb882&width=368.5" alt="image.png"><br>由上图可以看出其带宽等于基带码元速率，峰值频率为等于载波频率。</p><h2 id="星座图的基本概念"><a href="#星座图的基本概念" class="headerlink" title="星座图的基本概念"></a>星座图的基本概念</h2><p>在数字通信领域中，经常将数字信号在复平面上表示，以直观的表示信号以及信号之间的关系，这种图示就是星座图。星座图可以看成数字信号的一个“二维眼图”阵列，同时符号在图中所处的位置具有合理的限制或判决边界。如果要将数字信号发送出去，一般不会直接发 0 或 1，而是先将 0,1 信号（bit）按照一个或者几个组成一组，比如每两个 bit 组成一组，即有 00,01,10,11，总共四种状态，此时可以选择 QPSK 调制，QPSK 四个点组成一个 QPSK 的星座图，每个点与相邻的点相差 90 度（幅度是相同的），一个星座点对应一个调制符号。星座图的作用主要是在调制时用于映射，而接收时用于判断发送的到底是哪个点，从而正确解调数据。</p><h1 id="实验代码"><a href="#实验代码" class="headerlink" title="实验代码"></a>实验代码</h1><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">clear all;clc;</span><br><span class="line"><span class="comment">%% 生成伪随机码</span></span><br><span class="line"></span><br><span class="line">len = <span class="number">64</span>;</span><br><span class="line"></span><br><span class="line">orderNum = <span class="number">6</span>;<span class="comment">%m序列为6阶</span></span><br><span class="line"></span><br><span class="line">xulie = idinput((<span class="number">2</span>^orderNum<span class="number">-1</span>),<span class="string">&#x27;prbs&#x27;</span>);<span class="comment">% 生成伪随机序列,长度为63</span></span><br><span class="line"></span><br><span class="line">fb = <span class="number">10</span>; <span class="comment">% 波特率10kHz ,比特率值=波特率值,每秒能传输的二进制位数</span></span><br><span class="line"></span><br><span class="line">Ns = <span class="number">64</span>; <span class="comment">% 采样次数</span></span><br><span class="line"></span><br><span class="line">fs=fb*Ns; <span class="comment">% 采样频率,每秒从连续信号中提取并组成离散信号的采样个数</span></span><br><span class="line"></span><br><span class="line">fc = fb; <span class="comment">%载波频率=比特率</span></span><br><span class="line"></span><br><span class="line">dt=<span class="number">1</span>/fs; <span class="comment">% 采样时间,又称时域采样间隔</span></span><br><span class="line"></span><br><span class="line">Ts = dt;</span><br><span class="line"></span><br><span class="line">N = Ns*<span class="built_in">length</span>(xulie); <span class="comment">% 总采样点个数</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">%% 生成两路调制信号</span></span><br><span class="line"></span><br><span class="line">I_carrier = <span class="built_in">zeros</span>(<span class="number">1</span>,N);</span><br><span class="line">Q_carrier = <span class="built_in">zeros</span>(<span class="number">1</span>,N);</span><br><span class="line">I = <span class="built_in">zeros</span>(<span class="number">1</span>,N);</span><br><span class="line">Q = <span class="built_in">zeros</span>(<span class="number">1</span>,N);</span><br><span class="line"></span><br><span class="line"><span class="comment">%采用绘图比较I、Q比特流</span></span><br><span class="line">bit_data=<span class="built_in">zeros</span>(<span class="number">1</span>,N);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:len<span class="number">-1</span></span><br><span class="line">    bit_data(Ns*(<span class="built_in">i</span><span class="number">-1</span>)+<span class="number">1</span>:Ns*<span class="built_in">i</span>)=xulie(<span class="built_in">i</span>);<span class="comment">%在一个比特周期里面有Fs个1和采样点一模一样</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%对奇数抽样</span></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:len/<span class="number">2</span></span><br><span class="line">    I(<span class="number">2</span>*Ns*(<span class="built_in">i</span><span class="number">-1</span>)+<span class="number">1</span>:<span class="number">2</span>*Ns*<span class="built_in">i</span>) = xulie(<span class="number">2</span>*<span class="built_in">i</span><span class="number">-1</span>);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">%对偶数采样</span></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:len/<span class="number">2</span><span class="number">-1</span></span><br><span class="line">    Q(<span class="number">2</span>*Ns*(<span class="built_in">i</span><span class="number">-1</span>)+<span class="number">1</span>:<span class="number">2</span>*Ns*<span class="built_in">i</span>) = xulie(<span class="number">2</span>*<span class="built_in">i</span>);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:N</span><br><span class="line">    I_carrier(<span class="built_in">i</span>) = <span class="built_in">cos</span>(<span class="number">2</span>*<span class="built_in">pi</span>*fc*(<span class="built_in">i</span><span class="number">-1</span>)/(fs));</span><br><span class="line">    Q_carrier(<span class="built_in">i</span>) = -<span class="built_in">sin</span>(<span class="number">2</span>*<span class="built_in">pi</span>*fc*(<span class="built_in">i</span><span class="number">-1</span>)/(fs));</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">%补充采样（最后一个采样点）</span></span><br><span class="line">I_carrier = [I_carrier,<span class="built_in">ones</span>(<span class="number">1</span>,<span class="number">64</span>)*<span class="built_in">cos</span>(<span class="number">2</span>*<span class="built_in">pi</span>*fc*(<span class="built_in">i</span><span class="number">-1</span>)/(fs))];</span><br><span class="line">Q_carrier = [Q_carrier,<span class="built_in">zeros</span>(<span class="number">1</span>,<span class="number">64</span>)];</span><br><span class="line">Q = [Q,<span class="built_in">zeros</span>(<span class="number">1</span>,<span class="number">64</span>)];</span><br><span class="line"></span><br><span class="line">T = N*dt*fb; <span class="comment">% 截断时间</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%绘图</span></span><br><span class="line"><span class="built_in">figure</span>();</span><br><span class="line">subplot(<span class="number">3</span>,<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line"><span class="built_in">plot</span>(bit_data,<span class="string">&#x27;color&#x27;</span>,[<span class="number">55</span>/<span class="number">255</span> <span class="number">108</span>/<span class="number">255</span> <span class="number">176</span>/<span class="number">255</span>]);<span class="built_in">legend</span>(<span class="string">&#x27;Bitstream&#x27;</span>)<span class="comment">%比特信息</span></span><br><span class="line">subplot(<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line"><span class="built_in">plot</span>(I,<span class="string">&#x27;color&#x27;</span>,[<span class="number">55</span>/<span class="number">255</span> <span class="number">108</span>/<span class="number">255</span> <span class="number">176</span>/<span class="number">255</span>]);<span class="built_in">legend</span>(<span class="string">&#x27;I Bitstream&#x27;</span>)<span class="comment">%I路信息</span></span><br><span class="line">subplot(<span class="number">3</span>,<span class="number">1</span>,<span class="number">3</span>)</span><br><span class="line"><span class="built_in">plot</span>(Q,<span class="string">&#x27;color&#x27;</span>,[<span class="number">55</span>/<span class="number">255</span> <span class="number">108</span>/<span class="number">255</span> <span class="number">176</span>/<span class="number">255</span>]);<span class="built_in">legend</span>(<span class="string">&#x27;Q Bitstream&#x27;</span>)<span class="comment">%Q路信息</span></span><br><span class="line"><span class="comment">%% 调制</span></span><br><span class="line"></span><br><span class="line">I_data = I.*I_carrier;</span><br><span class="line">Q_data = Q.*Q_carrier;</span><br><span class="line">QPSK_data = (I_data + Q_data)/<span class="built_in">sqrt</span>(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">figure</span>();<span class="comment">%产生一个新图</span></span><br><span class="line">subplot(<span class="number">3</span>,<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line"><span class="built_in">plot</span>(I_data,<span class="string">&#x27;color&#x27;</span>,[<span class="number">55</span>/<span class="number">255</span> <span class="number">108</span>/<span class="number">255</span> <span class="number">176</span>/<span class="number">255</span>]);<span class="built_in">legend</span>(<span class="string">&#x27;I signal&#x27;</span>)<span class="comment">%I路信号</span></span><br><span class="line">subplot(<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line"><span class="built_in">plot</span>(Q_data,<span class="string">&#x27;color&#x27;</span>,[<span class="number">55</span>/<span class="number">255</span> <span class="number">108</span>/<span class="number">255</span> <span class="number">176</span>/<span class="number">255</span>]);<span class="built_in">legend</span>(<span class="string">&#x27;Q signal&#x27;</span>)<span class="comment">%Q路信号</span></span><br><span class="line">subplot(<span class="number">3</span>,<span class="number">1</span>,<span class="number">3</span>)</span><br><span class="line"><span class="built_in">plot</span>(QPSK_data,<span class="string">&#x27;color&#x27;</span>,[<span class="number">55</span>/<span class="number">255</span> <span class="number">108</span>/<span class="number">255</span> <span class="number">176</span>/<span class="number">255</span>]);<span class="built_in">legend</span>(<span class="string">&#x27;QPSK signal&#x27;</span>)<span class="comment">%QPSK信号</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%% 频谱</span></span><br><span class="line">Bs =fs/<span class="number">2</span>; <span class="comment">% 系统带宽</span></span><br><span class="line">QPSK = <span class="built_in">abs</span>(fftshift(fft(QPSK_data,N)));</span><br><span class="line">ff = <span class="built_in">linspace</span>(-Bs,Bs,N); <span class="comment">% 频域横坐标</span></span><br><span class="line"><span class="built_in">figure</span>()</span><br><span class="line"><span class="built_in">plot</span>(ff,QPSK,<span class="string">&#x27;color&#x27;</span>,[<span class="number">55</span>/<span class="number">255</span> <span class="number">108</span>/<span class="number">255</span> <span class="number">176</span>/<span class="number">255</span>])</span><br><span class="line"><span class="comment">%axis([-50,50,0,60]);</span></span><br><span class="line">title(<span class="string">&#x27;QPSK调制信号频谱图&#x27;</span>);</span><br><span class="line">xlabel(<span class="string">&#x27;f/kHz&#x27;</span>);</span><br><span class="line">ylabel(<span class="string">&#x27;频谱&#x27;</span>);</span><br><span class="line"><span class="comment">%% 功率谱密度</span></span><br><span class="line">Bs =fs/<span class="number">2</span>; <span class="comment">% 系统带宽</span></span><br><span class="line">QPSK = <span class="number">10</span>*<span class="built_in">log10</span>(<span class="built_in">abs</span>(fftshift(fft(QPSK_data,N))).^<span class="number">2</span>/T);</span><br><span class="line">ff = <span class="built_in">linspace</span>(-Bs,Bs,N); <span class="comment">% 频域横坐标</span></span><br><span class="line"><span class="built_in">figure</span>()</span><br><span class="line"><span class="built_in">plot</span>(ff,QPSK,<span class="string">&#x27;color&#x27;</span>,[<span class="number">55</span>/<span class="number">255</span> <span class="number">108</span>/<span class="number">255</span> <span class="number">176</span>/<span class="number">255</span>])</span><br><span class="line">axis([<span class="number">-50</span>,<span class="number">50</span>,<span class="number">0</span>,<span class="number">60</span>]);</span><br><span class="line">title(<span class="string">&#x27;QPSK调制信号功率谱图&#x27;</span>);</span><br><span class="line">xlabel(<span class="string">&#x27;f/kHz&#x27;</span>);</span><br><span class="line">ylabel(<span class="string">&#x27;功率谱密度/db&#x27;</span>);</span><br><span class="line"><span class="comment">%% 绘制星座图</span></span><br><span class="line"></span><br><span class="line">signal = <span class="built_in">cat</span>(<span class="number">2</span>, I&#x27;, Q&#x27;);         <span class="comment">% 将两路串行信号码元合并在一个length(xulie)*2的矩阵中</span></span><br><span class="line"></span><br><span class="line">[a1,~]=<span class="built_in">find</span>(signal(:,<span class="number">1</span>)==<span class="number">-1</span>&amp;signal(:,<span class="number">2</span>)==<span class="number">-1</span>);       <span class="comment">% 返回满足条件的矩阵元素对应的坐标</span></span><br><span class="line"></span><br><span class="line">xinzuotu(a1)=<span class="number">-1</span><span class="number">-1</span><span class="built_in">i</span>;</span><br><span class="line"></span><br><span class="line">[a2,~]=<span class="built_in">find</span>(signal(:,<span class="number">1</span>)==<span class="number">-1</span>&amp;signal(:,<span class="number">2</span>)==<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">xinzuotu(a2)=<span class="number">-1</span>+<span class="number">1</span><span class="built_in">i</span>;</span><br><span class="line"></span><br><span class="line">[a3,~]=<span class="built_in">find</span>(signal(:,<span class="number">1</span>)==<span class="number">1</span>&amp;signal(:,<span class="number">2</span>)==<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line">xinzuotu(a3)=<span class="number">1</span><span class="number">-1</span><span class="built_in">i</span>;</span><br><span class="line"></span><br><span class="line">[a4,~]=<span class="built_in">find</span>(signal(:,<span class="number">1</span>)==<span class="number">1</span>&amp;signal(:,<span class="number">2</span>)==<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">xinzuotu(a4)=<span class="number">1</span>+<span class="number">1</span><span class="built_in">i</span>;</span><br><span class="line"></span><br><span class="line">scatterplot(xinzuotu)  <span class="comment">% 以散点图的形式画出星座图</span></span><br><span class="line"></span><br><span class="line">axis([<span class="number">-2</span> <span class="number">2</span> <span class="number">-2</span> <span class="number">2</span>])</span><br><span class="line"></span><br><span class="line">title(<span class="string">&#x27;理想情况基带发射星座图&#x27;</span>)</span><br></pre></td></tr></table></figure><h1 id="实验结果"><a href="#实验结果" class="headerlink" title="实验结果"></a>实验结果</h1><p>基带时域波形图<br><img src= "/img/loading.gif" data-lazy-src="https://image.hackerjerry.top/QPSK%E4%BF%A1%E5%8F%B7%E8%B0%83%E5%88%B6-9.png#clientId=u6d886849-8a59-4&from=paste&height=185&id=u6306bebc&margin=%5Bobject%20Object%5D&name=image.png&originHeight=200&originWidth=754&originalType=binary&size=34568&status=done&style=none&taskId=ude058ecc-602d-4822-b0c1-20e41b84afa&width=699" alt="image.png"><br>QPSK 调制信号波形图<br><img src= "/img/loading.gif" data-lazy-src="https://image.hackerjerry.top/QPSK%E4%BF%A1%E5%8F%B7%E8%B0%83%E5%88%B6-10.png#clientId=u6d886849-8a59-4&from=paste&height=191&id=u18365c2d&margin=%5Bobject%20Object%5D&name=image.png&originHeight=210&originWidth=746&originalType=binary&size=128005&status=done&style=none&taskId=u5c2a400b-5220-4dcd-ad80-60844de7555&width=679" alt="image.png"><br>QPSK 调制信号功率谱图<br><img src= "/img/loading.gif" data-lazy-src="https://image.hackerjerry.top/QPSK%E4%BF%A1%E5%8F%B7%E8%B0%83%E5%88%B6-11.png#clientId=u6d886849-8a59-4&from=paste&height=332&id=uc862d20b&margin=%5Bobject%20Object%5D&name=image.png&originHeight=332&originWidth=441&originalType=binary&size=51742&status=done&style=none&taskId=u90871b21-cec3-43ae-961b-35634aecd9e&width=441" alt="image.png"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;b 测题目，由于学长写的代码有些步骤无法理解，而且代码不优雅，故重写之。&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>区块链底层-区块与交易</title>
    <link href="https://www.blog.hackerjerry.top/2021/04/24/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%BA%95%E5%B1%82-%E5%8C%BA%E5%9D%97%E4%B8%8E%E4%BA%A4%E6%98%93_new/"/>
    <id>https://www.blog.hackerjerry.top/2021/04/24/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%BA%95%E5%B1%82-%E5%8C%BA%E5%9D%97%E4%B8%8E%E4%BA%A4%E6%98%93_new/</id>
    <published>2021-04-24T07:32:07.000Z</published>
    <updated>2021-05-06T13:04:07.985Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h1 id="全局结构"><a href="#全局结构" class="headerlink" title="全局结构"></a>全局结构</h1><p>下图是以太坊区块数据结构与关系。<br><img src= "/img/loading.gif" data-lazy-src="https://image.hackerjerry.top/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%BA%95%E5%B1%82-%E5%8C%BA%E5%9D%97%E4%B8%8E%E4%BA%A4%E6%98%93-1.png#clientId=u9ae9216b-af72-4&from=paste&height=402&id=u321a8f97&margin=%5Bobject%20Object%5D&originHeight=644&originWidth=1228&originalType=url&status=done&style=none&taskId=u9f6b4a08-53f6-466b-bd87-bb0cb52dc50&width=766"><br>区块分为两部分：区块头(Header)和区块体(Body)。区块头信息量非常丰富，不但和上一个单元建立联系还记录了一些交易执行情况信息和矿工工作信息。</p><h1 id="定义代码"><a href="#定义代码" class="headerlink" title="定义代码"></a>定义代码</h1><p>下面是以太坊代码中定义的区块头和区块体结构定义代码，所有核心代码均在 core/types/block.go 文件中：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//core/types/block.go:70</span></span><br><span class="line"><span class="keyword">type</span> Header <span class="keyword">struct</span> &#123;</span><br><span class="line">   ParentHash  common.Hash    <span class="string">`json:&quot;parentHash&quot;       gencodec:&quot;required&quot;`</span></span><br><span class="line">   UncleHash   common.Hash    <span class="string">`json:&quot;sha3Uncles&quot;       gencodec:&quot;required&quot;`</span></span><br><span class="line">   Coinbase    common.Address <span class="string">`json:&quot;miner&quot;            gencodec:&quot;required&quot;`</span></span><br><span class="line">   Root        common.Hash    <span class="string">`json:&quot;stateRoot&quot;        gencodec:&quot;required&quot;`</span></span><br><span class="line">   TxHash      common.Hash    <span class="string">`json:&quot;transactionsRoot&quot; gencodec:&quot;required&quot;`</span></span><br><span class="line">   ReceiptHash common.Hash    <span class="string">`json:&quot;receiptsRoot&quot;     gencodec:&quot;required&quot;`</span></span><br><span class="line">   Bloom       Bloom          <span class="string">`json:&quot;logsBloom&quot;        gencodec:&quot;required&quot;`</span></span><br><span class="line">   Difficulty  *big.Int       <span class="string">`json:&quot;difficulty&quot;       gencodec:&quot;required&quot;`</span></span><br><span class="line">   Number      *big.Int       <span class="string">`json:&quot;number&quot;           gencodec:&quot;required&quot;`</span></span><br><span class="line">   GasLimit    <span class="keyword">uint64</span>         <span class="string">`json:&quot;gasLimit&quot;         gencodec:&quot;required&quot;`</span></span><br><span class="line">   GasUsed     <span class="keyword">uint64</span>         <span class="string">`json:&quot;gasUsed&quot;          gencodec:&quot;required&quot;`</span></span><br><span class="line">   Time        <span class="keyword">uint64</span>         <span class="string">`json:&quot;timestamp&quot;        gencodec:&quot;required&quot;`</span></span><br><span class="line">   Extra       []<span class="keyword">byte</span>         <span class="string">`json:&quot;extraData&quot;        gencodec:&quot;required&quot;`</span></span><br><span class="line">   MixDigest   common.Hash    <span class="string">`json:&quot;mixHash&quot;`</span></span><br><span class="line">   Nonce       BlockNonce     <span class="string">`json:&quot;nonce&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> Body <span class="keyword">struct</span> &#123;</span><br><span class="line">Transactions []*Transaction</span><br><span class="line">Uncles       []*Header</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h1><h3 id="parentHash"><a href="#parentHash" class="headerlink" title="parentHash"></a>parentHash</h3><p>是一个哈希值，记录此区块直接引用的父区块哈希值。通过此记录，才能完整的将区块有序组织，形成一条区块链。并且可以防止父区块内容被修改，因为数据修改，区块哈希必然发生变化，因此一个区块直接或间接的强化了所有父辈区块，通过加密算法保证历史区块不可能被修改。</p><h3 id="miner"><a href="#miner" class="headerlink" title="miner"></a>miner</h3><p>是一个地址，表示区块是此账户的矿工挖出，挖矿奖励将下发到此账户。</p><h3 id="transactionsRoot"><a href="#transactionsRoot" class="headerlink" title="transactionsRoot"></a>transactionsRoot</h3><p>是一个哈希值，表示该区块中所有交易生成一颗默克尔树根节点哈希值。是一个密码学保证交易集合摘要。通过此 Root 可以直接校验某交易是否包含在此区块中。</p><h3 id="mixHash"><a href="#mixHash" class="headerlink" title="mixHash"></a>mixHash</h3><p>是一个哈希值。用于校验区块是否正确挖出。实际上是区块头数据不包含 nonce 时的一个哈希值。</p><h1 id="区块体"><a href="#区块体" class="headerlink" title="区块体"></a>区块体</h1><p>区块体 Body 中只有两项数据：<a href="https://learnblockchain.cn/books/geth/part1/transaction.html">交易</a>集合和叔辈区块头集合。是交易促使以太坊世界态进行转变。<br><img src= "/img/loading.gif" data-lazy-src="https://image.hackerjerry.top/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%BA%95%E5%B1%82-%E5%8C%BA%E5%9D%97%E4%B8%8E%E4%BA%A4%E6%98%93-2.png#clientId=u9ae9216b-af72-4&from=paste&height=203&id=u42b0fbbe&margin=%5Bobject%20Object%5D&originHeight=283&originWidth=969&originalType=url&status=done&style=none&taskId=u56a01b4b-366c-4bd6-976c-05606cea4e0&width=693.5"><br>从创世状态开始，每一个区块中的交易执行促使了以太坊世界态的转变。下一个状态是在上一个状态中执行交易或其他操作使得状态由 A 状态转变为 B 状态。<br>而交易则为状态转变的催化酶，<strong>一个区块中的所有交易执行完成后，将使得以太坊进入一个新的状态。</strong>状态转变过程中记录了一些起始变量和结果数据，分别是交易默克尔哈希值<strong>transactionsRoot</strong>、交易回执默克尔哈希值** receiptRoot<strong>、事件布隆值</strong>logsBloom<strong>、新状态的默克尔哈希值</strong>stateRoot**。</p><h1 id="交易回执"><a href="#交易回执" class="headerlink" title="交易回执"></a>交易回执</h1><p>在以太坊中一份交易回执记录了关于此笔交易的处理结果信息：<br><img src= "/img/loading.gif" data-lazy-src="https://image.hackerjerry.top/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%BA%95%E5%B1%82-%E5%8C%BA%E5%9D%97%E4%B8%8E%E4%BA%A4%E6%98%93-3.png#clientId=u9ae9216b-af72-4&from=paste&height=380&id=u3f9ff1a7&margin=%5Bobject%20Object%5D&originHeight=760&originWidth=652&originalType=url&status=done&style=none&taskId=u8eec5c7d-8f2e-41d5-9917-91e25564eb4&width=326"><br>回执信息分为三部分：共识信息、交易信息、区块信息。下面分别介绍各类信息。<br><img src= "/img/loading.gif" data-lazy-src="https://image.hackerjerry.top/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%BA%95%E5%B1%82-%E5%8C%BA%E5%9D%97%E4%B8%8E%E4%BA%A4%E6%98%93-4.png#clientId=u9ae9216b-af72-4&from=paste&height=359&id=u9d6c0d41&margin=%5Bobject%20Object%5D&originHeight=718&originWidth=642&originalType=url&status=done&style=none&taskId=u780e7386-1eaa-45c3-a6fc-2cdef063091&width=321"></p><h2 id="交易回执共识信息"><a href="#交易回执共识信息" class="headerlink" title="交易回执共识信息"></a>交易回执共识信息</h2><p>共识意味在在校验区块合法性时，这部分信息也参与校验。这些信息参与校验的原因是确保交易必须在区块中的固定顺序中执行，且记录了交易执行后的状态信息。这样可强化交易顺序。</p><ul><li>Status： 成功与否，1 表示成功，0 表示失败。</li><li>CumulativeGasUsed： 区块中已执行的交易累计消耗的 Gas，包含当前交易。</li><li>Logs: 当前交易执行所产生的智能合约事件列表。</li><li>Bloom：是从 Logs 中提取的事件布隆过滤器，用于快速检测某主题的事件是否存在于 Logs 中。</li></ul><p><strong>如何参与共识校验呢</strong>？<br>实际上<strong>参与校验</strong>的<strong>仅仅是回执哈希</strong>，而<strong>回执哈希</strong>计算<strong>只包含这些信息</strong>。<br>首先，在校验时获取整个区块回执信息的默克尔树的根哈希值。再判断此哈希值是否同区块头定义内容相同。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//core/block_validator.go:92</span></span><br><span class="line">receiptSha := types.DeriveSha(receipts)</span><br><span class="line"><span class="keyword">if</span> receiptSha != header.ReceiptHash &#123;</span><br><span class="line">   <span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;invalid receipt root hash (remote: %x local: %x)&quot;</span>,</span><br><span class="line">   header.ReceiptHash, receiptSha)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而函数 types.DeriveSha 中<strong>生成根哈希值</strong>，是将列表元素（这里是<strong>交易回执</strong>）的<strong>RLP 编码信息</strong>构成<strong>默克树</strong>，最终获得列表的哈希值。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//core/types/derive_sha.go:32</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">DeriveSha</span><span class="params">(list DerivableList)</span> <span class="title">common</span>.<span class="title">Hash</span></span> &#123;</span><br><span class="line">   keybuf := <span class="built_in">new</span>(bytes.Buffer)</span><br><span class="line">   trie := <span class="built_in">new</span>(trie.Trie)</span><br><span class="line">   <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; list.Len(); i++ &#123;</span><br><span class="line">      keybuf.Reset()</span><br><span class="line">      rlp.Encode(keybuf, <span class="keyword">uint</span>(i))</span><br><span class="line">      trie.Update(keybuf.Bytes(), list.GetRlp(i))</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> trie.Hash()</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// core/types/receipt.go:237</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r Receipts)</span> <span class="title">GetRlp</span><span class="params">(i <span class="keyword">int</span>)</span> []<span class="title">byte</span></span> &#123;</span><br><span class="line">   bytes, err := rlp.EncodeToBytes(r[i])</span><br><span class="line">   <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">      <span class="built_in">panic</span>(err)</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> bytes</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继续往下看，交易回执实现了 RLP 编码接口。在方法 EncodeRLP 中是构建了一个私有的 receiptRLP。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//core/types/receipt.go:119</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *Receipt)</span> <span class="title">EncodeRLP</span><span class="params">(w io.Writer)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> rlp.Encode(w,</span><br><span class="line">&amp;receiptRLP&#123;r.statusEncoding(), r.CumulativeGasUsed, r.Bloom, r.Logs&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从代码中可以看出 receiptRLP 仅仅包含上面提到的参与共识校验的内容。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//core/types/receipt.go:78</span></span><br><span class="line"><span class="keyword">type</span> receiptRLP <span class="keyword">struct</span> &#123;</span><br><span class="line">   PostStateOrStatus []<span class="keyword">byte</span></span><br><span class="line">   CumulativeGasUsed <span class="keyword">uint64</span></span><br><span class="line">   Bloom             Bloom</span><br><span class="line">   Logs              []*Log</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="交易回执交易信息"><a href="#交易回执交易信息" class="headerlink" title="交易回执交易信息"></a>交易回执交易信息</h2><p>这部分信息记录的是关于回执所对应的交易信息，有：</p><ul><li>TxHash ： 交易回执所对应的交易哈希。</li><li>ContractAddress： 当这笔交易是部署新合约时，记录新合约的地址。</li><li>GasUsed: 这笔交易执行所消耗的<a href="https://learnblockchain.cn/books/geth/part1/gas.html">Gas 燃料</a>。</li></ul><p>这些信息不参与共识的原因是这三项信息已经在其他地方校验。</p><ul><li>TxHash: 区块有校验交易集的正确性。</li><li>ContractAddress： 如果是新合约，实际上已经提交到以太坊状态 State 中。</li><li>GasUsed： 已属于 CumulativeGasUsed 的一部分。</li></ul><h2 id="交易回执区块信息"><a href="#交易回执区块信息" class="headerlink" title="交易回执区块信息"></a>交易回执区块信息</h2><p>这部分信息完全是<strong>为了方便外部读取交易回执</strong>，不但知道交易执行情况，<strong>还能方便的指定该交易属于哪个区块中第几笔交易</strong>。</p><ul><li>BlockHash: <strong>交易所在区块哈希</strong>。</li><li>BlockNumber: <strong>交易所在区块高度</strong>。</li><li>TransactionIndex：<strong>交易在区块中的序号</strong>。</li></ul><p>这三项信息，主要是<strong>在数据库 Leveldb 中读取交易回执</strong>时，<strong>实时指定</strong>。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//core/rawdb/accessors_chain.go:315</span></span><br><span class="line">receipts := <span class="built_in">make</span>(types.Receipts, <span class="built_in">len</span>(storageReceipts))</span><br><span class="line">logIndex := <span class="keyword">uint</span>(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">for</span> i, receipt := <span class="keyword">range</span> storageReceipts &#123;</span><br><span class="line">   <span class="comment">//...</span></span><br><span class="line">   receipts[i] = (*types.Receipt)(receipt)</span><br><span class="line">   receipts[i].BlockHash = hash</span><br><span class="line">   receipts[i].BlockNumber = big.NewInt(<span class="number">0</span>).SetUint64(number)</span><br><span class="line">   receipts[i].TransactionIndex = <span class="keyword">uint</span>(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="交易回执存储"><a href="#交易回执存储" class="headerlink" title="交易回执存储"></a>交易回执存储</h2><p><strong>交易回执</strong>作为<strong>交易执行中间产物</strong>，为了方便快速获取某笔交易的执行明细。以太坊中有跟随区块存储时实时存储交易回执。但为了降低存储量，只存储了必要内容。<br>首先，在<strong>存储</strong>时，将交易回执对象转换为<strong>精简内容</strong>。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//core/rawdb/accessors_chain.go:338</span></span><br><span class="line">storageReceipts := <span class="built_in">make</span>([]*types.ReceiptForStorage, <span class="built_in">len</span>(receipts))</span><br><span class="line"><span class="keyword">for</span> i, receipt := <span class="keyword">range</span> receipts &#123;</span><br><span class="line">   storageReceipts[i] = (*types.ReceiptForStorage)(receipt)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>精简内容是专门为存储定义的一个结构 ReceiptForStorage。存储时将交易回执集进行 RLP 编码存储。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//core/rawdb/accessors_chain.go:342</span></span><br><span class="line">bytes, err := rlp.EncodeToBytes(storageReceipts)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">   log.Crit(<span class="string">&quot;Failed to encode block receipts&quot;</span>, <span class="string">&quot;err&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> err := db.Put(blockReceiptsKey(number, hash), bytes); err != <span class="literal">nil</span> &#123;</span><br><span class="line">   log.Crit(<span class="string">&quot;Failed to store block receipts&quot;</span>, <span class="string">&quot;err&quot;</span>, err)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以看存储了哪些内容，只需要看 ReceiptForStorage 的 EncodeRLP 方法：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//core/types/receipt.go:179</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *ReceiptForStorage)</span> <span class="title">EncodeRLP</span><span class="params">(w io.Writer)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">   enc := &amp;receiptStorageRLP&#123;</span><br><span class="line">      PostStateOrStatus: (*Receipt)(r).statusEncoding(),</span><br><span class="line">      CumulativeGasUsed: r.CumulativeGasUsed,</span><br><span class="line">      TxHash:            r.TxHash,</span><br><span class="line">      ContractAddress:   r.ContractAddress,</span><br><span class="line">      Logs:              <span class="built_in">make</span>([]*LogForStorage, <span class="built_in">len</span>(r.Logs)),</span><br><span class="line">      GasUsed:           r.GasUsed,</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">for</span> i, log := <span class="keyword">range</span> r.Logs &#123;</span><br><span class="line">      enc.Logs[i] = (*LogForStorage)(log)</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> rlp.Encode(w, enc)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://image.hackerjerry.top/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%BA%95%E5%B1%82-%E5%8C%BA%E5%9D%97%E4%B8%8E%E4%BA%A4%E6%98%93-5.png#clientId=u9ae9216b-af72-4&from=paste&height=482&id=u14eddb16&margin=%5Bobject%20Object%5D&originHeight=746&originWidth=854&originalType=url&status=done&style=none&taskId=ubb7522ff-0229-47a2-8673-79e407e628c&width=552"></p><h1 id="交易回执示例–文档参考"><a href="#交易回执示例–文档参考" class="headerlink" title="交易回执示例–文档参考"></a>交易回执示例–文档参考</h1><p><img src= "/img/loading.gif" data-lazy-src="https://image.hackerjerry.top/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%BA%95%E5%B1%82-%E5%8C%BA%E5%9D%97%E4%B8%8E%E4%BA%A4%E6%98%93-6.png#clientId=u9ae9216b-af72-4&from=paste&height=737&id=u301c1b6f&margin=%5Bobject%20Object%5D&originHeight=1474&originWidth=1664&originalType=url&status=done&style=none&taskId=u1730403f-a93e-4126-920d-39990df7fdc&width=832"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;

&lt;h1 id=&quot;全局结构&quot;&gt;&lt;a href=&quot;#全局结构&quot; class=&quot;headerlink&quot; title=&quot;全局结构&quot;&gt;&lt;/a&gt;全局结构&lt;/h1&gt;&lt;p&gt;下图是以太坊区块数据结构与关系。&lt;br&gt;&lt;img src= &quot;/img/loading</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>流量在线识别系统demo</title>
    <link href="https://www.blog.hackerjerry.top/2021/04/20/%E6%B5%81%E9%87%8F%E5%9C%A8%E7%BA%BF%E8%AF%86%E5%88%AB%E7%B3%BB%E7%BB%9Fdemo_new/"/>
    <id>https://www.blog.hackerjerry.top/2021/04/20/%E6%B5%81%E9%87%8F%E5%9C%A8%E7%BA%BF%E8%AF%86%E5%88%AB%E7%B3%BB%E7%BB%9Fdemo_new/</id>
    <published>2021-04-20T07:13:42.000Z</published>
    <updated>2021-05-06T13:00:22.142Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">Hey, password is required here.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="9422fa806c25e7d58e0067bc1326e0a24a90816ece815c0b65b082a6e9b66385"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">Here&#39;s something encrypted, password is required to continue reading.</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Life-Weekly-April-19-to-25</title>
    <link href="https://www.blog.hackerjerry.top/2021/04/20/Life-Weekly-April-19-to-25_new/"/>
    <id>https://www.blog.hackerjerry.top/2021/04/20/Life-Weekly-April-19-to-25_new/</id>
    <published>2021-04-20T06:52:36.000Z</published>
    <updated>2021-05-06T13:02:05.678Z</updated>
    
    <content type="html"><![CDATA[<h1 id="时讯"><a href="#时讯" class="headerlink" title="时讯"></a>时讯</h1><ol><li>特斯拉最近一直出事故，脚刹系统很有问题，怀疑是软件 bug，官方售后居然在发生事故后会清除事故数据和行车记录视频，这是一个负责任的大公司能干出的事吗？</li><li>特斯拉疑似提供事故数据，数据不规范，传感器数量明显不对，搁这儿欺骗消费者呢？</li><li>中国派巴基斯坦大使下榻酒店遭恐怖袭击，中方人员外出会谈，无人员受伤。</li></ol><h1 id="小事"><a href="#小事" class="headerlink" title="小事"></a>小事</h1><ol><li>周一：下雨，被学长鸽了，让我自己写在线系统，麻了。拖了一个月到比赛截至的时候说自己没写。行吧，我自己写。</li><li>周二：下雨，加油！</li><li>周三：校运会==放假，写完了！</li><li>周四：买了一把胜利 CHA-9500 球拍和尤尼克斯的手胶，开始准备认真打羽毛球了！</li><li>周五：通过考核，成为预备党员！美赛又是 M 奖，淦，再也不玩了！学校咋都 2O 19F，卷疯了。</li></ol><h1 id="本周收藏"><a href="#本周收藏" class="headerlink" title="本周收藏"></a>本周收藏</h1><h2 id="文章"><a href="#文章" class="headerlink" title="文章"></a>文章</h2><ol><li>算法好文</li><li>羽毛球训练好文</li></ol><h2 id="剧集"><a href="#剧集" class="headerlink" title="剧集"></a>剧集</h2><ol><li>伍六七终于到主线了！！！！何导啊何导，有青山老贼那味了，希望别一部国漫画 10 年就行，追起来太费劲了。</li></ol><p><img src= "/img/loading.gif" data-lazy-src="https://image.hackerjerry.top/Life-Weekly-April-19-to-25-1.jpeg#clientId=u67cebdca-6850-4&from=drop&id=ufaa1c361&margin=%5Bobject%20Object%5D&name=IMG_20210421_225640.jpg&originHeight=1067&originWidth=1940&originalType=binary&size=344924&status=done&style=none&taskId=u7e240ddf-325a-4031-8b88-95b8b3a8a4f" alt="IMG_20210421_225640.jpg"><br><strong>只攻不守的剑，也能用来保护人</strong>。</p><h2 id="摘录"><a href="#摘录" class="headerlink" title="摘录"></a>摘录</h2><ol><li>关于恋爱观。</li></ol><p>「<strong>交往</strong>」这件事，不只是为了休息日能一起去哪玩，那只是附带的东西罢了。[<strong>互相支撑着对方的生活</strong>」才是交往的本质。<br>能互相给予对方“<strong>在看不见的地方让自己的生活变得丰富</strong>”这样的力量，这才是“交往”。就算不能时时刻刻在一起，但却能带给自己仿佛在一起时一般的存在感的人，这才是“恋人”。<br>真正的谈恋爱是两个人相处比我独处更有趣、更有意义，真正的谈恋爱是两个人为了未来而考虑、努力，真正的恋爱是我愿意支持你的想法，你愿意鼓励我主动追梦，真正的恋爱是时间沉淀感情后、冷静思考后的坚定选择。无关激素，无关冲动，不是想谈恋爱而找个人谈恋爱，而是我们经历了很多事情后，我们了解彼此后，选择了彼此。</p><h2 id="知识"><a href="#知识" class="headerlink" title="知识"></a>知识</h2><ol><li>软件安全的 ret2libc 要自学一下了！</li></ol><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><ol><li>做人做事</li></ol><p><img src= "/img/loading.gif" data-lazy-src="https://image.hackerjerry.top/Life-Weekly-April-19-to-25-2.png#clientId=u67cebdca-6850-4&from=paste&height=1443&id=u062f504b&margin=%5Bobject%20Object%5D&originHeight=2885&originWidth=720&originalType=url&status=done&style=none&taskId=uc553a112-4017-49b5-b30d-b410852a388&width=360"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;时讯&quot;&gt;&lt;a href=&quot;#时讯&quot; class=&quot;headerlink&quot; title=&quot;时讯&quot;&gt;&lt;/a&gt;时讯&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;特斯拉最近一直出事故，脚刹系统很有问题，怀疑是软件 bug，官方售后居然在发生事故后会清除事故数据和行车记录视频，这是一个负责任</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>区块链底层-账户模型</title>
    <link href="https://www.blog.hackerjerry.top/2021/04/17/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%BA%95%E5%B1%82-%E8%B4%A6%E6%88%B7%E6%A8%A1%E5%9E%8B_new/"/>
    <id>https://www.blog.hackerjerry.top/2021/04/17/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%BA%95%E5%B1%82-%E8%B4%A6%E6%88%B7%E6%A8%A1%E5%9E%8B_new/</id>
    <published>2021-04-17T14:32:44.000Z</published>
    <updated>2021-05-06T13:02:09.518Z</updated>
    
    <content type="html"><![CDATA[<p>我们采用和以太坊相似的账户模型。</p><a id="more"></a><h1 id="账户数据结构"><a href="#账户数据结构" class="headerlink" title="账户数据结构"></a>账户数据结构</h1><p>以太坊数据以账户为单位组织，账户数据的变更引起账户状态变化, 从而引起以太坊状态变化。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// core/state/state_object.go:100</span></span><br><span class="line"><span class="keyword">type</span> Account <span class="keyword">struct</span> &#123;</span><br><span class="line">    Nonce    <span class="keyword">uint64</span></span><br><span class="line">    Balance  *big.Int</span><br><span class="line">    Root     common.Hash</span><br><span class="line">    CodeHash []<span class="keyword">byte</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在密码学领域，Nonce 代表一个只使用一次的数字。它往往是一个随机或伪随机数，以避免重复。 以太坊账户中加入 Nonce，可避免重放攻击（不过不是随机产生）。账户 Nonce 起始值是 0，后续每触发一次账户执行则 Nonce 值计加一次。 其中一处的计数逻辑如下：</li></ul><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// core/state_transition.go:212</span></span><br><span class="line">st.state.SetNonce(msg.From(), st.state.GetNonce(sender.Address())+<span class="number">1</span>)</span><br></pre></td></tr></table></figure><ul><li>Balance 则记录该账户所拥有的以太（ETH）数量，称为账户余额.</li></ul><p>当然必须保证转账方余额充足，在转移前需要 CanTransfer 检查， 如果余额充足，则执行 Transfer 转移 Value 数量的以太。</p><ul><li>账户状态哈希值 StateRoot，是一颗默克尔压缩前缀树（Merkle Patricia Tree）的根值。可以直接利用 StateRoot 从 Leveldb 中快速读取具体的某个状态数据</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://image.hackerjerry.top/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%BA%95%E5%B1%82-%E8%B4%A6%E6%88%B7%E6%A8%A1%E5%9E%8B-1.png#clientId=u7a530312-f976-4&from=paste&height=318&id=uadb7d967&margin=%5Bobject%20Object%5D&originHeight=1006&originWidth=1062&originalType=url&status=done&style=none&taskId=u8125fdd8-2c02-4142-8ff6-2a5b708f249&width=336"><br>上图是以太坊账户数据存储结构，账户内部实际只存储关键数据，而合约代码以及合约自身数据则通过对应的哈希值关联。 因为每个账户对象，将作为一个以太坊账户树的一个叶子数据存储， 不能太大。<br>从以太坊作为一个世界态(World State)状态机视角看数据关系如下：<br><img src= "/img/loading.gif" data-lazy-src="https://image.hackerjerry.top/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%BA%95%E5%B1%82-%E8%B4%A6%E6%88%B7%E6%A8%A1%E5%9E%8B-2.png#clientId=u7a530312-f976-4&from=paste&height=125&id=ud8337454&margin=%5Bobject%20Object%5D&originHeight=174&originWidth=955&originalType=url&status=done&style=none&taskId=u96e7177e-6233-4ade-8cc1-94578d56711&width=686.5"><br>我们通过一段示例代码，感受下以太坊账户数据存储。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span>(...)</span><br><span class="line"><span class="keyword">var</span> toAddr =common.HexToAddress</span><br><span class="line"><span class="keyword">var</span> toHash =common.BytesToHash</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>  &#123;</span><br><span class="line">    statadb, _ := state.New(common.Hash&#123;&#125;,</span><br><span class="line">        state.NewDatabase(rawdb.NewMemoryDatabase()))<span class="comment">// ❶</span></span><br><span class="line"></span><br><span class="line">    acct1:=toAddr(<span class="string">&quot;0x0bB141C2F7d4d12B1D27E62F86254e6ccEd5FF9a&quot;</span>)<span class="comment">// ❷</span></span><br><span class="line">    acct2:=toAddr(<span class="string">&quot;0x77de172A492C40217e48Ebb7EEFf9b2d7dF8151B&quot;</span>)</span><br><span class="line"></span><br><span class="line">    statadb.AddBalance(acct1,big.NewInt(<span class="number">100</span>))</span><br><span class="line">    statadb.AddBalance(acct2,big.NewInt(<span class="number">888</span>))</span><br><span class="line"></span><br><span class="line">    contract:=crypto.CreateAddress(acct1,statadb.GetNonce(acct1))<span class="comment">// ❸</span></span><br><span class="line">    statadb.CreateAccount(contract)</span><br><span class="line">    statadb.SetCode(contract,[]<span class="keyword">byte</span>(<span class="string">&quot;contract code bytes&quot;</span>))<span class="comment">// ❹</span></span><br><span class="line"></span><br><span class="line">    statadb.SetNonce(contract,<span class="number">1</span>)</span><br><span class="line">    statadb.SetState(contract,toHash([]<span class="keyword">byte</span>(<span class="string">&quot;owner&quot;</span>)),toHash(acct1.Bytes()))<span class="comment">//❺</span></span><br><span class="line">    statadb.SetState(contract,toHash([]<span class="keyword">byte</span>(<span class="string">&quot;name&quot;</span>)),toHash([]<span class="keyword">byte</span>(<span class="string">&quot;ysqi&quot;</span>)))</span><br><span class="line"></span><br><span class="line">    statadb.SetState(contract,toHash([]<span class="keyword">byte</span>(<span class="string">&quot;online&quot;</span>)),toHash([]<span class="keyword">byte</span>&#123;<span class="number">1</span>&#125;)</span><br><span class="line">    statadb.SetState(contract,toHash([]<span class="keyword">byte</span>(<span class="string">&quot;online&quot;</span>)),toHash([]<span class="keyword">byte</span>&#123;&#125;))<span class="comment">//❻</span></span><br><span class="line"></span><br><span class="line">    statadb.Commit(<span class="literal">true</span>)<span class="comment">// ❼</span></span><br><span class="line">    fmt.Println(<span class="keyword">string</span>(statadb.Dump()))<span class="comment">// ❽</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码中，我们创建了三个账户，并且提交到数据库中。最终打印出当前数据中所有账户的数据信息：</p><ul><li>❶ 一行代码涉及多个操作。首先是<strong>创建一个内存 KV 数据库</strong>，再<strong>包装为 stata 数据库实例</strong>， 最后<strong>利用一个空的 DB 级的 StateRoot，初始化一个以太坊 statadb</strong>。</li><li>❷ 定义两个账户 acct1 和 acct2，并分别添加 100 和 888 到账户余额。</li><li>❸ 模拟合约账户的创建过程，由外部账户 acct1 创建合约账户地址，并将此地址载入 statadb。</li><li>❹ 在将合约代码加入刚刚创建的合约账户中，在写入合约代码的同时， 会利用 crypto.Keccak256Hash(code)计算合约代码哈希，保留在账户数据中。</li><li>❺ 模拟合约执行过程，涉及修改合约状态，新增三项状态数据 owner,name 和 online，分别对应不同值。</li><li>❻ 这里和前面不同的是，是给状态 online 赋值为空[]byte{}，因为所有状态的默认值均是[]byte{}， 在提交到数据库时，如 Leveldb 认为这些状态无有效值，会从数据库文件中删除此记录。 因此，此操作实际是一个删除状态 online 操作。</li><li>❼ 上面所有操作，还都<strong>只是发生在 statdb 内存</strong>中，并未真正的写入数据库文件。 <strong>执行 Commit</strong>，才会<strong>将关于 statadb 的所有变更更新到数据库文件</strong>中。</li><li>❽ 一旦提交数据，则可以使用 Dump 命令从数据库中查找此 stata 相关的所有数据，包括所有账户。 并<strong>以 JSON 格式返还</strong>。这里，我们将返还结果直接打印输出。</li></ul><p>代码执行输出结果如下：</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;root&quot;</span>: <span class="string">&quot;3a25b0816cf007c0b878ca7a62ba35ee0337fa53703f281c41a791a137519f00&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;accounts&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;0bb141c2f7d4d12b1d27e62f86254e6cced5ff9a&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;balance&quot;</span>: <span class="string">&quot;100&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;nonce&quot;</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="attr">&quot;root&quot;</span>: <span class="string">&quot;56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;codeHash&quot;</span>: <span class="string">&quot;c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;code&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;storage&quot;</span>: &#123;&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;77de172a492c40217e48ebb7eeff9b2d7df8151b&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;balance&quot;</span>: <span class="string">&quot;888&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;nonce&quot;</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="attr">&quot;root&quot;</span>: <span class="string">&quot;56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;codeHash&quot;</span>: <span class="string">&quot;c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;code&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;storage&quot;</span>: &#123;&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;80580f576731dc1e1dcc53d80b261e228c447cdd&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;balance&quot;</span>: <span class="string">&quot;0&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;nonce&quot;</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="attr">&quot;root&quot;</span>: <span class="string">&quot;1f6d937817f2ac217d8b123c4983c45141e50bd0c358c07f3c19c7b526dd4267&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;codeHash&quot;</span>: <span class="string">&quot;c668dac8131a99c411450ba912234439ace20d1cc1084f8e198fee0a334bc592&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;code&quot;</span>: <span class="string">&quot;636f6e747261637420636f6465206279746573&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;storage&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;000000000000000000000000000000000000000000000000000000006e616d65&quot;</span>: <span class="string">&quot;8479737169&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;0000000000000000000000000000000000000000000000000000006f776e6572&quot;</span>: <span class="string">&quot;940bb141c2f7d4d12b1d27e62f86254e6cced5ff9a&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;我们采用和以太坊相似的账户模型。&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>区块链底层-存储</title>
    <link href="https://www.blog.hackerjerry.top/2021/04/16/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%BA%95%E5%B1%82-%E5%AD%98%E5%82%A8_new/"/>
    <id>https://www.blog.hackerjerry.top/2021/04/16/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%BA%95%E5%B1%82-%E5%AD%98%E5%82%A8_new/</id>
    <published>2021-04-16T12:20:09.000Z</published>
    <updated>2021-05-06T13:01:50.438Z</updated>
    
    <content type="html"><![CDATA[<p>本文聚焦区块链底层技术–存储技术。主要包含世界状态、账户状态和 MPT 树。<br>参考：<a href="https://learnblockchain.cn/books/geth/part3/statedb.html">https://learnblockchain.cn/books/geth/part3/statedb.html</a></p><a id="more"></a><h1 id="StateDB-世界状态"><a href="#StateDB-世界状态" class="headerlink" title="StateDB-世界状态"></a>StateDB-世界状态</h1><p><img src= "/img/loading.gif" data-lazy-src="https://image.hackerjerry.top/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%BA%95%E5%B1%82-%E5%AD%98%E5%82%A8-1.png#clientId=u34e3a6f1-8d42-4&from=paste&height=136&id=u29593524&margin=%5Bobject%20Object%5D&originHeight=174&originWidth=955&originalType=url&status=done&style=none&taskId=ud67f5524-9e0a-474e-8ebf-a18abeb618d&width=747.5"><br>从程序设计角度，StateDB 有多种用途：</p><ol><li>维护账户状态到世界状态的映射。</li><li>支持修改、回滚、提交状态。</li><li>支持持久化状态到数据库中。</li><li>是状态进出默克尔树的媒介。</li></ol><p>实际上** StateDB <strong>充当</strong>状态（数据）<strong>、</strong>Trie(树)<strong>、</strong>LevelDB（存储）**的协调者。</p><h2 id="实例化-StateDB"><a href="#实例化-StateDB" class="headerlink" title="实例化 StateDB"></a>实例化 StateDB</h2><p>在对状态的任何操作前，我们要先构建一个 StateDB 来操作状态。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">db: = state.NewDatabase(levelDB)</span><br><span class="line">statedb, err := state.New(block.Root(), db)</span><br></pre></td></tr></table></figure><p>首先，我们要告诉 StateDB ，我们要使用哪个状态。因此<strong>需要提供 StateRoot 作为默克尔树根去构建树</strong>。StateRoot 值相当于数据版本号，根据版本号可以明确的知道要使用使用哪个版本的状态。当然，数据内容并没在树中，<strong>需要到一个数据库中读取</strong>。因此在构建 State DB 时需要提供 stateRoot 和 db 才能完成构建。<br>任何实现 state.Database 接口的 db 都可以使用</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// core/state/database.go:42</span></span><br><span class="line"><span class="keyword">type</span> Database <span class="keyword">interface</span> &#123;</span><br><span class="line">OpenTrie(root common.Hash) (Trie, error)</span><br><span class="line">OpenStorageTrie(addrHash, root common.Hash) (Trie, error)</span><br><span class="line">CopyTrie(Trie) Trie</span><br><span class="line">ContractCode(addrHash, codeHash common.Hash) ([]<span class="keyword">byte</span>, error)</span><br><span class="line">ContractCodeSize(addrHash, codeHash common.Hash) (<span class="keyword">int</span>, error)</span><br><span class="line"></span><br><span class="line"><span class="comment">// TrieDB retrieves the low level trie database used for data storage.</span></span><br><span class="line">TrieDB() *trie.Database</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过 db 可以访问：</p><ol><li>OpenTrie: 打开指定状态版本(root)的含世界状态的顶层树。</li><li>OpenStorageTrie: <strong>打开账户(addrHash)下</strong>指定状态版本(root)的<strong>账户数据存储树</strong>。</li><li>CopyTrie: 深度拷贝树。</li><li>ContractCode：获取账户（addrHash）的合约，必须和合约哈希(codeHash)匹配。</li><li>ContractCodeSize 获取指定合约大小</li><li>TrieDB：<strong>获得 Trie 底层的数据驱动 DB</strong>，如:** levedDB** 、<strong>内存数据库</strong>、远程数据库</li></ol><p>当前有两种类型的 DB 实现了 Database 接口，轻节点使用的 odrDatabase ，和正常节点端使用的带有缓存的 cachingDB 。 因为轻节点并不存储数据，需要通过向其他节点查询来获得数据，而 odrDatabase 就是这种数据读取方式的封装。一个普通节点已内置 levelDB，为了提高读写性能，使用 cachingDB 对其进行一次封装。<br>在实例化 StateDB 时，需要立即打开含有世界状态的 Trie 树。如果 root 对应的树不存在，则会实例化失败 ①。实例化的 StateDB 中将记录多种信息。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//core/state/statedb.go:59</span></span><br><span class="line"><span class="keyword">type</span> StateDB <span class="keyword">struct</span> &#123;</span><br><span class="line">db   Database</span><br><span class="line">trie Trie</span><br><span class="line">stateObjects      <span class="keyword">map</span>[common.Address]*stateObject</span><br><span class="line">stateObjectsDirty <span class="keyword">map</span>[common.Address]<span class="keyword">struct</span>&#123;&#125;</span><br><span class="line">dbErr error</span><br><span class="line">refund <span class="keyword">uint64</span></span><br><span class="line"></span><br><span class="line">thash, bhash common.Hash</span><br><span class="line">txIndex      <span class="keyword">int</span></span><br><span class="line">logs         <span class="keyword">map</span>[common.Hash][]*types.Log</span><br><span class="line">logSize      <span class="keyword">uint</span></span><br><span class="line"></span><br><span class="line">preimages <span class="keyword">map</span>[common.Hash][]<span class="keyword">byte</span></span><br><span class="line">journal        *journal</span><br><span class="line">validRevisions []revision</span><br><span class="line">nextRevisionId <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>db: 操作状态的<strong>底层数据库</strong>，在实例化 StateDB 时指定 ②。</li><li>trie: 世界状态所在的树实例对象，现在只有以太坊改进的默克尔前缀压缩树。</li><li>stateObjects: <strong>已账户地址为键的账户状态对象，能够在内存中维护使用过的账户</strong>。</li><li>stateObjectsDirty： 标记被修改过的账户。</li><li>journal： 是修改状态的日志流水，使用此日志流水可回滚状态。</li></ul><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//core/state/statedb.go:92</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">New</span><span class="params">(root common.Hash, db Database)</span> <span class="params">(*StateDB, error)</span></span> &#123;</span><br><span class="line">tr, err := db.OpenTrie(root)<span class="comment">//①</span></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> &amp;StateDB&#123;</span><br><span class="line">db:                db,<span class="comment">//②</span></span><br><span class="line">trie:              tr,</span><br><span class="line">stateObjects:      <span class="built_in">make</span>(<span class="keyword">map</span>[common.Address]*stateObject),</span><br><span class="line">stateObjectsDirty: <span class="built_in">make</span>(<span class="keyword">map</span>[common.Address]<span class="keyword">struct</span>&#123;&#125;),</span><br><span class="line">logs:              <span class="built_in">make</span>(<span class="keyword">map</span>[common.Hash][]*types.Log),</span><br><span class="line">preimages:         <span class="built_in">make</span>(<span class="keyword">map</span>[common.Hash][]<span class="keyword">byte</span>),</span><br><span class="line">journal:           newJournal(),</span><br><span class="line">&#125;, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面对的代码实例化了一个 statedb。</p><h2 id="读写-StateDB-状态"><a href="#读写-StateDB-状态" class="headerlink" title="读写 StateDB 状态"></a>读写 StateDB 状态</h2><p>你所访问的任何数据必然属于某个账户下的状态，世界状态态仅仅是通过一颗树来建立安全的映射。因此你所访问的数据可以分为如下几种类型：</p><ol><li>访问账户基础属性：Balance、Nonce、Root、CodeHash</li><li>读取合约账户代码</li><li>读取合约账户中存储内容</li></ol><p>在代码实现中，为了便于账户隔离管理，使用不开放的 stateObject 来维护。 stateObject 注意代码如下：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> stateObject <span class="keyword">struct</span> &#123;</span><br><span class="line">address  common.Address<span class="comment">//对应的账户地址</span></span><br><span class="line">addrHash common.Hash <span class="comment">// 账户地址的哈希值</span></span><br><span class="line">data     Account <span class="comment">//账户属性</span></span><br><span class="line">db       *StateDB <span class="comment">//底层数据库</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line"><span class="comment">// 写缓存</span></span><br><span class="line">trie Trie <span class="comment">// 存储树，第一次访问时初始化</span></span><br><span class="line">code Code <span class="comment">// contract bytecode, which gets set when code is loaded</span></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> Account <span class="keyword">struct</span> &#123;</span><br><span class="line">Nonce    <span class="keyword">uint64</span></span><br><span class="line">Balance  *big.Int</span><br><span class="line">Root     common.Hash <span class="comment">// merkle root of the storage trie</span></span><br><span class="line">CodeHash []<span class="keyword">byte</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到 stateObject 中维护关于某个账户的所有信息，涉及账户地址、账户地址哈希、账户属性、底层数据库、存储树等内容。<br>当你访问状态时，需要指定账户地址。比如获取账户合约，合约账户代码，均是通过账户地址，获得获得对应的账户的 stateObject。因此，当你访问某账户余额时，需要从世界状态树 Trie 中读取账户状态。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// core/state/statedb.go:408</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(self *StateDB)</span> <span class="title">getStateObject</span><span class="params">(addr common.Address)</span> <span class="params">(stateObject *stateObject)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> obj := self.stateObjects[addr]; obj != <span class="literal">nil</span> &#123;<span class="comment">//①</span></span><br><span class="line"><span class="keyword">if</span> obj.deleted &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> obj</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">enc, err := self.trie.TryGet(addr[:])<span class="comment">//②</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(enc) == <span class="number">0</span> &#123;</span><br><span class="line">self.setError(err)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> data Account</span><br><span class="line"><span class="keyword">if</span> err := rlp.DecodeBytes(enc, &amp;data); err != <span class="literal">nil</span> &#123;<span class="comment">//③</span></span><br><span class="line">log.Error(<span class="string">&quot;Failed to decode state object&quot;</span>, <span class="string">&quot;addr&quot;</span>, addr, <span class="string">&quot;err&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line">obj := newObject(self, addr, data)<span class="comment">//④</span></span><br><span class="line">self.setStateObject(obj)</span><br><span class="line"><span class="keyword">return</span> obj</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>state.getStateObject(addr)方法，将返回指定账户的 StateObject，不存在时 nil。<br>state 的 stateObject Map 中记录这从实例化 State 到当下，所有访问过的账户的 StateObject。 因此，获取 StateObject 时先从 map 缓存中检查是否已打开 ①，如果存在则返回。** 如果是第一次使用，则以账户地址为 key 从树中查找读取账户状态数据<strong>②。读取到的数据，是被 RLP 序列化过的，因此，在读取到数据后，还需要进行反序列化 ③。为了降低 IO 和在内存中维护可能被修改的 Account 信息，会将其组装成 **StateObjec ④ 存储在 State 实例</strong>中。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//core/state/state_object.go:108</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">newObject</span><span class="params">(db *StateDB, address common.Address, data Account)</span> *<span class="title">stateObject</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> data.Balance == <span class="literal">nil</span> &#123;</span><br><span class="line">data.Balance = <span class="built_in">new</span>(big.Int)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> data.CodeHash == <span class="literal">nil</span> &#123;</span><br><span class="line">data.CodeHash = emptyCodeHash</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> &amp;stateObject&#123;</span><br><span class="line">db:            db,</span><br><span class="line">address:       address,</span><br><span class="line">addrHash:      crypto.Keccak256Hash(address[:]),<span class="comment">//⑤</span></span><br><span class="line">data:          data,</span><br><span class="line">originStorage: <span class="built_in">make</span>(Storage),</span><br><span class="line">dirtyStorage:  <span class="built_in">make</span>(Storage),</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>newObject 就是将对 Account 的操作进行辅助，其中记录了账户地址、地址哈希 ⑤ 等内容，最终你读写状态都经过 stateObject 完成。</p><h2 id="StateDB-完成持久化"><a href="#StateDB-完成持久化" class="headerlink" title="StateDB 完成持久化"></a>StateDB 完成持久化</h2><p>在区块中，将交易作为输入条件，来根据一系列动作修改状态。<br>在完成区块挖矿前，只是获得在内存中的状态树的 Root 值。 StateDB 可视为一个内存数据库，状态数据先在内存数据库中完成修改，所有关于状态的计算都在内存中完成。 在将区块持久化时完成有内存到数据库的更新存储，此更新属于增量更新，仅仅修改涉及到被修改部分。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// core/state/statedb.go:680</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *StateDB)</span> <span class="title">Commit</span><span class="params">(deleteEmptyObjects <span class="keyword">bool</span>)</span> <span class="params">(root common.Hash, err error)</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> s.clearJournalAndRefund()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> addr := <span class="keyword">range</span> s.journal.dirties &#123;<span class="comment">//①⑧⑨⑩</span></span><br><span class="line">s.stateObjectsDirty[addr] = <span class="keyword">struct</span>&#123;&#125;&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> addr, stateObject := <span class="keyword">range</span> s.stateObjects &#123;<span class="comment">//②</span></span><br><span class="line">_, isDirty := s.stateObjectsDirty[addr]</span><br><span class="line"><span class="keyword">switch</span> &#123;</span><br><span class="line"><span class="keyword">case</span> stateObject.suicided || (isDirty &amp;&amp; deleteEmptyObjects &amp;&amp; stateObject.empty()):</span><br><span class="line"><span class="comment">//③</span></span><br><span class="line">s.deleteStateObject(stateObject)</span><br><span class="line"><span class="keyword">case</span> isDirty:</span><br><span class="line"><span class="keyword">if</span> stateObject.code != <span class="literal">nil</span> &amp;&amp; stateObject.dirtyCode &#123;<span class="comment">//④</span></span><br><span class="line">s.db.TrieDB().InsertBlob(common.BytesToHash(stateObject.CodeHash()), stateObject.code)</span><br><span class="line">stateObject.dirtyCode = <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> err := stateObject.CommitTrie(s.db); err != <span class="literal">nil</span> &#123;<span class="comment">//⑤</span></span><br><span class="line"><span class="keyword">return</span> common.Hash&#123;&#125;, err</span><br><span class="line">&#125;</span><br><span class="line">s.updateStateObject(stateObject)<span class="comment">//⑥</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">delete</span>(s.stateObjectsDirty, addr)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">root, err = s.trie.Commit(<span class="function"><span class="keyword">func</span><span class="params">(leaf []<span class="keyword">byte</span>, parent common.Hash)</span> <span class="title">error</span></span> &#123;<span class="comment">//⑦</span></span><br><span class="line"><span class="keyword">var</span> account Account</span><br><span class="line"><span class="keyword">if</span> err := rlp.DecodeBytes(leaf, &amp;account); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> account.Root != emptyRoot &#123;</span><br><span class="line">s.db.TrieDB().Reference(account.Root, parent)</span><br><span class="line">&#125;</span><br><span class="line">code := common.BytesToHash(account.CodeHash)</span><br><span class="line"><span class="keyword">if</span> code != emptyCode &#123;</span><br><span class="line">s.db.TrieDB().Reference(code, parent)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">return</span> root, err</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://image.hackerjerry.top/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%BA%95%E5%B1%82-%E5%AD%98%E5%82%A8-2.png#clientId=u34e3a6f1-8d42-4&from=paste&height=506&id=ufcde743f&margin=%5Bobject%20Object%5D&originHeight=1012&originWidth=936&originalType=url&status=done&style=none&taskId=u9036f292-bba3-41a2-a09a-3566a7f7e94&width=468"><br>如上图所示，上半部分均属于内存操作，仅仅在 stateDB.Commit()时才将状态通过树提交到 leveldb 中。</p><h1 id="MPT-默克尔压缩前缀树"><a href="#MPT-默克尔压缩前缀树" class="headerlink" title="MPT-默克尔压缩前缀树"></a>MPT-默克尔压缩前缀树</h1><p>是一种经过改良的、融合了默克尔树和前缀树两种树结构优点的数据结构，是以太坊中用来组织管理账户数据、生成交易集合哈希的重要数据结构。一个非叶节点存储在 leveldb 关系型数据库中，数据库中的 key 是节点的 RLP 编码的 sha3 哈希，value 是节点的 RLP 编码。想要获得一个非叶节点的子节点，只需要根据子节点的 hash 访问数据库获得节点的 RLP 编码，然后解码就行了。<br>以太坊有四种前缀树：</p><ol><li><strong>世界状态树包括了从地址到账户状态之间的映射。</strong> 世界状态树的根节点哈希值由区块保存（在 stateRoot 字段），它标示了区块创建时的当前状态。<strong>整个网络中只有一个世界状态树。</strong></li><li><strong>账户存储树保存了与某一智能合约相关的数据信息。</strong>由账户状态保存账户存储树的根节点哈希值（在 storageRoot 字段）。<strong>每个账户都有一个账户存储树。</strong></li><li><strong>交易树包含了一个区块中的所有交易信息。</strong>由区块头（在 transactionsRoot 区域）保存交易树的根节点哈希值。<strong>每个区块都有一棵交易树。</strong></li><li><strong>交易收据树包含了一个区块中所有交易的收据信息。</strong>同样由区块头（在 receiptsRoot 区域）保存交易收据树的根节点哈希值；<strong>每个区块都有对应的交易收据树。</strong></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文聚焦区块链底层技术–存储技术。主要包含世界状态、账户状态和 MPT 树。&lt;br&gt;参考：&lt;a href=&quot;https://learnblockchain.cn/books/geth/part3/statedb.html&quot;&gt;https://learnblockchain.cn/books/geth/part3/statedb.html&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>交易内存池底层实现</title>
    <link href="https://www.blog.hackerjerry.top/2021/04/15/%E4%BA%A4%E6%98%93%E5%86%85%E5%AD%98%E6%B1%A0%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0_new/"/>
    <id>https://www.blog.hackerjerry.top/2021/04/15/%E4%BA%A4%E6%98%93%E5%86%85%E5%AD%98%E6%B1%A0%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0_new/</id>
    <published>2021-04-15T12:29:00.000Z</published>
    <updated>2021-05-06T13:00:59.863Z</updated>
    
    <content type="html"><![CDATA[<p>既然要从头搭建一个区块链网络，交易池是绕不开的一个核心底层。对于它，以下几个问题是需要解决的：</p><ol><li>用户发起的交易请求（不论以何种方式）是如何转变为实际的交易的；</li><li>产生的交易如果不能被及时处理，是如何进入交易池的；</li><li>本地产生的交易和从网络中接收到的交易进入交易池是否有区别；</li><li>交易池的基本数据结构是怎么样的（优先队列？）</li><li>从交易池中提取交易进行打包时顺序是怎么样的（调度算法）<blockquote><p>网络中很多文章提到内存池，指的就是是 txpool</p></blockquote></li></ol><a id="more"></a><h1 id="交易形成"><a href="#交易形成" class="headerlink" title="交易形成"></a>交易形成</h1><p>以下均为作品赛项目的内容。<br>首先，我们的交易请求会赋值到 TxRaw 结构体的一个实例中。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//用于接收客户端发来的序列化post原始信息</span></span><br><span class="line"><span class="keyword">type</span> TxRaw <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">//公钥hash</span></span><br><span class="line">Address []<span class="keyword">byte</span> <span class="string">`json:&quot;address&quot;`</span></span><br><span class="line"></span><br><span class="line">Fee <span class="keyword">int</span> <span class="string">`json:&quot;int&quot;`</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//交易核心</span></span><br><span class="line">RangeBloom bloom.RangeBloom <span class="string">`json:&quot;rbloom&quot;`</span></span><br><span class="line">TimeBloom  bloom.TimeBloom  <span class="string">`json:&quot;tbloom&quot;`</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//签名相关</span></span><br><span class="line">Pubkey sm2.PublicKey <span class="string">`json:&quot;pubkey&quot;`</span></span><br><span class="line">Sign   []<span class="keyword">byte</span>        <span class="string">`json:&quot;sign&quot;`</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//交易同态密文拼接，用于k-top查找</span></span><br><span class="line">Cipher <span class="keyword">string</span> <span class="string">`json:&quot;cipher&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后这个实例被传递到一个 SendTransaction 函数，用来创建一个交易 Tx。创建交易的过程如下：</p><ol><li>根据 Address 字段找到当前账户</li><li>设置交易默认参数</li><li>检查交易签名是否合法</li><li>检查交易是否冲突</li><li>对交易进行序列化，变为可存储和传输的形式。</li><li>提交交易到交易池</li></ol><h1 id="交易管理"><a href="#交易管理" class="headerlink" title="交易管理"></a>交易管理</h1><p>以太坊将交易按状态分为两部分：<strong>可执行交易</strong>和<strong>非可执行交易</strong>。分别记录在 pending 容器中和 queue 容器中。<br><img src= "/img/loading.gif" data-lazy-src="https://image.hackerjerry.top/%E4%BA%A4%E6%98%93%E5%86%85%E5%AD%98%E6%B1%A0%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0-1.png#clientId=u272c35f2-3d2a-4&from=paste&height=321&id=u5bf56761&margin=%5Bobject%20Object%5D&originHeight=538&originWidth=1160&originalType=binary&size=164987&status=done&style=none&taskId=u567ff6dc-553f-4a1c-af77-71fc9a19a73&width=693"><br>如上图所示，交易池先采用一个 txLookup (内部为 map）跟踪所有交易。同时将交易根据本地优先，价格优先原则将交易划分为两部分 queue 和 pending。而这两部交易则按账户分别跟踪。<br>为了不丢失未完成的本地交易，以太坊交易池通过 journal 文件存储和管理当前交易池中的本地交易，并定期更新存储。<br>下图是<strong>交易池对本地待处理交易的磁盘存储管理流程</strong>，涉及加载、实时写入和定期更新维护。<br><img src= "/img/loading.gif" data-lazy-src="https://image.hackerjerry.top/%E4%BA%A4%E6%98%93%E5%86%85%E5%AD%98%E6%B1%A0%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0-2.png#clientId=u272c35f2-3d2a-4&from=paste&height=826&id=ufc47fc0d&margin=%5Bobject%20Object%5D&originHeight=1356&originWidth=870&originalType=url&status=done&style=none&taskId=ubb8c227e-5868-49f4-b1ea-77abbe42349&width=530"></p><h2 id="存储交易"><a href="#存储交易" class="headerlink" title="存储交易"></a>存储交易</h2><p><img src= "/img/loading.gif" data-lazy-src="https://image.hackerjerry.top/%E4%BA%A4%E6%98%93%E5%86%85%E5%AD%98%E6%B1%A0%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0-3.png#clientId=u272c35f2-3d2a-4&from=paste&height=317&id=uc114cf13&margin=%5Bobject%20Object%5D&originHeight=432&originWidth=826&originalType=url&status=done&style=none&taskId=u8fb70d54-24fd-45a9-880e-9b7951920f0&width=606"><br>当交易池新交易来自于本地账户时 ❶，如果已开启记录本地交易，则将此交易加入 journal ❷。到交易池时，将实时存储到 journal 文件中。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//core/tx_pool.go:757</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(pool *TxPool)</span> <span class="title">journalTx</span><span class="params">(from common.Address, tx *types.Transaction)</span></span> &#123;</span><br><span class="line">   <span class="comment">// Only journal if it&#x27;s enabled and the transaction is local</span></span><br><span class="line">   <span class="keyword">if</span> pool.journal == <span class="literal">nil</span> || !pool.locals.contains(from) &#123;<span class="comment">//❶</span></span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span> err := pool.journal.insert(tx); err != <span class="literal">nil</span> &#123; <span class="comment">//❷</span></span><br><span class="line">      log.Warn(<span class="string">&quot;Failed to journal local transaction&quot;</span>, <span class="string">&quot;err&quot;</span>, err)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而 journal.insert 则将交易实时写入文件流中 ❸，相当于实时存储到磁盘。而在写入时，是将交易进行 RLP 编码。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//core/tx_journal.go:120</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(journal *txJournal)</span> <span class="title">insert</span><span class="params">(tx *types.Transaction)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">   <span class="keyword">if</span> journal.writer == <span class="literal">nil</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> errNoActiveJournal</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span> err := rlp.Encode(journal.writer, tx); err != <span class="literal">nil</span> &#123;<span class="comment">//❸</span></span><br><span class="line">      <span class="keyword">return</span> err</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>插一嘴，为什么要用 RLP 编码？</p></blockquote><h3 id="什么是-RLP"><a href="#什么是-RLP" class="headerlink" title="什么是 RLP"></a>什么是 RLP</h3><p>RLP(Recursive Length Prefix) 递归长度前缀编码是以太坊中最常使用的序列化格式方法。<br>RLP 旨在<strong>成为高度简约的序列化方法</strong>，<strong>唯一目标</strong>就是<strong>存储嵌套的字节数组</strong>。<br>RLP 只是以嵌套数组形式存储结构型数据，由上层协议来确定数组的含义。<br><img src= "/img/loading.gif" data-lazy-src="https://image.hackerjerry.top/%E4%BA%A4%E6%98%93%E5%86%85%E5%AD%98%E6%B1%A0%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0-4.png#clientId=u272c35f2-3d2a-4&from=paste&height=443&id=u3b9d54f1&margin=%5Bobject%20Object%5D&originHeight=886&originWidth=1716&originalType=url&status=done&style=none&taskId=u8fd870e4-dcb8-44b2-bd3b-a5ba9cd4ba8&width=858"><br>从图中可以看出，不同类型的数据，将有不同的前缀标识。 前缀也可以理解为报文头，通过报文头可准确获取报文内容。 图中灰色部分则为 RLP 编码输出前缀。</p><h2 id="加载已存储交易"><a href="#加载已存储交易" class="headerlink" title="加载已存储交易"></a>加载已存储交易</h2><p>在交易池首次启动 journal 时，将主动将该文件已存储的交易加载到交易池。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//core/tx_journal.go:61</span></span><br><span class="line"><span class="keyword">if</span> _, err := os.Stat(journal.path); os.IsNotExist(err) &#123; <span class="comment">//❶</span></span><br><span class="line">   <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Open the journal for loading any past transactions</span></span><br><span class="line">input, err := os.Open(journal.path) <span class="comment">//❷</span></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">   <span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> input.Close()</span><br></pre></td></tr></table></figure><p>处理时，如果文件不存在则退出 ❶，否则 Open 文件，获得 input 文件流 ❷。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//core/tx_journal.go:76</span></span><br><span class="line">stream := rlp.NewStream(input, <span class="number">0</span>)<span class="comment">//❸</span></span><br><span class="line">total, dropped := <span class="number">0</span>, <span class="number">0</span></span><br></pre></td></tr></table></figure><p>因为存储的内容格式是 rlp 编码内容，因此可以直接初始化 rlp 内容流 ❸，为连续解码做准备。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> (</span><br><span class="line">   failure error</span><br><span class="line">   batch   types.Transactions</span><br><span class="line">)</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">   tx := <span class="built_in">new</span>(types.Transaction)</span><br><span class="line">   <span class="keyword">if</span> err = stream.Decode(tx); err != <span class="literal">nil</span> &#123; <span class="comment">//❹</span></span><br><span class="line">      <span class="keyword">if</span> err != io.EOF &#123;</span><br><span class="line">         failure = err</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> batch.Len() &gt; <span class="number">0</span> &#123;<span class="comment">//❼</span></span><br><span class="line">         loadBatch(batch)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">   &#125;</span><br><span class="line">   total++</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> batch = <span class="built_in">append</span>(batch, tx); batch.Len() &gt; <span class="number">1024</span> &#123;<span class="comment">//❺</span></span><br><span class="line">      loadBatch(batch)<span class="comment">//❻</span></span><br><span class="line">      batch = batch[:<span class="number">0</span>]</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">loadBatch := <span class="function"><span class="keyword">func</span><span class="params">(txs types.Transactions)</span></span> &#123;</span><br><span class="line">   <span class="keyword">for</span> _, err := <span class="keyword">range</span> add(txs) &#123;</span><br><span class="line">      <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">         log.Debug(<span class="string">&quot;Failed to add journaled transaction&quot;</span>, <span class="string">&quot;err&quot;</span>, err)</span><br><span class="line">         dropped++ <span class="comment">//❽</span></span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>直接进入 for 循环遍历，不断从 stream 中一笔笔地解码出交易 ❹。<br>但交易并非单笔直接载入交易池，而是采用批量提交模式，每 1024 笔交易提交一次 ❺。<br>批量写入，有利于降低交易池在每次写入交易后的更新。一个批次只需要更新（排序与超限处理等）一次。当然在遍历结束时（err==io.EOF）,也需要将当前批次中的交易载入 ❼。<br>loadBatch 就是将交易一批次加入到交易池，并获得交易池的每笔交易的处理情况。如果交易加入失败，则进行计数 ❽。最终在 load 方法执行完毕时，显示交易载入情况。</p><h1 id="交易添加到交易池"><a href="#交易添加到交易池" class="headerlink" title="交易添加到交易池"></a>交易添加到交易池</h1><p>SendTransaction 最后调用 SubmitTransaction 函数将交易提交到交易池，不过，更底层的调用是 AddLocals 函数。<br>这里需要注意，本地交易时调用 AddLocals，而从对等 p2p 节点发来的交易调用的是另一个函数，AddRemotes 函数。调用这两个函数之前都应该验证交易的有效性。<br><img src= "/img/loading.gif" data-lazy-src="https://image.hackerjerry.top/%E4%BA%A4%E6%98%93%E5%86%85%E5%AD%98%E6%B1%A0%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0-5.png#clientId=u272c35f2-3d2a-4&from=paste&height=264&id=ue6089192&margin=%5Bobject%20Object%5D&originHeight=528&originWidth=1174&originalType=binary&size=236384&status=done&style=none&taskId=uf8820385-fb3b-42bb-ab6f-9ae0571e933&width=587"></p><blockquote><p>因为交易时通过节点的 API 接收，因此此交易被视为一笔来自本地(local)（图中用红球表示），在经过一系列校验和处理后。交易成功进入交易池，随后向已连接的邻近节点发送此交易。<br>当邻近节点，如矿工节点从邻近节点接收到此交易时，在进入交易池之前。会将交易标记为来自远方（remote）的交易（图中用绿球表示）。也需要经过校验和处理后，进入矿工节点的交易池，等待矿工打包到区块中。<br>如果邻近节点，不是矿工，也无妨。因为任何节点会默认将接受到得合法交易及时发送给邻近节点。得益于 P2P 网络，一笔交易平均在 6s 内扩散到整个以太坊公链网络的各个节点中。</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://image.hackerjerry.top/%E4%BA%A4%E6%98%93%E5%86%85%E5%AD%98%E6%B1%A0%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0-6.png#clientId=u272c35f2-3d2a-4&from=paste&height=254&id=u528314c1&margin=%5Bobject%20Object%5D&originHeight=373&originWidth=924&originalType=binary&size=74906&status=done&style=none&taskId=uae16074d-7e82-4415-a530-f8a271e0047&width=629"><br>下面我们来看一下交易池的结构：</p><blockquote><p>这是以太坊的</p></blockquote><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// TxPool contains all currently known transactions. Transactions</span></span><br><span class="line"><span class="comment">// enter the pool when they are received from the network or submitted</span></span><br><span class="line"><span class="comment">// locally. They exit the pool when they are included in the blockchain.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// The pool separates processable transactions (which can be applied to the</span></span><br><span class="line"><span class="comment">// current state) and future transactions. Transactions move between those</span></span><br><span class="line"><span class="comment">// two states over time as they are received and processed.</span></span><br><span class="line"><span class="keyword">type</span> TxPool <span class="keyword">struct</span> &#123;</span><br><span class="line">config      TxPoolConfig</span><br><span class="line">chainconfig *params.ChainConfig</span><br><span class="line">chain       blockChain</span><br><span class="line">gasPrice    *big.Int</span><br><span class="line">txFeed      event.Feed</span><br><span class="line">scope       event.SubscriptionScope</span><br><span class="line">signer      types.Signer</span><br><span class="line">mu          sync.RWMutex</span><br><span class="line"></span><br><span class="line">istanbul <span class="keyword">bool</span> <span class="comment">// Fork indicator whether we are in the istanbul stage.</span></span><br><span class="line"></span><br><span class="line">currentState  *state.StateDB <span class="comment">// Current state in the blockchain head</span></span><br><span class="line">pendingNonces *txNoncer      <span class="comment">// Pending state tracking virtual nonces</span></span><br><span class="line">currentMaxGas <span class="keyword">uint64</span>         <span class="comment">// Current gas limit for transaction caps</span></span><br><span class="line"></span><br><span class="line">locals  *accountSet <span class="comment">// Set of local transaction to exempt from eviction rules</span></span><br><span class="line">journal *txJournal  <span class="comment">// Journal of local transaction to back up to disk</span></span><br><span class="line"></span><br><span class="line">pending <span class="keyword">map</span>[common.Address]*txList   <span class="comment">// All currently processable transactions</span></span><br><span class="line">queue   <span class="keyword">map</span>[common.Address]*txList   <span class="comment">// Queued but non-processable transactions</span></span><br><span class="line">beats   <span class="keyword">map</span>[common.Address]time.Time <span class="comment">// Last heartbeat from each known account</span></span><br><span class="line">all     *txLookup                    <span class="comment">// All transactions to allow lookups</span></span><br><span class="line">priced  *txPricedList                <span class="comment">// All transactions sorted by price</span></span><br><span class="line"></span><br><span class="line">chainHeadCh     <span class="keyword">chan</span> ChainHeadEvent</span><br><span class="line">chainHeadSub    event.Subscription</span><br><span class="line">reqResetCh      <span class="keyword">chan</span> *txpoolResetRequest</span><br><span class="line">reqPromoteCh    <span class="keyword">chan</span> *accountSet</span><br><span class="line">queueTxEventCh  <span class="keyword">chan</span> *types.Transaction</span><br><span class="line">reorgDoneCh     <span class="keyword">chan</span> <span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line">reorgShutdownCh <span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;  <span class="comment">// requests shutdown of scheduleReorgLoop</span></span><br><span class="line">wg              sync.WaitGroup <span class="comment">// tracks loop, scheduleReorgLoop</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中最核心的是两个字段，pending 和 queue<br><strong>queued 存放未来的、当前无法执行的交易</strong>。以太坊使用 nonce 值决定某个账户的交易顺序，多条交易值 nonce 值必须连续，如果和过去的交易不连续，则无法执行，我们不妨使用 nonce 值，标记交易的号码，nonce 为 10 的交易，称为第 10 号交易。举个例子，当前账户的 nonce 是 10，txpool 中有该账户的第 100 号交易，但 txpool 中没有第 11<del>99 号交易，这些交易的缺失，造成第 100 号交易无法执行，所以第 100 号交易就是未来的交易、不可执行的交易，存放在 queue 中。<br><strong>pending 存放可执行的交易</strong>。比如我们把上面的 11</del>99 号交易补全了，那么 11~100 号交易都可以进入到 pending，因为这些交易都是连续的，都可以打包进区块。<br>当节点收到交易（本地节点发起的或 peer 广播来的）时，会先存放到 queued，txpool 在某些情况下，把 queued 中可执行的交易，转移到 pending 中。<br>其中 config 的结构体为：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// TxPoolConfig are the configuration parameters of the transaction pool.</span></span><br><span class="line"><span class="keyword">type</span> TxPoolConfig <span class="keyword">struct</span> &#123;</span><br><span class="line">Locals    []common.Address <span class="comment">// Addresses that should be treated by default as local</span></span><br><span class="line">NoLocals  <span class="keyword">bool</span>             <span class="comment">// Whether local transaction handling should be disabled</span></span><br><span class="line">Journal   <span class="keyword">string</span>           <span class="comment">// Journal of local transactions to survive node restarts</span></span><br><span class="line">Rejournal time.Duration    <span class="comment">// Time interval to regenerate the local transaction journal</span></span><br><span class="line"></span><br><span class="line">PriceLimit <span class="keyword">uint64</span> <span class="comment">// Minimum gas price to enforce for acceptance into the pool</span></span><br><span class="line">PriceBump  <span class="keyword">uint64</span> <span class="comment">// Minimum price bump percentage to replace an already existing transaction (nonce)</span></span><br><span class="line"></span><br><span class="line">AccountSlots <span class="keyword">uint64</span> <span class="comment">// Number of executable transaction slots guaranteed per account</span></span><br><span class="line">GlobalSlots  <span class="keyword">uint64</span> <span class="comment">// Maximum number of executable transaction slots for all accounts</span></span><br><span class="line">AccountQueue <span class="keyword">uint64</span> <span class="comment">// Maximum number of non-executable transaction slots permitted per account</span></span><br><span class="line">GlobalQueue  <span class="keyword">uint64</span> <span class="comment">// Maximum number of non-executable transaction slots for all accounts</span></span><br><span class="line"></span><br><span class="line">Lifetime time.Duration <span class="comment">// Maximum amount of time non-executable transaction are queued</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Quorum</span></span><br><span class="line">TransactionSizeLimit <span class="keyword">uint64</span> <span class="comment">// Maximum size allowed for valid transaction (in KB)</span></span><br><span class="line">MaxCodeSize          <span class="keyword">uint64</span> <span class="comment">// Maximum size allowed of contract code that can be deployed (in KB)</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> DefaultTxPoolConfig = TxPoolConfig&#123;</span><br><span class="line">Journal:   <span class="string">&quot;transactions.rlp&quot;</span>,</span><br><span class="line">Rejournal: time.Hour,</span><br><span class="line"></span><br><span class="line">PriceLimit: <span class="number">1</span>,</span><br><span class="line">PriceBump:  <span class="number">10</span>,</span><br><span class="line"></span><br><span class="line">AccountSlots: <span class="number">16</span>,</span><br><span class="line">GlobalSlots:  <span class="number">4096</span>,</span><br><span class="line">AccountQueue: <span class="number">64</span>,</span><br><span class="line">GlobalQueue:  <span class="number">1024</span>,</span><br><span class="line"></span><br><span class="line">Lifetime: <span class="number">3</span> * time.Hour,</span><br><span class="line"></span><br><span class="line"><span class="comment">// Quorum</span></span><br><span class="line">TransactionSizeLimit: <span class="number">64</span>,</span><br><span class="line">MaxCodeSize:          <span class="number">24</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Locals: 定义了一组视为 local 交易的账户地址。任何来自此清单的交易均被视为 local 交易。</li><li>NoLocals: 是否禁止 local 交易处理。默认为 fasle,允许 local 交易。如果禁止，则来自 local 的交易均视为 remote 交易处理。</li><li>Journal： 存储 local 交易记录的文件名，默认是./transactions.rlp。</li><li>Rejournal：定期将 local 交易存储文件中的时间间隔。默认为每小时一次。</li><li>PriceLimit： remote 交易进入交易池的最低 Price 要求。此设置对 local 交易无效。默认值 1。</li><li>PriceBump：替换交易时所要求的价格上调涨幅比例最低要求。任何低于要求的替换交易均被拒绝。</li><li>AccountSlots： 当交易池中可执行交易（是已在等待矿工打包的交易）量超标时，允许每个账户可以保留在交易池最低交易数。默认值是 16 笔。</li><li>GlobalSlots： 交易池中所允许的可执行交易量上限，高于上限时将释放部分交易。默认是 4096 笔交易。</li><li>AccountQueue：交易池中单个账户非可执行交易上限，默认是 64 笔。</li><li>GlobalQueue： 交易池中所有非可执行交易上限，默认 1024 笔。</li><li>Lifetime： 允许 remote 的非可执行交易可在交易池存活的最长时间。交易池每分钟检查一次，一旦发现有超期的 remote 账户，则移除该账户下的所有非可执行交易。默认为 3 小时。<blockquote><p>参考：<a href="https://learnblockchain.cn/books/geth/part2/txpool/txpool.html">https://learnblockchain.cn/books/geth/part2/txpool/txpool.html</a></p></blockquote></li></ul><p>上面配置中，包含两个重要概念<strong>可执行交易</strong>和<strong>非可执行交易</strong>。可执行交易是指从交易池中择优选出的一部分交易可以被执行，打包到区块中。非可执行交易则相反，任何刚进入交易池的交易均属于非可执行状态，在某一个时刻才会提升为可执行状态。</p><blockquote><p>这是 dag 的</p></blockquote><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> TxPool <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// The following variables must only be used atomically.</span></span><br><span class="line">lastUpdated <span class="keyword">int64</span> <span class="comment">// last time pool was updated</span></span><br><span class="line"></span><br><span class="line">mtx           sync.RWMutex</span><br><span class="line">cfg           Config</span><br><span class="line">pool          <span class="keyword">map</span>[chainhash.Hash]*TxDesc</span><br><span class="line">orphans       <span class="keyword">map</span>[chainhash.Hash]*orphanTx</span><br><span class="line">orphansByPrev <span class="keyword">map</span>[wire.OutPoint]<span class="keyword">map</span>[chainhash.Hash]*soterutil.Tx</span><br><span class="line">outpoints     <span class="keyword">map</span>[wire.OutPoint]*soterutil.Tx</span><br><span class="line">pennyTotal    <span class="keyword">float64</span> <span class="comment">// exponentially decaying total for penny spends.</span></span><br><span class="line">lastPennyUnix <span class="keyword">int64</span>   <span class="comment">// unix time of last ``penny spend&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// nextExpireScan is the time after which the orphan pool will be</span></span><br><span class="line"><span class="comment">// scanned in order to evict orphans.  This is NOT a hard deadline as</span></span><br><span class="line"><span class="comment">// the scan will only run when an orphan is added to the pool as opposed</span></span><br><span class="line"><span class="comment">// to on an unconditional timer.</span></span><br><span class="line">nextExpireScan time.Time</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>交易提交到交易池还需要一个 add 函数，逻辑很简单：</p><ol><li>验证交易的有效性</li><li>如果 nonce 已存在，忽略。</li><li>如果 nonce 不存在，不可以替换 pending 中的任何交易，此时将新的交易插入 queue 的末尾</li></ol><p>注：交易中的 nonce 指的是 from 账户发出交易的次数, 从 0 开始递增，同一账户的交易会被依次确认，所以同一个 nonce 代表是同一个交易，会优先选择 price 更高的交易。</p><blockquote><p>这是我们的</p></blockquote><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> TxPool <span class="keyword">struct</span> &#123;</span><br><span class="line">    mtx           sync.RWMutex</span><br><span class="line">    config      TxPoolConfig</span><br><span class="line">    currentState  *state.StateDB <span class="comment">// 区块的当前状态</span></span><br><span class="line">    locals  *accountSet <span class="comment">//本地交易</span></span><br><span class="line">    journal *txJournal  <span class="comment">//  用于存储local交易记录的文件</span></span><br><span class="line"></span><br><span class="line">pending <span class="keyword">map</span>[common.Address]*txList   <span class="comment">// 存放可执行的交易</span></span><br><span class="line">queue   <span class="keyword">map</span>[common.Address]*txList   <span class="comment">// queued存放未来的、当前无法执行的交易</span></span><br><span class="line"></span><br><span class="line">    chainHeadSub    event.Subscription<span class="comment">//用于订阅区块</span></span><br><span class="line">    reqPromoteCh    <span class="keyword">chan</span> *accountSet<span class="comment">//账户集合</span></span><br><span class="line">queueTxEventCh  <span class="keyword">chan</span> *dag.Tx<span class="comment">//Tx队列事件</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> TxPoolConfig <span class="keyword">struct</span> &#123;</span><br><span class="line">Locals    []common.Address</span><br><span class="line">Journal   <span class="keyword">string</span></span><br><span class="line">Rejournal time.Duration</span><br><span class="line"></span><br><span class="line">AccountSlots <span class="keyword">uint64</span></span><br><span class="line">GlobalSlots  <span class="keyword">uint64</span></span><br><span class="line">AccountQueue <span class="keyword">uint64</span></span><br><span class="line">GlobalQueue  <span class="keyword">uint64</span></span><br><span class="line"></span><br><span class="line">Lifetime time.Duration</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> DefaultTxPoolConfig = TxPoolConfig&#123;</span><br><span class="line">Journal:   <span class="string">&quot;transactions.rlp&quot;</span>,</span><br><span class="line">Rejournal: time.Hour,</span><br><span class="line"></span><br><span class="line">AccountSlots: <span class="number">16</span>,</span><br><span class="line">GlobalSlots:  <span class="number">8192</span>,</span><br><span class="line">AccountQueue: <span class="number">64</span>,</span><br><span class="line">GlobalQueue:  <span class="number">1024</span>,</span><br><span class="line"></span><br><span class="line">Lifetime: <span class="number">3</span> * time.Hour,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当节点收到交易（本地节点发起的或 peer 广播来的）时，会先存放到 queued，txpool 在某些情况下，把 queued 中可执行的交易，转移到 pending 中。</p><ul><li>Locals: 定义了一组视为 local 交易的账户地址。任何来自此清单的交易均被视为 local 交易。</li><li>Journal： 存储 local 交易记录的文件名，默认是./transactions.rlp。</li><li>Rejournal：定期将 local 交易存储文件中的时间间隔。默认为每小时一次。</li><li>AccountSlots： 当交易池中可执行交易（是已在等待矿工打包的交易）量超标时，允许每个账户可以保留在交易池最低交易数。默认值是 16 笔。</li><li>GlobalSlots： 交易池中所允许的可执行交易量上限，高于上限时将释放部分交易。默认是 8192 笔交易。</li><li>AccountQueue：交易池中单个账户非可执行交易上限，默认是 64 笔。</li><li>GlobalQueue： 交易池中所有非可执行交易上限，默认 1024 笔。</li><li>Lifetime： 允许 remote 的非可执行交易可在交易池存活的最长时间。交易池每分钟检查一次，一旦发现有超期的 remote 账户，则移除该账户下的所有非可执行交易。默认为 3 小时。</li></ul><h2 id="链状态"><a href="#链状态" class="headerlink" title="链状态"></a>链状态</h2><p>在交易池启动后，将订阅链的区块头事件：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//core/tx_pool.go:274</span></span><br><span class="line">pool.chainHeadSub = pool.chain.SubscribeChainHeadEvent(pool.chainHeadCh)</span><br></pre></td></tr></table></figure><p>并开始监听新事件：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//core/tx_pool.go:305</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">   <span class="keyword">select</span> &#123;</span><br><span class="line">   <span class="comment">// Handle ChainHeadEvent</span></span><br><span class="line">   <span class="keyword">case</span> ev := &lt;-pool.chainHeadCh:</span><br><span class="line">      <span class="keyword">if</span> ev.Block != <span class="literal">nil</span> &#123;</span><br><span class="line">         pool.mu.Lock()</span><br><span class="line">         <span class="keyword">if</span> pool.chainconfig.IsHomestead(ev.Block.Number()) &#123;</span><br><span class="line">            pool.homestead = <span class="literal">true</span></span><br><span class="line">         &#125;</span><br><span class="line">         pool.reset(head.Header(), ev.Block.Header())</span><br><span class="line">         head = ev.Block</span><br><span class="line"></span><br><span class="line">         pool.mu.Unlock()</span><br><span class="line">      &#125;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接收到事件后，将执行 func (pool *TxPool) reset(oldHead, newHead *types.Header)方法更新 state 和处理交易。核心是将交易池中已经不符合要求的交易删除并更新整理交易</p><h2 id="本地交易"><a href="#本地交易" class="headerlink" title="本地交易"></a>本地交易</h2><p>在交易池中将交易标记为 local 的有多种用途：</p><ol><li>在本地磁盘存储已发送的交易。这样，本地交易不会丢失，重启节点时可以重新加载到交易池，实时广播出去。</li><li>可以作为外部程序和以太坊沟通的一个渠道。外部程序只需要监听文件内容变化，则可以获得交易清单。</li><li>local 交易可优先于 remote 交易。对交易量的限制等操作，不影响 local 下的账户和交易。</li></ol><p>对应本地交易存储，在启动交易池时根据配置开启本地交易存储能力：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//core/tx_pool.go:264</span></span><br><span class="line"><span class="keyword">if</span> !config.NoLocals &amp;&amp; config.Journal != <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">pool.journal = newTxJournal(config.Journal)</span><br><span class="line"><span class="keyword">if</span> err := pool.journal.load(pool.AddLocals); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Warn(<span class="string">&quot;Failed to load transaction journal&quot;</span>, <span class="string">&quot;err&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>并从磁盘中加载已有交易到交易池。在新的 local 交易进入交易池时，将被实时写入 journal 文件。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// core/tx_pool.go:757</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(pool *TxPool)</span> <span class="title">journalTx</span><span class="params">(from common.Address, tx *types.Transaction)</span></span> &#123;</span><br><span class="line">   <span class="keyword">if</span> pool.journal == <span class="literal">nil</span> || !pool.locals.contains(from) &#123;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span> err := pool.journal.insert(tx); err != <span class="literal">nil</span> &#123;</span><br><span class="line">      log.Warn(<span class="string">&quot;Failed to journal local transaction&quot;</span>, <span class="string">&quot;err&quot;</span>, err)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上可看到，<strong>只有属于 local 账户的交易才会被记录</strong>。你又没有注意到，如果仅仅是这样的话，journal 文件是否会跟随本地交易而无限增长？答案是否定的，<strong>虽然无法实时从 journal 中移除交易。但是支持定期更新 journal 文件</strong>。<br><strong>journal 并不是保存所有的本地交易以及历史</strong>，他<strong>仅仅是存储当前交易池中存在的本地交易</strong>。因此交易池会定期对 journal 文件执行 rotate，将交易池中的本地交易写入 journal 文件，并丢弃旧数据。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">journal := time.NewTicker(pool.config.Rejournal)</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="comment">//core/tx_pool.go:353</span></span><br><span class="line"><span class="keyword">case</span> &lt;-journal.C:</span><br><span class="line"><span class="keyword">if</span> pool.journal != <span class="literal">nil</span> &#123;</span><br><span class="line">pool.mu.Lock()</span><br><span class="line"><span class="keyword">if</span> err := pool.journal.rotate(pool.local()); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Warn(<span class="string">&quot;Failed to rotate local tx journal&quot;</span>, <span class="string">&quot;err&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">pool.mu.Unlock()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="新交易信号"><a href="#新交易信号" class="headerlink" title="新交易信号"></a>新交易信号</h2><p>文章开头，有提到<strong>进入交易池的交易将被广播到网络</strong>中。这<strong>是依赖于交易池支持外部订阅新交易事件信号</strong>。任何<strong>订阅此事件的子模块</strong>，在交易池出现新的可执行交易时，均可实时接受到此事件通知，并获得新交易信息。</p><blockquote><p>需要注意的是并非所有进入交易池的交易均被通知外部，而是只有交易从非可执行状态变成可执行状态后才会发送信号。</p></blockquote><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//core/tx_pool.go:705</span></span><br><span class="line"><span class="keyword">go</span> pool.txFeed.Send(NewTxsEvent&#123;types.Transactions&#123;tx&#125;&#125;)</span><br><span class="line"><span class="comment">//core/tx_pool.go:1022</span></span><br><span class="line"><span class="keyword">go</span> pool.txFeed.Send(NewTxsEvent&#123;promoted&#125;)</span><br></pre></td></tr></table></figure><p>在交易池中，有两处地方才会执行发送信号。<br>一是<strong>交易时用于替换已经存在的可执行交易</strong>时。<br>二是有<strong>新的一批交易从非可执行状态提升到可执行状态后</strong>。<br>外部只需要订阅 SubscribeNewTxsEvent(ch chan&lt;- NewTxsEvent)新可执行交易事件，则可实时接受交易。<br>在 geth 中网络层将<strong>订阅交易事件</strong>，以便实时广播。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//eth/handler.go:213</span></span><br><span class="line">pm.txsCh = <span class="built_in">make</span>(<span class="keyword">chan</span> core.NewTxsEvent, txChanSize)</span><br><span class="line">pm.txsSub = pm.txpool.SubscribeNewTxsEvent(pm.txsCh)</span><br><span class="line"><span class="comment">//eth/handler.go:781</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(pm *ProtocolManager)</span> <span class="title">txBroadcastLoop</span><span class="params">()</span></span> &#123;</span><br><span class="line">   <span class="keyword">for</span> &#123;</span><br><span class="line">      <span class="keyword">select</span> &#123;</span><br><span class="line">      <span class="keyword">case</span> event := &lt;-pm.txsCh:</span><br><span class="line">         pm.BroadcastTxs(event.Txs)</span><br><span class="line">      <span class="comment">//...</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另外是矿工实时订阅交易，以便将交易打包到区块中。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//miner/worker.go:207</span></span><br><span class="line">worker.txsSub = eth.TxPool().SubscribeNewTxsEvent(worker.txsCh)</span><br><span class="line"><span class="comment">//miner/worker.go:462</span></span><br><span class="line">txs := <span class="built_in">make</span>(<span class="keyword">map</span>[common.Address]types.Transactions)</span><br><span class="line"><span class="keyword">for</span> _, tx := <span class="keyword">range</span> ev.Txs &#123;</span><br><span class="line">acc, _ := types.Sender(w.current.signer, tx)</span><br><span class="line">   txs[acc] = <span class="built_in">append</span>(txs[acc], tx)</span><br><span class="line">&#125;</span><br><span class="line">txset := types.NewTransactionsByPriceAndNonce(w.current.signer, txs)</span><br><span class="line">w.commitTransactions(txset, coinbase, <span class="literal">nil</span>)</span><br></pre></td></tr></table></figure><h1 id="清理交易池"><a href="#清理交易池" class="headerlink" title="清理交易池"></a>清理交易池</h1><p>交易池是完全存在内存中的，因此有大小限制，每当超过一定的阈值就需要清理。实际实现时，pending 的缓冲区容量默认为 4096，queue 的缓冲区容量默认为 1024。<br>清理的时机是交易池满的时候，清理的原则是价格较低的最先清理</p><blockquote><p>但是本项目没有设计要清理交易池</p></blockquote><h1 id="惩罚恶意账号"><a href="#惩罚恶意账号" class="headerlink" title="惩罚恶意账号"></a>惩罚恶意账号</h1><p>这也是 txpool 很重要的一个属性，可以防止恶意账户以发起大量垃圾交易。防止恶意用户造成：</p><ol><li>占用 txpool 空间</li><li>浪费节点大量内存和 CPU</li><li>降低打包性能</li></ol><p>** 只有当交易的总数量超过缓冲区大小时，txpool 才会认为有恶意账户发起大量交易。**pending 和 queued 缓冲区大小不同，但处理策略类似：</p><ol><li>pending 的缓冲区容量是 4096，当 pending 的交易数量多于此时，就会运行检查，每个账号的交易数量是否多于 16，把这些账号搜集出来，进行循环依次清理，什么意思呢？就是每轮只删除（移动到 queued）这些账号的每个账号 1 条交易，然后看数量是否降下来了，不满足再进行下一轮，直到满足。</li><li>queued 的缓冲区容量是 1024，超过之后清理策略和 pending 差不多，但这里可是真删除了。</li></ol><p>该部分功能未抽象成单独的函数，而是在 promoteExecutables()中，就是在每次把 queued 交易转移到 pending 后执行的。<br><strong>本地交易的特权</strong>，txpool 虽然对交易有诸多限制，但如果交易是本节点的账号发起的，以上数量限制等都对他无效。所以，如果你用本节点账号不停的发送交易，并不会被认为是攻击者</p><h1 id="回答问题"><a href="#回答问题" class="headerlink" title="回答问题"></a>回答问题</h1><ol><li>用户发起的交易请求（不论以何种方式）是如何转变为实际的交易的；</li></ol><p>所有与交易请求相关的参数被赋值到一个结构体中，然后进行序列化转变为可存储和传输的形式，最后生成交易并进行签名</p><ol start="2"><li>产生的交易如果不能被及时处理，是如何进入交易池的？</li></ol><p>最终是调用一个 add 函数，添加到了一个队列里</p><ol start="3"><li>本地产生的交易和从网络中接收到的交易进入交易池是否有区别？</li></ol><p>有区别，底层都是调用 add 函数</p><ol start="4"><li>交易池的基本数据结构是怎么样的（优先队列？）</li></ol><p>交易池是一个结构体，核心是 pending 和 queue 两个 map，map 的键是一个地址，值是一个交易链表形成的队列</p><ol start="5"><li>从交易池中提取交易进行打包时顺序是怎么样的（调度算法）</li></ol><p>本地优先级大于远程交易</p><p>我们可以理解为区块链底层利用交易池对并发产生的请求做了<strong>异步化</strong>，<strong>交易产生的时刻</strong>和<strong>交易被打包的时刻</strong>是<strong>随机</strong>的。</p><blockquote><p>在实现 TXpool 的时候为了保证数据的一致性会使用大量的锁</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;既然要从头搭建一个区块链网络，交易池是绕不开的一个核心底层。对于它，以下几个问题是需要解决的：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;用户发起的交易请求（不论以何种方式）是如何转变为实际的交易的；&lt;/li&gt;
&lt;li&gt;产生的交易如果不能被及时处理，是如何进入交易池的；&lt;/li&gt;
&lt;li&gt;本地产生的交易和从网络中接收到的交易进入交易池是否有区别；&lt;/li&gt;
&lt;li&gt;交易池的基本数据结构是怎么样的（优先队列？）&lt;/li&gt;
&lt;li&gt;从交易池中提取交易进行打包时顺序是怎么样的（调度算法）&lt;blockquote&gt;
&lt;p&gt;网络中很多文章提到内存池，指的就是是 txpool&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Life-Weekly-April-12-to-18</title>
    <link href="https://www.blog.hackerjerry.top/2021/04/15/Life-Weekly-April-12-to-18_new/"/>
    <id>https://www.blog.hackerjerry.top/2021/04/15/Life-Weekly-April-12-to-18_new/</id>
    <published>2021-04-15T11:14:09.000Z</published>
    <updated>2021-05-06T13:04:00.929Z</updated>
    
    <content type="html"><![CDATA[<h1 id="时讯"><a href="#时讯" class="headerlink" title="时讯"></a>时讯</h1><ol><li>日本宣布将把福岛核废水排放入海，还恬不知耻的推出了一个“氚”的吉祥物。</li><li>中科大夏令营开始接收报名。</li></ol><h1 id="小事"><a href="#小事" class="headerlink" title="小事"></a>小事</h1><ol><li>无聊的时候（吃完饭）给自己测了一下十六型人格，结果是“守卫者 ISFJ-A”，看了一下这个结果其实是比较准确的。</li></ol><p><img src= "/img/loading.gif" data-lazy-src="https://image.hackerjerry.top/Life-Weekly-April-12-to-18-1.png#clientId=ud3d92086-9aed-4&from=paste&height=341&id=ue2cb8370&margin=%5Bobject%20Object%5D&originHeight=804&originWidth=890&originalType=binary&size=46588&status=done&style=none&taskId=ud08b7ea8-50e0-4be0-846f-ac42bda13b9&width=377"><br>根据报告，守卫者人格在群体中所占比重最大，为 13%，不过我记得之前也做过这个测试，但是忘记结果了，我记得自己截了图，但是怎么也找不到，也不知道发到哪个平台了。<br>不过它描述的和我的人格真的非常像，摘抄一点：</p><blockquote><p><em>“守卫者”是真正的利他主义者，非常善良，对相信的人和事物慷慨而富有激情。</em></p></blockquote><p>这种人格类型的人（尤其是性格不安定的那一部分）经常<strong>一丝不苟到完美主义</strong>的程度，虽然他们<strong>有拖延的习惯</strong>，但他们总能<strong>可靠地按时完成工作</strong>。 守卫者人格类型的人重视自己的责任，时刻<strong>尽最大努力超出预期</strong>地让别人满意，无论在家庭还是工作中。<br><strong>天生喜欢社交</strong>是内向者身上少见的特点，“守卫者”们不会把出色的记忆力用在数据和琐事上，而是<strong>记住人和他们生活中的细节</strong>。 他们最<strong>擅长赠送礼物</strong>，他们<strong>天生富有想象力</strong>且<strong>感情细腻</strong>，他们的礼物可以送到接收者的心坎里。 对于被“守卫者”们当作朋友的同事们来说是这样，而在家庭里守卫者们会<strong>尽情表达爱意</strong>。<br><strong>弱点：</strong></p><ol><li>谦卑和害羞</li><li>压抑他们的感情</li><li>他们强烈的责任感和完美主义，加上这种对情感冲突的厌恶，造成了一种情况，即捍卫者太容易超载自己</li><li>太利他主义了，他们的麻烦却在无人协助的情况下增加。</li></ol><p>恋爱：</p><ol><li>守卫者花费大量时间和精力寻找让伴侣保持关系满意的方法。</li><li>作为回报，他们要求的就是承诺、爱，也许最重要的是欣赏。</li></ol><h1 id="本周收藏"><a href="#本周收藏" class="headerlink" title="本周收藏"></a>本周收藏</h1><h2 id="文章"><a href="#文章" class="headerlink" title="文章"></a>文章</h2><p>看到了哪些好文？</p><ol><li><a href="https://mp.weixin.qq.com/s/aj6LKXdAekoFCoSrpEwbAQ">攻破 GitHub 私有页面</a></li></ol><p>利用一个前缀绕过进行 XSS，利用缓存投毒进行认证流的持久化破坏。</p><ol start="2"><li><a href="https://mp.weixin.qq.com/s/k1ZRhTmNMgfaLCqniBmuNA">一篇有参考意义的产品 PPT 制作</a></li></ol><p><img src= "/img/loading.gif" data-lazy-src="https://image.hackerjerry.top/Life-Weekly-April-12-to-18-2.png#clientId=u49d79466-a36b-4&from=paste&height=239&id=uebef2f08&margin=%5Bobject%20Object%5D&originHeight=478&originWidth=852&originalType=binary&size=426622&status=done&style=none&taskId=ue23c0b44-6f1e-4c86-90c5-b20e1e6bff1&width=426"></p><ol start="3"><li><a href="https://mp.weixin.qq.com/s/__-d28S1X6CfpgiB3TwrTw">一位博士学长在大厂做安全算法工程师的感悟</a></li><li><a href="https://mp.weixin.qq.com/s/wDMcm4Q_waE3twkI-oajYg">基于机器学习的 Web 应用入侵威胁检测</a></li></ol><p><img src= "/img/loading.gif" data-lazy-src="https://image.hackerjerry.top/Life-Weekly-April-12-to-18-3.png#clientId=u49d79466-a36b-4&from=paste&height=427&id=u7c7b4016&margin=%5Bobject%20Object%5D&originHeight=854&originWidth=338&originalType=binary&size=44182&status=done&style=none&taskId=u3fa9a8b8-057c-4d41-9333-36f34a4d393&width=169"></p><ol start="5"><li><a href="https://mp.weixin.qq.com/s/fqYbyKKAXCrR8ooE_jNFdA">一篇对于处理多文字的 PPT 范例</a></li></ol><p><img src= "/img/loading.gif" data-lazy-src="https://image.hackerjerry.top/Life-Weekly-April-12-to-18-4.png#clientId=u49d79466-a36b-4&from=paste&height=401&id=uaedf9eeb&margin=%5Bobject%20Object%5D&originHeight=479&originWidth=851&originalType=binary&size=550925&status=done&style=none&taskId=ueb2143a6-5ef6-475a-aaf5-e9d206c1886&width=712.5"></p><ol start="6"><li><a href="https://mp.weixin.qq.com/s/elKxcNiwW14ceJOWiek2Ww">一篇关于毛玻璃效果的 PPT</a></li></ol><p><img src= "/img/loading.gif" data-lazy-src="https://image.hackerjerry.top/Life-Weekly-April-12-to-18-5.png#clientId=u49d79466-a36b-4&from=paste&height=242&id=ub988f9f1&margin=%5Bobject%20Object%5D&originHeight=483&originWidth=862&originalType=binary&size=179871&status=done&style=none&taskId=u45a7c337-9928-4762-93a2-20bb7020f3b&width=431"><br><img src= "/img/loading.gif" data-lazy-src="https://image.hackerjerry.top/Life-Weekly-April-12-to-18-6.png#clientId=u49d79466-a36b-4&from=paste&height=241&id=u603599ae&margin=%5Bobject%20Object%5D&originHeight=482&originWidth=848&originalType=binary&size=311473&status=done&style=none&taskId=uf73bcf00-d57c-4f2a-9c25-5d3b17036a9&width=424"><br><img src= "/img/loading.gif" data-lazy-src="https://image.hackerjerry.top/Life-Weekly-April-12-to-18-7.png#clientId=u49d79466-a36b-4&from=paste&height=212&id=u907476e8&margin=%5Bobject%20Object%5D&originHeight=424&originWidth=854&originalType=binary&size=507600&status=done&style=none&taskId=u4abc5901-834f-464a-9dcd-5c065781745&width=427"></p><h2 id="剧集"><a href="#剧集" class="headerlink" title="剧集"></a>剧集</h2><ol><li>《人潮汹涌》</li></ol><p>刘德华和肖央出演的一部本土改编剧，情节和原著有了一些变动，也很有趣。不过戏剧性冲突比韩国的原片还是要差一点，那个曾九蓉更是看的我云里雾里的，没看懂她存在的意义。笑点是比不上原著的，毕竟刘德华太帅了，很难表现出原著中“丑杀手”的一些搞笑的地方。 2.《 伍六七》第七集<br>伍六七终于到玄武国了，但是这都第七集了！！！一共就十集看个寂寞，估计这一季他连掌门的影子都见不到，还又挖了一堆坑，又是可乐，又是悬赏令，又是陈年旧账，何导可以的啊！！</p><h2 id="摘录"><a href="#摘录" class="headerlink" title="摘录"></a>摘录</h2><ol><li>踏实一点，不要着急，你想要的岁月都会给你。</li><li>寂寞会发慌，孤独则是饱满的。–蒋勋</li><li>人间忽晚，山河已秋。</li></ol><h2 id="知识"><a href="#知识" class="headerlink" title="知识"></a>知识</h2><ol><li>面试的技巧–见 flomo</li></ol><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><ol><li>从朋友圈看到的：如果有人一开始就对你表示出超乎寻常的喜爱，那么他也一定会在某天返给你极其的恨意。他心里曾经爱慕的和现在痛恨的，都和你没有关系，那只是他的想象。很有道理，值得反复思考和践行。</li><li>毛姆的《巨匠与杰作》中有这样一段话：<strong>不对别人期待太多</strong>，从一开始就应该认识到，每个人的主要兴趣都是他自身；无论在哪方面，付出才有回报，不管是地位、财富、荣誉、爱情，皆为如此。而且所谓智慧，很大程度上是，<strong>对某个事物的付出不要超出其真正价值</strong>。</li></ol><p>由于平时（白天）交流较少，经常性出现情感溢出的现象，即对特定的人付出超过其身份的感情，但依旧很难表现出来，就这样憋在心里，造成不必要的情绪波动。需要改正。</p><ol start="3"><li>“你的心意过头了，反而会让人为难。”敲不开的门，一直敲是不礼貌的。感情中尤为如此，本就是你情我愿，遇见了，感谢，错过了，坦然。毕竟离开是常态，彼此喜欢是上天恩赐。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;时讯&quot;&gt;&lt;a href=&quot;#时讯&quot; class=&quot;headerlink&quot; title=&quot;时讯&quot;&gt;&lt;/a&gt;时讯&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;日本宣布将把福岛核废水排放入海，还恬不知耻的推出了一个“氚”的吉祥物。&lt;/li&gt;
&lt;li&gt;中科大夏令营开始接收报名。&lt;/li&gt;
</summary>
      
    
    
    
    <category term="周报" scheme="https://www.blog.hackerjerry.top/categories/%E5%91%A8%E6%8A%A5/"/>
    
    
    <category term="周报" scheme="https://www.blog.hackerjerry.top/tags/%E5%91%A8%E6%8A%A5/"/>
    
  </entry>
  
  <entry>
    <title>Basic-scientific-research-series-1-Pseudo-code-specifications</title>
    <link href="https://www.blog.hackerjerry.top/2021/04/15/Basic-scientific-research-series-1-Pseudo-code-specifications_new/"/>
    <id>https://www.blog.hackerjerry.top/2021/04/15/Basic-scientific-research-series-1-Pseudo-code-specifications_new/</id>
    <published>2021-04-15T09:21:58.000Z</published>
    <updated>2021-05-06T13:04:16.969Z</updated>
    
    <content type="html"><![CDATA[<p>记录一下科研论文中的伪代码。<br>转自：<a href="https://shuzang.github.io/2021/pseudocode-specification/">https://shuzang.github.io/2021/pseudocode-specification/</a></p><a id="more"></a><h2 id="伪代码规范"><a href="#伪代码规范" class="headerlink" title="伪代码规范"></a>伪代码规范</h2><p>伪代码是一种接近自然语言的算法描述形式，其目的是在不涉及具体实现（各种编程语言）的情况下将算法的流程和含义清楚的表达出来，因此它没有一个统一的规范，有的仅仅是在长期的实践过程中形成的一些约定俗成的表达样式。下图是一个简单的例子<a href="https://shuzang.github.io/2021/pseudocode-specification/#fn:1">1</a>，但已经包含了大多数主要元素<br><img src= "/img/loading.gif" data-lazy-src="https://image.hackerjerry.top/Basic-scientific-research-series-1-Pseudo-code-specifications-1.png#clientId=u7f037a6a-77db-4&from=paste&height=380&id=u70552d91&margin=%5Bobject%20Object%5D&originHeight=759&originWidth=668&originalType=url&status=done&style=none&taskId=uef2d862d-a2fb-4d0c-9f58-61f5f43f3ea&width=334"><br>首先需要一个<strong>标题</strong>来描述整个算法，一般还会有一个与之一起的编号。在上图中，算法的标题为「Acesscontrol algorithm flow」，编号为「Algorithm 1」。标题与编号一般位于算法顶部，但也有人放在底部，编号多按全文的算法总数进行索引，但也可以按章节分别进行索引。<br>其次，在正式的算法流之前需要声明<strong>输入和输出</strong>。通常使用关键字 Input 和 Output 来声明，但也有人使用关键字 Data 和 Result。<br>顺序、选择与循环结构是算法的主体。通常，不同的程序块使用缩进来保持结构清晰，但也有不少人使用垂直连接线进行进一步划分，如上图。另外，和编程语言类似，伪代码中的选择和循环使用 if-then-else、while-do 和 for-do 等关键字和结构来描述<a href="https://shuzang.github.io/2021/pseudocode-specification/#fn:2">2</a>，举例如下，其中，每个程序块结束的 end 关键字有人选择写，也有人选择不写。<br><img src= "/img/loading.gif" data-lazy-src="https://image.hackerjerry.top/Basic-scientific-research-series-1-Pseudo-code-specifications-2.png#clientId=u7f037a6a-77db-4&from=paste&height=461&id=u980d4514&margin=%5Bobject%20Object%5D&originHeight=922&originWidth=1121&originalType=url&status=done&style=none&taskId=uebf9d8c3-b7d5-4640-bb35-d608225f8f0&width=560.5"><br>算法流程结构<br>赋值操作一般使用左箭头「&lt;—」表示。A[i] 用来表示数组 A 的第 i 个元素，A[1…j] 则表示下标从 1 到 j 的子数组；函数调用使用函数名+传入参数的形式；返回值使用 return 关键字，这些都和常规编程语言相同。需要注意的是，未声明而使用的变量都可以视为算法内的局部变量，如果是全局变量则需要进行解释，可以在上下文中，也可以使用注释；注释的形式也和传统语言相同，使用 // 或 /<em>……</em>/。<br>算法整体通常使用三线框包围，但也有少部分人使用一个完整的框。<br>伪代码的语句一般不需要在末尾使用分号，但行首通常会添加行号。</p><h2 id="2-LaTeX-包"><a href="#2-LaTeX-包" class="headerlink" title="2. LaTeX 包"></a>2. LaTeX 包</h2><p>latex 书写伪代码主要有三种排版格式：algorithm+algorithmic、algorithm+algorithmicx 以及 algorithm2e<a href="https://shuzang.github.io/2021/pseudocode-specification/#fn:3">3</a>。我们使用<a href="https://www.ctan.org/pkg/algorithm2e">algorithm2e</a>，它提供了垂直连接线，可以去掉 end 关键字，而且写起来更像编程语言，用着非常舒服。<br>引入 algorithm2e 包使用如下语句</p><figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="tag">\<span class="name">usepackage</span><span class="string">[options]</span><span class="string">&#123;algorithm2e&#125;</span></span></span><br></pre></td></tr></table></figure><p>几个重要的 options 如下</p><ol><li>ruled：让标题显示在上面，默认会显示到最下面；</li><li>vlined：默认启用垂直连接线；</li><li>linesnumbered：让算法显示行号，不包括 input 和 output 部分；</li><li>noend：程序块结束不打印 end。</li></ol><p>常用命令如下<a href="https://shuzang.github.io/2021/pseudocode-specification/#fn:4">4</a><br><img src= "/img/loading.gif" data-lazy-src="https://image.hackerjerry.top/Basic-scientific-research-series-1-Pseudo-code-specifications-3.png#clientId=u7f037a6a-77db-4&from=paste&height=372&id=u452ff8fa&margin=%5Bobject%20Object%5D&originHeight=743&originWidth=974&originalType=binary&size=52982&status=done&style=none&taskId=u7814261f-55f6-48b7-b9ab-bede03ce98b&width=487"><br>一个官方的例子如下</p><figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="tag">\<span class="name">begin</span><span class="string">&#123;algorithm&#125;</span></span></span><br><span class="line"><span class="tag">\<span class="name">SetKwData</span><span class="string">&#123;Left&#125;</span><span class="string">&#123;left&#125;</span></span><span class="tag">\<span class="name">SetKwData</span><span class="string">&#123;This&#125;</span><span class="string">&#123;this&#125;</span></span><span class="tag">\<span class="name">SetKwData</span><span class="string">&#123;Up&#125;</span><span class="string">&#123;up&#125;</span></span></span><br><span class="line"><span class="tag">\<span class="name">SetKwFunction</span><span class="string">&#123;Union&#125;</span><span class="string">&#123;Union&#125;</span></span><span class="tag">\<span class="name">SetKwFunction</span><span class="string">&#123;FindCompress&#125;</span><span class="string">&#123;FindCompress&#125;</span></span></span><br><span class="line"><span class="tag">\<span class="name">SetKwInOut</span><span class="string">&#123;Input&#125;</span><span class="string">&#123;input&#125;</span></span><span class="tag">\<span class="name">SetKwInOut</span><span class="string">&#123;Output&#125;</span><span class="string">&#123;output&#125;</span></span></span><br><span class="line"></span><br><span class="line"><span class="tag">\<span class="name">Input</span><span class="string">&#123;A bitmap $Im$ of size $w\times l$&#125;</span></span></span><br><span class="line"><span class="tag">\<span class="name">Output</span><span class="string">&#123;A partition of the bitmap&#125;</span></span></span><br><span class="line"><span class="tag">\<span class="name">BlankLine</span></span></span><br><span class="line"><span class="tag">\<span class="name">emph</span><span class="string">&#123;special treatment of the first line&#125;</span></span><span class="tag">\<span class="name">;</span></span></span><br><span class="line"><span class="tag">\<span class="name">For</span><span class="string">&#123;$i\leftarrow 2$ \KwTo $l$&#125;</span><span class="string">&#123;</span></span></span><br><span class="line"><span class="tag"><span class="string">\emph&#123;special treatment of the first element of line $i$&#125;</span></span><span class="tag">\<span class="name">;</span></span></span><br><span class="line"><span class="tag">\<span class="name">For</span><span class="string">&#123;$j\leftarrow 2$ \KwTo $w$&#125;</span><span class="string">&#123;\label&#123;forins&#125;</span></span></span><br><span class="line"><span class="tag">\<span class="name">Left</span></span><span class="formula">$<span class="tag">\<span class="name">leftarrow</span></span>$</span> <span class="tag">\<span class="name">FindCompress</span><span class="string">&#123;$Im[i,j-1]$&#125;</span></span><span class="tag">\<span class="name">;</span></span></span><br><span class="line"><span class="tag">\<span class="name">Up</span></span><span class="formula">$<span class="tag">\<span class="name">leftarrow</span></span>$</span> <span class="tag">\<span class="name">FindCompress</span><span class="string">&#123;$Im[i-1,]$&#125;</span></span><span class="tag">\<span class="name">;</span></span></span><br><span class="line"><span class="tag">\<span class="name">This</span></span><span class="formula">$<span class="tag">\<span class="name">leftarrow</span></span>$</span> <span class="tag">\<span class="name">FindCompress</span><span class="string">&#123;$Im[i,j]$&#125;</span></span><span class="tag">\<span class="name">;</span></span></span><br><span class="line"><span class="tag">\<span class="name">If</span></span>(<span class="tag">\<span class="name">tcp*</span><span class="string">[h]</span><span class="string">&#123;O(\Left,\This)==1&#125;</span></span>)&#123;<span class="tag">\<span class="name">Left</span></span> compatible with <span class="tag">\<span class="name">This</span></span>&#125;&#123;<span class="tag">\<span class="name">label</span><span class="string">&#123;lt&#125;</span></span></span><br><span class="line"><span class="tag">\<span class="name">lIf</span><span class="string">&#123;\Left $&lt;$ \This&#125;</span><span class="string">&#123;\Union&#123;\Left,\This&#125;</span></span>&#125;</span><br><span class="line"><span class="tag">\<span class="name">lElse</span><span class="string">&#123;\Union&#123;\This,\Left&#125;</span></span>&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">\<span class="name">If</span></span>(<span class="tag">\<span class="name">tcp*</span><span class="string">[f]</span><span class="string">&#123;O(\Up,\This)==1&#125;</span></span>)&#123;<span class="tag">\<span class="name">Up</span></span> compatible with <span class="tag">\<span class="name">This</span></span>&#125;&#123;<span class="tag">\<span class="name">label</span><span class="string">&#123;ut&#125;</span></span></span><br><span class="line"><span class="tag">\<span class="name">lIf</span><span class="string">&#123;\Up $&lt;$ \This&#125;</span><span class="string">&#123;\Union&#123;\Up,\This&#125;</span></span>&#125;</span><br><span class="line"><span class="tag">\<span class="name">tcp</span><span class="string">&#123;\This is put under \Up to keep tree as flat as possible&#125;</span></span><span class="tag">\<span class="name">label</span><span class="string">&#123;cmt&#125;</span></span></span><br><span class="line"><span class="tag">\<span class="name">lElse</span><span class="string">&#123;\Union&#123;\This,\Up&#125;</span></span>&#125;<span class="tag">\<span class="name">tcp*</span><span class="string">[h]</span><span class="string">&#123;\This linked to \Up&#125;</span></span><span class="tag">\<span class="name">label</span><span class="string">&#123;lelse&#125;</span></span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">\<span class="name">lForEach</span><span class="string">&#123;element $e$ of the line $i$&#125;</span><span class="string">&#123;\FindCompress&#123;p&#125;</span></span>&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">\<span class="name">caption</span><span class="string">&#123;disjoint decomposition&#125;</span></span><span class="tag">\<span class="name">label</span><span class="string">&#123;algo_disjdecomp&#125;</span></span></span><br><span class="line"><span class="tag">\<span class="name">end</span><span class="string">&#123;algorithm&#125;</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>渲染后的样式如下<br><img src= "/img/loading.gif" data-lazy-src="https://image.hackerjerry.top/Basic-scientific-research-series-1-Pseudo-code-specifications-4.png#clientId=u7f037a6a-77db-4&from=paste&height=310&id=u6b501371&margin=%5Bobject%20Object%5D&originHeight=619&originWidth=911&originalType=url&status=done&style=none&taskId=u55db2441-adb1-4199-95e7-79ec5ef27e2&width=455.5"><br>注：当前算法选然后条件语句会带有下划线，主要是因为同时使用了 \ulem 包，产生了冲突，去掉该包即可</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;记录一下科研论文中的伪代码。&lt;br&gt;转自：&lt;a href=&quot;https://shuzang.github.io/2021/pseudocode-specification/&quot;&gt;https://shuzang.github.io/2021/pseudocode-specification/&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>SPECTRE-Coding</title>
    <link href="https://www.blog.hackerjerry.top/2021/04/11/SPECTRE-Coding_new/"/>
    <id>https://www.blog.hackerjerry.top/2021/04/11/SPECTRE-Coding_new/</id>
    <published>2021-04-11T09:46:39.000Z</published>
    <updated>2021-05-06T13:04:33.557Z</updated>
    
    <content type="html"><![CDATA[<p>虽然这个 paper 可能不是个能 work 的（有很多地方比较牵强，不稳定，且无任何项目声明实现了它），但既然老师要求了，只好硬着头皮上了。</p><a id="more"></a><h1 id="借鉴"><a href="#借鉴" class="headerlink" title="借鉴"></a>借鉴</h1><p>根据经验，我决定先学习一下现有项目中各种共识协议的编写。<br>pow-原理很简单，就是工作量证明，故不用看。<br>pos-选举人制度，具体原理还是可以了解一下的。</p><h2 id="pos–账本共识"><a href="#pos–账本共识" class="headerlink" title="pos–账本共识"></a>pos–账本共识</h2><p>切记，PoS 不是一种确定的定义（算法)，而是一种概念，因此对于不同的平台来说，可以有不同的 PoS 实现。<br>以太坊使用 GHOST，贪婪最重可观察子树协议，作为其分叉选择规则。在 GHOST 协议中，获得投票数最高的分叉将被选为链头（将每个分叉区块及其各自子区块的所有票数计入考虑）。<br>与最长链规则相比， <strong>GHOST 的优点在于能够在网络延迟较高时降低攻击效率，同时最小化链重组的深度</strong>。原因是即使攻击者能够高效地在其分叉链上继续产生区块，尝试使该链成为最长链，GHOST 也会选择另一条票数更高的分叉链。</p><h2 id="pow–挖矿共识"><a href="#pow–挖矿共识" class="headerlink" title="pow–挖矿共识"></a>pow–挖矿共识</h2><p><a href="https://www.yuque.com/docs/share/f47edbdb-8ca4-411b-b78c-1f0ea772ac2c#O7vbh">https://www.yuque.com/docs/share/f47edbdb-8ca4-411b-b78c-1f0ea772ac2c#O7vbh</a><br>挖矿可以设计一个动态调整难度的函数<br><img src= "/img/loading.gif" data-lazy-src="https://image.hackerjerry.top/SPECTRE-Coding-1.png#height=790&id=CCHi2&originHeight=790&originWidth=930&originalType=binary&status=done&style=none&width=930"><br><img src= "/img/loading.gif" data-lazy-src="https://image.hackerjerry.top/SPECTRE-Coding-2.png#height=448&id=Lw1nX&originHeight=448&originWidth=836&originalType=binary&status=done&style=none&width=836"></p><h1 id="SPECTRE"><a href="#SPECTRE" class="headerlink" title="SPECTRE"></a>SPECTRE</h1><p>根据它的伪代码我写了一个 demo,看起来还不错。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Vote</span><span class="params">(node1 *dag.Blocknode, node2 *dag.Blocknode, graph *Graph)</span> <span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">voteOfnode1 := <span class="number">0</span></span><br><span class="line">voteOfnode2 := <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历全局图</span></span><br><span class="line">Graph := graph</span><br><span class="line"><span class="comment">//这里graph一开始要传dag.Graph这个全局图，之后可以传past集或者future集</span></span><br><span class="line"><span class="keyword">for</span> k, z := <span class="keyword">range</span> Graph.nodes &#123;</span><br><span class="line">_, ok1 := Graph.getFuture(node1)[k]</span><br><span class="line">_, ok2 := Graph.getFuture(node2)[k]</span><br><span class="line"><span class="keyword">if</span> ok1 &amp;&amp; !ok2 &#123;</span><br><span class="line">voteOfnode1 += <span class="number">1</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> !ok1 &amp;&amp; ok2 &#123;</span><br><span class="line">voteOfnode2 += <span class="number">1</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> ok1 &amp;&amp; ok2 &#123;</span><br><span class="line"><span class="comment">//取决于past(z)的投票结果</span></span><br><span class="line">tem1, tem2 := Vote(node1, node2, Graph.getPast(z))</span><br><span class="line"><span class="keyword">if</span> tem1 &gt; tem2 &#123;</span><br><span class="line">voteOfnode1 += <span class="number">1</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">voteOfnode2 += <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> !ok1 &amp;&amp; !ok2 &#123;</span><br><span class="line"><span class="comment">//z的投票结果取决于future(z)的投票结果</span></span><br><span class="line">tem1, tem2 := Vote(node1, node2, getFutureToGraph(Graph.getFuture(z)))</span><br><span class="line"><span class="keyword">if</span> tem1 &gt; tem2 &#123;</span><br><span class="line">voteOfnode1 += <span class="number">1</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">voteOfnode2 += <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> z == node1 &#123;</span><br><span class="line">voteOfnode1 += <span class="number">1</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> z == node2 &#123;</span><br><span class="line">voteOfnode2 += <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> voteOfnode1, voteOfnode2</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;虽然这个 paper 可能不是个能 work 的（有很多地方比较牵强，不稳定，且无任何项目声明实现了它），但既然老师要求了，只好硬着头皮上了。&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>wireshark抓包原理</title>
    <link href="https://www.blog.hackerjerry.top/2021/04/10/wireshark%E6%8A%93%E5%8C%85%E5%8E%9F%E7%90%86_new/"/>
    <id>https://www.blog.hackerjerry.top/2021/04/10/wireshark%E6%8A%93%E5%8C%85%E5%8E%9F%E7%90%86_new/</id>
    <published>2021-04-10T02:43:22.000Z</published>
    <updated>2021-05-06T13:00:14.390Z</updated>
    
    <content type="html"><![CDATA[<p>这几天学院研究生复试，院长出了这道题，就是问了 wireshark 的抓包原理，由于我并不太清楚，所以特此记录。</p><a id="more"></a><h2 id="Wireshark"><a href="#Wireshark" class="headerlink" title="Wireshark"></a>Wireshark</h2><p><img src= "/img/loading.gif" data-lazy-src="https://image.hackerjerry.top/wireshark%E6%8A%93%E5%8C%85%E5%8E%9F%E7%90%86-1.jpeg#align=left&display=inline&height=463&margin=%5Bobject%20Object%5D&originHeight=463&originWidth=1102&size=0&status=done&style=none&width=1102"></p><p>网络上传输的数据包<strong>通过网卡进入到网络协议分析器系统</strong>。即<strong>Wireshark 使用的网卡数据复制，只要是经过指定网卡都会被抓取</strong>。<br>  每一个协议分析器内部都维护有一个“<strong>跟踪缓冲区</strong>”内存空间区域。它用于<strong>暂存从网络上面复制而来的数据包流</strong>。数据包流从“捕获过滤器”流入到协议分析器的跟踪缓存区中，该缓冲区中的数据包能够在被捕获之后立即查看或是以其他文件格式保持到磁盘上面。比如 Wireshark 协议分析器工具，打开之后，点击[开始捕获]， 然后便可立刻查看捕获到的数据包信息。此时的这些数据包就是放在协议分析器的“跟踪缓冲区”中的。<br>协议分析器所使用的网卡和网卡驱动程序必须能够支持“<strong>混杂模式操作</strong>（Promiscuous Mode Operation）”。因为<strong>只有运行在混杂模式下的网卡才能够捕获到网络中传输到其他设备的“广播数据包、多播数据包、单播数据包以及错误数据包等等”（</strong>支持 VLAN ,单播，多播等），两者一起协同工作。<br><img src= "/img/loading.gif" data-lazy-src="https://image.hackerjerry.top/wireshark%E6%8A%93%E5%8C%85%E5%8E%9F%E7%90%86-2.png#align=left&display=inline&height=375&margin=%5Bobject%20Object%5D&name=image.png&originHeight=461&originWidth=814&size=234125&status=done&style=none&width=662" alt="image.png"></p><h3 id="混杂模式与监视模式区别"><a href="#混杂模式与监视模式区别" class="headerlink" title="混杂模式与监视模式区别"></a>混杂模式与监视模式区别</h3><p>要弄清混杂模式和监视模式之间的区别：<strong>监视模式仅用于无线卡</strong>，<strong>混杂模式用于无线和有线</strong>。 监控模式使卡无需关联接入点即可侦听无线数据包。 混杂模式使卡可以侦听所有数据包，即使不是针对特定的数据包。</p><blockquote><p>作者：圣手书生黎公子<br>链接：<a href="https://zhuanlan.zhihu.com/p/267640786">https://zhuanlan.zhihu.com/p/267640786</a><br>来源：知乎<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p></blockquote><h1 id="ping-流程"><a href="#ping-流程" class="headerlink" title="ping 流程"></a>ping 流程</h1><p><img src= "/img/loading.gif" data-lazy-src="https://image.hackerjerry.top/wireshark%E6%8A%93%E5%8C%85%E5%8E%9F%E7%90%86-3.png#align=left&display=inline&height=265&margin=%5Bobject%20Object%5D&name=image.png&originHeight=265&originWidth=642&size=114805&status=done&style=none&width=642" alt="image.png"><br>在这里，我们搭建了一个 PC+交换机+路由器（文中又称网关）的本地网络</p><p>在一开始，所有机器的 arp 表其实都是空的。<br><img src= "/img/loading.gif" data-lazy-src="https://image.hackerjerry.top/wireshark%E6%8A%93%E5%8C%85%E5%8E%9F%E7%90%86-4.png#align=left&display=inline&height=429&margin=%5Bobject%20Object%5D&name=image.png&originHeight=523&originWidth=828&size=203088&status=done&style=none&width=679" alt="image.png"><br>而此时，让 PC 去进行 ping（使用 ICMP 协议）自己的网关 192.168.1.1，是可以通的。<br>为什么呢？<br>我们分析一下流程。</p><ol><li>PC 首先封装这个 ICMP 数据包，最里面是 ICMP 的数据，数据外面封装 IPV4 包头，IPV4 包头外面是帧头。格式如下：</li></ol><p><img src= "/img/loading.gif" data-lazy-src="https://image.hackerjerry.top/wireshark%E6%8A%93%E5%8C%85%E5%8E%9F%E7%90%86-5.png#align=left&display=inline&height=219&margin=%5Bobject%20Object%5D&name=image.png&originHeight=438&originWidth=1550&size=714203&status=done&style=none&width=775" alt="image.png"></p><ol start="2"><li>有个问题是，刚开始 ping 的时候，PC 的 ARP 表项是不知道目的 IP 所对应的 MAC 是多少，那么他怎么获取的呢。</li></ol><p>仔细看数据抓包，有一对 ARP 包：<br><img src= "/img/loading.gif" data-lazy-src="https://image.hackerjerry.top/wireshark%E6%8A%93%E5%8C%85%E5%8E%9F%E7%90%86-6.png#align=left&display=inline&height=215&margin=%5Bobject%20Object%5D&name=image.png&originHeight=430&originWidth=1547&size=653510&status=done&style=none&width=773.5" alt="image.png"><br>就是在发 ICMP 包之前，系统先发了一个 ARP 包！<br>上面的 ARP 请求包大概意思是：我是 192.168.1.99，我的 MAC 是 aabb.cc00.3000，我想问 192.168.1.1 你的 MAC 是多少，收到请回复收到请回复。<br>在 ARP 请求的过程中，SW 已经学到了 PC 和 R1 的接口 MAC 地址，MAC 地址表项已经形成。<br><img src= "/img/loading.gif" data-lazy-src="https://image.hackerjerry.top/wireshark%E6%8A%93%E5%8C%85%E5%8E%9F%E7%90%86-7.png#align=left&display=inline&height=148&margin=%5Bobject%20Object%5D&name=image.png&originHeight=295&originWidth=747&size=233011&status=done&style=none&width=373.5" alt="image.png"><br>那么，他是怎么形成的呢？<br>第一步：<br>当 SW 通过 e0/0 端口收到 PC 发来的 ARP 广播包，PC 首先查看自己的 MAC 地址表项，看看数据帧的源 MAC 是否存在于我的 MAC 地址表中，如果没有，那么就直接把 ARP 广播包的源 MAC（aabb.cc00.3000）和接收端口 e0/0 对应起来，形成第一个 MAC 地址表的条目。如果有对应的 MAC 地址条目，SW 就看已经存在的条目和当前的收包端口是否一致，如果不一致就更新 MAC 地址表里面的条目，如果一致就直接泛洪转发这个广播数据帧。<br>第二步：SW 通过 e0/1 端口把这个数据帧发给 R1，R1 收到之后，形成 ARP 表项。<br><img src= "/img/loading.gif" data-lazy-src="https://image.hackerjerry.top/wireshark%E6%8A%93%E5%8C%85%E5%8E%9F%E7%90%86-8.png#align=left&display=inline&height=62&margin=%5Bobject%20Object%5D&name=image.png&originHeight=124&originWidth=1131&size=180774&status=done&style=none&width=565.5" alt="image.png"><br>R1 拆开外面帧头看到目的 MAC 是自己（广播包本网段内所有人均可接收），R1 就继续拆包，拆开 ARP 头部，看到请求的 MAC 是自己的 IP 地址对应的 MAC，所以 R1 就响应这个 ARP 得请求包。<br><img src= "/img/loading.gif" data-lazy-src="https://image.hackerjerry.top/wireshark%E6%8A%93%E5%8C%85%E5%8E%9F%E7%90%86-9.png#align=left&display=inline&height=150&margin=%5Bobject%20Object%5D&name=image.png&originHeight=299&originWidth=1066&size=320679&status=done&style=none&width=533" alt="image.png"><br>第三步：响应的 ARP Reply 包发送到 SW 的 e0/1 口，SW1 把单播响应包源 MAC（aabb.cc00.1000）和自己的接收端口 e0/1 口对应起来，形成另外一条 MAC 地址表条目，然后查看到数据帧的目的 MAC 是 aabb.cc00.3000，SW 直接查找自己的 MAC 地址表，发现有对应的条目，直接通过 e0/0 口转发，PC 就收到了响应，获取到了 R1 的 e0/0 接口，也就是 PC 网关的 MAC。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;这几天学院研究生复试，院长出了这道题，就是问了 wireshark 的抓包原理，由于我并不太清楚，所以特此记录。&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>机器学习之随机森林</title>
    <link href="https://www.blog.hackerjerry.top/2021/04/09/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%B9%8B%E9%9A%8F%E6%9C%BA%E6%A3%AE%E6%9E%97_new/"/>
    <id>https://www.blog.hackerjerry.top/2021/04/09/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%B9%8B%E9%9A%8F%E6%9C%BA%E6%A3%AE%E6%9E%97_new/</id>
    <published>2021-04-09T12:33:30.000Z</published>
    <updated>2021-05-06T13:12:57.327Z</updated>
    
    <content type="html"><![CDATA[<p>这里记录一下 AI 作品赛里接触到的随机森林算法。</p><a id="more"></a><h1 id="决策树"><a href="#决策树" class="headerlink" title="决策树"></a>决策树</h1><p>随机森林由许多决策树（decision tree）组成，我们可以将决策树视为一系列关于数据的是/否问题，从而最终得出一个预测类别（或回归情况下的连续值）。 这是一个可解释的模型，因为它非常像我们人类进行分类的过程：在我们做出决定之前（在理想世界中），我们会对可用数据进行一系列的询问。<br>当我们训练决策树时到底发生了什么？可视化可以帮助我们更好地理解决策树，这可以通过 Scikit-Learn 的一个功能来实现（详细信息，请查看 notebook 或这篇文章）。<br><img src= "/img/loading.gif" data-lazy-src="https://image.hackerjerry.top/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%B9%8B%E9%9A%8F%E6%9C%BA%E6%A3%AE%E6%9E%97-1.png#align=left&display=inline&height=732&margin=%5Bobject%20Object%5D&name=image.png&originHeight=732&originWidth=837&size=369303&status=done&style=none&width=837" alt="image.png"><br>除叶子节点（彩色终端节点）外，所有节点都有 5 个部分：</p><ul><li>基于某个特征的一个值对数据进行的提问，每个提问都有一个真或假的答案可以分裂节点。根据答案，数据点相应地向下移动。</li><li><strong>gini：</strong>节点的 Gini 不纯度。当我们沿着树向下移动时，平均加权基尼不纯度会减少。</li><li><strong>samples</strong>：节点中的观测数据数量。</li><li><strong>value：</strong>每个类中的样本数。例如，根节点中有 2 个样本属于类 0，有 4 个样本属于类 1。</li><li><strong>class：</strong>该节点中大多数点的分类。在叶节点中，即是对节点中所有样本的预测。</li></ul><p><strong>决策树的特征选择</strong>一般有 3 种量化方法：<strong>信息增益、信息增益率、基尼指数</strong>。</p><h2 id="信息增益"><a href="#信息增益" class="headerlink" title="信息增益"></a>信息增益</h2><p>在信息论中，<strong>熵</strong>表示随机变量不确定性的度量。假设随机变量 X 有有限个取值，取值 <img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2021/svg/1629942/1618020812451-b0b3a075-5dcb-42d8-bf97-78aa34e4b86e.svg#align=left&display=inline&height=18&margin=%5Bobject%20Object%5D&originHeight=18&originWidth=19&size=0&status=done&style=none&width=19"> 对应的概率为 <img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2021/svg/1629942/1618020812589-b6f620aa-d6a0-4990-8de0-93dcf01f721e.svg#align=left&display=inline&height=18&margin=%5Bobject%20Object%5D&originHeight=18&originWidth=19&size=0&status=done&style=none&width=19"> ，则 X 的熵定义为：<br><img src= "/img/loading.gif" data-lazy-src="https://image.hackerjerry.top/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%B9%8B%E9%9A%8F%E6%9C%BA%E6%A3%AE%E6%9E%97-2.svg#align=left&display=inline&height=62&margin=%5Bobject%20Object%5D&originHeight=62&originWidth=196&size=0&status=done&style=none&width=196"><br>如果某件事<strong>一定发生</strong>（太阳东升西落）或<strong>一定不发生</strong>（钓鱼岛是日本的），则概率为 1 或 0，对应的<strong>熵均为 0</strong>。<br>如果某件事可能发生可能不发生（天要下雨，娘要嫁人），概率介于 0 到 1 之间，熵大于 0。<br>由此可见，<strong>熵越大，随机性越大，结果越不确定</strong>。<br>我们再来看一看<strong>条件熵</strong> <img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2021/svg/1629942/1618020812831-53a78260-e1f7-4fe9-bd8b-1b6cbdd6d85d.svg#align=left&display=inline&height=26&margin=%5Bobject%20Object%5D&originHeight=26&originWidth=74&size=0&status=done&style=none&width=74"> ，<strong>表示引入随机变量 Y 对于消除 X 不确定性的程度</strong>。假如 X、Y 相互独立，则 X 的条件熵和熵有相同的值；否则条件熵一定小于熵。<br>明确了这两个概念，理解信息增益就比较方便了。现在我们有一份数据集 D（例如贷款信息登记表）和特征 A（例如年龄），则<strong>A 的信息增益就是 D 本身的熵与特征 A 给定条件下 D 的条件熵之差</strong>，即：<br><img src= "/img/loading.gif" data-lazy-src="https://image.hackerjerry.top/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%B9%8B%E9%9A%8F%E6%9C%BA%E6%A3%AE%E6%9E%97-3.svg#align=left&display=inline&height=26&margin=%5Bobject%20Object%5D&originHeight=26&originWidth=248&size=0&status=done&style=none&width=248"><br>数据集 D 的熵是一个常量。信息增益越大，表示条件熵 <img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2021/svg/1629942/1618020812738-fffb9065-834c-444d-9a51-8881c89e799f.svg#align=left&display=inline&height=26&margin=%5Bobject%20Object%5D&originHeight=26&originWidth=74&size=0&status=done&style=none&width=74"> 越小，A 消除 D 的不确定性的功劳越大。<br>所以要<strong>优先选择信息增益大的特征，它们具有更强的分类能力。</strong>由此生成决策树，称为<strong>ID3 算法</strong>。</p><h2 id="信息增益率"><a href="#信息增益率" class="headerlink" title="信息增益率"></a><strong>信息增益率</strong></h2><p>当某个特征具有多种候选值时，信息增益容易偏大，造成误差。引入信息增益率可以校正这一问题。<br>信息增益率 <img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2021/svg/1629942/1618020812748-d95f3fa5-1a2f-4372-ad0b-78d11ef80423.svg#align=left&display=inline&height=18&margin=%5Bobject%20Object%5D&originHeight=18&originWidth=23&size=0&status=done&style=none&width=23"> 为信息增益与数据集 D 的熵之比：<br><img src= "/img/loading.gif" data-lazy-src="https://image.hackerjerry.top/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%B9%8B%E9%9A%8F%E6%9C%BA%E6%A3%AE%E6%9E%97-4.svg#align=left&display=inline&height=59&margin=%5Bobject%20Object%5D&originHeight=59&originWidth=186&size=0&status=done&style=none&width=186"><br>同样，我们<strong>优先选择信息增益率最大的特征，</strong>由此生成决策树，称为<strong>C4.5 算法。</strong><br>**</p><h2 id="基尼不纯度（Gini-Impurity）"><a href="#基尼不纯度（Gini-Impurity）" class="headerlink" title="基尼不纯度（Gini Impurity）"></a><strong>基尼不纯度（Gini Impurity）</strong></h2><p>节点的基尼不纯度是指，根据节点中样本的分布对样本分类时，从节点中随机选择的样本被分错的概率。<br>如，在根节点中，根据节点中的样本标签有 44.4％的可能性错误地对某个随机选择的数据点进行分类。可以      使用以下等式得出这个值：</p><p><img src= "/img/loading.gif" data-lazy-src="https://image.hackerjerry.top/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%B9%8B%E9%9A%8F%E6%9C%BA%E6%A3%AE%E6%9E%97-5.png#align=left&display=inline&height=56&margin=%5Bobject%20Object%5D&originHeight=242&originWidth=757&size=0&status=done&style=none&width=176"><br>节点 n 的基尼不纯度是<strong>1 减去每个类（二元分类任务中是 2）的样本比例的平方和</strong>。</p><p>例如根节点的基尼不纯度：<br><img src= "/img/loading.gif" data-lazy-src="https://image.hackerjerry.top/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%B9%8B%E9%9A%8F%E6%9C%BA%E6%A3%AE%E6%9E%97-6.png#align=left&display=inline&height=73&margin=%5Bobject%20Object%5D&originHeight=73&originWidth=1080&size=0&status=done&style=none&width=1080"></p><p>在每个节点，决策树要在所有特征中搜索用于拆分的值，从而可以<strong>最大限度地减少基尼不纯度</strong>。（拆分节点的另一个<strong>替代方法</strong>是使用<strong>信息增益</strong>）。<br>然后，它以贪婪递归的过程重复这种拆分，直到达到最大深度，或者每个节点仅包含同类的样本。<br>树每层的加权总基尼不纯度（每个节点的基尼不纯度按照该节点中来自父节点的点的比例进行加权）一定是减少的。在树的第二层，总加权基尼不纯度值为 0.333：<br><img src= "/img/loading.gif" data-lazy-src="https://image.hackerjerry.top/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%B9%8B%E9%9A%8F%E6%9C%BA%E6%A3%AE%E6%9E%97-7.png#align=left&display=inline&height=58&margin=%5Bobject%20Object%5D&name=image.png&originHeight=77&originWidth=845&size=17368&status=done&style=none&width=641" alt="image.png"><br>最终，最后一层的加权总基尼不纯度变为 0，也意味着每个节点都是完全纯粹的，从节点中随机选择的点不会被错误分类。虽然这一切看起来挺好的，但这意味着模型可能过拟合，因为所有节点都是仅仅使用训练数据构建的。</p><h2 id="决策树剪枝"><a href="#决策树剪枝" class="headerlink" title="决策树剪枝"></a>决策树剪枝</h2><p>决策树生成算法递归产生一棵决策树，直到结束划分。什么时候结束呢？</p><ul><li>样本属于同一种类型</li><li>没有特征可以分割</li></ul><p>这样得到的决策树往往对训练数据分类非常精准，但是对于未知数据表现比较差。<br>原因在于基于训练集构造的决策树过于复杂，产生过拟合。所以需要对决策树简化，砍掉多余的分支，提高泛化能力。<br>决策树剪枝一般有两种方法：</p><ul><li><strong>预剪枝</strong>：在树的生成过程中剪枝。<strong>基于贪心策略，可能造成局部最优</strong></li><li><strong>后剪枝</strong>：等树全部生成后剪枝。<strong>运算量较大，但是比较精准</strong></li></ul><p>决策树剪枝往往通过<strong>极小化决策树整体的损失函数实现</strong>。</p><p><img src= "/img/loading.gif" data-lazy-src="https://image.hackerjerry.top/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%B9%8B%E9%9A%8F%E6%9C%BA%E6%A3%AE%E6%9E%97-8.png#align=left&display=inline&height=281&margin=%5Bobject%20Object%5D&name=image.png&originHeight=561&originWidth=731&size=122786&status=done&style=none&width=365.5" alt="image.png"><br>假设树 T 有|T|个叶子节点，某一个叶子节点 t 上有 <img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2021/svg/1629942/1618021002264-6488bff2-9519-4ecc-bbdd-6f2f86c34189.svg#align=left&display=inline&height=23&margin=%5Bobject%20Object%5D&originHeight=23&originWidth=24&size=0&status=done&style=none&width=24"> 个样本，其中 k 类的样本有 <img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2021/svg/1629942/1618021002341-9e586245-0eb4-43f1-ab4b-e9d2f1514bd9.svg#align=left&display=inline&height=23&margin=%5Bobject%20Object%5D&originHeight=23&originWidth=32&size=0&status=done&style=none&width=32"> 个，<img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2021/svg/1629942/1618021002330-b42005d2-d60f-4e39-927c-852a31a4810e.svg#align=left&display=inline&height=26&margin=%5Bobject%20Object%5D&originHeight=26&originWidth=56&size=0&status=done&style=none&width=56"> 为叶子节点 t 的熵， <img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2021/svg/1629942/1618021002461-670ab097-97d8-4674-b83a-a27eed267988.svg#align=left&display=inline&height=21&margin=%5Bobject%20Object%5D&originHeight=21&originWidth=52&size=0&status=done&style=none&width=52"> 是参数，则决策树的<strong>损失函数</strong>定义为：<br><img src= "/img/loading.gif" data-lazy-src="https://image.hackerjerry.top/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%B9%8B%E9%9A%8F%E6%9C%BA%E6%A3%AE%E6%9E%97-9.svg#align=left&display=inline&height=69&margin=%5Bobject%20Object%5D&originHeight=69&originWidth=264&size=0&status=done&style=none&width=264"><br>其中熵为：<br><img src= "/img/loading.gif" data-lazy-src="https://image.hackerjerry.top/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%B9%8B%E9%9A%8F%E6%9C%BA%E6%A3%AE%E6%9E%97-10.svg#align=left&display=inline&height=57&margin=%5Bobject%20Object%5D&originHeight=57&originWidth=246&size=0&status=done&style=none&width=246"><br><strong>损失函数第一项为训练误差，第二项为模型复杂度，</strong>用参数 <img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2021/svg/1629942/1618021002545-b6955ef3-85ad-4594-9a5e-f5a27be46475.svg#align=left&display=inline&height=15&margin=%5Bobject%20Object%5D&originHeight=15&originWidth=13&size=0&status=done&style=none&width=13"> 来衡量二者的比重。</p><h2 id="CART-算法"><a href="#CART-算法" class="headerlink" title="CART 算法"></a>CART 算法</h2><p>CART 表示分类回归决策树，同样由特征选择、树的生成及剪枝组成，可以处理分类和回归任务。<br>相比之下，<strong>ID3 和 C4.5 算法只能处理分类任务</strong>。<br>CART 假设决策树是二叉树，内部结点特征的取值为“是”和“否”，依次递归地二分每个特征。<br><strong>CART 对回归树采用平方误差最小化准则，对分类树用基尼指数最小化准则</strong>。</p><h2 id="过拟合–为什么森林比一棵树更好"><a href="#过拟合–为什么森林比一棵树更好" class="headerlink" title="过拟合–为什么森林比一棵树更好"></a>过拟合–为什么森林比一棵树更好</h2><p><strong>因为这棵树是在训练数据上没有犯错，我们没有限制最大深度（树的层数），因此泛化能力差。</strong><br>过拟合发生在当我们有一个非常灵活的模型（模型具有高能力）时，其本质上是通过紧密拟合来记住训练数据。这样的问题是模型不仅学到了训练数据中的实际关系，还学习了存在的噪声。灵活的模型具有高方差<strong>（variance）</strong>，因为学到的参数（例如决策树的结构）将随着训练数据的不同而变化很大。</p><p>当我们<strong>不限制最大深度时决策树容易过拟合的原因</strong>是它<strong>具有无限的灵活性</strong>，这意味着它可以持续生长，直到它为每个单独的观察点都生成一个叶节点，<strong>达到完美地分类</strong>。<br>如果返回到之前决策树的图像并将最大深度限制为 2（仅进行一次拆分），则分类不再 100％正确。我们减少了决策树的方差，但代价是增加了偏差。<br><strong>限制树的深度</strong>可以<strong>减少方差（好）</strong>并且<strong>增加偏差（坏）</strong>，一种替代方案是，我们可以将许多决策树组合成一个称为随机森林的集成模型（ensemble model）。</p><h1 id="随机森林"><a href="#随机森林" class="headerlink" title="随机森林"></a>随机森林</h1><p>我们将<strong>使用 CART 决策树作为弱学习器的 bagging 方法称为随机森林</strong>。<br>bagging 是一种在原始数据集上，通过<strong>有放回抽样</strong>分别选出 k 个新数据集，来训练分类器的集成算法。分类器之间没有依赖关系。<br><img src= "/img/loading.gif" data-lazy-src="https://image.hackerjerry.top/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%B9%8B%E9%9A%8F%E6%9C%BA%E6%A3%AE%E6%9E%97-11.png#align=left&display=inline&height=162&margin=%5Bobject%20Object%5D&name=image.png&originHeight=323&originWidth=799&size=117004&status=done&style=none&width=399.5" alt="image.png"><br>随机森林是由许多决策树组成的模型。这个模型不是简单地平均所有树（我们可以称之为“森林”）的预测，而是使用了两个关键概念，名字中的随机二字也是由此而来：</p><ul><li>在构建树时对训练数据点进行随机抽样</li><li>分割节点时考虑特征的随机子集</li></ul><h2 id="随机抽样训练观测数据"><a href="#随机抽样训练观测数据" class="headerlink" title="随机抽样训练观测数据"></a><strong>随机抽样训练观测数据</strong></h2><p>在训练时，随机森林中的<strong>每棵树</strong>都会<strong>从数据点的随机样本中学习</strong>。<strong>样本被有放回的抽样</strong>，称为<strong>自助抽样法</strong>（<strong>bootstrapping</strong>），这意味着<strong>一些样本将在一棵树中被多次使用</strong>。背后的<strong>想法</strong>是<strong>在不同样本上训练每棵树，尽管每棵树相对于特定训练数据集可能具有高方差，但总体而言，整个森林将具有较低的方差，同时不以增加偏差为代价。</strong><br>在测试时，通过<strong>平均每个决策树的预测</strong>来进行预测。这种<strong>在不同的自助抽样数据子集上训练单个学习器，然后对预测进行平均的过程称为 bagging</strong>，是 bootstrap aggregating 的缩写。</p><h2 id="用于拆分节点的随机特征子集"><a href="#用于拆分节点的随机特征子集" class="headerlink" title="用于拆分节点的随机特征子集"></a><strong>用于拆分节点的随机特征子集</strong></h2><p>随机森林中的另一个主要概念是，<strong>只考虑所有特征的一个子集来拆分每个决策树中的每个节点</strong>。通常将<strong>其设置为 sqrt（n_features）</strong>以进行分类，这意味着<strong>如果有 16 个特征</strong>，则在<strong>每个树中的每个节点处</strong>，<strong>只考虑 4 个随机特征</strong>来拆分节点。（随机森林也可以在每个节点处考虑所有的特征，如回归中常见的那样。这些选项可以在 Scikit-Learn Random Forest 的实现中控制）。<br>如果你能理解一棵单独的决策树，bagging 的理念，以及随机的特征子集，那么你对随机森林的工作方式也就有了很好的理解：</p><p>随机森林将成百上千棵决策树组合在一起，在略微不同的观察集上训练每个决策树，在每棵树中仅考虑有限数量的特征来拆分节点。&gt; <strong>随机森林的最终预测是通过平均每棵树的预测来得到的</strong>。</p><p>想理解为什么随机森林优于单一的决策树，请想象以下场景：你要判断特斯拉的股票是否上涨，现在你身边有十几位对该公司都没有先验知识的分析师。每个分析师都有较低的偏见，因为他们没有任何假设，并且可以从新闻报道的数据集中学习。<br>这似乎是一个理想的情况，但问题是报道中除了真实的信号外也可能包含噪音。 因为分析师们完全根据数据做出预测，即他们具有很高的灵活性，也就意味着他们可能会被无关的信息所左右。分析师们可能会从同一数据集中得出不同的预测。此外，如果提供不同的报道训练集，每个分析师都有高方差，并得出截然不同的预测。<br>解决方案是不依赖于任何一个人，而是汇集每个分析师的投票。此外，与随机森林一样，允许每个分析师仅使用一部分报道，并希望通过采样来消除噪声信息的影响。在现实生活中，我们也依赖于多种信息来源（从不信任亚马逊的单独评论），因此，不仅决策树的思想很直观，而且将它们组合在一起成为随机森林的想法同样如此。</p><h2 id="算法特点"><a href="#算法特点" class="headerlink" title="算法特点"></a>算法特点</h2><p>由于随机性，<strong>随机森林对于降低模型方差效果显著</strong>。故随机森林一般不需要额外剪枝，就能取得较好的泛化性能。</p><p>相对而言，模型对于训练集的拟合程度就会差一些，相比于基于 boosting 的 GBDT 模型，偏差会大一些。</p><p>另外，<strong>随机森林中的树一般会比较深，以尽可能地降低偏差；而 GBDT 树的深度会比较浅，通过减少模型复杂度来降低方差</strong>。</p><p>最后，我们总结一下随机森林都有哪些优点：</p><ul><li>采用了集成算法，精度优于大多数单模型算法</li><li>在测试集上表现良好，两个随机性的引入降低了过拟合风险</li><li>树的组合可以让随机森林处理非线性数据</li><li>训练过程中能检测特征重要性，是常见的<strong>特征筛选</strong>方法</li><li>每棵树可以同时生成，并行效率高，训练速度快</li><li>可以自动处理缺省值</li></ul><h1 id="模型评价"><a href="#模型评价" class="headerlink" title="模型评价"></a>模型评价</h1><p>AUC(area under the curve)是 ROC 曲线下的面积。所以，在理解 AUC 之前，要先了解 ROC 是什么。而 ROC 的计算又需要借助混淆矩阵。</p><blockquote><p>AUC 是一个从 0（最差）到 1（最佳）的度量值，</p></blockquote><p>我们还可以绘制单个决策树（顶部）和随机森林（底部）的 ROC 曲线。<strong>靠近左上角的曲线代表着更好的模型：</strong><br><img src= "/img/loading.gif" data-lazy-src="https://image.hackerjerry.top/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%B9%8B%E9%9A%8F%E6%9C%BA%E6%A3%AE%E6%9E%97-12.png#align=left&display=inline&height=271&margin=%5Bobject%20Object%5D&name=image.png&originHeight=542&originWidth=777&size=81703&status=done&style=none&width=388.5" alt="image.png"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;这里记录一下 AI 作品赛里接触到的随机森林算法。&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>BlockDAG从零到一</title>
    <link href="https://www.blog.hackerjerry.top/2021/04/02/BlockDAG%E4%BB%8E%E9%9B%B6%E5%88%B0%E4%B8%80_new/"/>
    <id>https://www.blog.hackerjerry.top/2021/04/02/BlockDAG%E4%BB%8E%E9%9B%B6%E5%88%B0%E4%B8%80_new/</id>
    <published>2021-04-02T12:04:25.000Z</published>
    <updated>2021-05-06T13:02:08.262Z</updated>
    
    <content type="html"><![CDATA[<p>加油！</p><a id="more"></a><h1 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h1><ul><li><p>DAG</p><ul><li>SPECTRE<ul><li>snapshot.go–生成快照</li><li>vote.go–投票</li><li>log.go–记录日志</li></ul></li><li>accepttxs.go–维持可信交易集</li><li>blockdag.go–主程序</li><li>difficulty.go–动态调整 pow 困难度</li><li>error.go–错误信息</li><li>log.go–日志信息</li><li>process.go–将区块加入链？或者称检查块的合法性</li></ul></li><li><p>minner</p><ul><li>pow.go–工作量证明</li><li>worker.go</li></ul></li><li><p>account</p><ul><li>user.go–用户相关，身份认定，发送交易</li></ul></li><li><p>bloom</p><ul><li>timebloom.go–时间布隆过滤器</li><li>rangebloom.go–范围布隆过滤器</li></ul></li><li><p>p2pnet</p><ul><li>libp2p–p2p 网络对等节点发现</li></ul></li><li><p>mempool–内存池</p></li><li><p>crypto–密码学模块</p><ul><li>pkcs12–引用 gmsm <a href="https://github.com/tjfoc/gmsm">https://github.com/tjfoc/gmsm</a> 好像性能有点问题？ 这里有另外一个<a href="https://github.com/rongzer/gm">https://github.com/rongzer/gm</a> 看情况吧</li><li>sm2<ul><li>p256.go</li><li>sm2.go</li><li>utils.go</li></ul></li><li>sm3<ul><li>sm3.go</li><li>ifile</li></ul></li><li>sm4<ul><li>sm4.go</li><li>sm4_gcm.go</li><li>utils.go</li></ul></li></ul></li><li><p>database-存储 <a href="https://github.com/vldmkr/merkle-patricia-trie">https://github.com/vldmkr/merkle-patricia-trie</a></p><ul><li><p>mpt</p><ul><li>node.go</li><li>tire.go</li><li>type.go</li></ul></li><li><p>storage</p><ul><li>adapter.go</li><li>leveldb.go</li><li>memory.go</li></ul></li><li><p>database.go–利用 leveldb 存储交易（MPT），在区块中只存储根节点 hsha。</p></li><li><p>merkletire.go–MPT 树存储</p></li><li><p>可以先尝试安装<a href="https://github.com/soteria-dag/soterd/tree/master/database">https://github.com/soteria-dag/soterd/tree/master/database</a>，看看能不能保存交易</p></li></ul></li></ul><h1 id="p2pnet"><a href="#p2pnet" class="headerlink" title="p2pnet"></a>p2pnet</h1><p><a href="https://segmentfault.com/a/1190000018590682">区块链中的 P2P</a><br><a href="https://www.shangmayuan.com/a/61258d114131449994f5278e.html">使用 Go 语言编写区块链 P2P 网络</a>–项目：<a href="https://github.com/nosequeldeebee/blockchain-tutorial/blob/master/p2p/main.go">https://github.com/nosequeldeebee/blockchain-tutorial/blob/master/p2p/main.go</a><br><a href="https://github.com/Blockchain-CN/blockchain">https://github.com/Blockchain-CN/blockchain</a> –实现了对等协议的<br><a href="https://bbbob.win/b6edc29f/">利用 go-libp2p 实现在区块链上的 p2p</a>–里面目录分的挺清楚的</p><h1 id="mempool"><a href="#mempool" class="headerlink" title="mempool"></a>mempool</h1><p><a href="https://learnblockchain.cn/books/geth/part2/txpool/txpool.html">以太坊交易池架构设计</a>–这一系列很全<br><a href="https://blog.csdn.net/loy_184548/article/details/86178255">【区块链】比特币学习 - 4 - 交易池</a><br><a href="https://segmentfault.com/a/1190000017333194">以太坊源码分析：交易缓冲池 txpool</a><br><a href="https://github.com/lianxiangcloud/linkchain/tree/release/v0.1.3/mempool">https://github.com/lianxiangcloud/linkchain/tree/release/v0.1.3/mempool</a><br><a href="https://www.jianshu.com/p/521a0926303a">btcd 源码分析系列：6 - mempool</a><br><a href="https://github.com/wupeaking/tendermint_code_analysis/blob/master/Mempool%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90.md">Mempool 源码分析</a><br><a href="https://github.com/letsfire/factory">https://github.com/letsfire/factory</a> –单纯的内存池，而非交易池<br><img src= "/img/loading.gif" data-lazy-src="https://image.hackerjerry.top/BlockDAG%E4%BB%8E%E9%9B%B6%E5%88%B0%E4%B8%80-1.png#align=left&display=inline&height=299&margin=%5Bobject%20Object%5D&name=image.png&originHeight=598&originWidth=1303&size=258120&status=done&style=none&width=651.5" alt="image.png"><br>说实话，这个有点难，可能暂时不考虑实现了。</p><h1 id="account"><a href="#account" class="headerlink" title="account"></a>account</h1><p><img src= "/img/loading.gif" data-lazy-src="https://image.hackerjerry.top/BlockDAG%E4%BB%8E%E9%9B%B6%E5%88%B0%E4%B8%80-2.png#align=left&display=inline&height=288&margin=%5Bobject%20Object%5D&name=image.png&originHeight=576&originWidth=626&size=139030&status=done&style=none&width=313" alt="image.png"><br>来自白皮书：<a href="https://www.lianxiangcloud.com/static/download/%E4%BA%AB%E4%BA%91%E9%93%BE%E7%99%BD%E7%9A%AE%E4%B9%A61.0.pdf">享云链白皮书 1.0</a><br><a href="https://learnblockchain.cn/books/geth/part3/sign-and-valid.html">签名与校验</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;加油！&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>GO开发指南</title>
    <link href="https://www.blog.hackerjerry.top/2021/04/02/GO%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97_new/"/>
    <id>https://www.blog.hackerjerry.top/2021/04/02/GO%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97_new/</id>
    <published>2021-04-02T01:17:05.000Z</published>
    <updated>2021-05-06T13:00:22.142Z</updated>
    
    <content type="html"><![CDATA[<p>记录在进行 go 语言开发遇到的各种问题。</p><a id="more"></a><h1 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a>命名规范</h1><h3 id="文件命名"><a href="#文件命名" class="headerlink" title="文件命名"></a>文件命名</h3><p>文件命名一律采用小写，不用驼峰式，尽量见名思义，看见文件名就可以知道这个文件下的大概内容。<br>其中测试文件以<em>test.go 结尾，除测试文件外，命名不出现</em>。<br>例子：</p><blockquote><p>stringutil.go， stringutil_test.go</p></blockquote><h3 id="package"><a href="#package" class="headerlink" title="package"></a>package</h3><p>包名用小写,使用短命名,尽量和标准库不要冲突。<br>包名统一使用单数形式。</p><p>在 go 源文件的开头必须申明文件所属的 package，如下所示：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> name</span><br><span class="line">......</span><br></pre></td></tr></table></figure><h2 id="命名规范-1"><a href="#命名规范-1" class="headerlink" title="命名规范"></a>命名规范</h2><ul><li>建议 package 命名用小写字母</li><li>建议 packag<strong>e 命名必和其路径的最后一段一致</strong>（main package 除外）。注意，这并不是 Golang 的强制要求，文件目录只是用于存放同一个 package 的所有源文件，Golang 对目录名并无要求。但<strong>一个目录下不允许有多个 package 的源文件</strong>。</li><li>main package 中的 main 方法是可执行文件的入口，main package 名一般和路径名不一致</li><li>不同路径下 package 命名可以重复，但其完整路径名必须唯一</li></ul><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>变量命名一般采用驼峰式，当遇到特有名词（缩写或简称，如 DNS）的时候，特有名词根据是否私有全部大写或小写。<br>例子：</p><blockquote><p>apiClient、URLString</p></blockquote><h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><p>单个函数的接口名以 er 为后缀</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> <span class="keyword">type</span> Reader <span class="keyword">interface</span> &#123;</span><br><span class="line"><span class="number">2.</span>     Read(p []<span class="keyword">byte</span>) (n <span class="keyword">int</span>, err error)</span><br><span class="line"><span class="number">3.</span> &#125;</span><br></pre></td></tr></table></figure><p>两个函数的接口名综合两个函数名，如:</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> <span class="keyword">type</span> WriteFlusher <span class="keyword">interface</span> &#123;</span><br><span class="line"><span class="number">2.</span> Write([]<span class="keyword">byte</span>) (<span class="keyword">int</span>, error)</span><br><span class="line"><span class="number">3.</span> Flush() error</span><br><span class="line"><span class="number">4.</span> &#125;</span><br></pre></td></tr></table></figure><p>三个以上函数的接口名类似于结构体名，如:</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> <span class="keyword">type</span> Car <span class="keyword">interface</span> &#123;</span><br><span class="line"><span class="number">2.</span>     Start()</span><br><span class="line"><span class="number">3.</span>     Stop()</span><br><span class="line"><span class="number">4.</span>     Drive()</span><br><span class="line"><span class="number">5.</span> &#125;</span><br></pre></td></tr></table></figure><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><p>方法名应该是动词或动词短语，采用驼峰式。将功能及必要的参数体现在名字中， 不要嫌长， 如 updateById，getUserInfo.<br>如果是结构体方法，那么 Receiver 的名称应该缩写，一般使用一个或者两个字符作为 Receiver 的名称。如果 Receiver 是指针， 那么统一使用 p。 如：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> <span class="function"><span class="keyword">func</span> <span class="params">(f foo)</span> <span class="title">method</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="number">2.</span>     ...</span><br><span class="line"><span class="number">3.</span> &#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> <span class="function"><span class="keyword">func</span> <span class="params">(p *foo)</span> <span class="title">method</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="number">2.</span>     ...</span><br><span class="line"><span class="number">3.</span> &#125;</span><br></pre></td></tr></table></figure><p>对于 Receiver 命名应该统一， 要么都使用值， 要么都用指针。<br>每个以大写字母开头（即可以导出）的方法应该有注释，且以该函数名开头。如：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. &#x2F;&#x2F; Get 会响应对应路由转发过来的 get 请求.</span><br><span class="line">2. func (c *Controller) Get() &#123;</span><br><span class="line">3.     ...</span><br><span class="line">4. &#125;</span><br></pre></td></tr></table></figure><p>大写字母开头的方法以为着是可供调用的公共方法，如果你的方法想只在本包内掉用，请以小写字母开发。如:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. func (c *Controller) curl() &#123;</span><br><span class="line">2.     ...</span><br><span class="line">3. &#125;</span><br></pre></td></tr></table></figure><p>注释应该用一个完整的句子，注释的第一个单词应该是要注释的指示符，以便在 godoc 中容易查找。<br>注释应该以一个句点 . 结束。</p><h1 id="各种报错"><a href="#各种报错" class="headerlink" title="各种报错"></a>各种报错</h1><p>【1】<strong>“与你运行的 Windows 版本不兼容“的解决方法</strong><br><a href="https://blog.csdn.net/willingtolove/article/details/107924423">https://blog.csdn.net/willingtolove/article/details/107924423</a><br>其实就是 package 名字错了，必须改成 main，不清楚为什么？<br>【2】每次创建新的项目都要<strong>重新设置一个 configuration 文件</strong>，后发现是我的问题，开发的时候，可以把所有的项目都在 goland 里打开，根目录就是$GOPATH,像这样：<br><img src= "/img/loading.gif" data-lazy-src="https://image.hackerjerry.top/GO%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97-1.png#align=left&display=inline&height=274&margin=%5Bobject%20Object%5D&name=image.png&originHeight=548&originWidth=431&size=24414&status=done&style=none&width=215.5" alt="image.png"><br>所有小项目都放在 src 里，是不是很棒？<br>但是！<strong>必须有 main 包</strong>，必须有 main 函数作为程序入口！<br>具体原理看：<br><a href="https://blog.csdn.net/zxy_666/article/details/80390843">https://blog.csdn.net/zxy_666/article/details/80390843</a><br><a href="https://zhuanlan.zhihu.com/p/69445822">如何写出优雅的 Golang 代码</a><br><a href="https://blog.csdn.net/CMbug/article/details/49339341">Golang import 包问题相关详解</a><br><a href="https://www.jianshu.com/p/b224982b6fd5">理解 Go 语言包(package)</a><br>【3】<strong>结构体属性导出问题</strong><br>结构体中的属性，如果是小写开头，是无法被跨包使用的，也就是说包外无法访问，太狗了。<br><a href="https://juejin.cn/post/6844903814168838151">Go Struct 超详细讲解</a> 建议好好看看这篇</p><h1 id="函数知识"><a href="#函数知识" class="headerlink" title="函数知识"></a>函数知识</h1><h2 id="make"><a href="#make" class="headerlink" title="make"></a>make</h2><p>make()函数在 golang 的代码如下：<br><code>func make(t Type,size IntegerType) Type</code><br>使用 make 来创建 slice，map，chanel 说明如下：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">var slice_ []int = make([]int,5,10)</span><br><span class="line">fmt.Println(slice_)</span><br><span class="line">var slice_1 []int = make([]int,5)</span><br><span class="line">fmt.Println(slice_1)</span><br><span class="line">var slice_2 []int = []int&#123;1,2&#125;</span><br><span class="line">fmt.Println(slice_2)</span><br><span class="line">打印结果：</span><br><span class="line">[0 0 0 0 0]</span><br><span class="line">[0 0 0 0 0]</span><br><span class="line">[1,2]</span><br></pre></td></tr></table></figure><p>在创建 slice 时第一个参数用于确定初始化该 slice 的大小该 slice 中的值为零值，第三个参数用于确定该 slice 的长度<br>map：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">var m_ map[string]int = make(map[string]int)</span><br><span class="line">m_[&quot;one&quot;] = 1</span><br><span class="line">fmt.Println(m_)</span><br><span class="line">var m map[string]int = map[string]int&#123;&quot;1&quot;:1&#125;</span><br><span class="line">m[&quot;2&quot;] = 2</span><br><span class="line">fmt.Println(m)</span><br><span class="line">打印结果：</span><br><span class="line">map[one:1]</span><br><span class="line">map[1:1 2:2]</span><br></pre></td></tr></table></figure><p>根据 size 大小来初始化分配内存，不过分配后的 map 长度为 0，如果 size 被忽略了，那么会在初始化分配内存时分配一个小尺寸的内存</p><h2 id="nil"><a href="#nil" class="headerlink" title="nil"></a>nil</h2><p>相信写过 Golang 的程序员对下面一段代码是非常非常熟悉的了：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="comment">// do something....</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当出现不等于<code>nil</code>的时候，说明出现某些错误了，需要我们对这个错误进行一些处理，而如果等于<code>nil</code>说明运行正常。那什么是<code>nil</code>呢？查一下词典可以知道，<code>nil</code>的意思是无，或者是零值。零值，zero value，是不是有点熟悉？在 Go 语言中，如果你声明了一个变量但是没有对它进行赋值操作，那么这个变量就会有一个类型的默认零值。这是每种类型对应的零值：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">bool</span>      -&gt; <span class="literal">false</span></span><br><span class="line">numbers -&gt; <span class="number">0</span></span><br><span class="line"><span class="keyword">string</span>    -&gt; <span class="string">&quot;&quot;</span></span><br><span class="line">pointers -&gt; <span class="literal">nil</span></span><br><span class="line">slices -&gt; <span class="literal">nil</span></span><br><span class="line">maps -&gt; <span class="literal">nil</span></span><br><span class="line">channels -&gt; <span class="literal">nil</span></span><br><span class="line">functions -&gt; <span class="literal">nil</span></span><br><span class="line">interfaces -&gt; <span class="literal">nil</span></span><br></pre></td></tr></table></figure><p>举个例子，当你定义了一个 struct：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">type Person struct &#123;</span><br><span class="line">  AgeYears int</span><br><span class="line">  Name string</span><br><span class="line">  Friends []Person</span><br><span class="line">&#125;</span><br><span class="line">var p Person &#x2F;&#x2F; Person&#123;0, &quot;&quot;, nil&#125;</span><br></pre></td></tr></table></figure><p>变量<code>p</code>只声明但没有赋值，所以 p 的所有字段都有对应的零值。那么，这个<code>nil</code>到底是什么呢？Go 的文档中说到，_nil 是预定义的标识符，代表指针、通道、函数、接口、映射或切片的零值_，也就是预定义好的一个变量：</p><h2 id="slices"><a href="#slices" class="headerlink" title="slices"></a>slices</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// nil slices</span></span><br><span class="line"><span class="keyword">var</span> s []slice</span><br><span class="line"><span class="built_in">len</span>(s)  <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">cap</span>(s)  <span class="comment">// 0</span></span><br><span class="line"><span class="keyword">for</span> <span class="keyword">range</span> s  <span class="comment">// iterates zero times</span></span><br><span class="line">s[i]  <span class="comment">// panic: index out of range</span></span><br></pre></td></tr></table></figure><p>一个为<code>nil</code>的 slice，除了不能索引外，其他的操作都是可以的，当你需要填充值的时候可以使用<code>append</code>函数，slice 会自动进行扩充。那么为<code>nil</code>的 slice 的底层结构是怎样的呢？根据官方的文档，slice 有三个元素，分别是长度、容量、指向数组的指针：<br><img src= "/img/loading.gif" data-lazy-src="https://image.hackerjerry.top/GO%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97-2.png#align=left&display=inline&height=143&margin=%5Bobject%20Object%5D&name=image.png&originHeight=286&originWidth=601&size=27035&status=done&style=none&width=300.5" alt="image.png"><br>当有元素的时候，<br><img src= "/img/loading.gif" data-lazy-src="https://image.hackerjerry.top/GO%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97-3.png#align=left&display=inline&height=133&margin=%5Bobject%20Object%5D&name=image.png&originHeight=266&originWidth=779&size=50465&status=done&style=none&width=389.5" alt="image.png"></p><h2 id="channel"><a href="#channel" class="headerlink" title="channel"></a>channel</h2><blockquote><p>参考：<a href="https://colobu.com/2016/04/14/Golang-Channels/">https://colobu.com/2016/04/14/Golang-Channels/</a></p></blockquote><p>Channel 是 Go 中的一个核心类型，你可以把它看成一个管道，通过它并发核心单元就可以发送或者接收数据进行通讯(communication)。<br>它的操作符是箭头  <strong>&lt;-</strong> 。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">ch &lt;- v    <span class="comment">// 发送值v到Channel ch中</span></span><br><span class="line">v := &lt;-ch  <span class="comment">// 从Channel ch中接收数据，并将数据赋值给v</span></span><br></pre></td></tr></table></figure><p>(箭头的指向就是数据的流向)<br>就像 map 和 slice 数据类型一样, channel 必须先创建再使用:</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</span><br></pre></td></tr></table></figure><h3 id="定义与用法"><a href="#定义与用法" class="headerlink" title="定义与用法"></a>定义与用法</h3><p>它包括三种类型的定义。可选的<code>&lt;-</code>代表 channel 的方向。如果没有指定方向，那么 Channel 就是双向的，既可以接收数据，也可以发送数据。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">chan</span> T          <span class="comment">// 可以接收和发送类型为 T 的数据</span></span><br><span class="line"><span class="keyword">chan</span>&lt;- <span class="keyword">float64</span>  <span class="comment">// 只可以用来发送 float64 类型的数据</span></span><br><span class="line">&lt;-<span class="keyword">chan</span> <span class="keyword">int</span>      <span class="comment">// 只可以用来接收 int 类型的数据</span></span><br></pre></td></tr></table></figure><p>使用<code>make</code>初始化 Channel,并且可以设置容量:</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>, <span class="number">100</span>)</span><br></pre></td></tr></table></figure><p>容量(capacity)代表 Channel 容纳的最多的元素的数量，代表 Channel 的缓存的大小。<br>如果没有设置容量，或者容量设置为 0, 说明 Channel 没有缓存，只有 sender 和 receiver 都准备好了后它们的通讯(communication)才会发生(Blocking)。<strong>如果设置了缓存，就有可能不发生阻塞</strong>， 只有 buffer 满了后 send 才会阻塞， 而只有缓存空了后 receive 才会阻塞。一个 nil channel 不会通信。<br>可以通过内建的<code>close</code>方法可以关闭 Channel。<br>你<strong>可以在多个 goroutine 从/往 一个 channel 中 receive/send 数据, 不必考虑额外的同步措施</strong>。<br>Channel 可以作为一个先入先出(FIFO)的队列，接收的数据和发送的数据的顺序是一致的。<br>channel 的 receive 支持  <em>multi-valued assignment</em>，如</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">v, ok := &lt;-ch</span><br></pre></td></tr></table></figure><p>它可以用来检查 Channel 是否已经被关闭了。</p><h3 id="send"><a href="#send" class="headerlink" title="send"></a>send</h3><p>send 语句用来往 Channel 中发送数据， 如<code>ch &lt;- 3</code>。<br>它的定义如下:</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">SendStmt = Channel <span class="string">&quot;&lt;-&quot;</span> Expression .</span><br><span class="line">Channel  = Expression .</span><br></pre></td></tr></table></figure><p>在通讯(communication)开始前 channel 和 expression 必选先求值出来(evaluated)，比如下面的(3+4)先计算出 7 然后再发送给 channel。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">c := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</span><br><span class="line"><span class="keyword">defer</span> <span class="built_in">close</span>(c)</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123; c &lt;- <span class="number">3</span> + <span class="number">4</span> &#125;()</span><br><span class="line">i := &lt;-c</span><br><span class="line">fmt.Println(i)</span><br></pre></td></tr></table></figure><p>send 被执行前(proceed)通讯(communication)一直被阻塞着。如前所言，无缓存的 channel 只有在 receiver 准备好后 send 才被执行。如果有缓存，并且缓存未满，则 send 会被执行。<br>往一个<strong>已经被 close 的 channel 中</strong>继续发送数据会导致<strong>run-time panic</strong>。<br><strong>往 nil channel 中发送数据会一致被阻塞</strong>着。</p><h3 id="receive"><a href="#receive" class="headerlink" title="receive"></a>receive</h3><p><code>&lt;-ch</code>用来从 channel ch 中接收数据，这个表达式会一直被 block,直到有数据可以接收。<br>从一个 nil channel 中接收数据会一直被 block。<br>从一个被 close 的 channel 中接收数据不会被阻塞，而是立即返回，接收完已发送的数据后会返回元素类型的零值(zero value)。<br>如前所述，你可以使用一个额外的返回参数来检查 channel 是否关闭。</p><h3 id="阻塞"><a href="#阻塞" class="headerlink" title="阻塞"></a>阻塞</h3><p>缺省情况下，发送和接收会一直阻塞着，直到另一方准备好。这种方式可以用来在 gororutine 中进行同步，而不必使用显示的锁或者条件变量。<br>如官方的例子中<code>x, y := &lt;-c, &lt;-c</code>这句会一直等待计算结果发送到 channel 中。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sum</span><span class="params">(s []<span class="keyword">int</span>, c <span class="keyword">chan</span> <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">sum := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> _, v := <span class="keyword">range</span> s &#123;</span><br><span class="line">sum += v</span><br><span class="line">&#125;</span><br><span class="line">c &lt;- sum <span class="comment">// send sum to c</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">s := []<span class="keyword">int</span>&#123;<span class="number">7</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">-9</span>, <span class="number">4</span>, <span class="number">0</span>&#125;</span><br><span class="line">c := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</span><br><span class="line"><span class="keyword">go</span> sum(s[:<span class="built_in">len</span>(s)/<span class="number">2</span>], c)</span><br><span class="line"><span class="keyword">go</span> sum(s[<span class="built_in">len</span>(s)/<span class="number">2</span>:], c)</span><br><span class="line">x, y := &lt;-c, &lt;-c <span class="comment">// receive from c</span></span><br><span class="line">fmt.Println(x, y, x+y)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Range"><a href="#Range" class="headerlink" title="Range"></a>Range</h3><p><code>for …… range</code>语句可以处理 Channel。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">time.Sleep(<span class="number">1</span> * time.Hour)</span><br><span class="line">&#125;()</span><br><span class="line">c := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i = i + <span class="number">1</span> &#123;</span><br><span class="line">c &lt;- i</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">close</span>(c)</span><br><span class="line">&#125;()</span><br><span class="line"><span class="keyword">for</span> i := <span class="keyword">range</span> c &#123;</span><br><span class="line">fmt.Println(i)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">&quot;Finished&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>range c</code>产生的迭代值为 Channel 中发送的值，它会一直迭代直到 channel 被关闭。上面的例子中如果把<code>close(c)</code>注释掉，程序会一直阻塞在<code>for …… range</code>那一行。</p><h3 id="defer"><a href="#defer" class="headerlink" title="defer"></a>defer</h3><p><a href="https://tiancaiamao.gitbooks.io/go-internals/content/zh/03.4.html">https://tiancaiamao.gitbooks.io/go-internals/content/zh/03.4.html</a><br>这个博客讲的挺好的，其他知识也有，可以常看看。<br>另外还有：<a href="https://sanyuesha.com/2017/07/23/go-defer/">https://sanyuesha.com/2017/07/23/go-defer/</a></p><h1 id="其他知识"><a href="#其他知识" class="headerlink" title="其他知识"></a>其他知识</h1><h2 id="goroutine"><a href="#goroutine" class="headerlink" title="goroutine"></a>goroutine</h2><p><a href="https://www.cnblogs.com/wdliu/p/9272220.html">https://www.cnblogs.com/wdliu/p/9272220.html</a> 调度原理<br>代码示例：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">cal</span><span class="params">(a <span class="keyword">int</span> , b <span class="keyword">int</span> )</span></span>  &#123;</span><br><span class="line">    c := a+b</span><br><span class="line">    fmt.Printf(<span class="string">&quot;%d + %d = %d\n&quot;</span>,a,b,c)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;　　</span><br><span class="line">    <span class="keyword">for</span> i :=<span class="number">0</span> ; i&lt;<span class="number">10</span> ;i++&#123;</span><br><span class="line">        <span class="keyword">go</span> cal(i,i+<span class="number">1</span>)  <span class="comment">//启动10个goroutine 来计算</span></span><br><span class="line">    &#125;</span><br><span class="line">    time.Sleep(time.Second * <span class="number">2</span>) <span class="comment">// sleep作用是为了等待所有任务完成</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//结果</span></span><br><span class="line"><span class="comment">//8 + 9 = 17</span></span><br><span class="line"><span class="comment">//9 + 10 = 19</span></span><br><span class="line"><span class="comment">//4 + 5 = 9</span></span><br><span class="line"><span class="comment">//5 + 6 = 11</span></span><br><span class="line"><span class="comment">//0 + 1 = 1</span></span><br><span class="line"><span class="comment">//1 + 2 = 3</span></span><br><span class="line"><span class="comment">//2 + 3 = 5</span></span><br><span class="line"><span class="comment">//3 + 4 = 7</span></span><br><span class="line"><span class="comment">//7 + 8 = 15</span></span><br><span class="line"><span class="comment">//6 + 7 = 13</span></span><br></pre></td></tr></table></figure><h3 id="goroutine-异常捕捉"><a href="#goroutine-异常捕捉" class="headerlink" title="goroutine 异常捕捉"></a>goroutine 异常捕捉</h3><p>当启动多个 goroutine 时，如果<strong>其中一个 goroutine 异常</strong>了，并且我们并没有对进行异常处理，<strong>那么整个程序都会终止</strong>，所以我们在编写程序时候最好每个 goroutine 所运行的函数都做异常处理，异常处理采用 recover.</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">addele</span><span class="params">(a []<span class="keyword">int</span> ,i <span class="keyword">int</span>)</span></span>  &#123;</span><br><span class="line">    <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;    <span class="comment">//匿名函数捕获错误</span></span><br><span class="line">        err := <span class="built_in">recover</span>()</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            fmt.Println(<span class="string">&quot;add ele fail&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;()</span><br><span class="line">   a[i]=i</span><br><span class="line">   fmt.Println(a)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    Arry := <span class="built_in">make</span>([]<span class="keyword">int</span>,<span class="number">4</span>)</span><br><span class="line">    <span class="keyword">for</span> i :=<span class="number">0</span> ; i&lt;<span class="number">10</span> ;i++&#123;</span><br><span class="line">        <span class="keyword">go</span> addele(Arry,i)</span><br><span class="line">    &#125;</span><br><span class="line">    time.Sleep(time.Second * <span class="number">2</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//结果</span></span><br><span class="line">add ele fail</span><br><span class="line">[<span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span>]</span><br><span class="line">[<span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span>]</span><br><span class="line">[<span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">0</span>]</span><br><span class="line">[<span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span>]</span><br><span class="line">add ele fail</span><br><span class="line">add ele fail</span><br><span class="line">add ele fail</span><br><span class="line">add ele fail</span><br><span class="line">add ele fail</span><br></pre></td></tr></table></figure><h2 id="方法-1"><a href="#方法-1" class="headerlink" title="方法"></a>方法</h2><p>Go 语言中同时有函数和方法。<strong>一个方法就是一个包含了接受者的函数</strong>，接受者可以是命名类型或者结构体类型的一个值或者是一个指针。<strong>所有给定类型的方法属于该类型的方法集</strong>。语法格式如下：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(variable_name variable_data_type)</span> <span class="title">function_name</span><span class="params">()</span> [<span class="title">return_type</span>]</span>&#123;</span><br><span class="line">   <span class="comment">/* 函数体*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">   <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 定义结构体 */</span></span><br><span class="line"><span class="keyword">type</span> Circle <span class="keyword">struct</span> &#123;</span><br><span class="line">  radius <span class="keyword">float64</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="keyword">var</span> c1 Circle</span><br><span class="line">  c1.radius = <span class="number">10.00</span></span><br><span class="line">  fmt.Println(<span class="string">&quot;圆的面积 = &quot;</span>, c1.getArea())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//该 method 属于 Circle 类型对象中的方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c Circle)</span> <span class="title">getArea</span><span class="params">()</span> <span class="title">float64</span></span> &#123;</span><br><span class="line">  <span class="comment">//c.radius 即为 Circle 类型对象中的属性</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">3.14</span> * c.radius * c.radius</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="函数传参"><a href="#函数传参" class="headerlink" title="函数传参"></a>函数传参</h2><p>数组和切片很像，但是在调用的时候他们传递的类型是不同的！</p><ul><li>Go 语言的数组是值，其长度是其类型的一部分，作为函数参数时，是 <strong>值传递</strong>，函数中的修改对调用者不可见</li><li>Go 语言中对数组的处理，一般采用 <strong>切片</strong> 的方式，切片包含对底层数组内容的引用，作为函数参数时，类似于 <strong>指针传递</strong>，函数中的修改对调用者可见。</li></ul><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 数组</span></span><br><span class="line">b := [...]<span class="keyword">int</span>&#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">boo</span><span class="params">(tt [6]<span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    tt[<span class="number">0</span>], tt[<span class="built_in">len</span>(tt)<span class="number">-1</span>] = tt[<span class="built_in">len</span>(tt)<span class="number">-1</span>], tt[<span class="number">0</span>]</span><br><span class="line">&#125;</span><br><span class="line">boo(b)</span><br><span class="line">fmt.Println(b) <span class="comment">// [2 3 5 7 11 13]</span></span><br><span class="line"><span class="comment">// 切片</span></span><br><span class="line">p := []<span class="keyword">int</span>&#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">poo</span><span class="params">(tt []<span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    tt[<span class="number">0</span>], tt[<span class="built_in">len</span>(tt)<span class="number">-1</span>] = tt[<span class="built_in">len</span>(tt)<span class="number">-1</span>], tt[<span class="number">0</span>]</span><br><span class="line">&#125;</span><br><span class="line">poo(p)</span><br><span class="line">fmt.Println(p)  <span class="comment">// [13 3 5 7 11 2]</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;记录在进行 go 语言开发遇到的各种问题。&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>DAG区块链和传统区块链搭建异同</title>
    <link href="https://www.blog.hackerjerry.top/2021/04/01/DAG%E5%8C%BA%E5%9D%97%E9%93%BE%E5%92%8C%E4%BC%A0%E7%BB%9F%E5%8C%BA%E5%9D%97%E9%93%BE%E6%90%AD%E5%BB%BA%E5%BC%82%E5%90%8C_new/"/>
    <id>https://www.blog.hackerjerry.top/2021/04/01/DAG%E5%8C%BA%E5%9D%97%E9%93%BE%E5%92%8C%E4%BC%A0%E7%BB%9F%E5%8C%BA%E5%9D%97%E9%93%BE%E6%90%AD%E5%BB%BA%E5%BC%82%E5%90%8C_new/</id>
    <published>2021-04-01T10:42:32.000Z</published>
    <updated>2021-05-06T13:10:23.224Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h1 id="区块数据类型区别"><a href="#区块数据类型区别" class="headerlink" title="区块数据类型区别"></a>区块数据类型区别</h1><p>dag 的：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// blockNode represents a block within the DAG</span></span><br><span class="line"><span class="keyword">type</span> blockNode <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// <span class="doctag">NOTE:</span> Additions, deletions, or modifications to the order of the</span></span><br><span class="line"><span class="comment">// definitions in this struct should not be changed without considering</span></span><br><span class="line"><span class="comment">// how it affects alignment on 64-bit platforms.  The current order is</span></span><br><span class="line"><span class="comment">// specifically crafted to result in minimal padding.  There will be</span></span><br><span class="line"><span class="comment">// hundreds of thousands of these in memory, so a few extra bytes of</span></span><br><span class="line"><span class="comment">// padding adds up.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// parents are the parent block for this node.</span></span><br><span class="line">parents []*blockNode</span><br><span class="line"></span><br><span class="line"><span class="comment">// parent metadata like version and extra data</span></span><br><span class="line">parentMetadata []*parentInfo</span><br><span class="line"></span><br><span class="line">parentVersion <span class="keyword">int32</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// hash is the double sha 256 of the block.</span></span><br><span class="line">hash chainhash.Hash</span><br><span class="line"></span><br><span class="line"><span class="comment">// workSum is the total amount of work in the chain up to and including</span></span><br><span class="line"><span class="comment">// this node.</span></span><br><span class="line">workSum *big.Int</span><br><span class="line"></span><br><span class="line"><span class="comment">// height is parentsMaxHeight + 1</span></span><br><span class="line">height <span class="keyword">int32</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Some fields from block headers to</span></span><br><span class="line"><span class="comment">// reconstruct headers from memory.  These must be treated as</span></span><br><span class="line"><span class="comment">// immutable and are intentionally ordered to avoid padding on 64-bit</span></span><br><span class="line"><span class="comment">// platforms.</span></span><br><span class="line">version    <span class="keyword">int32</span></span><br><span class="line">bits       <span class="keyword">uint32</span></span><br><span class="line">nonce      <span class="keyword">uint32</span></span><br><span class="line">timestamp  <span class="keyword">int64</span></span><br><span class="line">merkleRoot chainhash.Hash</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> parentInfo <span class="keyword">struct</span> &#123;</span><br><span class="line">hash chainhash.Hash</span><br><span class="line">data [<span class="number">32</span>]<span class="keyword">byte</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>block 的：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Block <span class="keyword">struct</span> &#123;</span><br><span class="line">    Index     <span class="keyword">int</span></span><br><span class="line">    Timestamp <span class="keyword">string</span></span><br><span class="line">    BPM       <span class="keyword">int</span></span><br><span class="line">    Hash      <span class="keyword">string</span></span><br><span class="line">    PrevHash  <span class="keyword">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Index 是这个块在整个链中的位置</li><li>Timestamp 显而易见就是块生成时的时间戳</li><li>Hash 是这个块通过 SHA256 算法生成的散列值</li><li>PrevHash 代表前一个块的 SHA256 散列值</li><li>BPM 每分钟心跳数，也就是心率。–不太清楚干什么用的</li></ul><p>接着，我们再定义一个结构表示整个链，最简单的表示形式就是一个 Block 的数组：<br><code>var ``Blockchain`` []``Block</code><br>可以看出来，在 go 里面，是<strong>先写变量名，再写类型（比如*，[]），然后是最终类型。</strong></p><h1 id="通信系统"><a href="#通信系统" class="headerlink" title="通信系统"></a>通信系统</h1><h2 id="比特币网络"><a href="#比特币网络" class="headerlink" title="比特币网络"></a>比特币网络</h2><p>首先，比特币网络中的节点主要有四大功能：<strong>钱包、挖矿、区块链数据库、网络路由</strong>。每个节点都会具备路由功能，但其他功能不一定都具备，不同类型的节点可能只包含部分功能，一般只有<strong>比特币核心(bitcoin core)**节点才会包含所有四大功能。<br>所有节点都会参与校验和广播交易及区块信息，且会发现和维持与其他节点的连接。有些节点会包含完整的区块链数据库，包括所有交易数据，这种节点也称为</strong>全节点(Full Node)<strong>。另外一些节点只存储了区块链数据库的一部分，一般只存储区块头而不存储交易数据，它们会通过“</strong>简化交易验证(SPV)<strong>”的方式完成交易校验，这样的节点也称为  **SPV 节点</strong>或<strong>轻节点(Lightweight Node)**。钱包一般是 PC 或手机客户端的功能，用户通过钱包查看自己的账户金额、管理钱包地址和私钥、发起交易等。除了比特币核心钱包是全节点之外，大部分钱包都是</strong>轻节点<strong>。挖矿节点则通过解决</strong>工作量证明(PoW)<strong>算法问题，与其他挖矿节点相互竞争创建新区块。有些挖矿节点同时也是</strong>全节点<strong>，即也存储了完整的区块链数据库，这种节点一般都是</strong>独立矿工(Solo Miner)**。<br>我们知道，矿工创建新区块后，是需要广播给全网所有节点的，当全网都接受了该区块，给矿工的挖矿奖励才算是有效的，这之后才好开始下一个区块 Hash 的计算。所以矿工必须最大限度缩短新区块的广播和下一个区块 Hash 计算之间的时间。</p><h2 id="初试牛刀"><a href="#初试牛刀" class="headerlink" title="初试牛刀"></a>初试牛刀</h2><p>我猜你一定对传统的 web 服务及开发非常熟悉，所以这部分你肯定一看就会。 借助 Gorilla/mux 包，我们先写一个函数来初始化我们的 web 服务：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">run</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line">    mux := makeMuxRouter()</span><br><span class="line">    httpAddr := os.Getenv(<span class="string">&quot;ADDR&quot;</span>)</span><br><span class="line">    log.Println(<span class="string">&quot;Listening on &quot;</span>, os.Getenv(<span class="string">&quot;ADDR&quot;</span>))</span><br><span class="line">    s := &amp;http.Server&#123;</span><br><span class="line">        Addr:           <span class="string">&quot;:&quot;</span> + httpAddr,</span><br><span class="line">        Handler:        mux,</span><br><span class="line">        ReadTimeout:    <span class="number">10</span> * time.Second,</span><br><span class="line">        WriteTimeout:   <span class="number">10</span> * time.Second,</span><br><span class="line">        MaxHeaderBytes: <span class="number">1</span> &lt;&lt; <span class="number">20</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> err := s.ListenAndServe(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> err</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中的端口号是通过前面提到的 .env 来获得，再添加一些基本的配置参数，这个 web 服务就已经可以 listen and serve 了！ 接下来我们再来定义不同 endpoint 以及对应的 handler。例如，对“/”的 GET 请求我们可以查看整个链，“/”的 POST 请求可以创建块。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">makeMuxRouter</span><span class="params">()</span> <span class="title">http</span>.<span class="title">Handler</span></span> &#123;</span><br><span class="line">    muxRouter := mux.NewRouter()</span><br><span class="line">    muxRouter.HandleFunc(<span class="string">&quot;/&quot;</span>, handleGetBlockchain).Methods(<span class="string">&quot;GET&quot;</span>)</span><br><span class="line">    muxRouter.HandleFunc(<span class="string">&quot;/&quot;</span>, handleWriteBlock).Methods(<span class="string">&quot;POST&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> muxRouter</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>GET 请求的 handler：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">handleGetBlockchain</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">    bytes, err := json.MarshalIndent(Blockchain, <span class="string">&quot;&quot;</span>, <span class="string">&quot;  &quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        http.Error(w, err.Error(), http.StatusInternalServerError)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    io.WriteString(w, <span class="keyword">string</span>(bytes))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了简化，我们直接以 JSON 格式返回整个链，你可以在浏览器中访问 localhost:8080 或者 127.0.0.1:8080 来查看（这里的 8080 就是你在 .env 中定义的端口号 ADDR）。<br>POST 请求的 handler 稍微有些复杂，我们先来定义一下 POST 请求的 payload：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Message <span class="keyword">struct</span> &#123;</span><br><span class="line">    BPM <span class="keyword">int</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再看看 handler 的实现：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">handleWriteBlock</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> m Message</span><br><span class="line">    decoder := json.NewDecoder(r.Body)</span><br><span class="line">    <span class="keyword">if</span> err := decoder.Decode(&amp;m); err != <span class="literal">nil</span> &#123;</span><br><span class="line">        respondWithJSON(w, r, http.StatusBadRequest, r.Body)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">defer</span> r.Body.Close()</span><br><span class="line">    newBlock, err := generateBlock(Blockchain[<span class="built_in">len</span>(Blockchain)<span class="number">-1</span>], m.BPM)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        respondWithJSON(w, r, http.StatusInternalServerError, m)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> isBlockValid(newBlock, Blockchain[<span class="built_in">len</span>(Blockchain)<span class="number">-1</span>]) &#123;</span><br><span class="line">        newBlockchain := <span class="built_in">append</span>(Blockchain, newBlock)</span><br><span class="line">        replaceChain(newBlockchain)</span><br><span class="line">        spew.Dump(Blockchain)</span><br><span class="line">    &#125;</span><br><span class="line">    respondWithJSON(w, r, http.StatusCreated, newBlock)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们的 POST 请求体中可以使用上面定义的 payload，比如：<br><code>&#123;``&quot;BPM&quot;``:``75``&#125;</code><br>还记得前面我们写的 generateBlock 这个函数吗？它接受一个“前一个块”参数，和一个 BPM 值。POST handler 接受请求后就能获得请求体中的 BPM 值，接着借助生成块的函数以及校验块的函数就能生成一个新的块了！<br>除此之外，你也可以：</p><ul><li>使用 spew.Dump 这个函数可以以非常美观和方便阅读的方式将 struct、slice 等数据打印在控制台里，方便我们调试。</li><li>测试 POST 请求时，可以使用 POSTMAN 这个 chrome 插件，相比 curl 它更直观和方便。</li></ul><p>POST 请求处理完之后，无论创建块成功与否，我们需要返回客户端一个响应：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">respondWithJSON</span><span class="params">(w http.ResponseWriter, r *http.Request, code <span class="keyword">int</span>, payload <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">    response, err := json.MarshalIndent(payload, <span class="string">&quot;&quot;</span>, <span class="string">&quot;  &quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        w.WriteHeader(http.StatusInternalServerError)</span><br><span class="line">        w.Write([]<span class="keyword">byte</span>(<span class="string">&quot;HTTP 500: Internal Server Error&quot;</span>))</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    w.WriteHeader(code)</span><br><span class="line">    w.Write(response)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="快要大功告成了"><a href="#快要大功告成了" class="headerlink" title="快要大功告成了"></a>快要大功告成了</h3><p>接下来，我们把这些关于区块链的函数，web 服务的函数“组装”起来：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    err := godotenv.Load()</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Fatal(err)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        t := time.Now()</span><br><span class="line">        genesisBlock := Block&#123;<span class="number">0</span>, t.String(), <span class="number">0</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>&#125;</span><br><span class="line">        spew.Dump(genesisBlock)</span><br><span class="line">        Blockchain = <span class="built_in">append</span>(Blockchain, genesisBlock)</span><br><span class="line">    &#125;()</span><br><span class="line">    log.Fatal(run())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的 <code>genesisBlock</code> （创世块）是 main 函数中最重要的部分，通过它来初始化区块链，毕竟第一个块的 PrevHash 是空的。</p><h2 id="遇到问题"><a href="#遇到问题" class="headerlink" title="遇到问题"></a>遇到问题</h2><p><a href="https://github.com/omnigeeker/golang_blockchain_demo/tree/master/networking">https://github.com/omnigeeker/golang_blockchain_demo/tree/master/networking</a><br>在参考这个步骤的时候，发现始终无法监听到 8000 端口的信息，晚上苦苦思索一个小时没有任何解决思路，今天早上又看了一下，发现我没有改文件？？？？我还是用第一个 demo 文件来模拟多节点，笑死。<br>赶紧创建文件，复制粘贴。<br>bingo！<br><img src= "/img/loading.gif" data-lazy-src="https://image.hackerjerry.top/DAG%E5%8C%BA%E5%9D%97%E9%93%BE%E5%92%8C%E4%BC%A0%E7%BB%9F%E5%8C%BA%E5%9D%97%E9%93%BE%E6%90%AD%E5%BB%BA%E5%BC%82%E5%90%8C-1.png#height=203&id=sjAuI&margin=%5Bobject%20Object%5D&name=image.png&originHeight=405&originWidth=1361&originalType=binary&size=1018627&status=done&style=none&width=680.5" alt="image.png"><br>这里设置的每 30 秒广播一次区块信息，所以如果一直监听可能会遇到这样的情况：<br><img src= "/img/loading.gif" data-lazy-src="https://image.hackerjerry.top/DAG%E5%8C%BA%E5%9D%97%E9%93%BE%E5%92%8C%E4%BC%A0%E7%BB%9F%E5%8C%BA%E5%9D%97%E9%93%BE%E6%90%AD%E5%BB%BA%E5%BC%82%E5%90%8C-2.png#height=388&id=W1t1G&margin=%5Bobject%20Object%5D&name=image.png&originHeight=776&originWidth=1345&originalType=binary&size=1812987&status=done&style=none&width=672.5" alt="image.png"><br>注意：这里的 nc 命令和文章中提到的不一样，文章中简单的<code>nc localhost 8000</code>当然可以用，但是这样更规范，它相当于模拟了一个客户端，开放 5000 端口和主机地址的 8000 端口进行通信。<br>用它，甚至可以模拟一个简易的聊天室！<br>nc 的本质是在两台机器之间建立连接，之后就可以基于这个连接做很多事情，数据传输是其中一个最为基本的。我们下面就使用 nc 来建立一个 C/S 的聊天室。<br>模拟 Server 端：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> -v ：输出详细信息</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -l ：指定监听地址和端口</span></span><br><span class="line">nc -v -l 127.0.0.1 6000</span><br></pre></td></tr></table></figure><p>模拟 Client 端：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> -p : 指定源端口</span></span><br><span class="line">nc -v -p 5000 localhost 6000</span><br></pre></td></tr></table></figure><p>之后，Client 和 Server 端就可以相互聊天了。<br>Client：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> nc -v -p 5000 localhost 6000</span></span><br><span class="line">nc: connect to localhost port 6000 (tcp) failed: Connection refused</span><br><span class="line">Connection to localhost 6000 port [tcp/x11] succeeded!</span><br><span class="line">Hi, server</span><br><span class="line">Hi, client</span><br></pre></td></tr></table></figure><p>Server：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> nc -v -l 127.0.0.1 6000</span></span><br><span class="line">Listening on [127.0.0.1] (family 0, port 6000)</span><br><span class="line">Connection from [127.0.0.1] port 6000 [tcp/x11] accepted (family 2, sport 5000)</span><br><span class="line">Hi, server</span><br><span class="line">Hi, client</span><br></pre></td></tr></table></figure><p>nc 具体操作可以参考：<br>【1】<a href="https://www.cnblogs.com/bakari/p/10898604.html">https://www.cnblogs.com/bakari/p/10898604.html</a><br>【2】<a href="https://www.huaweicloud.com/articles/7f323edef71be76eb5705275718ecfef.html">https://www.huaweicloud.com/articles/7f323edef71be76eb5705275718ecfef.html</a><br>【3】<a href="https://www.cnblogs.com/zhaijiahui/p/9028402.html">https://www.cnblogs.com/zhaijiahui/p/9028402.html</a><br>【4】<a href="https://phpor.net/blog/post/225">https://phpor.net/blog/post/225</a></p><h2 id="p2p-多节点网络"><a href="#p2p-多节点网络" class="headerlink" title="p2p 多节点网络"></a>p2p 多节点网络</h2><p><a href="https://github.com/corgi-kx/blockchain_golang/blob/master/network/server.go">https://github.com/corgi-kx/blockchain_golang/blob/master/network/server.go</a><br>我认为需要先在单节点完成 dag 架构的 pow 之后再尝试多节点通讯，所以这里暂时搁置。</p><h1 id="DAG"><a href="#DAG" class="headerlink" title="DAG"></a>DAG</h1><h1 id="SPECTRE-共识"><a href="#SPECTRE-共识" class="headerlink" title="SPECTRE 共识"></a>SPECTRE 共识</h1><h1 id="账户系统与交易签名"><a href="#账户系统与交易签名" class="headerlink" title="账户系统与交易签名"></a>账户系统与交易签名</h1><p>前置知识：<br>【1】<a href="https://learnblockchain.cn/books/geth/part3/sign-and-valid.html">签名与校验</a><br>【2】<a href="https://aaron67.cc/2020/10/10/bitcoin-sign-transaction/">比特币交易中的签名</a><br>【3】<a href="https://blog.csdn.net/AAA123524457/article/details/107693278">比特币交易中的签名与验证</a></p><h2 id="国密-SM2"><a href="#国密-SM2" class="headerlink" title="国密 SM2"></a>国密 SM2</h2><p>流程：<a href="https://blog.csdn.net/samsho2/article/details/80770862">https://blog.csdn.net/samsho2/article/details/80770862</a><br>详细原理：<br>【1】<a href="https://learnblockchain.cn/article/1515">SM2 算法与 KDF 密钥导出函数</a><br>【2】<a href="https://learnblockchain.cn/article/1507">SM2 的签名和验证过程</a><br>以上均要写在本子里<br>“github.com/paul-lee-attorney/gm/sm2” 这个库将所有代码都注释了，非常好，可以直接用<br><a href="https://pkg.go.dev/github.com/paul-lee-attorney/gm/sm2">https://pkg.go.dev/github.com/paul-lee-attorney/gm/sm2</a> 这是它的用法<br><img src= "/img/loading.gif" data-lazy-src="https://image.hackerjerry.top/DAG%E5%8C%BA%E5%9D%97%E9%93%BE%E5%92%8C%E4%BC%A0%E7%BB%9F%E5%8C%BA%E5%9D%97%E9%93%BE%E6%90%AD%E5%BB%BA%E5%BC%82%E5%90%8C-3.png#height=386&id=P6Coj&margin=%5Bobject%20Object%5D&name=image.png&originHeight=771&originWidth=998&originalType=binary&size=54825&status=done&style=none&width=499" alt="image.png"><br>这个函数可以用在本子里，提升逼格。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;crypto/rand&quot;</span></span><br><span class="line"><span class="string">&quot;encoding/hex&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line">_ <span class="string">&quot;time&quot;</span></span><br><span class="line"><span class="comment">//&quot;github.com/rongzer/gm/sm2&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/paul-lee-attorney/gm/sm2&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//fmt.Println(time.Now().Format(&quot;2006-01-02 15:04:05&quot;))</span></span><br><span class="line"><span class="comment">//fmt.Println(time.Now().Unix())</span></span><br><span class="line"><span class="comment">//bf := bbloom.New(float64(1&lt;&lt;12), float64(0.01))</span></span><br><span class="line"><span class="comment">//bf.Add([]byte(&quot;butter&quot;))</span></span><br><span class="line"><span class="comment">////Json := bf.JSONMarshal()</span></span><br><span class="line"><span class="comment">//var set = bf.ShowBitset()</span></span><br><span class="line"><span class="comment">////var value  = 0</span></span><br><span class="line"><span class="comment">////for _,v := range set&#123;</span></span><br><span class="line"><span class="comment">////value += int(v)</span></span><br><span class="line"><span class="comment">////&#125;</span></span><br><span class="line"><span class="comment">//fmt.Println(len(set))</span></span><br><span class="line"><span class="comment">//priv, err := sm2.GenerateKey(rand.Reader) // 生成密钥对</span></span><br><span class="line"><span class="comment">//if err != nil &#123;</span></span><br><span class="line"><span class="comment">//log.Fatal(err)</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//msg := []byte(&quot;Tongji Fintech Research Institute&quot;)</span></span><br><span class="line"><span class="comment">//pub := &amp;priv.PublicKey</span></span><br><span class="line"><span class="comment">//sign,err := priv.Sign(rand.Reader, msg, nil)  //sm2签名</span></span><br><span class="line"><span class="comment">//if err != nil &#123;</span></span><br><span class="line"><span class="comment">//log.Fatal(err)</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//fmt.Println(*pub)</span></span><br><span class="line"><span class="comment">//isok := pub.Verify(msg, sign)    //sm2验签</span></span><br><span class="line"><span class="comment">//fmt.Printf(&quot;Verified: %v\n&quot;, isok)</span></span><br><span class="line">msg := []<span class="keyword">byte</span>(<span class="string">&quot;test message 123012301230&quot;</span>)</span><br><span class="line"><span class="comment">// 创建公私钥</span></span><br><span class="line">priKey, _ := sm2.GenerateKey(rand.Reader)</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 签名</span></span><br><span class="line">sign, err := sm2.Sign(priKey,<span class="literal">nil</span>, msg)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;sign:%s\n&quot;</span>, hex.EncodeToString(sign))</span><br><span class="line">fmt.Println(<span class="string">&quot;prikey:\n&quot;</span>,priKey.GetRawBytes())</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">&quot;prikey:%s\n&quot;</span>,hex.EncodeToString(priKey.GetRawBytes()))</span><br><span class="line">fmt.Printf(<span class="string">&quot;pubkey:%s\n&quot;</span>,hex.EncodeToString(priKey.PublicKey.GetRawBytes()))</span><br><span class="line"></span><br><span class="line">src := hex.EncodeToString(priKey.GetRawBytes())</span><br><span class="line">n, err :=  hex.DecodeString(src)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(n)</span><br><span class="line"><span class="comment">// 验签</span></span><br><span class="line"><span class="keyword">var</span> res <span class="keyword">bool</span></span><br><span class="line">res,err = sm2.Verify(&amp;priKey.PublicKey,<span class="literal">nil</span>,msg, sign)</span><br><span class="line"><span class="comment">//if err != nil&#123;</span></span><br><span class="line"><span class="comment">//panic(err)</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line">fmt.Println(res)</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://image.hackerjerry.top/DAG%E5%8C%BA%E5%9D%97%E9%93%BE%E5%92%8C%E4%BC%A0%E7%BB%9F%E5%8C%BA%E5%9D%97%E9%93%BE%E6%90%AD%E5%BB%BA%E5%BC%82%E5%90%8C-4.png#height=97&id=h4IoK&margin=%5Bobject%20Object%5D&name=image.png&originHeight=193&originWidth=1487&originalType=binary&size=42228&status=done&style=none&width=743.5" alt="image.png"></p><h1 id="维护可信交易用到的技术栈"><a href="#维护可信交易用到的技术栈" class="headerlink" title="维护可信交易用到的技术栈"></a>维护可信交易用到的技术栈</h1><p>hashmap–用于快速查找<br>具体原理：<a href="https://zhuanlan.zhihu.com/p/27108356">https://zhuanlan.zhihu.com/p/27108356</a><br>测试性能：<a href="https://github.com/phf/go-hashmap">https://github.com/phf/go-hashmap</a> 那个测试的样式可以嫖一下</p><h1 id="测压-tps"><a href="#测压-tps" class="headerlink" title="测压 tps"></a>测压 tps</h1><p>【1】<a href="https://hyperledger.github.io/caliper/v0.3.2/architecture-ch/">https://hyperledger.github.io/caliper/v0.3.2/architecture-ch/</a><br>【2】<a href="https://blog.csdn.net/qq_44316726/article/details/108112300?utm_medium=distribute.pc_relevant.none-task-blog-baidujs_title-0&spm=1001.2101.3001.4242">https://blog.csdn.net/qq_44316726/article/details/108112300?utm_medium=distribute.pc_relevant.none-task-blog-baidujs_title-0&amp;spm=1001.2101.3001.4242</a><br>【3】<a href="https://zhuanlan.zhihu.com/p/133873895">https://zhuanlan.zhihu.com/p/133873895</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;

&lt;h1 id=&quot;区块数据类型区别&quot;&gt;&lt;a href=&quot;#区块数据类型区别&quot; class=&quot;headerlink&quot; title=&quot;区块数据类型区别&quot;&gt;&lt;/a&gt;区块数据类型区别&lt;/h1&gt;&lt;p&gt;dag 的：&lt;/p&gt;
&lt;figure class=&quot;h</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Spatio-temporal-blockchain</title>
    <link href="https://www.blog.hackerjerry.top/2021/03/26/Spatio-temporal-blockchain_new/"/>
    <id>https://www.blog.hackerjerry.top/2021/03/26/Spatio-temporal-blockchain_new/</id>
    <published>2021-03-26T02:11:07.000Z</published>
    <updated>2021-05-06T13:10:09.329Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">Hey, password is required here.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="13e2872c55e72eeaeb8b81b47fc4798fd723e4af0975164f3631daec44324286"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">Here&#39;s something encrypted, password is required to continue reading.</summary>
    
    
    
    <category term="区块链" scheme="https://www.blog.hackerjerry.top/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    
    <category term="Blockchain" scheme="https://www.blog.hackerjerry.top/tags/Blockchain/"/>
    
    <category term="时空区块链" scheme="https://www.blog.hackerjerry.top/tags/%E6%97%B6%E7%A9%BA%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
  </entry>
  
  <entry>
    <title>Deep-understanding-of-intelligent-contracts</title>
    <link href="https://www.blog.hackerjerry.top/2021/03/24/Deep-understanding-of-intelligent-contracts_new/"/>
    <id>https://www.blog.hackerjerry.top/2021/03/24/Deep-understanding-of-intelligent-contracts_new/</id>
    <published>2021-03-24T10:56:29.000Z</published>
    <updated>2021-05-06T13:02:43.402Z</updated>
    
    <content type="html"><![CDATA[<p>参考官方文档进行进一步了解。</p><a id="more"></a><h1 id="智能合约能干什么"><a href="#智能合约能干什么" class="headerlink" title="智能合约能干什么"></a>智能合约能干什么</h1><p>在各业务彼此进行交互之前，必须先定义一套通用的合约，其中包括通用术语、数据、规则、概念定义和流程。将这些合约放在一起，就构成了管理交易各方之间所有交互的<strong>业务模型</strong>。<br><img src= "/img/loading.gif" data-lazy-src="https://image.hackerjerry.top/Deep-understanding-of-intelligent-contracts-1.png#align=left&display=inline&height=273&margin=%5Bobject%20Object%5D&name=image.png&originHeight=354&originWidth=865&size=56096&status=done&style=none&width=668" alt="image.png"><br>_智能合约用可执行的代码定义了不同组织之间的规则。_<strong><em>应用程序调用智能合约来生成被记录到账本上的交易。</em></strong><br>在<a href="https://hyperledger-fabric.readthedocs.io/zh_CN/latest/smartcontract/smartcontract.html#%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6">上图</a>中，我们可以看到组织  <code>ORG1</code>  和  <code>ORG2</code>  是如何通过定义一个  <code>car</code>  智能合约来实现  <code>查询</code>、<code>转移</code>  和  <code>更新</code>  汽车的。来自这些组织的应用程序调用此智能合约执行业务流程中已商定的步骤，例如将特定汽车的所有权从  <code>ORG1</code>  转移到  <code>ORG2</code>。</p><h1 id="智能合约-amp-链码"><a href="#智能合约-amp-链码" class="headerlink" title="智能合约&amp;链码"></a>智能合约&amp;链码</h1><p>通常，智能合约定义的是控制世界状态中业务对象生命周期的<strong>交易逻辑</strong>，随后该交易逻辑被打包进链码，紧接着链码会被部署到区块链网络中。可以将智能合约看成交易的管理者，而链码则管理着如何将智能合约打包以便用于部署。<br><img src= "/img/loading.gif" data-lazy-src="https://image.hackerjerry.top/Deep-understanding-of-intelligent-contracts-2.png#align=left&display=inline&height=256&margin=%5Bobject%20Object%5D&name=image.png&originHeight=280&originWidth=739&size=28395&status=done&style=none&width=675" alt="image.png"><br><em>一个智能合约定义在一个链码中。而多个智能合约也可以定义在同一个链码中。当一个链码部署完毕，该链码中的所有智能合约都可供应用程序使用。</em><br>从上图中我们可以看到，<code>vehicle</code> 链码包含了以下三个智能合约：<code>cars</code>、<code>boats</code> 和 <code>trucks</code>；而 <code>insurance</code> 链码包含了以下四个智能合约：<code>policy</code>、<code>liability</code>、<code>syndication</code> 和 <code>securitization</code>。以上每种智能合约都涵盖了与车辆和保险有关的业务流程的一些关键点。在本主题中，我们将以 <code>car</code> 智能合约为例。我们可以看到，智能合约是一个特定领域的程序，它与特定的业务流程相关，而链码则是一组相关智能合约安装和实例化的技术容器。</p><h1 id="账本"><a href="#账本" class="headerlink" title="账本"></a>账本</h1><p>以最简单的方式来说，区块链记录着更新账本状态的交易，且记录不可篡改。智能合约以编程方式访问账本两个不同的部分：一个是<strong>区块链</strong>（记录所有交易的历史，且记录不可篡改），另一个是<strong>世界状态</strong>（保存这些状态当前值的缓存，是经常需要用到的对象的当前值）。<br>首先，<strong>世界状态</strong>是一个数据库，它存储了一组账本状态的<strong>当前值</strong>。通过世界状态，程序可以直接访问一个账本状态的当前值，不需要遍历整个交易日志来计算当前值。默认情况下，账本状态是以<strong>键值</strong>对的方式来表示的。因为我们可以创建、更新和删除状态，所以世界状态能够频繁更改。<br>其次，<strong>区块链</strong>是交易日志，它记录了促成当前世界状态的所有改变。交易被收集在附加到区块链的区块中，能帮助我们理解所有促成当前世界状态的改变的历史。区块链数据结构与世界状态相差甚远，因为一旦把数据写入区块链，就无法修改，它是<strong>不可篡改的</strong>。<br><img src= "/img/loading.gif" data-lazy-src="https://image.hackerjerry.top/Deep-understanding-of-intelligent-contracts-3.png#align=left&display=inline&height=292&margin=%5Bobject%20Object%5D&name=image.png&originHeight=345&originWidth=804&size=50947&status=done&style=none&width=680" alt="image.png"><br><em>账本 L 由区块链 B 和世界状态 W 组成，其中世界状态 W 由区块链 B 决定。我们也可以说世界状态 W 是源自区块链 B。</em><br>智能合约主要在世界状态中将状态<strong>写入</strong>（put）、<strong>读取</strong>（get）和<strong>删除</strong>（delete），还可以查询不可篡改的区块链交易记录。</p><ul><li><strong>读取（get）</strong> 操作一般代表的是查询，目的是获取关于交易对象当前状态的信息。</li><li><strong>写入（put）</strong> 操作通常生成一个新的业务对象或者对账本世界状态中现有的业务对象进行修改。</li><li><strong>删除（delete）</strong> 操作代表的是将一个业务对象从账本的当前状态中移除，但不从账本的历史中移除。</li></ul><p>智能合约有许多可用的 <a href="https://hyperledger-fabric.readthedocs.io/zh_CN/latest/developapps/transactioncontext.html#structure">API</a>。但重要的是，在任意情况下，无论交易创建、读取、更新还是删除世界状态中的业务对象，区块链都包含了这些操作的记录，且<a href="https://hyperledger-fabric.readthedocs.io/zh_CN/latest/ledger/ledger.html">记录不可更改</a> 。</p><h2 id="世界状态"><a href="#世界状态" class="headerlink" title="世界状态"></a>世界状态</h2><p>世界状态将业务对象属性的当前值保存为唯一的账本状态。这很有用，因为程序通常需要对象的当前值，如果遍历整个区块链来计算对象的当前值会很麻烦——从世界状态中可以直接获取当前值。<br><img src= "/img/loading.gif" data-lazy-src="https://image.hackerjerry.top/Deep-understanding-of-intelligent-contracts-4.png#align=left&display=inline&height=266&margin=%5Bobject%20Object%5D&name=image.png&originHeight=339&originWidth=863&size=90524&status=done&style=none&width=677" alt="image.png"><br><em>一个账本世界状态包含两个状态。第一个状态是： key=CAR1 和 value=Audi。第二个状态中有一个更复杂的值：key=CAR2 和 value={model:BMW, color=red, owner=Jane} 。两个状态的版本都是 0。</em><br>账本状态记录了一组与特定业务对象有关的事实。我们的示例展示的是 CAR1 和 CAR2 这两辆车的账本状态，二者都各有一个值和一个键。应用程序可以调用智能合约，该合约使用简单的账本 API 来<strong>获取</strong>、<strong>写入</strong>和<strong>删除</strong>状态。注意状态值可以是简单值（Audi…），也可以是复合值（type:BMW…）。经常会通过查询世界状态来检索具有某些特定属性的对象，例如查找所有红色宝马汽车。<br>应用程序提交那些会更改世界状态的交易，这些交易最终被提交到账本区块链上。应用程序无法看到 Hyperledger Fabric SDK（软件开发工具包）设定的<a href="https://hyperledger-fabric.readthedocs.io/zh_CN/latest/txflow.html">共识机制</a>的细节内容，它们能做的只是调用智能合约以及在交易被收进区块链时收到通知（<strong>所有被提交的交易，无论有效与否，都会被收进区块链</strong>）。Hyperledger Fabric 的关键设计在于，只有那些受到相关<strong>背书组织签名</strong>的交易才会更新世界状态。<br>您还会注意到，每个状态都有一个版本号，在上面的图表中，状态 CAR1 和 CAR2 都处于它们的初始版本 0。版本号是供 Hyperledger Fabric 内部使用的，并且每次状态更改时版本号会发生递增。每当更新状态时，都会检查该状态的版本，以确保当前状态与背书时的版本相匹配。这就确保了世界状态是按照预期进行更新的，没有发生并发更新。<br>最后，首次创建账本时，世界状态是空的。<strong>因为区块链上记录了所有代表有效世界状态更新的交易，所以任何时候都可以从区块链中重新生成世界状态。</strong>这样一来就变得非常方便，例如，<strong>创建节点时会自动生成世界状态</strong>。此外，如果某个节点发生异常，<strong>重启该节点时能够在接受交易之前重新生成世界状态</strong>。</p><h2 id="区块链"><a href="#区块链" class="headerlink" title="区块链"></a>区块链</h2><p>世界状态存储了与业务对象当前状态相关的事实信息，而区块链是一种历史记录，它记录了这些业务对象是如何到达各自当前状态的相关事实。<strong>区块链记录了每个账本状态之前的所有版本以及状态是如何被更改的。</strong><br><strong>区块链的结构是一群相互链接的区块的序列化日志，其中每个区块都包含一系列交易，各项交易代表了一个对世界状态进行的查询或更新操作。</strong></p><blockquote><p>在这里，官方提到了一个排序服务。<br>其中重要的是<strong>区块排序以及区块内的交易排序</strong>，这一机制是在 Hyperledger Fabric 的<strong>排序服务</strong>组件首次创建区块时被建立起来的。</p></blockquote><p>每个区块的头部都包含区块交易的一个哈希，以及前一个区块头的哈希。这样一来，账本上的所有交易都被按序排列，并以密码方式连接在一起。这种哈希和链接使账本数据变得非常安全。即使某个保存账本的节点被篡改了，该节点也无法让其他节点相信自己拥有“正确的”区块链，这是因为账本被分布在一个由独立节点组成的网络中。<br><strong>区块链总是以文件实现</strong>，而与之相反的是<strong>，世界状态以数据库实现</strong>。这是一个明智的设计，因为区块链数据结构高度偏向于非常小的一组简单操作。第一项操作被放在区块链的末尾，就目前来说，查询操纵相对少见。</p><p>当<strong>应用程序需要访问账本和链码的时候</strong>，他们总是需要连接到 Peer 节点。Hyperledger Fabric SDK 将这个操作变得非常简单，它的 API 使应用程序能够连接到 Peer 节点，<strong>调用链码生成交易，提交交易到网络，在网络中交易会被排序并且提交到分布式账本中</strong>，并且在这个流程结束的时候接收到事件。<br><strong>！不过，我们注意到 xuperchain 在文档中提到了使用 JDK 通过</strong><a href="https://xuper.baidu.com/n/xuperdoc/development_manuals/XuperRPC.html#id1"><strong>rpc 接口</strong></a><strong>构造交易发布！</strong><br><strong>目前需要知道：</strong></p><ul><li>智能合约发布的交易，发布方地址是什么，接收方地址是什么，他们在链上存储的和普通交易是否有区别？</li><li>在搞清问题 1 之后，是否有可能构造交易，把添加自定义字段，然后使用 rpc 接口发布？</li><li>因为区块链链式结构只需要将上一个区块的 hsah 包含在本区块头中，而 DAG 则将多个（至少两个块作为前置块，那么它们是如何连接的）</li></ul><hr><p>补充一个：<br>【1】快照链<a href="https://github.com/vitelabs/go-vite/blob/master/ledger/chain/block/snapshot_block.go">https://github.com/vitelabs/go-vite/blob/master/ledger/chain/block/snapshot_block.go</a><br>【2】真正的 DAG？<a href="https://github.com/vitelabs/go-vite/blob/master/ledger/chain/chain.go">https://github.com/vitelabs/go-vite/blob/master/ledger/chain/chain.go</a><br>【3】靠谱一点的白皮书<a href="https://www.yuque.com/attachments/yuque/0/2021/pdf/1629942/1616644033176-46652e0d-d91b-41c0-823a-ee503f7d8264.pdf?_lake_card=%7B%22uid%22:%221616644031374-0%22,%22src%22:%22https://www.yuque.com/attachments/yuque/0/2021/pdf/1629942/1616644033176-46652e0d-d91b-41c0-823a-ee503f7d8264.pdf%22,%22name%22:%22vite_cn.pdf%22,%22size%22:1164591,%22type%22:%22application/pdf%22,%22ext%22:%22pdf%22,%22progress%22:%7B%22percent%22:99%7D,%22status%22:%22done%22,%22percent%22:0,%22id%22:%22N6Qwn%22,%22card%22:%22file%22%7D">vite_cn.pdf</a><br>【4】xuper 里的交易定义<a href="https://github.com/xuperchain/xuperchain/blob/7de83707283ba872129d66aa5e4435d04ed67bee/core/cmd/cli/types.go">https://github.com/xuperchain/xuperchain/blob/7de83707283ba872129d66aa5e4435d04ed67bee/core/cmd/cli/types.go</a><br>【5】xuper 的快照链<a href="https://github.com/xuperchain/xuperchain/blob/9d9e60a3bcd87bafafdac51784b504a310ead3d7/core/xmodel/xmodel.go#L51">https://github.com/xuperchain/xuperchain/blob/9d9e60a3bcd87bafafdac51784b504a310ead3d7/core/xmodel/xmodel.go#L51</a><br>【6】<a href="https://www.jianshu.com/p/8734e06d558f">GHOST，DAG，SPECTRE，PHANTOM 和 CONFLUX 技术原理</a>–挺全的<br>【7】<a href="https://confluxnetwork.org/zh/developers/assets">https://confluxnetwork.org/zh/developers/assets</a>–conflux 区块链，清华自研，树形结构，网站挺好的，白皮书也行</p><p><img src= "/img/loading.gif" data-lazy-src="https://image.hackerjerry.top/Deep-understanding-of-intelligent-contracts-5.png#align=left&display=inline&height=362&margin=%5Bobject%20Object%5D&name=image.png&originHeight=724&originWidth=1419&size=128783&status=done&style=none&width=709.5" alt="image.png"><br>【8】conflux 的白皮书<a href="https://www.yuque.com/attachments/yuque/0/2021/pdf/1629942/1616675325254-7b3d2143-8a29-4ae3-979b-0da2ca0b759e.pdf?_lake_card=%7B%22uid%22:%221616675322385-0%22,%22src%22:%22https://www.yuque.com/attachments/yuque/0/2021/pdf/1629942/1616675325254-7b3d2143-8a29-4ae3-979b-0da2ca0b759e.pdf%22,%22name%22:%22Conflux_Technical_Presentation_whitepaper.pdf%22,%22size%22:1899775,%22type%22:%22application/pdf%22,%22ext%22:%22pdf%22,%22progress%22:%7B%22percent%22:99%7D,%22status%22:%22done%22,%22percent%22:0,%22id%22:%22DpkoK%22,%22card%22:%22file%22%7D">Conflux_Technical_Presentation_whitepaper.pdf</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;参考官方文档进行进一步了解。&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
</feed>
