{"title":"区块链底层-区块与交易","slug":"区块链底层-区块与交易","date":"2021-04-24T07:32:07.000Z","updated":"2022-02-07T10:19:46.593Z","comments":true,"path":"api/articles/区块链底层-区块与交易.json","realPath":null,"excerpt":null,"covers":["https://cdn.nlark.com/yuque/0/2021/png/1629942/1619249868318-33cdb077-0bd2-4d1e-bec1-3795eddef39c.png#clientId=u9ae9216b-af72-4&from=paste&height=402&id=u321a8f97&margin=%5Bobject%20Object%5D&originHeight=644&originWidth=1228&originalType=url&status=done&style=none&taskId=u9f6b4a08-53f6-466b-bd87-bb0cb52dc50&width=766","https://cdn.nlark.com/yuque/0/2021/png/1629942/1619253706498-09b2bbc1-7c6d-4e9d-baeb-660898a5cdca.png#clientId=u9ae9216b-af72-4&from=paste&height=203&id=u42b0fbbe&margin=%5Bobject%20Object%5D&originHeight=283&originWidth=969&originalType=url&status=done&style=none&taskId=u56a01b4b-366c-4bd6-976c-05606cea4e0&width=693.5","https://cdn.nlark.com/yuque/0/2021/png/1629942/1619265537072-fa82f8b8-40cd-4e53-9d2c-59fb05fc38cb.png#clientId=u9ae9216b-af72-4&from=paste&height=380&id=u3f9ff1a7&margin=%5Bobject%20Object%5D&originHeight=760&originWidth=652&originalType=url&status=done&style=none&taskId=u8eec5c7d-8f2e-41d5-9917-91e25564eb4&width=326","https://cdn.nlark.com/yuque/0/2021/png/1629942/1619355807814-5098a5b6-b3eb-40aa-8d94-a034d3740090.png#clientId=u9ae9216b-af72-4&from=paste&height=482&id=u14eddb16&margin=%5Bobject%20Object%5D&originHeight=746&originWidth=854&originalType=url&status=done&style=none&taskId=ubb7522ff-0229-47a2-8673-79e407e628c&width=552","https://cdn.nlark.com/yuque/0/2021/png/1629942/1619356560023-33cc24cb-d709-4b5c-b571-ad553c03a486.png#clientId=u9ae9216b-af72-4&from=paste&height=737&id=u301c1b6f&margin=%5Bobject%20Object%5D&originHeight=1474&originWidth=1664&originalType=url&status=done&style=none&taskId=u1730403f-a93e-4126-920d-39990df7fdc&width=832"],"cover":"https://cdn.nlark.com/yuque/0/2021/png/1629942/1619249868318-33cdb077-0bd2-4d1e-bec1-3795eddef39c.png#clientId=u9ae9216b-af72-4&from=paste&height=402&id=u321a8f97&margin=%5Bobject%20Object%5D&originHeight=644&originWidth=1228&originalType=url&status=done&style=none&taskId=u9f6b4a08-53f6-466b-bd87-bb0cb52dc50&width=766","content":"<a id=\"more\"></a>\n\n<h1 id=\"全局结构\"><a href=\"#全局结构\" class=\"headerlink\" title=\"全局结构\"></a>全局结构</h1><p>下图是以太坊区块数据结构与关系。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/1629942/1619249868318-33cdb077-0bd2-4d1e-bec1-3795eddef39c.png#clientId=u9ae9216b-af72-4&from=paste&height=402&id=u321a8f97&margin=%5Bobject%20Object%5D&originHeight=644&originWidth=1228&originalType=url&status=done&style=none&taskId=u9f6b4a08-53f6-466b-bd87-bb0cb52dc50&width=766\"><br>区块分为两部分：区块头(Header)和区块体(Body)。区块头信息量非常丰富，不但和上一个单元建立联系还记录了一些交易执行情况信息和矿工工作信息。</p>\n<h1 id=\"定义代码\"><a href=\"#定义代码\" class=\"headerlink\" title=\"定义代码\"></a>定义代码</h1><p>下面是以太坊代码中定义的区块头和区块体结构定义代码，所有核心代码均在 core/types/block.go 文件中：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-comment\">//core/types/block.go:70</span><br><span class=\"hljs-keyword\">type</span> Header <span class=\"hljs-keyword\">struct</span> &#123;<br>   ParentHash  common.Hash    <span class=\"hljs-string\">`json:&quot;parentHash&quot;       gencodec:&quot;required&quot;`</span><br>   UncleHash   common.Hash    <span class=\"hljs-string\">`json:&quot;sha3Uncles&quot;       gencodec:&quot;required&quot;`</span><br>   Coinbase    common.Address <span class=\"hljs-string\">`json:&quot;miner&quot;            gencodec:&quot;required&quot;`</span><br>   Root        common.Hash    <span class=\"hljs-string\">`json:&quot;stateRoot&quot;        gencodec:&quot;required&quot;`</span><br>   TxHash      common.Hash    <span class=\"hljs-string\">`json:&quot;transactionsRoot&quot; gencodec:&quot;required&quot;`</span><br>   ReceiptHash common.Hash    <span class=\"hljs-string\">`json:&quot;receiptsRoot&quot;     gencodec:&quot;required&quot;`</span><br>   Bloom       Bloom          <span class=\"hljs-string\">`json:&quot;logsBloom&quot;        gencodec:&quot;required&quot;`</span><br>   Difficulty  *big.Int       <span class=\"hljs-string\">`json:&quot;difficulty&quot;       gencodec:&quot;required&quot;`</span><br>   Number      *big.Int       <span class=\"hljs-string\">`json:&quot;number&quot;           gencodec:&quot;required&quot;`</span><br>   GasLimit    <span class=\"hljs-keyword\">uint64</span>         <span class=\"hljs-string\">`json:&quot;gasLimit&quot;         gencodec:&quot;required&quot;`</span><br>   GasUsed     <span class=\"hljs-keyword\">uint64</span>         <span class=\"hljs-string\">`json:&quot;gasUsed&quot;          gencodec:&quot;required&quot;`</span><br>   Time        <span class=\"hljs-keyword\">uint64</span>         <span class=\"hljs-string\">`json:&quot;timestamp&quot;        gencodec:&quot;required&quot;`</span><br>   Extra       []<span class=\"hljs-keyword\">byte</span>         <span class=\"hljs-string\">`json:&quot;extraData&quot;        gencodec:&quot;required&quot;`</span><br>   MixDigest   common.Hash    <span class=\"hljs-string\">`json:&quot;mixHash&quot;`</span><br>   Nonce       BlockNonce     <span class=\"hljs-string\">`json:&quot;nonce&quot;`</span><br>&#125;<br><span class=\"hljs-keyword\">type</span> Body <span class=\"hljs-keyword\">struct</span> &#123;<br>\tTransactions []*Transaction<br>\tUncles       []*Header<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"名词解释\"><a href=\"#名词解释\" class=\"headerlink\" title=\"名词解释\"></a>名词解释</h1><h3 id=\"parentHash\"><a href=\"#parentHash\" class=\"headerlink\" title=\"parentHash\"></a>parentHash</h3><p>是一个哈希值，记录此区块直接引用的父区块哈希值。通过此记录，才能完整的将区块有序组织，形成一条区块链。并且可以防止父区块内容被修改，因为数据修改，区块哈希必然发生变化，因此一个区块直接或间接的强化了所有父辈区块，通过加密算法保证历史区块不可能被修改。</p>\n<h3 id=\"miner\"><a href=\"#miner\" class=\"headerlink\" title=\"miner\"></a>miner</h3><p>是一个地址，表示区块是此账户的矿工挖出，挖矿奖励将下发到此账户。</p>\n<h3 id=\"transactionsRoot\"><a href=\"#transactionsRoot\" class=\"headerlink\" title=\"transactionsRoot\"></a>transactionsRoot</h3><p>是一个哈希值，表示该区块中所有交易生成一颗默克尔树根节点哈希值。是一个密码学保证交易集合摘要。通过此 Root 可以直接校验某交易是否包含在此区块中。</p>\n<h3 id=\"mixHash\"><a href=\"#mixHash\" class=\"headerlink\" title=\"mixHash\"></a>mixHash</h3><p>是一个哈希值。用于校验区块是否正确挖出。实际上是区块头数据不包含 nonce 时的一个哈希值。</p>\n<h1 id=\"区块体\"><a href=\"#区块体\" class=\"headerlink\" title=\"区块体\"></a>区块体</h1><p>区块体 Body 中只有两项数据：<a href=\"https://learnblockchain.cn/books/geth/part1/transaction.html\">交易</a>集合和叔辈区块头集合。是交易促使以太坊世界态进行转变。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/1629942/1619253706498-09b2bbc1-7c6d-4e9d-baeb-660898a5cdca.png#clientId=u9ae9216b-af72-4&from=paste&height=203&id=u42b0fbbe&margin=%5Bobject%20Object%5D&originHeight=283&originWidth=969&originalType=url&status=done&style=none&taskId=u56a01b4b-366c-4bd6-976c-05606cea4e0&width=693.5\"><br>从创世状态开始，每一个区块中的交易执行促使了以太坊世界态的转变。下一个状态是在上一个状态中执行交易或其他操作使得状态由 A 状态转变为 B 状态。<br>而交易则为状态转变的催化酶，<strong>一个区块中的所有交易执行完成后，将使得以太坊进入一个新的状态。</strong>状态转变过程中记录了一些起始变量和结果数据，分别是交易默克尔哈希值<strong>transactionsRoot</strong>、交易回执默克尔哈希值** receiptRoot<strong>、事件布隆值</strong>logsBloom<strong>、新状态的默克尔哈希值</strong>stateRoot**。</p>\n<h1 id=\"交易回执\"><a href=\"#交易回执\" class=\"headerlink\" title=\"交易回执\"></a>交易回执</h1><p>在以太坊中一份交易回执记录了关于此笔交易的处理结果信息：<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/1629942/1619265537072-fa82f8b8-40cd-4e53-9d2c-59fb05fc38cb.png#clientId=u9ae9216b-af72-4&from=paste&height=380&id=u3f9ff1a7&margin=%5Bobject%20Object%5D&originHeight=760&originWidth=652&originalType=url&status=done&style=none&taskId=u8eec5c7d-8f2e-41d5-9917-91e25564eb4&width=326\"><br>回执信息分为三部分：共识信息、交易信息、区块信息。下面分别介绍各类信息。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/1629942/1619265548117-1b30757f-4e93-46f6-ac94-0195ecb1f716.png#clientId=u9ae9216b-af72-4&from=paste&height=359&id=u9d6c0d41&margin=%5Bobject%20Object%5D&originHeight=718&originWidth=642&originalType=url&status=done&style=none&taskId=u780e7386-1eaa-45c3-a6fc-2cdef063091&width=321\"></p>\n<h2 id=\"交易回执共识信息\"><a href=\"#交易回执共识信息\" class=\"headerlink\" title=\"交易回执共识信息\"></a>交易回执共识信息</h2><p>共识意味在在校验区块合法性时，这部分信息也参与校验。这些信息参与校验的原因是确保交易必须在区块中的固定顺序中执行，且记录了交易执行后的状态信息。这样可强化交易顺序。</p>\n<ul>\n<li>Status： 成功与否，1 表示成功，0 表示失败。</li>\n<li>CumulativeGasUsed： 区块中已执行的交易累计消耗的 Gas，包含当前交易。</li>\n<li>Logs: 当前交易执行所产生的智能合约事件列表。</li>\n<li>Bloom：是从 Logs 中提取的事件布隆过滤器，用于快速检测某主题的事件是否存在于 Logs 中。</li>\n</ul>\n<p><strong>如何参与共识校验呢</strong>？<br>实际上<strong>参与校验</strong>的<strong>仅仅是回执哈希</strong>，而<strong>回执哈希</strong>计算<strong>只包含这些信息</strong>。<br>首先，在校验时获取整个区块回执信息的默克尔树的根哈希值。再判断此哈希值是否同区块头定义内容相同。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-comment\">//core/block_validator.go:92</span><br>receiptSha := types.DeriveSha(receipts)<br><span class=\"hljs-keyword\">if</span> receiptSha != header.ReceiptHash &#123;<br>   <span class=\"hljs-keyword\">return</span> fmt.Errorf(<span class=\"hljs-string\">&quot;invalid receipt root hash (remote: %x local: %x)&quot;</span>,<br>   header.ReceiptHash, receiptSha)<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>而函数 types.DeriveSha 中<strong>生成根哈希值</strong>，是将列表元素（这里是<strong>交易回执</strong>）的<strong>RLP 编码信息</strong>构成<strong>默克树</strong>，最终获得列表的哈希值。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-comment\">//core/types/derive_sha.go:32</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">DeriveSha</span><span class=\"hljs-params\">(list DerivableList)</span> <span class=\"hljs-title\">common</span>.<span class=\"hljs-title\">Hash</span></span> &#123;<br>   keybuf := <span class=\"hljs-built_in\">new</span>(bytes.Buffer)<br>   trie := <span class=\"hljs-built_in\">new</span>(trie.Trie)<br>   <span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; list.Len(); i++ &#123;<br>      keybuf.Reset()<br>      rlp.Encode(keybuf, <span class=\"hljs-keyword\">uint</span>(i))<br>      trie.Update(keybuf.Bytes(), list.GetRlp(i))<br>   &#125;<br>   <span class=\"hljs-keyword\">return</span> trie.Hash()<br>&#125;<br><span class=\"hljs-comment\">// core/types/receipt.go:237</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(r Receipts)</span> <span class=\"hljs-title\">GetRlp</span><span class=\"hljs-params\">(i <span class=\"hljs-keyword\">int</span>)</span> []<span class=\"hljs-title\">byte</span></span> &#123;<br>   bytes, err := rlp.EncodeToBytes(r[i])<br>   <span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> &#123;<br>      <span class=\"hljs-built_in\">panic</span>(err)<br>   &#125;<br>   <span class=\"hljs-keyword\">return</span> bytes<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>继续往下看，交易回执实现了 RLP 编码接口。在方法 EncodeRLP 中是构建了一个私有的 receiptRLP。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-comment\">//core/types/receipt.go:119</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(r *Receipt)</span> <span class=\"hljs-title\">EncodeRLP</span><span class=\"hljs-params\">(w io.Writer)</span> <span class=\"hljs-title\">error</span></span> &#123;<br>\t<span class=\"hljs-keyword\">return</span> rlp.Encode(w,<br>\t&amp;receiptRLP&#123;r.statusEncoding(), r.CumulativeGasUsed, r.Bloom, r.Logs&#125;)<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>从代码中可以看出 receiptRLP 仅仅包含上面提到的参与共识校验的内容。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-comment\">//core/types/receipt.go:78</span><br><span class=\"hljs-keyword\">type</span> receiptRLP <span class=\"hljs-keyword\">struct</span> &#123;<br>   PostStateOrStatus []<span class=\"hljs-keyword\">byte</span><br>   CumulativeGasUsed <span class=\"hljs-keyword\">uint64</span><br>   Bloom             Bloom<br>   Logs              []*Log<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"交易回执交易信息\"><a href=\"#交易回执交易信息\" class=\"headerlink\" title=\"交易回执交易信息\"></a>交易回执交易信息</h2><p>这部分信息记录的是关于回执所对应的交易信息，有：</p>\n<ul>\n<li>TxHash ： 交易回执所对应的交易哈希。</li>\n<li>ContractAddress： 当这笔交易是部署新合约时，记录新合约的地址。</li>\n<li>GasUsed: 这笔交易执行所消耗的<a href=\"https://learnblockchain.cn/books/geth/part1/gas.html\">Gas 燃料</a>。</li>\n</ul>\n<p>这些信息不参与共识的原因是这三项信息已经在其他地方校验。</p>\n<ul>\n<li>TxHash: 区块有校验交易集的正确性。</li>\n<li>ContractAddress： 如果是新合约，实际上已经提交到以太坊状态 State 中。</li>\n<li>GasUsed： 已属于 CumulativeGasUsed 的一部分。</li>\n</ul>\n<h2 id=\"交易回执区块信息\"><a href=\"#交易回执区块信息\" class=\"headerlink\" title=\"交易回执区块信息\"></a>交易回执区块信息</h2><p>这部分信息完全是<strong>为了方便外部读取交易回执</strong>，不但知道交易执行情况，<strong>还能方便的指定该交易属于哪个区块中第几笔交易</strong>。</p>\n<ul>\n<li>BlockHash: <strong>交易所在区块哈希</strong>。</li>\n<li>BlockNumber: <strong>交易所在区块高度</strong>。</li>\n<li>TransactionIndex：<strong>交易在区块中的序号</strong>。</li>\n</ul>\n<p>这三项信息，主要是<strong>在数据库 Leveldb 中读取交易回执</strong>时，<strong>实时指定</strong>。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-comment\">//core/rawdb/accessors_chain.go:315</span><br>receipts := <span class=\"hljs-built_in\">make</span>(types.Receipts, <span class=\"hljs-built_in\">len</span>(storageReceipts))<br>logIndex := <span class=\"hljs-keyword\">uint</span>(<span class=\"hljs-number\">0</span>)<br><span class=\"hljs-keyword\">for</span> i, receipt := <span class=\"hljs-keyword\">range</span> storageReceipts &#123;<br>   <span class=\"hljs-comment\">//...</span><br>   receipts[i] = (*types.Receipt)(receipt)<br>   receipts[i].BlockHash = hash<br>   receipts[i].BlockNumber = big.NewInt(<span class=\"hljs-number\">0</span>).SetUint64(number)<br>   receipts[i].TransactionIndex = <span class=\"hljs-keyword\">uint</span>(i)<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"交易回执存储\"><a href=\"#交易回执存储\" class=\"headerlink\" title=\"交易回执存储\"></a>交易回执存储</h2><p><strong>交易回执</strong>作为<strong>交易执行中间产物</strong>，为了方便快速获取某笔交易的执行明细。以太坊中有跟随区块存储时实时存储交易回执。但为了降低存储量，只存储了必要内容。<br>首先，在<strong>存储</strong>时，将交易回执对象转换为<strong>精简内容</strong>。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-comment\">//core/rawdb/accessors_chain.go:338</span><br>storageReceipts := <span class=\"hljs-built_in\">make</span>([]*types.ReceiptForStorage, <span class=\"hljs-built_in\">len</span>(receipts))<br><span class=\"hljs-keyword\">for</span> i, receipt := <span class=\"hljs-keyword\">range</span> receipts &#123;<br>   storageReceipts[i] = (*types.ReceiptForStorage)(receipt)<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>精简内容是专门为存储定义的一个结构 ReceiptForStorage。存储时将交易回执集进行 RLP 编码存储。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-comment\">//core/rawdb/accessors_chain.go:342</span><br>bytes, err := rlp.EncodeToBytes(storageReceipts)<br><span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> &#123;<br>   log.Crit(<span class=\"hljs-string\">&quot;Failed to encode block receipts&quot;</span>, <span class=\"hljs-string\">&quot;err&quot;</span>, err)<br>&#125;<br><span class=\"hljs-keyword\">if</span> err := db.Put(blockReceiptsKey(number, hash), bytes); err != <span class=\"hljs-literal\">nil</span> &#123;<br>   log.Crit(<span class=\"hljs-string\">&quot;Failed to store block receipts&quot;</span>, <span class=\"hljs-string\">&quot;err&quot;</span>, err)<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>所以看存储了哪些内容，只需要看 ReceiptForStorage 的 EncodeRLP 方法：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-comment\">//core/types/receipt.go:179</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(r *ReceiptForStorage)</span> <span class=\"hljs-title\">EncodeRLP</span><span class=\"hljs-params\">(w io.Writer)</span> <span class=\"hljs-title\">error</span></span> &#123;<br>   enc := &amp;receiptStorageRLP&#123;<br>      PostStateOrStatus: (*Receipt)(r).statusEncoding(),<br>      CumulativeGasUsed: r.CumulativeGasUsed,<br>      TxHash:            r.TxHash,<br>      ContractAddress:   r.ContractAddress,<br>      Logs:              <span class=\"hljs-built_in\">make</span>([]*LogForStorage, <span class=\"hljs-built_in\">len</span>(r.Logs)),<br>      GasUsed:           r.GasUsed,<br>   &#125;<br>   <span class=\"hljs-keyword\">for</span> i, log := <span class=\"hljs-keyword\">range</span> r.Logs &#123;<br>      enc.Logs[i] = (*LogForStorage)(log)<br>   &#125;<br>   <span class=\"hljs-keyword\">return</span> rlp.Encode(w, enc)<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/1629942/1619355807814-5098a5b6-b3eb-40aa-8d94-a034d3740090.png#clientId=u9ae9216b-af72-4&from=paste&height=482&id=u14eddb16&margin=%5Bobject%20Object%5D&originHeight=746&originWidth=854&originalType=url&status=done&style=none&taskId=ubb7522ff-0229-47a2-8673-79e407e628c&width=552\"></p>\n<h1 id=\"交易回执示例–文档参考\"><a href=\"#交易回执示例–文档参考\" class=\"headerlink\" title=\"交易回执示例–文档参考\"></a>交易回执示例–文档参考</h1><p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/1629942/1619356560023-33cc24cb-d709-4b5c-b571-ad553c03a486.png#clientId=u9ae9216b-af72-4&from=paste&height=737&id=u301c1b6f&margin=%5Bobject%20Object%5D&originHeight=1474&originWidth=1664&originalType=url&status=done&style=none&taskId=u1730403f-a93e-4126-920d-39990df7fdc&width=832\"></p>\n","more":"<h1 id=\"全局结构\"><a href=\"#全局结构\" class=\"headerlink\" title=\"全局结构\"></a>全局结构</h1><p>下图是以太坊区块数据结构与关系。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/1629942/1619249868318-33cdb077-0bd2-4d1e-bec1-3795eddef39c.png#clientId=u9ae9216b-af72-4&from=paste&height=402&id=u321a8f97&margin=%5Bobject%20Object%5D&originHeight=644&originWidth=1228&originalType=url&status=done&style=none&taskId=u9f6b4a08-53f6-466b-bd87-bb0cb52dc50&width=766\"><br>区块分为两部分：区块头(Header)和区块体(Body)。区块头信息量非常丰富，不但和上一个单元建立联系还记录了一些交易执行情况信息和矿工工作信息。</p>\n<h1 id=\"定义代码\"><a href=\"#定义代码\" class=\"headerlink\" title=\"定义代码\"></a>定义代码</h1><p>下面是以太坊代码中定义的区块头和区块体结构定义代码，所有核心代码均在 core/types/block.go 文件中：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-comment\">//core/types/block.go:70</span><br><span class=\"hljs-keyword\">type</span> Header <span class=\"hljs-keyword\">struct</span> &#123;<br>   ParentHash  common.Hash    <span class=\"hljs-string\">`json:&quot;parentHash&quot;       gencodec:&quot;required&quot;`</span><br>   UncleHash   common.Hash    <span class=\"hljs-string\">`json:&quot;sha3Uncles&quot;       gencodec:&quot;required&quot;`</span><br>   Coinbase    common.Address <span class=\"hljs-string\">`json:&quot;miner&quot;            gencodec:&quot;required&quot;`</span><br>   Root        common.Hash    <span class=\"hljs-string\">`json:&quot;stateRoot&quot;        gencodec:&quot;required&quot;`</span><br>   TxHash      common.Hash    <span class=\"hljs-string\">`json:&quot;transactionsRoot&quot; gencodec:&quot;required&quot;`</span><br>   ReceiptHash common.Hash    <span class=\"hljs-string\">`json:&quot;receiptsRoot&quot;     gencodec:&quot;required&quot;`</span><br>   Bloom       Bloom          <span class=\"hljs-string\">`json:&quot;logsBloom&quot;        gencodec:&quot;required&quot;`</span><br>   Difficulty  *big.Int       <span class=\"hljs-string\">`json:&quot;difficulty&quot;       gencodec:&quot;required&quot;`</span><br>   Number      *big.Int       <span class=\"hljs-string\">`json:&quot;number&quot;           gencodec:&quot;required&quot;`</span><br>   GasLimit    <span class=\"hljs-keyword\">uint64</span>         <span class=\"hljs-string\">`json:&quot;gasLimit&quot;         gencodec:&quot;required&quot;`</span><br>   GasUsed     <span class=\"hljs-keyword\">uint64</span>         <span class=\"hljs-string\">`json:&quot;gasUsed&quot;          gencodec:&quot;required&quot;`</span><br>   Time        <span class=\"hljs-keyword\">uint64</span>         <span class=\"hljs-string\">`json:&quot;timestamp&quot;        gencodec:&quot;required&quot;`</span><br>   Extra       []<span class=\"hljs-keyword\">byte</span>         <span class=\"hljs-string\">`json:&quot;extraData&quot;        gencodec:&quot;required&quot;`</span><br>   MixDigest   common.Hash    <span class=\"hljs-string\">`json:&quot;mixHash&quot;`</span><br>   Nonce       BlockNonce     <span class=\"hljs-string\">`json:&quot;nonce&quot;`</span><br>&#125;<br><span class=\"hljs-keyword\">type</span> Body <span class=\"hljs-keyword\">struct</span> &#123;<br>\tTransactions []*Transaction<br>\tUncles       []*Header<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"名词解释\"><a href=\"#名词解释\" class=\"headerlink\" title=\"名词解释\"></a>名词解释</h1><h3 id=\"parentHash\"><a href=\"#parentHash\" class=\"headerlink\" title=\"parentHash\"></a>parentHash</h3><p>是一个哈希值，记录此区块直接引用的父区块哈希值。通过此记录，才能完整的将区块有序组织，形成一条区块链。并且可以防止父区块内容被修改，因为数据修改，区块哈希必然发生变化，因此一个区块直接或间接的强化了所有父辈区块，通过加密算法保证历史区块不可能被修改。</p>\n<h3 id=\"miner\"><a href=\"#miner\" class=\"headerlink\" title=\"miner\"></a>miner</h3><p>是一个地址，表示区块是此账户的矿工挖出，挖矿奖励将下发到此账户。</p>\n<h3 id=\"transactionsRoot\"><a href=\"#transactionsRoot\" class=\"headerlink\" title=\"transactionsRoot\"></a>transactionsRoot</h3><p>是一个哈希值，表示该区块中所有交易生成一颗默克尔树根节点哈希值。是一个密码学保证交易集合摘要。通过此 Root 可以直接校验某交易是否包含在此区块中。</p>\n<h3 id=\"mixHash\"><a href=\"#mixHash\" class=\"headerlink\" title=\"mixHash\"></a>mixHash</h3><p>是一个哈希值。用于校验区块是否正确挖出。实际上是区块头数据不包含 nonce 时的一个哈希值。</p>\n<h1 id=\"区块体\"><a href=\"#区块体\" class=\"headerlink\" title=\"区块体\"></a>区块体</h1><p>区块体 Body 中只有两项数据：<a href=\"https://learnblockchain.cn/books/geth/part1/transaction.html\">交易</a>集合和叔辈区块头集合。是交易促使以太坊世界态进行转变。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/1629942/1619253706498-09b2bbc1-7c6d-4e9d-baeb-660898a5cdca.png#clientId=u9ae9216b-af72-4&from=paste&height=203&id=u42b0fbbe&margin=%5Bobject%20Object%5D&originHeight=283&originWidth=969&originalType=url&status=done&style=none&taskId=u56a01b4b-366c-4bd6-976c-05606cea4e0&width=693.5\"><br>从创世状态开始，每一个区块中的交易执行促使了以太坊世界态的转变。下一个状态是在上一个状态中执行交易或其他操作使得状态由 A 状态转变为 B 状态。<br>而交易则为状态转变的催化酶，<strong>一个区块中的所有交易执行完成后，将使得以太坊进入一个新的状态。</strong>状态转变过程中记录了一些起始变量和结果数据，分别是交易默克尔哈希值<strong>transactionsRoot</strong>、交易回执默克尔哈希值** receiptRoot<strong>、事件布隆值</strong>logsBloom<strong>、新状态的默克尔哈希值</strong>stateRoot**。</p>\n<h1 id=\"交易回执\"><a href=\"#交易回执\" class=\"headerlink\" title=\"交易回执\"></a>交易回执</h1><p>在以太坊中一份交易回执记录了关于此笔交易的处理结果信息：<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/1629942/1619265537072-fa82f8b8-40cd-4e53-9d2c-59fb05fc38cb.png#clientId=u9ae9216b-af72-4&from=paste&height=380&id=u3f9ff1a7&margin=%5Bobject%20Object%5D&originHeight=760&originWidth=652&originalType=url&status=done&style=none&taskId=u8eec5c7d-8f2e-41d5-9917-91e25564eb4&width=326\"><br>回执信息分为三部分：共识信息、交易信息、区块信息。下面分别介绍各类信息。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/1629942/1619265548117-1b30757f-4e93-46f6-ac94-0195ecb1f716.png#clientId=u9ae9216b-af72-4&from=paste&height=359&id=u9d6c0d41&margin=%5Bobject%20Object%5D&originHeight=718&originWidth=642&originalType=url&status=done&style=none&taskId=u780e7386-1eaa-45c3-a6fc-2cdef063091&width=321\"></p>\n<h2 id=\"交易回执共识信息\"><a href=\"#交易回执共识信息\" class=\"headerlink\" title=\"交易回执共识信息\"></a>交易回执共识信息</h2><p>共识意味在在校验区块合法性时，这部分信息也参与校验。这些信息参与校验的原因是确保交易必须在区块中的固定顺序中执行，且记录了交易执行后的状态信息。这样可强化交易顺序。</p>\n<ul>\n<li>Status： 成功与否，1 表示成功，0 表示失败。</li>\n<li>CumulativeGasUsed： 区块中已执行的交易累计消耗的 Gas，包含当前交易。</li>\n<li>Logs: 当前交易执行所产生的智能合约事件列表。</li>\n<li>Bloom：是从 Logs 中提取的事件布隆过滤器，用于快速检测某主题的事件是否存在于 Logs 中。</li>\n</ul>\n<p><strong>如何参与共识校验呢</strong>？<br>实际上<strong>参与校验</strong>的<strong>仅仅是回执哈希</strong>，而<strong>回执哈希</strong>计算<strong>只包含这些信息</strong>。<br>首先，在校验时获取整个区块回执信息的默克尔树的根哈希值。再判断此哈希值是否同区块头定义内容相同。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-comment\">//core/block_validator.go:92</span><br>receiptSha := types.DeriveSha(receipts)<br><span class=\"hljs-keyword\">if</span> receiptSha != header.ReceiptHash &#123;<br>   <span class=\"hljs-keyword\">return</span> fmt.Errorf(<span class=\"hljs-string\">&quot;invalid receipt root hash (remote: %x local: %x)&quot;</span>,<br>   header.ReceiptHash, receiptSha)<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>而函数 types.DeriveSha 中<strong>生成根哈希值</strong>，是将列表元素（这里是<strong>交易回执</strong>）的<strong>RLP 编码信息</strong>构成<strong>默克树</strong>，最终获得列表的哈希值。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-comment\">//core/types/derive_sha.go:32</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">DeriveSha</span><span class=\"hljs-params\">(list DerivableList)</span> <span class=\"hljs-title\">common</span>.<span class=\"hljs-title\">Hash</span></span> &#123;<br>   keybuf := <span class=\"hljs-built_in\">new</span>(bytes.Buffer)<br>   trie := <span class=\"hljs-built_in\">new</span>(trie.Trie)<br>   <span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; list.Len(); i++ &#123;<br>      keybuf.Reset()<br>      rlp.Encode(keybuf, <span class=\"hljs-keyword\">uint</span>(i))<br>      trie.Update(keybuf.Bytes(), list.GetRlp(i))<br>   &#125;<br>   <span class=\"hljs-keyword\">return</span> trie.Hash()<br>&#125;<br><span class=\"hljs-comment\">// core/types/receipt.go:237</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(r Receipts)</span> <span class=\"hljs-title\">GetRlp</span><span class=\"hljs-params\">(i <span class=\"hljs-keyword\">int</span>)</span> []<span class=\"hljs-title\">byte</span></span> &#123;<br>   bytes, err := rlp.EncodeToBytes(r[i])<br>   <span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> &#123;<br>      <span class=\"hljs-built_in\">panic</span>(err)<br>   &#125;<br>   <span class=\"hljs-keyword\">return</span> bytes<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>继续往下看，交易回执实现了 RLP 编码接口。在方法 EncodeRLP 中是构建了一个私有的 receiptRLP。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-comment\">//core/types/receipt.go:119</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(r *Receipt)</span> <span class=\"hljs-title\">EncodeRLP</span><span class=\"hljs-params\">(w io.Writer)</span> <span class=\"hljs-title\">error</span></span> &#123;<br>\t<span class=\"hljs-keyword\">return</span> rlp.Encode(w,<br>\t&amp;receiptRLP&#123;r.statusEncoding(), r.CumulativeGasUsed, r.Bloom, r.Logs&#125;)<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>从代码中可以看出 receiptRLP 仅仅包含上面提到的参与共识校验的内容。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-comment\">//core/types/receipt.go:78</span><br><span class=\"hljs-keyword\">type</span> receiptRLP <span class=\"hljs-keyword\">struct</span> &#123;<br>   PostStateOrStatus []<span class=\"hljs-keyword\">byte</span><br>   CumulativeGasUsed <span class=\"hljs-keyword\">uint64</span><br>   Bloom             Bloom<br>   Logs              []*Log<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"交易回执交易信息\"><a href=\"#交易回执交易信息\" class=\"headerlink\" title=\"交易回执交易信息\"></a>交易回执交易信息</h2><p>这部分信息记录的是关于回执所对应的交易信息，有：</p>\n<ul>\n<li>TxHash ： 交易回执所对应的交易哈希。</li>\n<li>ContractAddress： 当这笔交易是部署新合约时，记录新合约的地址。</li>\n<li>GasUsed: 这笔交易执行所消耗的<a href=\"https://learnblockchain.cn/books/geth/part1/gas.html\">Gas 燃料</a>。</li>\n</ul>\n<p>这些信息不参与共识的原因是这三项信息已经在其他地方校验。</p>\n<ul>\n<li>TxHash: 区块有校验交易集的正确性。</li>\n<li>ContractAddress： 如果是新合约，实际上已经提交到以太坊状态 State 中。</li>\n<li>GasUsed： 已属于 CumulativeGasUsed 的一部分。</li>\n</ul>\n<h2 id=\"交易回执区块信息\"><a href=\"#交易回执区块信息\" class=\"headerlink\" title=\"交易回执区块信息\"></a>交易回执区块信息</h2><p>这部分信息完全是<strong>为了方便外部读取交易回执</strong>，不但知道交易执行情况，<strong>还能方便的指定该交易属于哪个区块中第几笔交易</strong>。</p>\n<ul>\n<li>BlockHash: <strong>交易所在区块哈希</strong>。</li>\n<li>BlockNumber: <strong>交易所在区块高度</strong>。</li>\n<li>TransactionIndex：<strong>交易在区块中的序号</strong>。</li>\n</ul>\n<p>这三项信息，主要是<strong>在数据库 Leveldb 中读取交易回执</strong>时，<strong>实时指定</strong>。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-comment\">//core/rawdb/accessors_chain.go:315</span><br>receipts := <span class=\"hljs-built_in\">make</span>(types.Receipts, <span class=\"hljs-built_in\">len</span>(storageReceipts))<br>logIndex := <span class=\"hljs-keyword\">uint</span>(<span class=\"hljs-number\">0</span>)<br><span class=\"hljs-keyword\">for</span> i, receipt := <span class=\"hljs-keyword\">range</span> storageReceipts &#123;<br>   <span class=\"hljs-comment\">//...</span><br>   receipts[i] = (*types.Receipt)(receipt)<br>   receipts[i].BlockHash = hash<br>   receipts[i].BlockNumber = big.NewInt(<span class=\"hljs-number\">0</span>).SetUint64(number)<br>   receipts[i].TransactionIndex = <span class=\"hljs-keyword\">uint</span>(i)<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"交易回执存储\"><a href=\"#交易回执存储\" class=\"headerlink\" title=\"交易回执存储\"></a>交易回执存储</h2><p><strong>交易回执</strong>作为<strong>交易执行中间产物</strong>，为了方便快速获取某笔交易的执行明细。以太坊中有跟随区块存储时实时存储交易回执。但为了降低存储量，只存储了必要内容。<br>首先，在<strong>存储</strong>时，将交易回执对象转换为<strong>精简内容</strong>。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-comment\">//core/rawdb/accessors_chain.go:338</span><br>storageReceipts := <span class=\"hljs-built_in\">make</span>([]*types.ReceiptForStorage, <span class=\"hljs-built_in\">len</span>(receipts))<br><span class=\"hljs-keyword\">for</span> i, receipt := <span class=\"hljs-keyword\">range</span> receipts &#123;<br>   storageReceipts[i] = (*types.ReceiptForStorage)(receipt)<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>精简内容是专门为存储定义的一个结构 ReceiptForStorage。存储时将交易回执集进行 RLP 编码存储。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-comment\">//core/rawdb/accessors_chain.go:342</span><br>bytes, err := rlp.EncodeToBytes(storageReceipts)<br><span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> &#123;<br>   log.Crit(<span class=\"hljs-string\">&quot;Failed to encode block receipts&quot;</span>, <span class=\"hljs-string\">&quot;err&quot;</span>, err)<br>&#125;<br><span class=\"hljs-keyword\">if</span> err := db.Put(blockReceiptsKey(number, hash), bytes); err != <span class=\"hljs-literal\">nil</span> &#123;<br>   log.Crit(<span class=\"hljs-string\">&quot;Failed to store block receipts&quot;</span>, <span class=\"hljs-string\">&quot;err&quot;</span>, err)<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>所以看存储了哪些内容，只需要看 ReceiptForStorage 的 EncodeRLP 方法：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-comment\">//core/types/receipt.go:179</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(r *ReceiptForStorage)</span> <span class=\"hljs-title\">EncodeRLP</span><span class=\"hljs-params\">(w io.Writer)</span> <span class=\"hljs-title\">error</span></span> &#123;<br>   enc := &amp;receiptStorageRLP&#123;<br>      PostStateOrStatus: (*Receipt)(r).statusEncoding(),<br>      CumulativeGasUsed: r.CumulativeGasUsed,<br>      TxHash:            r.TxHash,<br>      ContractAddress:   r.ContractAddress,<br>      Logs:              <span class=\"hljs-built_in\">make</span>([]*LogForStorage, <span class=\"hljs-built_in\">len</span>(r.Logs)),<br>      GasUsed:           r.GasUsed,<br>   &#125;<br>   <span class=\"hljs-keyword\">for</span> i, log := <span class=\"hljs-keyword\">range</span> r.Logs &#123;<br>      enc.Logs[i] = (*LogForStorage)(log)<br>   &#125;<br>   <span class=\"hljs-keyword\">return</span> rlp.Encode(w, enc)<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/1629942/1619355807814-5098a5b6-b3eb-40aa-8d94-a034d3740090.png#clientId=u9ae9216b-af72-4&from=paste&height=482&id=u14eddb16&margin=%5Bobject%20Object%5D&originHeight=746&originWidth=854&originalType=url&status=done&style=none&taskId=ubb7522ff-0229-47a2-8673-79e407e628c&width=552\"></p>\n<h1 id=\"交易回执示例–文档参考\"><a href=\"#交易回执示例–文档参考\" class=\"headerlink\" title=\"交易回执示例–文档参考\"></a>交易回执示例–文档参考</h1><p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/1629942/1619356560023-33cc24cb-d709-4b5c-b571-ad553c03a486.png#clientId=u9ae9216b-af72-4&from=paste&height=737&id=u301c1b6f&margin=%5Bobject%20Object%5D&originHeight=1474&originWidth=1664&originalType=url&status=done&style=none&taskId=u1730403f-a93e-4126-920d-39990df7fdc&width=832\"></p>","categories":[],"tags":[]}