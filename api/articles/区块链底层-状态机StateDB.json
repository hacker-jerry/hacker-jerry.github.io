{"title":"区块链底层-状态机StateDB","slug":"区块链底层-状态机StateDB","date":"2021-05-03T08:22:12.000Z","updated":"2023-06-01T07:10:52.945Z","comments":true,"path":"api/articles/区块链底层-状态机StateDB.json","realPath":null,"excerpt":null,"covers":["https://cdn.nlark.com/yuque/0/2021/png/1629942/1620032334655-cae41343-4469-4e98-8487-8743491bf5f4.png#clientId=u1d1d90de-5c3e-4&from=paste&height=344&id=ub777611d&originHeight=688&originWidth=1306&originalType=binary&size=308117&status=done&style=none&taskId=u950bfa17-cd9c-4cde-b1d9-eb903342901&width=653"],"cover":"https://cdn.nlark.com/yuque/0/2021/png/1629942/1620032334655-cae41343-4469-4e98-8487-8743491bf5f4.png#clientId=u1d1d90de-5c3e-4&from=paste&height=344&id=ub777611d&originHeight=688&originWidth=1306&originalType=binary&size=308117&status=done&style=none&taskId=u950bfa17-cd9c-4cde-b1d9-eb903342901&width=653","content":"<a id=\"more\"></a>\n\n<h1 id=\"全局\"><a href=\"#全局\" class=\"headerlink\" title=\"全局\"></a>全局</h1><p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/1629942/1620032334655-cae41343-4469-4e98-8487-8743491bf5f4.png#clientId=u1d1d90de-5c3e-4&from=paste&height=344&id=ub777611d&originHeight=688&originWidth=1306&originalType=binary&size=308117&status=done&style=none&taskId=u950bfa17-cd9c-4cde-b1d9-eb903342901&width=653\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/1629942/1620044974426-9a7f13aa-86f6-4206-9cef-74b9cdf360e4.png#clientId=u1d1d90de-5c3e-4&from=paste&height=200&id=u4a6a08ef&originHeight=399&originWidth=969&originalType=binary&size=146076&status=done&style=none&taskId=ude525437-624d-4812-952f-2b51a1576ff&width=484.5\" alt=\"image.png\"></p>\n<h1 id=\"创建状态树\"><a href=\"#创建状态树\" class=\"headerlink\" title=\"创建状态树\"></a>创建状态树</h1><p>状态数据库的定义如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">type</span> StateDB <span class=\"hljs-keyword\">struct</span> &#123;<br>\tdb   Database  <span class=\"hljs-comment\">//操作状态的底层数据库，在实例化 StateDB 时指定 ②。</span><br>\ttrie trie.Trie <span class=\"hljs-comment\">//世界状态所在的树实例对象</span><br>\tstateObjects      <span class=\"hljs-keyword\">map</span>[account.Address]*account.StateObject <span class=\"hljs-comment\">//已账户地址为键的账户状态对象，能够在内存中维护使用过的账户</span><br>\tstateObjectsDirty <span class=\"hljs-keyword\">map</span>[account.Address]<span class=\"hljs-keyword\">struct</span>&#123;&#125;<span class=\"hljs-comment\">//标记被修改过的账户</span><br>    dbErr  error<br>\tlock sync.Mutex<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>首先，</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\">db: = state.NewDatabase(levelDB)<br>statedb, err := state.New(block.Root(), db)<br></code></pre></td></tr></table></figure>\n\n<p>这里的 New 函数为：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-comment\">//state/statedb.go:27</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">New</span><span class=\"hljs-params\">(root hash.Hash, db Database)</span> <span class=\"hljs-params\">(*StateDB, error)</span></span> &#123;<br>\ttr, err := db.OpenTrie(root)<span class=\"hljs-comment\">//打开指定状态版本(root)的含世界状态的顶层树</span><br>\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nil</span>, err<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> &amp;StateDB&#123;<br>\t\tdb:                db,<span class=\"hljs-comment\">//②</span><br>\t\ttrie:              tr,<br>\t\tstateObjects:      <span class=\"hljs-built_in\">make</span>(<span class=\"hljs-keyword\">map</span>[account.Address]*stateObject),<br>        stateObjectsDirty: <span class=\"hljs-built_in\">make</span>(<span class=\"hljs-keyword\">map</span>[account.Address]<span class=\"hljs-keyword\">struct</span>&#123;&#125;),<br>\t\tpreimages:         <span class=\"hljs-built_in\">make</span>(<span class=\"hljs-keyword\">map</span>[hash.Hash][]<span class=\"hljs-keyword\">byte</span>),<br>\t\tjournal:           newJournal(),<br>\t&#125;, <span class=\"hljs-literal\">nil</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>世界态中的所有状态都是已账户为基础单位存在的，因此为了便于账户隔离管理，使用不开放的 stateObject 来维护某个账户下的状态。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">type</span> StateObject <span class=\"hljs-keyword\">struct</span> &#123;<br>\t<span class=\"hljs-comment\">//账户哈希</span><br>\taddrHash <span class=\"hljs-keyword\">string</span><br>\tdata     User <span class=\"hljs-comment\">//账户属性</span><br>\t<span class=\"hljs-comment\">//底层数据库</span><br>\tdb *state.StateDB<br>\t<span class=\"hljs-comment\">// 写缓存</span><br>\ttrie Trie <span class=\"hljs-comment\">// 存储树，第一次访问时初始化</span><br>&#125;<br><span class=\"hljs-keyword\">type</span> User <span class=\"hljs-keyword\">struct</span> &#123;<br>\t<span class=\"hljs-comment\">//账户地址</span><br>\tAddress []<span class=\"hljs-keyword\">byte</span><br>\t<span class=\"hljs-comment\">//账户余额</span><br>\tAmount <span class=\"hljs-keyword\">float64</span><br>\t<span class=\"hljs-comment\">//交易个数</span><br>\tNonce <span class=\"hljs-keyword\">uint64</span><br>\t<span class=\"hljs-comment\">//storage树根哈希值</span><br>\tRoot <span class=\"hljs-keyword\">string</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>可以看到 stateObject 中维护关于某个账户的所有信息，涉及账户地址、账户地址哈希、底层数据库、存储树等内容。<br>在区块中，将交易作为输入条件，来根据一系列动作修改状态。 在完成区块挖矿前，只是获得在内存中的状态树的 Root 值。 StateDB 可视为一个内存数据库，状态数据先在内存数据库中完成修改，所有关于状态的计算都在内存中完成。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-comment\">//将每个交易对应的的账户状态树进行修改</span><br>usr := getUserByAddress(t.Address)<br><span class=\"hljs-keyword\">if</span> usr.Amount - t.Fee &lt;<span class=\"hljs-number\">0</span> &#123;<br>    <span class=\"hljs-keyword\">return</span> err<br>&#125;<br>usr.Nonce = usr.Nonce + <span class=\"hljs-number\">1</span><br>uMPT := getMPT(usr.Root)<br>data := *(*[]<span class=\"hljs-keyword\">byte</span>)(unsafe.Pointer(&amp;t))<br>uMPT.Put([]<span class=\"hljs-keyword\">byte</span>(t.Hash),data)<br>usr.Root := uMPT.RootHash()<br></code></pre></td></tr></table></figure>\n\n<p>在将区块持久化时完成有内存到数据库的更新存储，此更新属于增量更新，仅仅修改涉及到被修改部分。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-comment\">// state/statedb.go:122</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(s *StateDB)</span> <span class=\"hljs-title\">Commit</span><span class=\"hljs-params\">(deleteEmptyObjects <span class=\"hljs-keyword\">bool</span>)</span> <span class=\"hljs-params\">(root hash.Hash, err error)</span></span> &#123;<br>\t<span class=\"hljs-keyword\">for</span> addr := <span class=\"hljs-keyword\">range</span> s.journal.dirties &#123;<span class=\"hljs-comment\">//①⑧⑨⑩</span><br>\t\ts.stateObjectsDirty[addr] = <span class=\"hljs-keyword\">struct</span>&#123;&#125;&#123;&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">for</span> addr, stateObject := <span class=\"hljs-keyword\">range</span> s.stateObjects &#123;<span class=\"hljs-comment\">//②</span><br>\t\t_, isDirty := s.stateObjectsDirty[addr]<br><br>        <span class=\"hljs-keyword\">if</span> isDirty&#123;<br>\t\t\t<span class=\"hljs-comment\">//如果集合中的账户有变更</span><br>\t\t\t<span class=\"hljs-keyword\">if</span> err := stateObject.CommitTrie(s.db); err != <span class=\"hljs-literal\">nil</span> &#123;<span class=\"hljs-comment\">//⑤</span><br>\t\t\t\t<span class=\"hljs-keyword\">return</span> common.Hash&#123;&#125;, err<br>\t\t\t&#125;<br>\t\t\ts.updateStateObject(stateObject)<span class=\"hljs-comment\">//需要提交此账户</span><br>\t\t  &#125;<br>\t\t<span class=\"hljs-built_in\">delete</span>(s.stateObjectsDirty, addr)<br>    \t&#125;<br>    &#125;<br>\t<span class=\"hljs-comment\">//...</span><br>\troot, err = s.trie.Commit(<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(leaf []<span class=\"hljs-keyword\">byte</span>, parent hash.Hash)</span> <span class=\"hljs-title\">error</span></span> &#123;<span class=\"hljs-comment\">//⑦</span><br>\t\t<span class=\"hljs-keyword\">var</span> account Account<br>\t\t<span class=\"hljs-keyword\">if</span> err := rlp.DecodeBytes(leaf, &amp;account); err != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nil</span><br>\t\t&#125;<br>\t\t<span class=\"hljs-keyword\">if</span> account.Root != emptyRoot &#123;<br>\t\t\ts.db.TrieDB().Reference(account.Root, parent)<br>\t\t&#125;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nil</span><br>\t&#125;)<br>\t<span class=\"hljs-keyword\">return</span> root, err<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>因为在修改某账户信息是，将会记录变更流水（journal），因此在提交保存修改时只需要将在流水中存在的记录作为修改集 ①。</li>\n<li>所有访问过的账户信息，均被记录在 stateObjects 中，只需要遍历此集合 ② 便可以提交所有修改。</li>\n<li>处理完每个需要提交的账户内容外，最后需要将账户树提交 ⑦。在提交过程中涉及账户内容作为叶子节点，在发送变动时，将更新账户节点和父节点的关系。</li>\n</ul>\n","more":"<h1 id=\"全局\"><a href=\"#全局\" class=\"headerlink\" title=\"全局\"></a>全局</h1><p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/1629942/1620032334655-cae41343-4469-4e98-8487-8743491bf5f4.png#clientId=u1d1d90de-5c3e-4&from=paste&height=344&id=ub777611d&originHeight=688&originWidth=1306&originalType=binary&size=308117&status=done&style=none&taskId=u950bfa17-cd9c-4cde-b1d9-eb903342901&width=653\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/1629942/1620044974426-9a7f13aa-86f6-4206-9cef-74b9cdf360e4.png#clientId=u1d1d90de-5c3e-4&from=paste&height=200&id=u4a6a08ef&originHeight=399&originWidth=969&originalType=binary&size=146076&status=done&style=none&taskId=ude525437-624d-4812-952f-2b51a1576ff&width=484.5\" alt=\"image.png\"></p>\n<h1 id=\"创建状态树\"><a href=\"#创建状态树\" class=\"headerlink\" title=\"创建状态树\"></a>创建状态树</h1><p>状态数据库的定义如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">type</span> StateDB <span class=\"hljs-keyword\">struct</span> &#123;<br>\tdb   Database  <span class=\"hljs-comment\">//操作状态的底层数据库，在实例化 StateDB 时指定 ②。</span><br>\ttrie trie.Trie <span class=\"hljs-comment\">//世界状态所在的树实例对象</span><br>\tstateObjects      <span class=\"hljs-keyword\">map</span>[account.Address]*account.StateObject <span class=\"hljs-comment\">//已账户地址为键的账户状态对象，能够在内存中维护使用过的账户</span><br>\tstateObjectsDirty <span class=\"hljs-keyword\">map</span>[account.Address]<span class=\"hljs-keyword\">struct</span>&#123;&#125;<span class=\"hljs-comment\">//标记被修改过的账户</span><br>    dbErr  error<br>\tlock sync.Mutex<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>首先，</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\">db: = state.NewDatabase(levelDB)<br>statedb, err := state.New(block.Root(), db)<br></code></pre></td></tr></table></figure>\n\n<p>这里的 New 函数为：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-comment\">//state/statedb.go:27</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">New</span><span class=\"hljs-params\">(root hash.Hash, db Database)</span> <span class=\"hljs-params\">(*StateDB, error)</span></span> &#123;<br>\ttr, err := db.OpenTrie(root)<span class=\"hljs-comment\">//打开指定状态版本(root)的含世界状态的顶层树</span><br>\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nil</span>, err<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> &amp;StateDB&#123;<br>\t\tdb:                db,<span class=\"hljs-comment\">//②</span><br>\t\ttrie:              tr,<br>\t\tstateObjects:      <span class=\"hljs-built_in\">make</span>(<span class=\"hljs-keyword\">map</span>[account.Address]*stateObject),<br>        stateObjectsDirty: <span class=\"hljs-built_in\">make</span>(<span class=\"hljs-keyword\">map</span>[account.Address]<span class=\"hljs-keyword\">struct</span>&#123;&#125;),<br>\t\tpreimages:         <span class=\"hljs-built_in\">make</span>(<span class=\"hljs-keyword\">map</span>[hash.Hash][]<span class=\"hljs-keyword\">byte</span>),<br>\t\tjournal:           newJournal(),<br>\t&#125;, <span class=\"hljs-literal\">nil</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>世界态中的所有状态都是已账户为基础单位存在的，因此为了便于账户隔离管理，使用不开放的 stateObject 来维护某个账户下的状态。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">type</span> StateObject <span class=\"hljs-keyword\">struct</span> &#123;<br>\t<span class=\"hljs-comment\">//账户哈希</span><br>\taddrHash <span class=\"hljs-keyword\">string</span><br>\tdata     User <span class=\"hljs-comment\">//账户属性</span><br>\t<span class=\"hljs-comment\">//底层数据库</span><br>\tdb *state.StateDB<br>\t<span class=\"hljs-comment\">// 写缓存</span><br>\ttrie Trie <span class=\"hljs-comment\">// 存储树，第一次访问时初始化</span><br>&#125;<br><span class=\"hljs-keyword\">type</span> User <span class=\"hljs-keyword\">struct</span> &#123;<br>\t<span class=\"hljs-comment\">//账户地址</span><br>\tAddress []<span class=\"hljs-keyword\">byte</span><br>\t<span class=\"hljs-comment\">//账户余额</span><br>\tAmount <span class=\"hljs-keyword\">float64</span><br>\t<span class=\"hljs-comment\">//交易个数</span><br>\tNonce <span class=\"hljs-keyword\">uint64</span><br>\t<span class=\"hljs-comment\">//storage树根哈希值</span><br>\tRoot <span class=\"hljs-keyword\">string</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>可以看到 stateObject 中维护关于某个账户的所有信息，涉及账户地址、账户地址哈希、底层数据库、存储树等内容。<br>在区块中，将交易作为输入条件，来根据一系列动作修改状态。 在完成区块挖矿前，只是获得在内存中的状态树的 Root 值。 StateDB 可视为一个内存数据库，状态数据先在内存数据库中完成修改，所有关于状态的计算都在内存中完成。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-comment\">//将每个交易对应的的账户状态树进行修改</span><br>usr := getUserByAddress(t.Address)<br><span class=\"hljs-keyword\">if</span> usr.Amount - t.Fee &lt;<span class=\"hljs-number\">0</span> &#123;<br>    <span class=\"hljs-keyword\">return</span> err<br>&#125;<br>usr.Nonce = usr.Nonce + <span class=\"hljs-number\">1</span><br>uMPT := getMPT(usr.Root)<br>data := *(*[]<span class=\"hljs-keyword\">byte</span>)(unsafe.Pointer(&amp;t))<br>uMPT.Put([]<span class=\"hljs-keyword\">byte</span>(t.Hash),data)<br>usr.Root := uMPT.RootHash()<br></code></pre></td></tr></table></figure>\n\n<p>在将区块持久化时完成有内存到数据库的更新存储，此更新属于增量更新，仅仅修改涉及到被修改部分。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-comment\">// state/statedb.go:122</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(s *StateDB)</span> <span class=\"hljs-title\">Commit</span><span class=\"hljs-params\">(deleteEmptyObjects <span class=\"hljs-keyword\">bool</span>)</span> <span class=\"hljs-params\">(root hash.Hash, err error)</span></span> &#123;<br>\t<span class=\"hljs-keyword\">for</span> addr := <span class=\"hljs-keyword\">range</span> s.journal.dirties &#123;<span class=\"hljs-comment\">//①⑧⑨⑩</span><br>\t\ts.stateObjectsDirty[addr] = <span class=\"hljs-keyword\">struct</span>&#123;&#125;&#123;&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">for</span> addr, stateObject := <span class=\"hljs-keyword\">range</span> s.stateObjects &#123;<span class=\"hljs-comment\">//②</span><br>\t\t_, isDirty := s.stateObjectsDirty[addr]<br><br>        <span class=\"hljs-keyword\">if</span> isDirty&#123;<br>\t\t\t<span class=\"hljs-comment\">//如果集合中的账户有变更</span><br>\t\t\t<span class=\"hljs-keyword\">if</span> err := stateObject.CommitTrie(s.db); err != <span class=\"hljs-literal\">nil</span> &#123;<span class=\"hljs-comment\">//⑤</span><br>\t\t\t\t<span class=\"hljs-keyword\">return</span> common.Hash&#123;&#125;, err<br>\t\t\t&#125;<br>\t\t\ts.updateStateObject(stateObject)<span class=\"hljs-comment\">//需要提交此账户</span><br>\t\t  &#125;<br>\t\t<span class=\"hljs-built_in\">delete</span>(s.stateObjectsDirty, addr)<br>    \t&#125;<br>    &#125;<br>\t<span class=\"hljs-comment\">//...</span><br>\troot, err = s.trie.Commit(<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(leaf []<span class=\"hljs-keyword\">byte</span>, parent hash.Hash)</span> <span class=\"hljs-title\">error</span></span> &#123;<span class=\"hljs-comment\">//⑦</span><br>\t\t<span class=\"hljs-keyword\">var</span> account Account<br>\t\t<span class=\"hljs-keyword\">if</span> err := rlp.DecodeBytes(leaf, &amp;account); err != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nil</span><br>\t\t&#125;<br>\t\t<span class=\"hljs-keyword\">if</span> account.Root != emptyRoot &#123;<br>\t\t\ts.db.TrieDB().Reference(account.Root, parent)<br>\t\t&#125;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nil</span><br>\t&#125;)<br>\t<span class=\"hljs-keyword\">return</span> root, err<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>因为在修改某账户信息是，将会记录变更流水（journal），因此在提交保存修改时只需要将在流水中存在的记录作为修改集 ①。</li>\n<li>所有访问过的账户信息，均被记录在 stateObjects 中，只需要遍历此集合 ② 便可以提交所有修改。</li>\n<li>处理完每个需要提交的账户内容外，最后需要将账户树提交 ⑦。在提交过程中涉及账户内容作为叶子节点，在发送变动时，将更新账户节点和父节点的关系。</li>\n</ul>","categories":[],"tags":[]}