{"title":"SecCrpytoExp-2","slug":"SecCrpytoExp-2","date":"2020-11-06T09:49:24.000Z","updated":"2023-01-02T12:28:38.840Z","comments":true,"path":"api/articles/SecCrpytoExp-2.json","realPath":null,"excerpt":null,"covers":null,"cover":"https://image.hackerjerry.top/topImg-1.png","content":"<a id=\"more\"></a>\n\n<h1 id=\"Elgamal-密码\"><a href=\"#Elgamal-密码\" class=\"headerlink\" title=\"Elgamal 密码\"></a>Elgamal 密码</h1><p>首先用到了几个强大的库（避免重复造轮子）</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> sympy<br><span class=\"hljs-keyword\">from</span> Crypto.Util <span class=\"hljs-keyword\">import</span> number<br></code></pre></td></tr></table></figure>\n\n<p><code>sympy</code>用于计算原根，它是一个强大的符号计算的 python 库。不仅可以像 mathematica 一样进行符号计算，也内置了很多的 OI 实用算法，包括图论、计算几何、数论、多项式等等很多方面。</p>\n<blockquote>\n<p>更多用法可以看这里 <a href=\"https://2o181o28.github.io/2019/07/14/sympy%E7%9A%84OI%E7%94%A8%E6%B3%95/\">https://2o181o28.github.io/2019/07/14/sympy%E7%9A%84OI%E7%94%A8%E6%B3%95/</a></p>\n</blockquote>\n<p><code>Crypto</code>则是更加强大的密码学库<br>然后就是 exp 了</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-string\">&#x27;&#x27;&#x27;</span><br><span class=\"hljs-string\">Author: M@tr1x</span><br><span class=\"hljs-string\">Date: 2020-11-06 17:15:32</span><br><span class=\"hljs-string\">LastEditTime: 2020-11-08 12:14:15</span><br><span class=\"hljs-string\">Description: Elgamal密码加解密程序</span><br><span class=\"hljs-string\">&#x27;&#x27;&#x27;</span><br><br><br><span class=\"hljs-keyword\">import</span> gmpy2<br><span class=\"hljs-keyword\">from</span> Crypto.Util <span class=\"hljs-keyword\">import</span> number<br><span class=\"hljs-keyword\">import</span> random<br><span class=\"hljs-keyword\">import</span> sympy<br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Elgamal</span>():</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__init__</span>(<span class=\"hljs-params\">self,p_length</span>):</span><br>        self.p = number.getPrime(p_length)<span class=\"hljs-comment\">#a random prime number with 2 ^ p_length</span><br>        self.x = random.randint(<span class=\"hljs-number\">2</span>,self.p<span class=\"hljs-number\">-3</span>)<span class=\"hljs-comment\">#private key</span><br>        self.g = sympy.primitive_root(self.p)<span class=\"hljs-comment\">#the smallest primitive root</span><br>        self.y = int(gmpy2.powmod(self.g,self.x,self.p))<span class=\"hljs-comment\">#public key y</span><br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">encrypt</span>(<span class=\"hljs-params\">self,m</span>):</span><br>        <span class=\"hljs-string\">&quot;&quot;&quot;crypto function</span><br><span class=\"hljs-string\"></span><br><span class=\"hljs-string\">        Args:</span><br><span class=\"hljs-string\">            m (num): plain decimal message</span><br><span class=\"hljs-string\"></span><br><span class=\"hljs-string\">        Returns:</span><br><span class=\"hljs-string\">            y1,y2: encrypted k&amp;m</span><br><span class=\"hljs-string\">        &quot;&quot;&quot;</span><br>        k = random.randint(<span class=\"hljs-number\">1</span>,self.p<span class=\"hljs-number\">-2</span>)<br>        <span class=\"hljs-keyword\">while</span> int(gmpy2.gcd(k,self.p<span class=\"hljs-number\">-1</span>))!=<span class=\"hljs-number\">1</span>:<br>            k = random.randint(<span class=\"hljs-number\">1</span>,self.p<span class=\"hljs-number\">-2</span>)<br>        y1 = gmpy2.powmod(self.g,k,self.p)<br>        y2  = (m%self.p)*int(gmpy2.powmod(self.y,k,self.p))%self.p<br>        y1 = int(y1)<br><br>        <span class=\"hljs-keyword\">return</span> y1,y2<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">decrypt</span>(<span class=\"hljs-params\">self,y1,y2</span>):</span><br>        <span class=\"hljs-string\">&quot;&quot;&quot;decrypto function</span><br><span class=\"hljs-string\"></span><br><span class=\"hljs-string\">        Args:</span><br><span class=\"hljs-string\">            y1 (num):</span><br><span class=\"hljs-string\">            y2 (num):</span><br><span class=\"hljs-string\"></span><br><span class=\"hljs-string\">        Returns:</span><br><span class=\"hljs-string\">            m: plain message</span><br><span class=\"hljs-string\">        &quot;&quot;&quot;</span><br>        yi = int(gmpy2.invert(y1,self.p))<br>        m = int(gmpy2.powmod(yi,self.x,self.p))*(y2%self.p)%self.p<br>        <span class=\"hljs-keyword\">return</span> m<br><br><br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:<br>    new_elgamal = Elgamal(<span class=\"hljs-number\">50</span>)<br>    (y1,y2) = new_elgamal.encrypt(<span class=\"hljs-number\">9999999</span>)<span class=\"hljs-comment\">#encrypt 9999999</span><br>    print(<span class=\"hljs-string\">&quot;y1:&quot;</span>+str(y1))<br>    print(<span class=\"hljs-string\">&quot;y2:&quot;</span>+str(y2))<br>    m = new_elgamal.decrypt(y1,y2)<span class=\"hljs-comment\">#decrypt y1&amp;y2</span><br>    print(<span class=\"hljs-string\">&quot;m:&quot;</span>+str(m))<br></code></pre></td></tr></table></figure>\n","more":"<h1 id=\"Elgamal-密码\"><a href=\"#Elgamal-密码\" class=\"headerlink\" title=\"Elgamal 密码\"></a>Elgamal 密码</h1><p>首先用到了几个强大的库（避免重复造轮子）</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> sympy<br><span class=\"hljs-keyword\">from</span> Crypto.Util <span class=\"hljs-keyword\">import</span> number<br></code></pre></td></tr></table></figure>\n\n<p><code>sympy</code>用于计算原根，它是一个强大的符号计算的 python 库。不仅可以像 mathematica 一样进行符号计算，也内置了很多的 OI 实用算法，包括图论、计算几何、数论、多项式等等很多方面。</p>\n<blockquote>\n<p>更多用法可以看这里 <a href=\"https://2o181o28.github.io/2019/07/14/sympy%E7%9A%84OI%E7%94%A8%E6%B3%95/\">https://2o181o28.github.io/2019/07/14/sympy%E7%9A%84OI%E7%94%A8%E6%B3%95/</a></p>\n</blockquote>\n<p><code>Crypto</code>则是更加强大的密码学库<br>然后就是 exp 了</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-string\">&#x27;&#x27;&#x27;</span><br><span class=\"hljs-string\">Author: M@tr1x</span><br><span class=\"hljs-string\">Date: 2020-11-06 17:15:32</span><br><span class=\"hljs-string\">LastEditTime: 2020-11-08 12:14:15</span><br><span class=\"hljs-string\">Description: Elgamal密码加解密程序</span><br><span class=\"hljs-string\">&#x27;&#x27;&#x27;</span><br><br><br><span class=\"hljs-keyword\">import</span> gmpy2<br><span class=\"hljs-keyword\">from</span> Crypto.Util <span class=\"hljs-keyword\">import</span> number<br><span class=\"hljs-keyword\">import</span> random<br><span class=\"hljs-keyword\">import</span> sympy<br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Elgamal</span>():</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__init__</span>(<span class=\"hljs-params\">self,p_length</span>):</span><br>        self.p = number.getPrime(p_length)<span class=\"hljs-comment\">#a random prime number with 2 ^ p_length</span><br>        self.x = random.randint(<span class=\"hljs-number\">2</span>,self.p<span class=\"hljs-number\">-3</span>)<span class=\"hljs-comment\">#private key</span><br>        self.g = sympy.primitive_root(self.p)<span class=\"hljs-comment\">#the smallest primitive root</span><br>        self.y = int(gmpy2.powmod(self.g,self.x,self.p))<span class=\"hljs-comment\">#public key y</span><br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">encrypt</span>(<span class=\"hljs-params\">self,m</span>):</span><br>        <span class=\"hljs-string\">&quot;&quot;&quot;crypto function</span><br><span class=\"hljs-string\"></span><br><span class=\"hljs-string\">        Args:</span><br><span class=\"hljs-string\">            m (num): plain decimal message</span><br><span class=\"hljs-string\"></span><br><span class=\"hljs-string\">        Returns:</span><br><span class=\"hljs-string\">            y1,y2: encrypted k&amp;m</span><br><span class=\"hljs-string\">        &quot;&quot;&quot;</span><br>        k = random.randint(<span class=\"hljs-number\">1</span>,self.p<span class=\"hljs-number\">-2</span>)<br>        <span class=\"hljs-keyword\">while</span> int(gmpy2.gcd(k,self.p<span class=\"hljs-number\">-1</span>))!=<span class=\"hljs-number\">1</span>:<br>            k = random.randint(<span class=\"hljs-number\">1</span>,self.p<span class=\"hljs-number\">-2</span>)<br>        y1 = gmpy2.powmod(self.g,k,self.p)<br>        y2  = (m%self.p)*int(gmpy2.powmod(self.y,k,self.p))%self.p<br>        y1 = int(y1)<br><br>        <span class=\"hljs-keyword\">return</span> y1,y2<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">decrypt</span>(<span class=\"hljs-params\">self,y1,y2</span>):</span><br>        <span class=\"hljs-string\">&quot;&quot;&quot;decrypto function</span><br><span class=\"hljs-string\"></span><br><span class=\"hljs-string\">        Args:</span><br><span class=\"hljs-string\">            y1 (num):</span><br><span class=\"hljs-string\">            y2 (num):</span><br><span class=\"hljs-string\"></span><br><span class=\"hljs-string\">        Returns:</span><br><span class=\"hljs-string\">            m: plain message</span><br><span class=\"hljs-string\">        &quot;&quot;&quot;</span><br>        yi = int(gmpy2.invert(y1,self.p))<br>        m = int(gmpy2.powmod(yi,self.x,self.p))*(y2%self.p)%self.p<br>        <span class=\"hljs-keyword\">return</span> m<br><br><br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:<br>    new_elgamal = Elgamal(<span class=\"hljs-number\">50</span>)<br>    (y1,y2) = new_elgamal.encrypt(<span class=\"hljs-number\">9999999</span>)<span class=\"hljs-comment\">#encrypt 9999999</span><br>    print(<span class=\"hljs-string\">&quot;y1:&quot;</span>+str(y1))<br>    print(<span class=\"hljs-string\">&quot;y2:&quot;</span>+str(y2))<br>    m = new_elgamal.decrypt(y1,y2)<span class=\"hljs-comment\">#decrypt y1&amp;y2</span><br>    print(<span class=\"hljs-string\">&quot;m:&quot;</span>+str(m))<br></code></pre></td></tr></table></figure>","categories":[{"name":"crypto","path":"api/categories/crypto.json"}],"tags":[{"name":"crypto","path":"api/tags/crypto.json"}]}