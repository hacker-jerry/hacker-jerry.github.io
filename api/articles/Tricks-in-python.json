{"title":"Tricks-in-python","slug":"Tricks-in-python","date":"2020-11-28T09:43:42.000Z","updated":"2022-02-07T10:05:56.268Z","comments":true,"path":"api/articles/Tricks-in-python.json","realPath":null,"excerpt":null,"covers":null,"cover":"https://image.hackerjerry.top/topImg-1.png","content":"<a id=\"more\"></a>\n\n<h1 id=\"装饰器-classmethod-和-staticmethod\"><a href=\"#装饰器-classmethod-和-staticmethod\" class=\"headerlink\" title=\"装饰器-@classmethod 和@staticmethod\"></a>装饰器-@classmethod 和@staticmethod</h1><p>将方法定义成类方法和静态方法。</p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/28010894\">https://zhuanlan.zhihu.com/p/28010894</a><br>可以看看这篇文章</p>\n<h1 id=\"生成器\"><a href=\"#生成器\" class=\"headerlink\" title=\"生成器\"></a>生成器</h1><h2 id=\"通过函数方式创建\"><a href=\"#通过函数方式创建\" class=\"headerlink\" title=\"通过函数方式创建\"></a>通过函数方式创建</h2><p>通过<code>yield</code>关键字将一个函数变成<code>generator</code>。例如：<br>函数的定义：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">fib</span>(<span class=\"hljs-params\">max</span>):</span><br>    n, a, b = <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span><br>    <span class=\"hljs-keyword\">while</span> n &lt; max:<br>        print(b)<br>        a, b = b, a + b<br>        n = n + <span class=\"hljs-number\">1</span><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&#x27;done&#x27;</span><br></code></pre></td></tr></table></figure>\n\n<p>生成器的定义：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">fib</span>(<span class=\"hljs-params\">max</span>):</span><br>    n, a, b = <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span><br>    <span class=\"hljs-keyword\">while</span> n &lt; max:<br>        <span class=\"hljs-keyword\">yield</span> b<br>        a, b = b, a + b<br>        n = n + <span class=\"hljs-number\">1</span><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&#x27;done&#x27;</span><br></code></pre></td></tr></table></figure>\n\n<p>两者的差别在于生成器将函数的<code>print(b)</code>改为<code>yield b</code>。<code>yield</code>可以翻译为<code>生成</code>，即基于某次计算生成某个元素，而不是提前存储了该元素。<br>函数式的<code>generator</code>一般采用<code>for</code>循环来获取元素，也可以通过<code>next()</code>来获取下一个元素的值，例如：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-meta\">&gt;&gt;&gt; </span><span class=\"hljs-keyword\">for</span> n <span class=\"hljs-keyword\">in</span> fib(<span class=\"hljs-number\">6</span>):<br><span class=\"hljs-meta\">... </span>    print(n)<br>...<br><span class=\"hljs-number\">1</span><br><span class=\"hljs-number\">1</span><br><span class=\"hljs-number\">2</span><br><span class=\"hljs-number\">3</span><br><span class=\"hljs-number\">5</span><br><span class=\"hljs-number\">8</span><br></code></pre></td></tr></table></figure>\n\n<p>如果要获取<code>return</code>的内容，可以捕获<code>StopIteration</code>错误，返回值包含在<code>StopIteration</code>的<code>value</code>中。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-meta\">&gt;&gt;&gt; </span>g = fib(<span class=\"hljs-number\">6</span>)<br><span class=\"hljs-meta\">&gt;&gt;&gt; </span><span class=\"hljs-keyword\">while</span> <span class=\"hljs-literal\">True</span>:<br><span class=\"hljs-meta\">... </span>    <span class=\"hljs-keyword\">try</span>:<br><span class=\"hljs-meta\">... </span>        x = next(g)<br><span class=\"hljs-meta\">... </span>        print(<span class=\"hljs-string\">&#x27;g:&#x27;</span>, x)<br><span class=\"hljs-meta\">... </span>    <span class=\"hljs-keyword\">except</span> StopIteration <span class=\"hljs-keyword\">as</span> e:<br><span class=\"hljs-meta\">... </span>        print(<span class=\"hljs-string\">&#x27;Generator return value:&#x27;</span>, e.value)<br><span class=\"hljs-meta\">... </span>        <span class=\"hljs-keyword\">break</span><br>...<br>g: <span class=\"hljs-number\">1</span><br>g: <span class=\"hljs-number\">1</span><br>g: <span class=\"hljs-number\">2</span><br>g: <span class=\"hljs-number\">3</span><br>g: <span class=\"hljs-number\">5</span><br>g: <span class=\"hljs-number\">8</span><br>Generator <span class=\"hljs-keyword\">return</span> value: done<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"面向对象编程\"><a href=\"#面向对象编程\" class=\"headerlink\" title=\"面向对象编程\"></a>面向对象编程</h1><h2 id=\"访问限制\"><a href=\"#访问限制\" class=\"headerlink\" title=\"访问限制\"></a>访问限制</h2><p>实例的变量以<code>__xxx</code>双下划线开头，没有以<code>__</code>双下划线结尾的，则该变量为私有变量，外部一般无法访问。例如：<code>self.__name = name</code>。<br>如果变量名是双下划线开头、双下划线结尾，<code>__xxx__</code>是特殊变量而不是私有变量。私有变量的方式可以避免外部对实例内部数据的修改，可以做参数检查。<br>如果需要获取或修改内部的数据，可以增加<code>get</code>和<code>set</code>的方法。例如：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Student</span>(<span class=\"hljs-params\">object</span>):</span><br>    <span class=\"hljs-comment\">#构造函数</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__init__</span>(<span class=\"hljs-params\">self, name, score</span>):</span><br>        self.__name = name<br>        self.__score = score<br>    <span class=\"hljs-comment\">#get方法</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">get_name</span>(<span class=\"hljs-params\">self</span>):</span><br>        <span class=\"hljs-keyword\">return</span> self.__name<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">get_score</span>(<span class=\"hljs-params\">self</span>):</span><br>        <span class=\"hljs-keyword\">return</span> self.__score<br>     <span class=\"hljs-comment\">#set方法</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">set_score</span>(<span class=\"hljs-params\">self, score</span>):</span><br>        <span class=\"hljs-comment\">#参数检查</span><br>        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-number\">0</span> &lt;= score &lt;= <span class=\"hljs-number\">100</span>:<br>            self.__score = score<br>        <span class=\"hljs-keyword\">else</span>:<br>            <span class=\"hljs-keyword\">raise</span> ValueError(<span class=\"hljs-string\">&#x27;bad score&#x27;</span>)<br></code></pre></td></tr></table></figure>\n","more":"<h1 id=\"装饰器-classmethod-和-staticmethod\"><a href=\"#装饰器-classmethod-和-staticmethod\" class=\"headerlink\" title=\"装饰器-@classmethod 和@staticmethod\"></a>装饰器-@classmethod 和@staticmethod</h1><p>将方法定义成类方法和静态方法。</p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/28010894\">https://zhuanlan.zhihu.com/p/28010894</a><br>可以看看这篇文章</p>\n<h1 id=\"生成器\"><a href=\"#生成器\" class=\"headerlink\" title=\"生成器\"></a>生成器</h1><h2 id=\"通过函数方式创建\"><a href=\"#通过函数方式创建\" class=\"headerlink\" title=\"通过函数方式创建\"></a>通过函数方式创建</h2><p>通过<code>yield</code>关键字将一个函数变成<code>generator</code>。例如：<br>函数的定义：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">fib</span>(<span class=\"hljs-params\">max</span>):</span><br>    n, a, b = <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span><br>    <span class=\"hljs-keyword\">while</span> n &lt; max:<br>        print(b)<br>        a, b = b, a + b<br>        n = n + <span class=\"hljs-number\">1</span><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&#x27;done&#x27;</span><br></code></pre></td></tr></table></figure>\n\n<p>生成器的定义：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">fib</span>(<span class=\"hljs-params\">max</span>):</span><br>    n, a, b = <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span><br>    <span class=\"hljs-keyword\">while</span> n &lt; max:<br>        <span class=\"hljs-keyword\">yield</span> b<br>        a, b = b, a + b<br>        n = n + <span class=\"hljs-number\">1</span><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&#x27;done&#x27;</span><br></code></pre></td></tr></table></figure>\n\n<p>两者的差别在于生成器将函数的<code>print(b)</code>改为<code>yield b</code>。<code>yield</code>可以翻译为<code>生成</code>，即基于某次计算生成某个元素，而不是提前存储了该元素。<br>函数式的<code>generator</code>一般采用<code>for</code>循环来获取元素，也可以通过<code>next()</code>来获取下一个元素的值，例如：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-meta\">&gt;&gt;&gt; </span><span class=\"hljs-keyword\">for</span> n <span class=\"hljs-keyword\">in</span> fib(<span class=\"hljs-number\">6</span>):<br><span class=\"hljs-meta\">... </span>    print(n)<br>...<br><span class=\"hljs-number\">1</span><br><span class=\"hljs-number\">1</span><br><span class=\"hljs-number\">2</span><br><span class=\"hljs-number\">3</span><br><span class=\"hljs-number\">5</span><br><span class=\"hljs-number\">8</span><br></code></pre></td></tr></table></figure>\n\n<p>如果要获取<code>return</code>的内容，可以捕获<code>StopIteration</code>错误，返回值包含在<code>StopIteration</code>的<code>value</code>中。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-meta\">&gt;&gt;&gt; </span>g = fib(<span class=\"hljs-number\">6</span>)<br><span class=\"hljs-meta\">&gt;&gt;&gt; </span><span class=\"hljs-keyword\">while</span> <span class=\"hljs-literal\">True</span>:<br><span class=\"hljs-meta\">... </span>    <span class=\"hljs-keyword\">try</span>:<br><span class=\"hljs-meta\">... </span>        x = next(g)<br><span class=\"hljs-meta\">... </span>        print(<span class=\"hljs-string\">&#x27;g:&#x27;</span>, x)<br><span class=\"hljs-meta\">... </span>    <span class=\"hljs-keyword\">except</span> StopIteration <span class=\"hljs-keyword\">as</span> e:<br><span class=\"hljs-meta\">... </span>        print(<span class=\"hljs-string\">&#x27;Generator return value:&#x27;</span>, e.value)<br><span class=\"hljs-meta\">... </span>        <span class=\"hljs-keyword\">break</span><br>...<br>g: <span class=\"hljs-number\">1</span><br>g: <span class=\"hljs-number\">1</span><br>g: <span class=\"hljs-number\">2</span><br>g: <span class=\"hljs-number\">3</span><br>g: <span class=\"hljs-number\">5</span><br>g: <span class=\"hljs-number\">8</span><br>Generator <span class=\"hljs-keyword\">return</span> value: done<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"面向对象编程\"><a href=\"#面向对象编程\" class=\"headerlink\" title=\"面向对象编程\"></a>面向对象编程</h1><h2 id=\"访问限制\"><a href=\"#访问限制\" class=\"headerlink\" title=\"访问限制\"></a>访问限制</h2><p>实例的变量以<code>__xxx</code>双下划线开头，没有以<code>__</code>双下划线结尾的，则该变量为私有变量，外部一般无法访问。例如：<code>self.__name = name</code>。<br>如果变量名是双下划线开头、双下划线结尾，<code>__xxx__</code>是特殊变量而不是私有变量。私有变量的方式可以避免外部对实例内部数据的修改，可以做参数检查。<br>如果需要获取或修改内部的数据，可以增加<code>get</code>和<code>set</code>的方法。例如：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Student</span>(<span class=\"hljs-params\">object</span>):</span><br>    <span class=\"hljs-comment\">#构造函数</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__init__</span>(<span class=\"hljs-params\">self, name, score</span>):</span><br>        self.__name = name<br>        self.__score = score<br>    <span class=\"hljs-comment\">#get方法</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">get_name</span>(<span class=\"hljs-params\">self</span>):</span><br>        <span class=\"hljs-keyword\">return</span> self.__name<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">get_score</span>(<span class=\"hljs-params\">self</span>):</span><br>        <span class=\"hljs-keyword\">return</span> self.__score<br>     <span class=\"hljs-comment\">#set方法</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">set_score</span>(<span class=\"hljs-params\">self, score</span>):</span><br>        <span class=\"hljs-comment\">#参数检查</span><br>        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-number\">0</span> &lt;= score &lt;= <span class=\"hljs-number\">100</span>:<br>            self.__score = score<br>        <span class=\"hljs-keyword\">else</span>:<br>            <span class=\"hljs-keyword\">raise</span> ValueError(<span class=\"hljs-string\">&#x27;bad score&#x27;</span>)<br></code></pre></td></tr></table></figure>","categories":[{"name":"python","path":"api/categories/python.json"}],"tags":[{"name":"python","path":"api/tags/python.json"}]}