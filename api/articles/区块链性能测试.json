{"title":"区块链性能测试","slug":"区块链性能测试","date":"2021-05-06T12:58:59.000Z","updated":"2023-06-19T15:27:00.774Z","comments":true,"path":"api/articles/区块链性能测试.json","realPath":null,"excerpt":"对区块链进行性能测试","covers":["https://cdn.nlark.com/yuque/0/2021/png/1629942/1620459896573-bc102c81-8f17-4d17-8074-ed6b671202b6.png#clientId=ue0d8159d-8879-4&from=paste&height=269&id=uf8e241e5&originHeight=538&originWidth=854&originalType=binary&size=66022&status=done&style=none&taskId=ua2f5d267-1fbc-46ce-a75d-7e48fa43834&width=427","https://cdn.nlark.com/yuque/0/2021/png/1629942/1620467777427-c7a640ff-cbe0-4240-918e-4deec9c57b5d.png#clientId=ue0d8159d-8879-4&from=paste&height=85&id=u7c0e6c3b&originHeight=169&originWidth=808&originalType=binary&size=23484&status=done&style=none&taskId=u8db7b66d-e3cc-446c-ae3b-7416ee176a8&width=404"],"cover":"https://cdn.nlark.com/yuque/0/2021/png/1629942/1620459896573-bc102c81-8f17-4d17-8074-ed6b671202b6.png#clientId=ue0d8159d-8879-4&from=paste&height=269&id=uf8e241e5&originHeight=538&originWidth=854&originalType=binary&size=66022&status=done&style=none&taskId=ua2f5d267-1fbc-46ce-a75d-7e48fa43834&width=427","content":"<p>对区块链进行性能测试</p>\n<a id=\"more\"></a>\n\n<h1 id=\"现状\"><a href=\"#现状\" class=\"headerlink\" title=\"现状\"></a>现状</h1><p>目前，主流平台基本支持 Caliper 压力测试。<br>官方文档：<br>【1】<a href=\"https://fisco-bcos-documentation.readthedocs.io/zh_CN/latest/docs/articles/4_tools/46_stresstest/caliper_stress_test_practice.html\">性能压测工具 Caliper 在 FISCO BCOS 平台中的实践</a><br>【2】<a href=\"https://fisco-bcos-documentation.readthedocs.io/zh_CN/latest/docs/tutorial/stress_testing.html#caliper\">通过 Caliper 进行压力测试程序</a><br>其他个人业务 demo：<br>【1】<a href=\"https://blog.csdn.net/manok/article/details/82084852\">基于区块链技术的性能测试</a><br>【2】<a href=\"https://bbs.huaweicloud.com/blogs/204653\">基于 Fabric 的性能测试与调优实践</a><br>【3】<a href=\"https://www.infoq.cn/article/block-chain-practice\">区块链性能测评实战案例</a></p>\n<p>其他 web 服务器测压思路比如，Apachebench，redisbench，wrk</p>\n<h1 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h1><ol>\n<li>网络配置</li>\n<li>设备配置</li>\n<li>redis 截图<ol>\n<li>查询性能</li>\n<li>共识性能</li>\n</ol>\n</li>\n<li>见本子</li>\n</ol>\n<h1 id=\"网络配置\"><a href=\"#网络配置\" class=\"headerlink\" title=\"网络配置\"></a>网络配置</h1><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs json\">&#123;<br>  <span class=\"hljs-attr\">&quot;test&quot;</span>: &#123;<br>    <span class=\"hljs-attr\">&quot;blockchain&quot;</span>: <span class=\"hljs-string\">&quot;block-dag&quot;</span>,<br>    <span class=\"hljs-attr\">&quot;command&quot;</span>: &#123;<br>      <span class=\"hljs-attr\">&quot;start&quot;</span>: <span class=\"hljs-string\">&quot;sh block-dag/stress-testing/start.sh&quot;</span>,<br>      <span class=\"hljs-attr\">&quot;end&quot;</span>: <span class=\"hljs-string\">&quot;sh block-dag/stress-testing/end.sh&quot;</span><br>    &#125;<br>  &#125;,<br>  <span class=\"hljs-attr\">&quot;minner&quot;</span>: &#123;<br>    <span class=\"hljs-attr\">&quot;config&quot;</span>: &#123;<br>      <span class=\"hljs-attr\">&quot;privateKey&quot;</span>: <span class=\"hljs-string\">&quot;bcec428d5205abe0f0cc8a734083908d9eb8563e31f943d760786edf42ad67dd&quot;</span>,<br>      <span class=\"hljs-attr\">&quot;account&quot;</span>: <span class=\"hljs-string\">&quot;0x64fa644d2a694681bd6addd6c5e36cccd8dcdde3&quot;</span><br>    &#125;,<br>    <span class=\"hljs-attr\">&quot;network&quot;</span>: &#123;<br>      <span class=\"hljs-attr\">&quot;nodes&quot;</span>: [<br>        &#123;<br>          <span class=\"hljs-attr\">&quot;ip&quot;</span>: <span class=\"hljs-string\">&quot;192.168.1.1&quot;</span>,<br>          <span class=\"hljs-attr\">&quot;rpcPort&quot;</span>: <span class=\"hljs-string\">&quot;6001&quot;</span>,<br>          <span class=\"hljs-attr\">&quot;channelPort&quot;</span>: <span class=\"hljs-string\">&quot;9001&quot;</span><br>        &#125;,<br>        &#123;<br>          <span class=\"hljs-attr\">&quot;ip&quot;</span>: <span class=\"hljs-string\">&quot;192.168.1.2&quot;</span>,<br>          <span class=\"hljs-attr\">&quot;rpcPort&quot;</span>: <span class=\"hljs-string\">&quot;6001&quot;</span>,<br>          <span class=\"hljs-attr\">&quot;channelPort&quot;</span>: <span class=\"hljs-string\">&quot;9001&quot;</span><br>        &#125;,<br>        &#123;<br>          <span class=\"hljs-attr\">&quot;ip&quot;</span>: <span class=\"hljs-string\">&quot;192.168.1.3&quot;</span>,<br>          <span class=\"hljs-attr\">&quot;rpcPort&quot;</span>: <span class=\"hljs-string\">&quot;6001&quot;</span>,<br>          <span class=\"hljs-attr\">&quot;channelPort&quot;</span>: <span class=\"hljs-string\">&quot;9001&quot;</span><br>        &#125;<br>      ],<br>      <span class=\"hljs-attr\">&quot;authentication&quot;</span>: &#123;<br>        <span class=\"hljs-attr\">&quot;key&quot;</span>: <span class=\"hljs-string\">&quot;block-dag/stress-testing/sdk/node.key&quot;</span>,<br>        <span class=\"hljs-attr\">&quot;cert&quot;</span>: <span class=\"hljs-string\">&quot;block-dag/stress-testing/sdk/node.crt&quot;</span>,<br>        <span class=\"hljs-attr\">&quot;ca&quot;</span>: <span class=\"hljs-string\">&quot;block-dag/stress-testing/sdk/ca.crt&quot;</span><br>      &#125;,<br>      <span class=\"hljs-attr\">&quot;timeout&quot;</span>: <span class=\"hljs-number\">900000</span><br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><strong>command.start</strong><br>首先执行 start 配置中指定的命令，主要用于使用 Docker 模式启动，启动 Caliper 时首先执行当前目录下的 start.sh 文件，其具体内容是：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">docker -H 192.168.1.1:6001 run -d --rm --name node0 -v /data/test/node0/:/data -p 8000:8000 -p 20914:20914 -p 9001:9001 -w=/data dag/blockdag:latest -c config.ini 1&gt; /dev/null<br>docker -H 192.168.1.2:6001 run -d --rm --name node1 -v /data/test/node0/:/data -p 8000:8000 -p 20914:20914 -p 9001:9001 -w=/data dag/blockdag:latest -c config.ini 1&gt; /dev/null<br>docker -H 192.168.1.3:6001 run -d --rm --name node2 -v /data/test/node0/:/data -p 8000:8000 -p 20914:20914 -p 9001:9001 -w=/data dag/blockdag:latest -c config.ini 1&gt; /dev/null<br></code></pre></td></tr></table></figure>\n\n<p>即启动远程的 Docker 容器。<br><strong>command.end</strong><br>Caliper 在退出流程的最后会执行 end 配置指定的命令，主要用于清理环境。本例中在测试结束时会执行当前目录下的 end.sh 文件，其具体内容是：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">docker -H 192.168.1.1:6001 stop $(docker -H 192.168.1.1:6001 ps -a | grep node0 | cut -d &quot; &quot; -f 1) 1&gt; /dev/null &amp;&amp; echo -e &quot;\\033[32mremote container node0 stopped\\033[0m&quot;<br>docker -H 192.168.1.2:6001 stop $(docker -H 192.168.1.2:6001 ps -a | grep node1 | cut -d &quot; &quot; -f 1) 1&gt; /dev/null &amp;&amp; echo -e &quot;\\033[32mremote container node1 stopped\\033[0m&quot;<br>docker -H 192.168.1.3:6001 stop $(docker -H 192.168.1.3:6001 ps -a | grep node2 | cut -d &quot; &quot; -f 1) 1&gt; /dev/null &amp;&amp; echo -e &quot;\\033[32mremote container node2 stopped\\033[0m&quot;<br></code></pre></td></tr></table></figure>\n\n<p>即停止并删除有所的远程容器。<br><strong>network.nodes</strong><br>一个包含了所有要连接节点的列表，列表中每一项需要指明被连接节点的 IP 地址、RPC 端口及 Channel 端口号，所有端口号需要和节点的配置文件保持一致。<br><strong>network.authentication</strong><br>适配器向节点的 Channel 端口发起请求时需要使用 CA 根证书等文件，这些文件已在 3.1.2 节中调用 build_chain.sh 脚本时已经生成好，使用任一节点配置下的 sdk 文件夹中的相应文件即可，需要在该配置中写上所有文件的路径。</p>\n<h1 id=\"测试配置\"><a href=\"#测试配置\" class=\"headerlink\" title=\"测试配置\"></a>测试配置</h1><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-meta\">---</span><br><span class=\"hljs-attr\">test:</span><br>  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">stress</span> <span class=\"hljs-string\">test</span><br>  <span class=\"hljs-attr\">description:</span> <span class=\"hljs-string\">This</span> <span class=\"hljs-string\">is</span> <span class=\"hljs-string\">a</span> <span class=\"hljs-string\">stress</span> <span class=\"hljs-string\">testing</span> <span class=\"hljs-string\">of</span> <span class=\"hljs-string\">Block</span> <span class=\"hljs-string\">DAG.</span><br>  <span class=\"hljs-attr\">clients:</span><br>    <span class=\"hljs-attr\">type:</span> <span class=\"hljs-string\">local</span><br>    <span class=\"hljs-attr\">number:</span> <span class=\"hljs-number\">1</span><br>  <span class=\"hljs-attr\">rounds:</span><br>    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">label:</span> <span class=\"hljs-string\">create</span><br>      <span class=\"hljs-attr\">description:</span> <span class=\"hljs-string\">Test</span> <span class=\"hljs-string\">performance</span> <span class=\"hljs-string\">of</span> <span class=\"hljs-string\">creating</span> <span class=\"hljs-string\">txs</span><br>      <span class=\"hljs-attr\">txNumber:</span><br>        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-number\">15000</span><br>      <span class=\"hljs-attr\">callback:</span> <span class=\"hljs-string\">block-dag/stress-testing/create.js</span><br><span class=\"hljs-attr\">monitor:</span><br>  <span class=\"hljs-attr\">type:</span><br>    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">docker</span><br>  <span class=\"hljs-attr\">docker:</span><br>    <span class=\"hljs-attr\">name:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">http://192.168.1.1:6001</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">http://192.168.1.2:6001</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">http://192.168.1.3:6001</span><br>  <span class=\"hljs-attr\">interval:</span> <span class=\"hljs-number\">0.1</span><br></code></pre></td></tr></table></figure>\n\n<p>测试文件中主要包括两部分：</p>\n<ul>\n<li>测试内容配置</li>\n</ul>\n<p>test 项负责对测试内容进行配置。配置主要集中在 round 字段中指定如何对区块链系统进行测试。每一个测试可以包含多轮，每一轮可以向区块链发起不同的测试请求。<br>本次测试是对系统的 createTx 接口进行测试。在测试中，可以通过 txNumber 字段指定测试的交易发送数量</p>\n<ul>\n<li>性能监视器配置</li>\n</ul>\n<p>monitor 项负责对测试所使用的性能监视器的进行配置。每项配置项的解释如下：</p>\n<ol>\n<li>monitor.type，需要指定为 docker，指对 docker 容器进行监控；</li>\n<li>monitor.docker.name，一个包含所有要监视的节点的 docker 容器名称列表；</li>\n<li>monitor.interval，监视器的采样间隔，单位为秒。</li>\n</ol>\n<h1 id=\"实际测试\"><a href=\"#实际测试\" class=\"headerlink\" title=\"实际测试\"></a>实际测试</h1><p>实际测试中，我选择类似 Apache 的测试结果。<br>全是正常交易</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">Tx Length:</span> <span class=\"hljs-number\">217088</span> <span class=\"hljs-string\">bytes</span>       <span class=\"hljs-string\">交易数据的长度</span><br><span class=\"hljs-attr\">Total Txs Number:</span> <span class=\"hljs-number\">15000</span><br><span class=\"hljs-attr\">Time taken for tests:</span> <span class=\"hljs-number\">5.919</span> <span class=\"hljs-string\">seconds</span>    <span class=\"hljs-string\">所有这些交易发送完所花费的时间</span><br><span class=\"hljs-attr\">Complete requests:</span> <span class=\"hljs-number\">15000</span>             <span class=\"hljs-string\">完成请求数</span><br><span class=\"hljs-attr\">Failed requests:</span> <span class=\"hljs-number\">0</span>                <span class=\"hljs-string\">失败请求数</span><br><span class=\"hljs-attr\">Write errors:</span> <span class=\"hljs-number\">0</span><br><span class=\"hljs-attr\">Total transferred:</span> <span class=\"hljs-number\">3256320000</span> <span class=\"hljs-string\">bytes</span>     <span class=\"hljs-string\">网络总传输量</span><br><span class=\"hljs-attr\">TPS:</span> <span class=\"hljs-number\">2536.3</span> [<span class=\"hljs-comment\">#/sec] (mean) 吞吐量-每秒交易数</span><br><span class=\"hljs-attr\">Time per request:</span> <span class=\"hljs-number\">1.513</span> [<span class=\"hljs-string\">ms</span>] <span class=\"hljs-string\">(mean</span>, <span class=\"hljs-string\">across</span> <span class=\"hljs-string\">all</span> <span class=\"hljs-string\">concurrent</span> <span class=\"hljs-string\">requests)</span> <span class=\"hljs-string\">并发的每个请求平均消耗时间</span><br><span class=\"hljs-attr\">Transfer rate:</span> <span class=\"hljs-number\">67.15</span> [<span class=\"hljs-string\">Mbytes/sec</span>] <span class=\"hljs-string\">received</span> <span class=\"hljs-string\">平均每秒网络上的流量，可以帮助排除是否存在网络流量过大导致响应时间延长的问题</span><br></code></pre></td></tr></table></figure>\n\n<p>说明:<br>Tx 长度为 212 kb，换算为字节是 217088 bytes</p>\n<blockquote>\n<p>用 nodejs 打印上述结果</p>\n</blockquote>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/1629942/1620459896573-bc102c81-8f17-4d17-8074-ed6b671202b6.png#clientId=ue0d8159d-8879-4&from=paste&height=269&id=uf8e241e5&originHeight=538&originWidth=854&originalType=binary&size=66022&status=done&style=none&taskId=ua2f5d267-1fbc-46ce-a75d-7e48fa43834&width=427\" alt=\"image.png\"><br>打印区块<br>getMaxHeightBlock 接口–最高块<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/1629942/1620459806102-0d9e7147-7520-4e4a-984b-6913ce16a29a.png#clientId=ue0d8159d-8879-4&from=paste&height=302&id=udab02a53&originHeight=599&originWidth=978&originalType=binary&size=115789&status=done&style=none&taskId=u2ed02707-9654-4dfb-8fb5-77517ad6a23&width=493\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/1629942/1620459831877-92adbe62-3c59-4774-8194-003d3b1f038c.png#clientId=ue0d8159d-8879-4&from=paste&height=348&id=ubdbcfa19&originHeight=679&originWidth=909&originalType=binary&size=108543&status=done&style=none&taskId=u82ff9afe-2c69-4356-9d50-5d83d492427&width=465.5\" alt=\"image.png\"><br>这里注意到，每个块包含 60 个交易，60*95=5700&gt;3000（为平均每节点分配到的交易量），这里存在几种原因：<br>① 在并发生成块的时候，由于节点间的速率差异与网络延迟而导致当时观察到的 Tip 集不同，而导致的区块高度高于预期高度。<br>② 由于处理交易的时候对于放在交易缓存池中的未打包交易进行转发操作，并标记为未打包，导致其中的一些交易被不同的节点重复打包，而导致打包交易量大于预期。</p>\n<p>解释各个字段的含义</p>\n<p>再通过 rpc 端口查询每个节点中各自存储的交易量<br>（发送 GET 请求到 channel 端口进行查询）</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/1629942/1620467777427-c7a640ff-cbe0-4240-918e-4deec9c57b5d.png#clientId=ue0d8159d-8879-4&from=paste&height=85&id=u7c0e6c3b&originHeight=169&originWidth=808&originalType=binary&size=23484&status=done&style=none&taskId=u8db7b66d-e3cc-446c-ae3b-7416ee176a8&width=404\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/1629942/1620467714988-278e8c2b-682d-4885-9e8e-cdd02a853dd3.png#clientId=ue0d8159d-8879-4&from=paste&height=81&id=ud52b21b6&originHeight=162&originWidth=812&originalType=binary&size=23217&status=done&style=none&taskId=u0c59e8b2-326d-4414-b250-f3334c30c2e&width=406\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/1629942/1620467650231-6929499a-0112-425e-9104-58d587523544.png#clientId=ue0d8159d-8879-4&from=paste&height=85&id=ue659a490&originHeight=169&originWidth=805&originalType=binary&size=24212&status=done&style=none&taskId=u667e9356-a241-4ac0-9ab5-3676f248e40&width=402.5\" alt=\"image.png\"></p>\n","more":"<h1 id=\"现状\"><a href=\"#现状\" class=\"headerlink\" title=\"现状\"></a>现状</h1><p>目前，主流平台基本支持 Caliper 压力测试。<br>官方文档：<br>【1】<a href=\"https://fisco-bcos-documentation.readthedocs.io/zh_CN/latest/docs/articles/4_tools/46_stresstest/caliper_stress_test_practice.html\">性能压测工具 Caliper 在 FISCO BCOS 平台中的实践</a><br>【2】<a href=\"https://fisco-bcos-documentation.readthedocs.io/zh_CN/latest/docs/tutorial/stress_testing.html#caliper\">通过 Caliper 进行压力测试程序</a><br>其他个人业务 demo：<br>【1】<a href=\"https://blog.csdn.net/manok/article/details/82084852\">基于区块链技术的性能测试</a><br>【2】<a href=\"https://bbs.huaweicloud.com/blogs/204653\">基于 Fabric 的性能测试与调优实践</a><br>【3】<a href=\"https://www.infoq.cn/article/block-chain-practice\">区块链性能测评实战案例</a></p>\n<p>其他 web 服务器测压思路比如，Apachebench，redisbench，wrk</p>\n<h1 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h1><ol>\n<li>网络配置</li>\n<li>设备配置</li>\n<li>redis 截图<ol>\n<li>查询性能</li>\n<li>共识性能</li>\n</ol>\n</li>\n<li>见本子</li>\n</ol>\n<h1 id=\"网络配置\"><a href=\"#网络配置\" class=\"headerlink\" title=\"网络配置\"></a>网络配置</h1><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs json\">&#123;<br>  <span class=\"hljs-attr\">&quot;test&quot;</span>: &#123;<br>    <span class=\"hljs-attr\">&quot;blockchain&quot;</span>: <span class=\"hljs-string\">&quot;block-dag&quot;</span>,<br>    <span class=\"hljs-attr\">&quot;command&quot;</span>: &#123;<br>      <span class=\"hljs-attr\">&quot;start&quot;</span>: <span class=\"hljs-string\">&quot;sh block-dag/stress-testing/start.sh&quot;</span>,<br>      <span class=\"hljs-attr\">&quot;end&quot;</span>: <span class=\"hljs-string\">&quot;sh block-dag/stress-testing/end.sh&quot;</span><br>    &#125;<br>  &#125;,<br>  <span class=\"hljs-attr\">&quot;minner&quot;</span>: &#123;<br>    <span class=\"hljs-attr\">&quot;config&quot;</span>: &#123;<br>      <span class=\"hljs-attr\">&quot;privateKey&quot;</span>: <span class=\"hljs-string\">&quot;bcec428d5205abe0f0cc8a734083908d9eb8563e31f943d760786edf42ad67dd&quot;</span>,<br>      <span class=\"hljs-attr\">&quot;account&quot;</span>: <span class=\"hljs-string\">&quot;0x64fa644d2a694681bd6addd6c5e36cccd8dcdde3&quot;</span><br>    &#125;,<br>    <span class=\"hljs-attr\">&quot;network&quot;</span>: &#123;<br>      <span class=\"hljs-attr\">&quot;nodes&quot;</span>: [<br>        &#123;<br>          <span class=\"hljs-attr\">&quot;ip&quot;</span>: <span class=\"hljs-string\">&quot;192.168.1.1&quot;</span>,<br>          <span class=\"hljs-attr\">&quot;rpcPort&quot;</span>: <span class=\"hljs-string\">&quot;6001&quot;</span>,<br>          <span class=\"hljs-attr\">&quot;channelPort&quot;</span>: <span class=\"hljs-string\">&quot;9001&quot;</span><br>        &#125;,<br>        &#123;<br>          <span class=\"hljs-attr\">&quot;ip&quot;</span>: <span class=\"hljs-string\">&quot;192.168.1.2&quot;</span>,<br>          <span class=\"hljs-attr\">&quot;rpcPort&quot;</span>: <span class=\"hljs-string\">&quot;6001&quot;</span>,<br>          <span class=\"hljs-attr\">&quot;channelPort&quot;</span>: <span class=\"hljs-string\">&quot;9001&quot;</span><br>        &#125;,<br>        &#123;<br>          <span class=\"hljs-attr\">&quot;ip&quot;</span>: <span class=\"hljs-string\">&quot;192.168.1.3&quot;</span>,<br>          <span class=\"hljs-attr\">&quot;rpcPort&quot;</span>: <span class=\"hljs-string\">&quot;6001&quot;</span>,<br>          <span class=\"hljs-attr\">&quot;channelPort&quot;</span>: <span class=\"hljs-string\">&quot;9001&quot;</span><br>        &#125;<br>      ],<br>      <span class=\"hljs-attr\">&quot;authentication&quot;</span>: &#123;<br>        <span class=\"hljs-attr\">&quot;key&quot;</span>: <span class=\"hljs-string\">&quot;block-dag/stress-testing/sdk/node.key&quot;</span>,<br>        <span class=\"hljs-attr\">&quot;cert&quot;</span>: <span class=\"hljs-string\">&quot;block-dag/stress-testing/sdk/node.crt&quot;</span>,<br>        <span class=\"hljs-attr\">&quot;ca&quot;</span>: <span class=\"hljs-string\">&quot;block-dag/stress-testing/sdk/ca.crt&quot;</span><br>      &#125;,<br>      <span class=\"hljs-attr\">&quot;timeout&quot;</span>: <span class=\"hljs-number\">900000</span><br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><strong>command.start</strong><br>首先执行 start 配置中指定的命令，主要用于使用 Docker 模式启动，启动 Caliper 时首先执行当前目录下的 start.sh 文件，其具体内容是：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">docker -H 192.168.1.1:6001 run -d --rm --name node0 -v /data/test/node0/:/data -p 8000:8000 -p 20914:20914 -p 9001:9001 -w=/data dag/blockdag:latest -c config.ini 1&gt; /dev/null<br>docker -H 192.168.1.2:6001 run -d --rm --name node1 -v /data/test/node0/:/data -p 8000:8000 -p 20914:20914 -p 9001:9001 -w=/data dag/blockdag:latest -c config.ini 1&gt; /dev/null<br>docker -H 192.168.1.3:6001 run -d --rm --name node2 -v /data/test/node0/:/data -p 8000:8000 -p 20914:20914 -p 9001:9001 -w=/data dag/blockdag:latest -c config.ini 1&gt; /dev/null<br></code></pre></td></tr></table></figure>\n\n<p>即启动远程的 Docker 容器。<br><strong>command.end</strong><br>Caliper 在退出流程的最后会执行 end 配置指定的命令，主要用于清理环境。本例中在测试结束时会执行当前目录下的 end.sh 文件，其具体内容是：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">docker -H 192.168.1.1:6001 stop $(docker -H 192.168.1.1:6001 ps -a | grep node0 | cut -d &quot; &quot; -f 1) 1&gt; /dev/null &amp;&amp; echo -e &quot;\\033[32mremote container node0 stopped\\033[0m&quot;<br>docker -H 192.168.1.2:6001 stop $(docker -H 192.168.1.2:6001 ps -a | grep node1 | cut -d &quot; &quot; -f 1) 1&gt; /dev/null &amp;&amp; echo -e &quot;\\033[32mremote container node1 stopped\\033[0m&quot;<br>docker -H 192.168.1.3:6001 stop $(docker -H 192.168.1.3:6001 ps -a | grep node2 | cut -d &quot; &quot; -f 1) 1&gt; /dev/null &amp;&amp; echo -e &quot;\\033[32mremote container node2 stopped\\033[0m&quot;<br></code></pre></td></tr></table></figure>\n\n<p>即停止并删除有所的远程容器。<br><strong>network.nodes</strong><br>一个包含了所有要连接节点的列表，列表中每一项需要指明被连接节点的 IP 地址、RPC 端口及 Channel 端口号，所有端口号需要和节点的配置文件保持一致。<br><strong>network.authentication</strong><br>适配器向节点的 Channel 端口发起请求时需要使用 CA 根证书等文件，这些文件已在 3.1.2 节中调用 build_chain.sh 脚本时已经生成好，使用任一节点配置下的 sdk 文件夹中的相应文件即可，需要在该配置中写上所有文件的路径。</p>\n<h1 id=\"测试配置\"><a href=\"#测试配置\" class=\"headerlink\" title=\"测试配置\"></a>测试配置</h1><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-meta\">---</span><br><span class=\"hljs-attr\">test:</span><br>  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">stress</span> <span class=\"hljs-string\">test</span><br>  <span class=\"hljs-attr\">description:</span> <span class=\"hljs-string\">This</span> <span class=\"hljs-string\">is</span> <span class=\"hljs-string\">a</span> <span class=\"hljs-string\">stress</span> <span class=\"hljs-string\">testing</span> <span class=\"hljs-string\">of</span> <span class=\"hljs-string\">Block</span> <span class=\"hljs-string\">DAG.</span><br>  <span class=\"hljs-attr\">clients:</span><br>    <span class=\"hljs-attr\">type:</span> <span class=\"hljs-string\">local</span><br>    <span class=\"hljs-attr\">number:</span> <span class=\"hljs-number\">1</span><br>  <span class=\"hljs-attr\">rounds:</span><br>    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">label:</span> <span class=\"hljs-string\">create</span><br>      <span class=\"hljs-attr\">description:</span> <span class=\"hljs-string\">Test</span> <span class=\"hljs-string\">performance</span> <span class=\"hljs-string\">of</span> <span class=\"hljs-string\">creating</span> <span class=\"hljs-string\">txs</span><br>      <span class=\"hljs-attr\">txNumber:</span><br>        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-number\">15000</span><br>      <span class=\"hljs-attr\">callback:</span> <span class=\"hljs-string\">block-dag/stress-testing/create.js</span><br><span class=\"hljs-attr\">monitor:</span><br>  <span class=\"hljs-attr\">type:</span><br>    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">docker</span><br>  <span class=\"hljs-attr\">docker:</span><br>    <span class=\"hljs-attr\">name:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">http://192.168.1.1:6001</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">http://192.168.1.2:6001</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">http://192.168.1.3:6001</span><br>  <span class=\"hljs-attr\">interval:</span> <span class=\"hljs-number\">0.1</span><br></code></pre></td></tr></table></figure>\n\n<p>测试文件中主要包括两部分：</p>\n<ul>\n<li>测试内容配置</li>\n</ul>\n<p>test 项负责对测试内容进行配置。配置主要集中在 round 字段中指定如何对区块链系统进行测试。每一个测试可以包含多轮，每一轮可以向区块链发起不同的测试请求。<br>本次测试是对系统的 createTx 接口进行测试。在测试中，可以通过 txNumber 字段指定测试的交易发送数量</p>\n<ul>\n<li>性能监视器配置</li>\n</ul>\n<p>monitor 项负责对测试所使用的性能监视器的进行配置。每项配置项的解释如下：</p>\n<ol>\n<li>monitor.type，需要指定为 docker，指对 docker 容器进行监控；</li>\n<li>monitor.docker.name，一个包含所有要监视的节点的 docker 容器名称列表；</li>\n<li>monitor.interval，监视器的采样间隔，单位为秒。</li>\n</ol>\n<h1 id=\"实际测试\"><a href=\"#实际测试\" class=\"headerlink\" title=\"实际测试\"></a>实际测试</h1><p>实际测试中，我选择类似 Apache 的测试结果。<br>全是正常交易</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">Tx Length:</span> <span class=\"hljs-number\">217088</span> <span class=\"hljs-string\">bytes</span>       <span class=\"hljs-string\">交易数据的长度</span><br><span class=\"hljs-attr\">Total Txs Number:</span> <span class=\"hljs-number\">15000</span><br><span class=\"hljs-attr\">Time taken for tests:</span> <span class=\"hljs-number\">5.919</span> <span class=\"hljs-string\">seconds</span>    <span class=\"hljs-string\">所有这些交易发送完所花费的时间</span><br><span class=\"hljs-attr\">Complete requests:</span> <span class=\"hljs-number\">15000</span>             <span class=\"hljs-string\">完成请求数</span><br><span class=\"hljs-attr\">Failed requests:</span> <span class=\"hljs-number\">0</span>                <span class=\"hljs-string\">失败请求数</span><br><span class=\"hljs-attr\">Write errors:</span> <span class=\"hljs-number\">0</span><br><span class=\"hljs-attr\">Total transferred:</span> <span class=\"hljs-number\">3256320000</span> <span class=\"hljs-string\">bytes</span>     <span class=\"hljs-string\">网络总传输量</span><br><span class=\"hljs-attr\">TPS:</span> <span class=\"hljs-number\">2536.3</span> [<span class=\"hljs-comment\">#/sec] (mean) 吞吐量-每秒交易数</span><br><span class=\"hljs-attr\">Time per request:</span> <span class=\"hljs-number\">1.513</span> [<span class=\"hljs-string\">ms</span>] <span class=\"hljs-string\">(mean</span>, <span class=\"hljs-string\">across</span> <span class=\"hljs-string\">all</span> <span class=\"hljs-string\">concurrent</span> <span class=\"hljs-string\">requests)</span> <span class=\"hljs-string\">并发的每个请求平均消耗时间</span><br><span class=\"hljs-attr\">Transfer rate:</span> <span class=\"hljs-number\">67.15</span> [<span class=\"hljs-string\">Mbytes/sec</span>] <span class=\"hljs-string\">received</span> <span class=\"hljs-string\">平均每秒网络上的流量，可以帮助排除是否存在网络流量过大导致响应时间延长的问题</span><br></code></pre></td></tr></table></figure>\n\n<p>说明:<br>Tx 长度为 212 kb，换算为字节是 217088 bytes</p>\n<blockquote>\n<p>用 nodejs 打印上述结果</p>\n</blockquote>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/1629942/1620459896573-bc102c81-8f17-4d17-8074-ed6b671202b6.png#clientId=ue0d8159d-8879-4&from=paste&height=269&id=uf8e241e5&originHeight=538&originWidth=854&originalType=binary&size=66022&status=done&style=none&taskId=ua2f5d267-1fbc-46ce-a75d-7e48fa43834&width=427\" alt=\"image.png\"><br>打印区块<br>getMaxHeightBlock 接口–最高块<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/1629942/1620459806102-0d9e7147-7520-4e4a-984b-6913ce16a29a.png#clientId=ue0d8159d-8879-4&from=paste&height=302&id=udab02a53&originHeight=599&originWidth=978&originalType=binary&size=115789&status=done&style=none&taskId=u2ed02707-9654-4dfb-8fb5-77517ad6a23&width=493\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/1629942/1620459831877-92adbe62-3c59-4774-8194-003d3b1f038c.png#clientId=ue0d8159d-8879-4&from=paste&height=348&id=ubdbcfa19&originHeight=679&originWidth=909&originalType=binary&size=108543&status=done&style=none&taskId=u82ff9afe-2c69-4356-9d50-5d83d492427&width=465.5\" alt=\"image.png\"><br>这里注意到，每个块包含 60 个交易，60*95=5700&gt;3000（为平均每节点分配到的交易量），这里存在几种原因：<br>① 在并发生成块的时候，由于节点间的速率差异与网络延迟而导致当时观察到的 Tip 集不同，而导致的区块高度高于预期高度。<br>② 由于处理交易的时候对于放在交易缓存池中的未打包交易进行转发操作，并标记为未打包，导致其中的一些交易被不同的节点重复打包，而导致打包交易量大于预期。</p>\n<p>解释各个字段的含义</p>\n<p>再通过 rpc 端口查询每个节点中各自存储的交易量<br>（发送 GET 请求到 channel 端口进行查询）</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/1629942/1620467777427-c7a640ff-cbe0-4240-918e-4deec9c57b5d.png#clientId=ue0d8159d-8879-4&from=paste&height=85&id=u7c0e6c3b&originHeight=169&originWidth=808&originalType=binary&size=23484&status=done&style=none&taskId=u8db7b66d-e3cc-446c-ae3b-7416ee176a8&width=404\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/1629942/1620467714988-278e8c2b-682d-4885-9e8e-cdd02a853dd3.png#clientId=ue0d8159d-8879-4&from=paste&height=81&id=ud52b21b6&originHeight=162&originWidth=812&originalType=binary&size=23217&status=done&style=none&taskId=u0c59e8b2-326d-4414-b250-f3334c30c2e&width=406\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/1629942/1620467650231-6929499a-0112-425e-9104-58d587523544.png#clientId=ue0d8159d-8879-4&from=paste&height=85&id=ue659a490&originHeight=169&originWidth=805&originalType=binary&size=24212&status=done&style=none&taskId=u667e9356-a241-4ac0-9ab5-3676f248e40&width=402.5\" alt=\"image.png\"></p>","categories":[],"tags":[]}