{"title":"图搜索算法学习","slug":"图搜索算法学习","date":"2021-05-11T07:53:33.000Z","updated":"2021-11-30T14:59:00.294Z","comments":true,"path":"api/articles/图搜索算法学习.json","realPath":null,"excerpt":"本文将从图搜索算法的基本流程入手，层层递进地介绍几种图搜索算法。首先是两种针对无权图的基本图搜索算法：深度优先搜索(Depth First Search, DFS)**、广度优先搜索(Breadth First Search, BFS)。它们的区别在于 openlist(后面介绍)所选用的数据结构类型不同，前者使用栈，后者使用队列；之后引入一种启发式搜索算法：贪婪最佳优先算法*(Greedy Best First Search, GBFS)，用来提高搜索效率，但是不能确保找到最优路径；最后介绍两种在路径规划中非常经典的算法：Dijkstra 算法、**A\\算法**，前者是广度优先算法(BFS)在带权图中的扩展，后者则是在前者中加入启发函数得到的算法，兼顾效率和完备性。","covers":["https://cdn.nlark.com/yuque/0/2021/svg/1629942/1620725276356-ada93f8f-d8ba-4f17-98ec-9af058cd477f.svg#clientId=u4512e8b3-315c-4&from=paste&height=13&id=u4bc6664d&margin=%5Bobject%20Object%5D&originHeight=26&originWidth=102&originalType=url%E2%88%B6=1&status=done&style=none&taskId=u8e0433de-cbce-4ed5-b260-4e2f71ad8c0&width=51","https://cdn.nlark.com/yuque/0/2021/jpg/1629942/1620721476833-5c0f21cd-d22b-4e50-b3f7-950f7c4150ae.jpg#clientId=u4512e8b3-315c-4&from=paste&height=187&id=ub038a80c&margin=%5Bobject%20Object%5D&originHeight=229&originWidth=252&originalType=url%E2%88%B6=1&status=done&style=none&taskId=u32928bb0-c0d9-4527-918f-e65db8c6619&width=206","https://cdn.nlark.com/yuque/0/2021/jpg/1629942/1620721616028-44f0bacf-fb40-43e6-9ef3-a8c20bddd15e.jpg#clientId=u4512e8b3-315c-4&from=paste&height=88&id=ud12a1bda&margin=%5Bobject%20Object%5D&originHeight=175&originWidth=643&originalType=url%E2%88%B6=1&status=done&style=none&taskId=u3a1b1346-f237-46b8-9d09-a3b4054e02d&width=321.5","https://cdn.nlark.com/yuque/0/2021/jpg/1629942/1620721670683-20cf690f-9d76-42e1-a413-454d66a4959d.jpg#clientId=u4512e8b3-315c-4&from=paste&height=54&id=uac838178&margin=%5Bobject%20Object%5D&originHeight=108&originWidth=744&originalType=url%E2%88%B6=1&status=done&style=none&taskId=ufb837890-53a7-4c8a-b201-4f00e37582e&width=372","https://cdn.nlark.com/yuque/0/2021/svg/1629942/1620723691035-98fc7aa9-f863-4712-bac3-8f57411585e6.svg#clientId=u4512e8b3-315c-4&from=paste&height=13&id=u28f910d0&margin=%5Bobject%20Object%5D&originHeight=26&originWidth=40&originalType=url%E2%88%B6=1&status=done&style=none&taskId=uabd98f3e-5132-480c-8650-2d94afd29b4&width=20","https://cdn.nlark.com/yuque/0/2021/svg/1629942/1620725031590-864b17ab-6299-418c-bc94-bd0486529dba.svg#clientId=u4512e8b3-315c-4&from=paste&height=13&id=u5a11f40f&margin=%5Bobject%20Object%5D&originHeight=26&originWidth=174&originalType=url%E2%88%B6=1&status=done&style=none&taskId=u6444210b-d148-4737-8444-6e7a899159f&width=87","https://cdn.nlark.com/yuque/0/2021/svg/1629942/1620725031585-3ccd0531-4927-431f-bb82-79cc2f0029e8.svg#clientId=u4512e8b3-315c-4&from=paste&height=13&id=u734ded48&margin=%5Bobject%20Object%5D&originHeight=26&originWidth=79&originalType=url%E2%88%B6=1&status=done&style=none&taskId=u1854bd03-0452-47f9-9cb0-a773eb37eb7&width=39.5","https://cdn.nlark.com/yuque/0/2021/svg/1629942/1620725036315-f0c86fa9-aa76-4298-a880-bf792907b269.svg#clientId=u4512e8b3-315c-4&from=paste&height=13&id=u2e57cf76&margin=%5Bobject%20Object%5D&originHeight=26&originWidth=41&originalType=url%E2%88%B6=1&status=done&style=none&taskId=u2548ee5d-b15d-4954-9fe6-004bffcb214&width=20.5"],"cover":"https://cdn.nlark.com/yuque/0/2021/svg/1629942/1620725276356-ada93f8f-d8ba-4f17-98ec-9af058cd477f.svg#clientId=u4512e8b3-315c-4&from=paste&height=13&id=u4bc6664d&margin=%5Bobject%20Object%5D&originHeight=26&originWidth=102&originalType=url%E2%88%B6=1&status=done&style=none&taskId=u8e0433de-cbce-4ed5-b260-4e2f71ad8c0&width=51","content":"<p>本文将从图搜索算法的基本流程入手，层层递进地介绍几种图搜索算法。首先是两种针对无权图的基本图搜索算法：<strong>深度优先搜索(Depth First Search, DFS)**、</strong>广度优先搜索(Breadth First Search, BFS)<strong>。它们的区别在于 openlist(后面介绍)所选用的数据结构类型不同，前者使用栈，后者使用队列；之后引入一种启发式搜索算法：</strong>贪婪最佳优先算法*<em>(<strong>Greedy Best First Search, GBFS</strong>)，用来提高搜索效率，但是不能确保找到最优路径；最后介绍两种在路径规划中非常经典的算法：<strong>Dijkstra 算法</strong>、**A\\</em>算法**，前者是广度优先算法(BFS)在带权图中的扩展，后者则是在前者中加入启发函数得到的算法，兼顾效率和完备性。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"基本流程\"><a href=\"#基本流程\" class=\"headerlink\" title=\"基本流程\"></a>基本流程</h2><p>下面切入正题，图搜索算法的基本流程如下：</p>\n<ul>\n<li>创建一个容器，一般称为<strong>openlist</strong>，用来存储将要访问的节点</li>\n<li>将起点加入容器</li>\n<li>开始循环：</li>\n<li>—- 弹出：从容器中取出一个节点</li>\n<li>—- 扩展：获取该节点周围的节点，将这些节点放入容器</li>\n</ul>\n<p>作者：鬼木士链接：<a href=\"https://zhuanlan.zhihu.com/p/346666812%E6%9D%A5%E6%BA%90%EF%BC%9A%E7%9F%A5%E4%B9%8E%E8%91%97%E4%BD%9C%E6%9D%83%E5%BD%92%E4%BD%9C%E8%80%85%E6%89%80%E6%9C%89%E3%80%82%E5%95%86%E4%B8%9A%E8%BD%AC%E8%BD%BD%E8%AF%B7%E8%81%94%E7%B3%BB%E4%BD%9C%E8%80%85%E8%8E%B7%E5%BE%97%E6%8E%88%E6%9D%83%EF%BC%8C%E9%9D%9E%E5%95%86%E4%B8%9A%E8%BD%AC%E8%BD%BD%E8%AF%B7%E6%B3%A8%E6%98%8E%E5%87%BA%E5%A4%84%E3%80%82\">https://zhuanlan.zhihu.com/p/346666812来源：知乎著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</a></p>\n<h3 id=\"图结构的邻接矩阵表示法\"><a href=\"#图结构的邻接矩阵表示法\" class=\"headerlink\" title=\"图结构的邻接矩阵表示法\"></a>图结构的邻接矩阵表示法</h3><p><strong>邻接矩阵</strong>用来表示图的边集，即节点间的相邻关系集合。设 <img src=\"https://cdn.nlark.com/yuque/0/2021/svg/1629942/1620725276356-ada93f8f-d8ba-4f17-98ec-9af058cd477f.svg#clientId=u4512e8b3-315c-4&from=paste&height=13&id=u4bc6664d&margin=%5Bobject%20Object%5D&originHeight=26&originWidth=102&originalType=url%E2%88%B6=1&status=done&style=none&taskId=u8e0433de-cbce-4ed5-b260-4e2f71ad8c0&width=51\"> 是一个具有 n 个节点的图，它的邻接矩阵是一个 n 阶矩阵，则其中的元素 <img src=\"https://cdn.nlark.com/yuque/0/2021/svg/1629942/1620725276341-89563210-0b27-48f5-992c-5bc26999cdaa.svg#clientId=u4512e8b3-315c-4&from=paste&height=11&id=udc2dd334&margin=%5Bobject%20Object%5D&originHeight=21&originWidth=24&originalType=url%E2%88%B6=1&status=done&style=none&taskId=u2df13e1a-f9b8-4281-823a-168ccdf6e50&width=12\"> 满足：<br><img src=\"https://cdn.nlark.com/yuque/0/2021/svg/1629942/1620725276458-8544ee65-c78e-4aee-9945-379503d2b2ca.svg#clientId=u4512e8b3-315c-4&from=paste&height=34&id=ubaaea0f0&margin=%5Bobject%20Object%5D&originHeight=68&originWidth=432&originalType=url%E2%88%B6=1&status=done&style=none&taskId=ud90780c7-8c45-4351-afd3-b4a40e55462&width=216\"><br>对于无向图，其邻接矩阵是对称矩阵，即 <img src=\"https://cdn.nlark.com/yuque/0/2021/svg/1629942/1620725276360-06638203-15d1-4db8-9832-91cda47c94af.svg#clientId=u4512e8b3-315c-4&from=paste&height=11&id=u782dacff&margin=%5Bobject%20Object%5D&originHeight=21&originWidth=77&originalType=url%E2%88%B6=1&status=done&style=none&taskId=u190fa9eb-a53b-4d83-b57a-bcaa10caa34&width=38.5\"> ，而有向图的邻接矩阵不一定对称，其空间复杂度均为 <img src=\"https://cdn.nlark.com/yuque/0/2021/svg/1629942/1620725276368-54baba56-84e8-456e-9a3a-2228ee191d73.svg#clientId=u4512e8b3-315c-4&from=paste&height=15&id=u082a2bca&margin=%5Bobject%20Object%5D&originHeight=29&originWidth=54&originalType=url%E2%88%B6=1&status=done&style=none&taskId=u3f3f3403-8b0c-41d0-9d2a-a53d9cf6fb2&width=27\"> 。以下为两个不带权图的邻接矩阵示例：<br><img src=\"https://cdn.nlark.com/yuque/0/2021/jpg/1629942/1620725277081-b458dd5a-f419-4d14-87c8-95fb686baded.jpg#clientId=u4512e8b3-315c-4&from=paste&height=146&id=u6d0c1531&margin=%5Bobject%20Object%5D&originHeight=291&originWidth=300&originalType=url%E2%88%B6=1&status=done&style=none&taskId=ua9947cb2-a6f0-4a06-b876-917c53e91ed&width=150\"><br>对于<strong>带权图</strong>，设 <img src=\"https://cdn.nlark.com/yuque/0/2021/svg/1629942/1620725276919-e8f40e24-f907-48d0-9439-9c210e6637b7.svg#clientId=u4512e8b3-315c-4&from=paste&height=14&id=ucc327eee&margin=%5Bobject%20Object%5D&originHeight=27&originWidth=71&originalType=url%E2%88%B6=1&status=done&style=none&taskId=udc0d541f-3cdf-48fb-bd16-1da62d51156&width=35.5\"> 或者 <img src=\"https://cdn.nlark.com/yuque/0/2021/svg/1629942/1620725276928-11917431-d782-4dbc-afcd-7d8bfe260858.svg#clientId=u4512e8b3-315c-4&from=paste&height=8&id=u386178d2&margin=%5Bobject%20Object%5D&originHeight=15&originWidth=10&originalType=url%E2%88%B6=1&status=done&style=none&taskId=uf489f51a-13af-43ec-ba53-deea1911e98&width=5\"> 上的权值为 <img src=\"https://cdn.nlark.com/yuque/0/2021/svg/1629942/1620725277029-5536e091-2e54-43da-acfc-3aee813c2193.svg#clientId=u4512e8b3-315c-4&from=paste&height=11&id=uaf1ce0d4&margin=%5Bobject%20Object%5D&originHeight=21&originWidth=28&originalType=url%E2%88%B6=1&status=done&style=none&taskId=u0cdccce9-6f0a-43c0-87fe-f34571b4c94&width=14\"> ，则带权图的邻接矩阵定义为：<br><img src=\"https://cdn.nlark.com/yuque/0/2021/svg/1629942/1620725277124-8b7317db-c5ca-4d46-a5ae-ee29c92aa15f.svg#clientId=u4512e8b3-315c-4&from=paste&height=48&id=u5b09c490&margin=%5Bobject%20Object%5D&originHeight=95&originWidth=452&originalType=url%E2%88%B6=1&status=done&style=none&taskId=u09279262-4765-43c1-8607-7946ed5add6&width=226\"><br>以下为两个带权图的邻接矩阵示例：<br><img src=\"https://cdn.nlark.com/yuque/0/2021/jpg/1629942/1620725277794-f6649aa8-0c37-4e16-9350-5199f120a3d8.jpg#clientId=u4512e8b3-315c-4&from=paste&height=156&id=ue0476deb&margin=%5Bobject%20Object%5D&originHeight=312&originWidth=300&originalType=url%E2%88%B6=1&status=done&style=none&taskId=ub5290b0d-99b5-4ace-9bc6-458f46faf37&width=150\"></p>\n<h2 id=\"深度优先搜索-DFS\"><a href=\"#深度优先搜索-DFS\" class=\"headerlink\" title=\"深度优先搜索(DFS)\"></a>深度优先搜索(DFS)</h2><p>深度优先，顾名思义即深度越大的节点会被优先扩展。在 DFS 中，使用<strong>栈(Stack)**数据结构来实现上述特性。<br>栈是一种</strong>后进先出(LIFO)<strong>的容器，如下图<br><img src=\"https://cdn.nlark.com/yuque/0/2021/jpg/1629942/1620721476833-5c0f21cd-d22b-4e50-b3f7-950f7c4150ae.jpg#clientId=u4512e8b3-315c-4&from=paste&height=187&id=ub038a80c&margin=%5Bobject%20Object%5D&originHeight=229&originWidth=252&originalType=url%E2%88%B6=1&status=done&style=none&taskId=u32928bb0-c0d9-4527-918f-e65db8c6619&width=206\"><br>以在下面的</strong>无权图**中找到从节点 a 到节点 i 的路径为例，说明一下 DFS 算法的工作流程<br><img src=\"https://cdn.nlark.com/yuque/0/2021/jpg/1629942/1620721500508-f381f6fe-f5c0-4c0e-be57-f8aaf29aa62b.jpg#clientId=u4512e8b3-315c-4&from=paste&height=137&id=u70b5387b&margin=%5Bobject%20Object%5D&originHeight=274&originWidth=368&originalType=url%E2%88%B6=1&status=done&style=none&taskId=u2ec2716b-c4cd-49e2-8c58-e23e99018da&width=184\"><br>按照上节的图搜索算法的基本流程进行搜索，过程如下：<br><img src=\"https://cdn.nlark.com/yuque/0/2021/jpg/1629942/1620721500444-5216c34f-4bd3-4da8-b399-60ad9af2497e.jpg#clientId=u4512e8b3-315c-4&from=paste&height=118&id=ue3f3c139&margin=%5Bobject%20Object%5D&originHeight=236&originWidth=1277&originalType=url%E2%88%B6=1&status=done&style=none&taskId=u0dcdaa19-58a5-4b08-b306-9e472773c16&width=638.5\"><br>从 i 回溯得到路径：a-&gt;b-&gt;c-&gt;g-&gt;i，如下：<br><img src=\"https://cdn.nlark.com/yuque/0/2021/jpg/1629942/1620721511535-fa575ccb-4d20-4c13-8e7d-5bac3730ad27.jpg#clientId=u4512e8b3-315c-4&from=paste&height=137&id=u449947f3&margin=%5Bobject%20Object%5D&originHeight=273&originWidth=367&originalType=url%E2%88%B6=1&status=done&style=none&taskId=u2b885412-dc7b-4b20-ac5a-b819ab82efd&width=183.5\"></p>\n<h2 id=\"广度优先搜索-BFS\"><a href=\"#广度优先搜索-BFS\" class=\"headerlink\" title=\"广度优先搜索(BFS)\"></a>广度优先搜索(BFS)</h2><p>与 DFS 的“不撞南墙不回头”的个性不同，BFS 在搜索时呈<strong>波状推进</strong>形式，一路稳扎稳打，它是一种<strong>以时间换空间</strong>的方法，能够保证搜索到的路径是最优的。<br>为了实现波状推进搜索特性，BFS 采用<strong>队列(Queue)**作为 openlist 的数据结构。队列是一种</strong>先进先出(FIFO)**的容器，如下图<br><img src=\"https://cdn.nlark.com/yuque/0/2021/jpg/1629942/1620721616028-44f0bacf-fb40-43e6-9ef3-a8c20bddd15e.jpg#clientId=u4512e8b3-315c-4&from=paste&height=88&id=ud12a1bda&margin=%5Bobject%20Object%5D&originHeight=175&originWidth=643&originalType=url%E2%88%B6=1&status=done&style=none&taskId=u3a1b1346-f237-46b8-9d09-a3b4054e02d&width=321.5\"><br>其流程与上节中 DFS 类似，继续以上节的图举例，过程如下，首先创建一个队列作为容器，将节点 a 加入队列</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/jpg/1629942/1620721670683-20cf690f-9d76-42e1-a413-454d66a4959d.jpg#clientId=u4512e8b3-315c-4&from=paste&height=54&id=uac838178&margin=%5Bobject%20Object%5D&originHeight=108&originWidth=744&originalType=url%E2%88%B6=1&status=done&style=none&taskId=ufb837890-53a7-4c8a-b201-4f00e37582e&width=372\"><br>接着将节点 a 弹出队列，将节点 a 周围没有访问过的节点加入队列<br><img src=\"https://cdn.nlark.com/yuque/0/2021/jpg/1629942/1620721670728-e2969e08-bfb3-4fb4-a0c8-1537865c105b.jpg#clientId=u4512e8b3-315c-4&from=paste&height=84&id=u1a3884c7&margin=%5Bobject%20Object%5D&originHeight=168&originWidth=752&originalType=url%E2%88%B6=1&status=done&style=none&taskId=u06bcf717-b733-4fe0-a0e8-e47485993d0&width=376\"><br>按照上面的流程不断地<strong>弹出、扩展</strong>节点，直到找到节点 i 为止，完整流程如下图：<br><img src=\"https://cdn.nlark.com/yuque/0/2021/jpg/1629942/1620721670667-42127cbe-2295-41cd-95f9-1f0fb37214da.jpg#clientId=u4512e8b3-315c-4&from=paste&height=384&id=u4b228bb6&margin=%5Bobject%20Object%5D&originHeight=768&originWidth=752&originalType=url%E2%88%B6=1&status=done&style=none&taskId=uf69ba2e0-88b1-4285-8540-21d9787fb80&width=376\"><br>从终点回溯，i 的父节点为 f，f 的父节点为 e，e 的父节点为 a，这样就可以得到 a 到 i 的最短路径为：a-&gt;e-&gt;f-&gt;i，如下<br><img src=\"https://cdn.nlark.com/yuque/0/2021/jpeg/1629942/1620721671023-ad7e00d0-c903-44a3-8727-5e648042ccfd.jpeg#clientId=u4512e8b3-315c-4&from=paste&height=200&id=u9d7c5033&margin=%5Bobject%20Object%5D&originHeight=399&originWidth=720&originalType=url%E2%88%B6=1&status=done&style=none&taskId=ube00c3d7-c002-4c0a-9de2-74816c1441b&width=360\"><br>显而易见，相较于 DFS，BFS 中使用了大量的入队、出队操作，耗时增加，但是能保证找到最优路径。</p>\n<h2 id=\"Dijkstra-算法\"><a href=\"#Dijkstra-算法\" class=\"headerlink\" title=\"Dijkstra 算法\"></a>Dijkstra 算法</h2><p>上面的算法中，只有广度优先搜索(BFS)具有完备性，能够保证搜索到最优路径。但是可以看到 BFS 算法搜索到的路径只有向上/下/左/右移动这四个动作，它们是没有权值或者说权值都相同的，只能用于无权图的路径规划，无法实现能够对角移动的路径规划。因此下面介绍一种能用于带权图的图搜索算法——Dijkstra 算法(狄克斯特拉算法)。<br>Dijkstra 算法是从一个顶点到其余各顶点的最短路径算法，其流程仍然与上述算法基本一致，它也是用优先队列作为 openlist 的数据结构，它和 GBFS 的区别在于代价函数<img src=\"https://cdn.nlark.com/yuque/0/2021/svg/1629942/1620723691035-98fc7aa9-f863-4712-bac3-8f57411585e6.svg#clientId=u4512e8b3-315c-4&from=paste&height=13&id=u28f910d0&margin=%5Bobject%20Object%5D&originHeight=26&originWidth=40&originalType=url%E2%88%B6=1&status=done&style=none&taskId=uabd98f3e-5132-480c-8650-2d94afd29b4&width=20\">的定义，Dijkstra 算的<img src=\"https://cdn.nlark.com/yuque/0/2021/svg/1629942/1620723691113-2bf1da8e-b611-4885-a7f1-04164c40d237.svg#clientId=u4512e8b3-315c-4&from=paste&height=13&id=ubf3cbf54&margin=%5Bobject%20Object%5D&originHeight=26&originWidth=40&originalType=url%E2%88%B6=1&status=done&style=none&taskId=ufbbe61e2-28bc-45d0-b633-061774a7863&width=20\">定义为：<br><img src=\"https://cdn.nlark.com/yuque/0/2021/svg/1629942/1620723690976-e13b0e8b-3665-4557-aa0b-fc331ea832ac.svg#clientId=u4512e8b3-315c-4&from=paste&height=13&id=uc782ed82&margin=%5Bobject%20Object%5D&originHeight=26&originWidth=107&originalType=url%E2%88%B6=1&status=done&style=none&taskId=u79b0ef1e-5762-4b77-8b5b-162e6ba7aa0&width=53.5\"><br>其中<img src=\"https://cdn.nlark.com/yuque/0/2021/svg/1629942/1620723690991-a4dc7fa7-b40f-4515-b86e-7febdfd73f37.svg#clientId=u4512e8b3-315c-4&from=paste&height=13&id=u4bc7f663&margin=%5Bobject%20Object%5D&originHeight=26&originWidth=39&originalType=url%E2%88%B6=1&status=done&style=none&taskId=u82673318-68cb-422c-b8b2-88439071c0e&width=19.5\">表示<strong>从起点到当前点的移动代价</strong>。<br>作者：鬼木士链接：<a href=\"https://zhuanlan.zhihu.com/p/346666812%E6%9D%A5%E6%BA%90%EF%BC%9A%E7%9F%A5%E4%B9%8E%E8%91%97%E4%BD%9C%E6%9D%83%E5%BD%92%E4%BD%9C%E8%80%85%E6%89%80%E6%9C%89%E3%80%82%E5%95%86%E4%B8%9A%E8%BD%AC%E8%BD%BD%E8%AF%B7%E8%81%94%E7%B3%BB%E4%BD%9C%E8%80%85%E8%8E%B7%E5%BE%97%E6%8E%88%E6%9D%83%EF%BC%8C%E9%9D%9E%E5%95%86%E4%B8%9A%E8%BD%AC%E8%BD%BD%E8%AF%B7%E6%B3%A8%E6%98%8E%E5%87%BA%E5%A4%84%E3%80%82\">https://zhuanlan.zhihu.com/p/346666812来源：知乎著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</a><br>以下图为例，计算起点 a 到终点 i 的最短路径，箭头上的数值表示<strong>两个节点间的距离</strong><br><img src=\"https://cdn.nlark.com/yuque/0/2021/jpg/1629942/1620724804748-4a3d83d3-6926-40e9-8f4a-4ea1e6eb2ab7.jpg#clientId=u4512e8b3-315c-4&from=paste&height=138&id=uce92bbd0&margin=%5Bobject%20Object%5D&originHeight=275&originWidth=369&originalType=url%E2%88%B6=1&status=done&style=none&taskId=u1b2110ca-eadb-4f25-8e5d-d5865274f54&width=184.5\"><br>首先扩展第一个节点，计算其余节点与第一个节点的距离，用橙色标出已经扩展的节点，未扩展的节点仍用绿色标出，其中圆中的数值表示<strong>该节点的代价函数</strong>，字母则表示该节点没有直接到达此时已扩展节点的路径。从未扩展的节点(绿色节点)中选择代价函数最小的节点进行拓展，并更新其余节点的代价函数，如下图<br><img src=\"https://cdn.nlark.com/yuque/0/2021/jpg/1629942/1620724805003-ce3a5327-f8f6-4234-8b68-f551b57fad52.jpg#clientId=u4512e8b3-315c-4&from=paste&height=137&id=uc0f1683a&margin=%5Bobject%20Object%5D&originHeight=274&originWidth=1124&originalType=url%E2%88%B6=1&status=done&style=none&taskId=u8a1450f1-79f9-4399-8f8d-e169c2c3ede&width=562\"><br>重复进行上面的步骤，直到所有节点都已扩展。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/jpeg/1629942/1620724805459-58af2210-5c5e-485b-97f6-bae4c72cae59.jpeg#clientId=u4512e8b3-315c-4&from=paste&height=270&id=u45e4071d&margin=%5Bobject%20Object%5D&originHeight=539&originWidth=720&originalType=url%E2%88%B6=1&status=done&style=none&taskId=ud51a5969-c955-4e39-8e84-4a846498db9&width=360\"><br>最后标出起点到终点的最短路径<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/1629942/1620724804882-a19ebe6b-dd20-4e44-af25-05fac26e15de.png#clientId=u4512e8b3-315c-4&from=paste&height=137&id=u56f0c87f&margin=%5Bobject%20Object%5D&originHeight=274&originWidth=369&originalType=url%E2%88%B6=1&status=done&style=none&taskId=ua013e2b8-7911-432c-a37e-57920b0aa19&width=184.5\"></p>\n<h2 id=\"A-算法\"><a href=\"#A-算法\" class=\"headerlink\" title=\"A*算法\"></a>A*算法</h2><p>对比 GBFS 和 Dijkstra 算法，两者都采用优先队列作为 openlist，而代价函数的不同导致两者具有不同的优点：GBFS 用节点到目标点的距离作为代价函数，将搜索方向引向目标点，搜索效率高；而 Dijkstra 算法采用起点到当前扩展节点的移动代价作为代价函数，能够确保路径最优。<br>那么可不可以将两者的代价函数进行融合，从而<strong>在保证路径最优的同时提高搜索效率</strong>？答案是肯定的，融合后的算法就是<strong>A*算法</strong>。<br>A<em>算法也是一种启发式算法，它的代价函数表示为：<br><img src=\"https://cdn.nlark.com/yuque/0/2021/svg/1629942/1620725031590-864b17ab-6299-418c-bc94-bd0486529dba.svg#clientId=u4512e8b3-315c-4&from=paste&height=13&id=u5a11f40f&margin=%5Bobject%20Object%5D&originHeight=26&originWidth=174&originalType=url%E2%88%B6=1&status=done&style=none&taskId=u6444210b-d148-4737-8444-6e7a899159f&width=87\"><br>其中 <img src=\"https://cdn.nlark.com/yuque/0/2021/svg/1629942/1620725031612-4bb2e537-3a2a-43f0-9430-720081543412.svg#clientId=u4512e8b3-315c-4&from=paste&height=13&id=ua1c55913&margin=%5Bobject%20Object%5D&originHeight=26&originWidth=39&originalType=url%E2%88%B6=1&status=done&style=none&taskId=u81437d7e-75f3-4519-8ad2-3f4d8947340&width=19.5\"> 为起点到当前扩展节点的移动代价函数， <img src=\"https://cdn.nlark.com/yuque/0/2021/svg/1629942/1620725031588-880c54fd-53e9-4a32-ae42-9b033a83bcc7.svg#clientId=u4512e8b3-315c-4&from=paste&height=13&id=u2774a467&margin=%5Bobject%20Object%5D&originHeight=26&originWidth=41&originalType=url%E2%88%B6=1&status=done&style=none&taskId=u26212a94-ede6-4884-b185-f79bf3560b3&width=20.5\"> 是启发函数，用节点到目标点的距离函数来表示。<br>根据这个式子，可以得到 A</em>算法的几个特点：</p>\n<ul>\n<li>如果令 <img src=\"https://cdn.nlark.com/yuque/0/2021/svg/1629942/1620725031585-3ccd0531-4927-431f-bb82-79cc2f0029e8.svg#clientId=u4512e8b3-315c-4&from=paste&height=13&id=u734ded48&margin=%5Bobject%20Object%5D&originHeight=26&originWidth=79&originalType=url%E2%88%B6=1&status=done&style=none&taskId=u1854bd03-0452-47f9-9cb0-a773eb37eb7&width=39.5\"> ，A<em>算法就退化为 Dijkstra 算法；如果令 <img src=\"https://cdn.nlark.com/yuque/0/2021/svg/1629942/1620725031585-161dbbd5-4e20-44d9-b575-43d61c553747.svg#clientId=u4512e8b3-315c-4&from=paste&height=13&id=u1cba9235&margin=%5Bobject%20Object%5D&originHeight=26&originWidth=77&originalType=url%E2%88%B6=1&status=done&style=none&taskId=u1149f333-b9a7-4bf2-a3f1-b93cd429b0c&width=38.5\">_，_A</em>算法就退化为 GBFS 算法。</li>\n<li>能否找到最优路径的关键是启发函数 <img src=\"https://cdn.nlark.com/yuque/0/2021/svg/1629942/1620725036315-f0c86fa9-aa76-4298-a880-bf792907b269.svg#clientId=u4512e8b3-315c-4&from=paste&height=13&id=u2e57cf76&margin=%5Bobject%20Object%5D&originHeight=26&originWidth=41&originalType=url%E2%88%B6=1&status=done&style=none&taskId=u2548ee5d-b15d-4954-9fe6-004bffcb214&width=20.5\"> 的选取，如果 <img src=\"https://cdn.nlark.com/yuque/0/2021/svg/1629942/1620725036325-3ea21fc5-28b7-4eca-8740-e12dce2238c8.svg#clientId=u4512e8b3-315c-4&from=paste&height=13&id=u7c5a7978&margin=%5Bobject%20Object%5D&originHeight=26&originWidth=41&originalType=url%E2%88%B6=1&status=done&style=none&taskId=u0f640d4a-3324-49b1-8fee-a3ec3ce5d3e&width=20.5\"> 在大部分情况下比从当前节点到目标点的移动代价小，则能找到最优路径。</li>\n<li>由于 A* 算法的启发函数是位置上的距离，因此在不带位置信息的图数据中不适用。</li>\n</ul>\n","more":"<h2 id=\"基本流程\"><a href=\"#基本流程\" class=\"headerlink\" title=\"基本流程\"></a>基本流程</h2><p>下面切入正题，图搜索算法的基本流程如下：</p>\n<ul>\n<li>创建一个容器，一般称为<strong>openlist</strong>，用来存储将要访问的节点</li>\n<li>将起点加入容器</li>\n<li>开始循环：</li>\n<li>—- 弹出：从容器中取出一个节点</li>\n<li>—- 扩展：获取该节点周围的节点，将这些节点放入容器</li>\n</ul>\n<p>作者：鬼木士链接：<a href=\"https://zhuanlan.zhihu.com/p/346666812%E6%9D%A5%E6%BA%90%EF%BC%9A%E7%9F%A5%E4%B9%8E%E8%91%97%E4%BD%9C%E6%9D%83%E5%BD%92%E4%BD%9C%E8%80%85%E6%89%80%E6%9C%89%E3%80%82%E5%95%86%E4%B8%9A%E8%BD%AC%E8%BD%BD%E8%AF%B7%E8%81%94%E7%B3%BB%E4%BD%9C%E8%80%85%E8%8E%B7%E5%BE%97%E6%8E%88%E6%9D%83%EF%BC%8C%E9%9D%9E%E5%95%86%E4%B8%9A%E8%BD%AC%E8%BD%BD%E8%AF%B7%E6%B3%A8%E6%98%8E%E5%87%BA%E5%A4%84%E3%80%82\">https://zhuanlan.zhihu.com/p/346666812来源：知乎著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</a></p>\n<h3 id=\"图结构的邻接矩阵表示法\"><a href=\"#图结构的邻接矩阵表示法\" class=\"headerlink\" title=\"图结构的邻接矩阵表示法\"></a>图结构的邻接矩阵表示法</h3><p><strong>邻接矩阵</strong>用来表示图的边集，即节点间的相邻关系集合。设 <img src=\"https://cdn.nlark.com/yuque/0/2021/svg/1629942/1620725276356-ada93f8f-d8ba-4f17-98ec-9af058cd477f.svg#clientId=u4512e8b3-315c-4&from=paste&height=13&id=u4bc6664d&margin=%5Bobject%20Object%5D&originHeight=26&originWidth=102&originalType=url%E2%88%B6=1&status=done&style=none&taskId=u8e0433de-cbce-4ed5-b260-4e2f71ad8c0&width=51\"> 是一个具有 n 个节点的图，它的邻接矩阵是一个 n 阶矩阵，则其中的元素 <img src=\"https://cdn.nlark.com/yuque/0/2021/svg/1629942/1620725276341-89563210-0b27-48f5-992c-5bc26999cdaa.svg#clientId=u4512e8b3-315c-4&from=paste&height=11&id=udc2dd334&margin=%5Bobject%20Object%5D&originHeight=21&originWidth=24&originalType=url%E2%88%B6=1&status=done&style=none&taskId=u2df13e1a-f9b8-4281-823a-168ccdf6e50&width=12\"> 满足：<br><img src=\"https://cdn.nlark.com/yuque/0/2021/svg/1629942/1620725276458-8544ee65-c78e-4aee-9945-379503d2b2ca.svg#clientId=u4512e8b3-315c-4&from=paste&height=34&id=ubaaea0f0&margin=%5Bobject%20Object%5D&originHeight=68&originWidth=432&originalType=url%E2%88%B6=1&status=done&style=none&taskId=ud90780c7-8c45-4351-afd3-b4a40e55462&width=216\"><br>对于无向图，其邻接矩阵是对称矩阵，即 <img src=\"https://cdn.nlark.com/yuque/0/2021/svg/1629942/1620725276360-06638203-15d1-4db8-9832-91cda47c94af.svg#clientId=u4512e8b3-315c-4&from=paste&height=11&id=u782dacff&margin=%5Bobject%20Object%5D&originHeight=21&originWidth=77&originalType=url%E2%88%B6=1&status=done&style=none&taskId=u190fa9eb-a53b-4d83-b57a-bcaa10caa34&width=38.5\"> ，而有向图的邻接矩阵不一定对称，其空间复杂度均为 <img src=\"https://cdn.nlark.com/yuque/0/2021/svg/1629942/1620725276368-54baba56-84e8-456e-9a3a-2228ee191d73.svg#clientId=u4512e8b3-315c-4&from=paste&height=15&id=u082a2bca&margin=%5Bobject%20Object%5D&originHeight=29&originWidth=54&originalType=url%E2%88%B6=1&status=done&style=none&taskId=u3f3f3403-8b0c-41d0-9d2a-a53d9cf6fb2&width=27\"> 。以下为两个不带权图的邻接矩阵示例：<br><img src=\"https://cdn.nlark.com/yuque/0/2021/jpg/1629942/1620725277081-b458dd5a-f419-4d14-87c8-95fb686baded.jpg#clientId=u4512e8b3-315c-4&from=paste&height=146&id=u6d0c1531&margin=%5Bobject%20Object%5D&originHeight=291&originWidth=300&originalType=url%E2%88%B6=1&status=done&style=none&taskId=ua9947cb2-a6f0-4a06-b876-917c53e91ed&width=150\"><br>对于<strong>带权图</strong>，设 <img src=\"https://cdn.nlark.com/yuque/0/2021/svg/1629942/1620725276919-e8f40e24-f907-48d0-9439-9c210e6637b7.svg#clientId=u4512e8b3-315c-4&from=paste&height=14&id=ucc327eee&margin=%5Bobject%20Object%5D&originHeight=27&originWidth=71&originalType=url%E2%88%B6=1&status=done&style=none&taskId=udc0d541f-3cdf-48fb-bd16-1da62d51156&width=35.5\"> 或者 <img src=\"https://cdn.nlark.com/yuque/0/2021/svg/1629942/1620725276928-11917431-d782-4dbc-afcd-7d8bfe260858.svg#clientId=u4512e8b3-315c-4&from=paste&height=8&id=u386178d2&margin=%5Bobject%20Object%5D&originHeight=15&originWidth=10&originalType=url%E2%88%B6=1&status=done&style=none&taskId=uf489f51a-13af-43ec-ba53-deea1911e98&width=5\"> 上的权值为 <img src=\"https://cdn.nlark.com/yuque/0/2021/svg/1629942/1620725277029-5536e091-2e54-43da-acfc-3aee813c2193.svg#clientId=u4512e8b3-315c-4&from=paste&height=11&id=uaf1ce0d4&margin=%5Bobject%20Object%5D&originHeight=21&originWidth=28&originalType=url%E2%88%B6=1&status=done&style=none&taskId=u0cdccce9-6f0a-43c0-87fe-f34571b4c94&width=14\"> ，则带权图的邻接矩阵定义为：<br><img src=\"https://cdn.nlark.com/yuque/0/2021/svg/1629942/1620725277124-8b7317db-c5ca-4d46-a5ae-ee29c92aa15f.svg#clientId=u4512e8b3-315c-4&from=paste&height=48&id=u5b09c490&margin=%5Bobject%20Object%5D&originHeight=95&originWidth=452&originalType=url%E2%88%B6=1&status=done&style=none&taskId=u09279262-4765-43c1-8607-7946ed5add6&width=226\"><br>以下为两个带权图的邻接矩阵示例：<br><img src=\"https://cdn.nlark.com/yuque/0/2021/jpg/1629942/1620725277794-f6649aa8-0c37-4e16-9350-5199f120a3d8.jpg#clientId=u4512e8b3-315c-4&from=paste&height=156&id=ue0476deb&margin=%5Bobject%20Object%5D&originHeight=312&originWidth=300&originalType=url%E2%88%B6=1&status=done&style=none&taskId=ub5290b0d-99b5-4ace-9bc6-458f46faf37&width=150\"></p>\n<h2 id=\"深度优先搜索-DFS\"><a href=\"#深度优先搜索-DFS\" class=\"headerlink\" title=\"深度优先搜索(DFS)\"></a>深度优先搜索(DFS)</h2><p>深度优先，顾名思义即深度越大的节点会被优先扩展。在 DFS 中，使用<strong>栈(Stack)**数据结构来实现上述特性。<br>栈是一种</strong>后进先出(LIFO)<strong>的容器，如下图<br><img src=\"https://cdn.nlark.com/yuque/0/2021/jpg/1629942/1620721476833-5c0f21cd-d22b-4e50-b3f7-950f7c4150ae.jpg#clientId=u4512e8b3-315c-4&from=paste&height=187&id=ub038a80c&margin=%5Bobject%20Object%5D&originHeight=229&originWidth=252&originalType=url%E2%88%B6=1&status=done&style=none&taskId=u32928bb0-c0d9-4527-918f-e65db8c6619&width=206\"><br>以在下面的</strong>无权图**中找到从节点 a 到节点 i 的路径为例，说明一下 DFS 算法的工作流程<br><img src=\"https://cdn.nlark.com/yuque/0/2021/jpg/1629942/1620721500508-f381f6fe-f5c0-4c0e-be57-f8aaf29aa62b.jpg#clientId=u4512e8b3-315c-4&from=paste&height=137&id=u70b5387b&margin=%5Bobject%20Object%5D&originHeight=274&originWidth=368&originalType=url%E2%88%B6=1&status=done&style=none&taskId=u2ec2716b-c4cd-49e2-8c58-e23e99018da&width=184\"><br>按照上节的图搜索算法的基本流程进行搜索，过程如下：<br><img src=\"https://cdn.nlark.com/yuque/0/2021/jpg/1629942/1620721500444-5216c34f-4bd3-4da8-b399-60ad9af2497e.jpg#clientId=u4512e8b3-315c-4&from=paste&height=118&id=ue3f3c139&margin=%5Bobject%20Object%5D&originHeight=236&originWidth=1277&originalType=url%E2%88%B6=1&status=done&style=none&taskId=u0dcdaa19-58a5-4b08-b306-9e472773c16&width=638.5\"><br>从 i 回溯得到路径：a-&gt;b-&gt;c-&gt;g-&gt;i，如下：<br><img src=\"https://cdn.nlark.com/yuque/0/2021/jpg/1629942/1620721511535-fa575ccb-4d20-4c13-8e7d-5bac3730ad27.jpg#clientId=u4512e8b3-315c-4&from=paste&height=137&id=u449947f3&margin=%5Bobject%20Object%5D&originHeight=273&originWidth=367&originalType=url%E2%88%B6=1&status=done&style=none&taskId=u2b885412-dc7b-4b20-ac5a-b819ab82efd&width=183.5\"></p>\n<h2 id=\"广度优先搜索-BFS\"><a href=\"#广度优先搜索-BFS\" class=\"headerlink\" title=\"广度优先搜索(BFS)\"></a>广度优先搜索(BFS)</h2><p>与 DFS 的“不撞南墙不回头”的个性不同，BFS 在搜索时呈<strong>波状推进</strong>形式，一路稳扎稳打，它是一种<strong>以时间换空间</strong>的方法，能够保证搜索到的路径是最优的。<br>为了实现波状推进搜索特性，BFS 采用<strong>队列(Queue)**作为 openlist 的数据结构。队列是一种</strong>先进先出(FIFO)**的容器，如下图<br><img src=\"https://cdn.nlark.com/yuque/0/2021/jpg/1629942/1620721616028-44f0bacf-fb40-43e6-9ef3-a8c20bddd15e.jpg#clientId=u4512e8b3-315c-4&from=paste&height=88&id=ud12a1bda&margin=%5Bobject%20Object%5D&originHeight=175&originWidth=643&originalType=url%E2%88%B6=1&status=done&style=none&taskId=u3a1b1346-f237-46b8-9d09-a3b4054e02d&width=321.5\"><br>其流程与上节中 DFS 类似，继续以上节的图举例，过程如下，首先创建一个队列作为容器，将节点 a 加入队列</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/jpg/1629942/1620721670683-20cf690f-9d76-42e1-a413-454d66a4959d.jpg#clientId=u4512e8b3-315c-4&from=paste&height=54&id=uac838178&margin=%5Bobject%20Object%5D&originHeight=108&originWidth=744&originalType=url%E2%88%B6=1&status=done&style=none&taskId=ufb837890-53a7-4c8a-b201-4f00e37582e&width=372\"><br>接着将节点 a 弹出队列，将节点 a 周围没有访问过的节点加入队列<br><img src=\"https://cdn.nlark.com/yuque/0/2021/jpg/1629942/1620721670728-e2969e08-bfb3-4fb4-a0c8-1537865c105b.jpg#clientId=u4512e8b3-315c-4&from=paste&height=84&id=u1a3884c7&margin=%5Bobject%20Object%5D&originHeight=168&originWidth=752&originalType=url%E2%88%B6=1&status=done&style=none&taskId=u06bcf717-b733-4fe0-a0e8-e47485993d0&width=376\"><br>按照上面的流程不断地<strong>弹出、扩展</strong>节点，直到找到节点 i 为止，完整流程如下图：<br><img src=\"https://cdn.nlark.com/yuque/0/2021/jpg/1629942/1620721670667-42127cbe-2295-41cd-95f9-1f0fb37214da.jpg#clientId=u4512e8b3-315c-4&from=paste&height=384&id=u4b228bb6&margin=%5Bobject%20Object%5D&originHeight=768&originWidth=752&originalType=url%E2%88%B6=1&status=done&style=none&taskId=uf69ba2e0-88b1-4285-8540-21d9787fb80&width=376\"><br>从终点回溯，i 的父节点为 f，f 的父节点为 e，e 的父节点为 a，这样就可以得到 a 到 i 的最短路径为：a-&gt;e-&gt;f-&gt;i，如下<br><img src=\"https://cdn.nlark.com/yuque/0/2021/jpeg/1629942/1620721671023-ad7e00d0-c903-44a3-8727-5e648042ccfd.jpeg#clientId=u4512e8b3-315c-4&from=paste&height=200&id=u9d7c5033&margin=%5Bobject%20Object%5D&originHeight=399&originWidth=720&originalType=url%E2%88%B6=1&status=done&style=none&taskId=ube00c3d7-c002-4c0a-9de2-74816c1441b&width=360\"><br>显而易见，相较于 DFS，BFS 中使用了大量的入队、出队操作，耗时增加，但是能保证找到最优路径。</p>\n<h2 id=\"Dijkstra-算法\"><a href=\"#Dijkstra-算法\" class=\"headerlink\" title=\"Dijkstra 算法\"></a>Dijkstra 算法</h2><p>上面的算法中，只有广度优先搜索(BFS)具有完备性，能够保证搜索到最优路径。但是可以看到 BFS 算法搜索到的路径只有向上/下/左/右移动这四个动作，它们是没有权值或者说权值都相同的，只能用于无权图的路径规划，无法实现能够对角移动的路径规划。因此下面介绍一种能用于带权图的图搜索算法——Dijkstra 算法(狄克斯特拉算法)。<br>Dijkstra 算法是从一个顶点到其余各顶点的最短路径算法，其流程仍然与上述算法基本一致，它也是用优先队列作为 openlist 的数据结构，它和 GBFS 的区别在于代价函数<img src=\"https://cdn.nlark.com/yuque/0/2021/svg/1629942/1620723691035-98fc7aa9-f863-4712-bac3-8f57411585e6.svg#clientId=u4512e8b3-315c-4&from=paste&height=13&id=u28f910d0&margin=%5Bobject%20Object%5D&originHeight=26&originWidth=40&originalType=url%E2%88%B6=1&status=done&style=none&taskId=uabd98f3e-5132-480c-8650-2d94afd29b4&width=20\">的定义，Dijkstra 算的<img src=\"https://cdn.nlark.com/yuque/0/2021/svg/1629942/1620723691113-2bf1da8e-b611-4885-a7f1-04164c40d237.svg#clientId=u4512e8b3-315c-4&from=paste&height=13&id=ubf3cbf54&margin=%5Bobject%20Object%5D&originHeight=26&originWidth=40&originalType=url%E2%88%B6=1&status=done&style=none&taskId=ufbbe61e2-28bc-45d0-b633-061774a7863&width=20\">定义为：<br><img src=\"https://cdn.nlark.com/yuque/0/2021/svg/1629942/1620723690976-e13b0e8b-3665-4557-aa0b-fc331ea832ac.svg#clientId=u4512e8b3-315c-4&from=paste&height=13&id=uc782ed82&margin=%5Bobject%20Object%5D&originHeight=26&originWidth=107&originalType=url%E2%88%B6=1&status=done&style=none&taskId=u79b0ef1e-5762-4b77-8b5b-162e6ba7aa0&width=53.5\"><br>其中<img src=\"https://cdn.nlark.com/yuque/0/2021/svg/1629942/1620723690991-a4dc7fa7-b40f-4515-b86e-7febdfd73f37.svg#clientId=u4512e8b3-315c-4&from=paste&height=13&id=u4bc7f663&margin=%5Bobject%20Object%5D&originHeight=26&originWidth=39&originalType=url%E2%88%B6=1&status=done&style=none&taskId=u82673318-68cb-422c-b8b2-88439071c0e&width=19.5\">表示<strong>从起点到当前点的移动代价</strong>。<br>作者：鬼木士链接：<a href=\"https://zhuanlan.zhihu.com/p/346666812%E6%9D%A5%E6%BA%90%EF%BC%9A%E7%9F%A5%E4%B9%8E%E8%91%97%E4%BD%9C%E6%9D%83%E5%BD%92%E4%BD%9C%E8%80%85%E6%89%80%E6%9C%89%E3%80%82%E5%95%86%E4%B8%9A%E8%BD%AC%E8%BD%BD%E8%AF%B7%E8%81%94%E7%B3%BB%E4%BD%9C%E8%80%85%E8%8E%B7%E5%BE%97%E6%8E%88%E6%9D%83%EF%BC%8C%E9%9D%9E%E5%95%86%E4%B8%9A%E8%BD%AC%E8%BD%BD%E8%AF%B7%E6%B3%A8%E6%98%8E%E5%87%BA%E5%A4%84%E3%80%82\">https://zhuanlan.zhihu.com/p/346666812来源：知乎著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</a><br>以下图为例，计算起点 a 到终点 i 的最短路径，箭头上的数值表示<strong>两个节点间的距离</strong><br><img src=\"https://cdn.nlark.com/yuque/0/2021/jpg/1629942/1620724804748-4a3d83d3-6926-40e9-8f4a-4ea1e6eb2ab7.jpg#clientId=u4512e8b3-315c-4&from=paste&height=138&id=uce92bbd0&margin=%5Bobject%20Object%5D&originHeight=275&originWidth=369&originalType=url%E2%88%B6=1&status=done&style=none&taskId=u1b2110ca-eadb-4f25-8e5d-d5865274f54&width=184.5\"><br>首先扩展第一个节点，计算其余节点与第一个节点的距离，用橙色标出已经扩展的节点，未扩展的节点仍用绿色标出，其中圆中的数值表示<strong>该节点的代价函数</strong>，字母则表示该节点没有直接到达此时已扩展节点的路径。从未扩展的节点(绿色节点)中选择代价函数最小的节点进行拓展，并更新其余节点的代价函数，如下图<br><img src=\"https://cdn.nlark.com/yuque/0/2021/jpg/1629942/1620724805003-ce3a5327-f8f6-4234-8b68-f551b57fad52.jpg#clientId=u4512e8b3-315c-4&from=paste&height=137&id=uc0f1683a&margin=%5Bobject%20Object%5D&originHeight=274&originWidth=1124&originalType=url%E2%88%B6=1&status=done&style=none&taskId=u8a1450f1-79f9-4399-8f8d-e169c2c3ede&width=562\"><br>重复进行上面的步骤，直到所有节点都已扩展。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/jpeg/1629942/1620724805459-58af2210-5c5e-485b-97f6-bae4c72cae59.jpeg#clientId=u4512e8b3-315c-4&from=paste&height=270&id=u45e4071d&margin=%5Bobject%20Object%5D&originHeight=539&originWidth=720&originalType=url%E2%88%B6=1&status=done&style=none&taskId=ud51a5969-c955-4e39-8e84-4a846498db9&width=360\"><br>最后标出起点到终点的最短路径<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/1629942/1620724804882-a19ebe6b-dd20-4e44-af25-05fac26e15de.png#clientId=u4512e8b3-315c-4&from=paste&height=137&id=u56f0c87f&margin=%5Bobject%20Object%5D&originHeight=274&originWidth=369&originalType=url%E2%88%B6=1&status=done&style=none&taskId=ua013e2b8-7911-432c-a37e-57920b0aa19&width=184.5\"></p>\n<h2 id=\"A-算法\"><a href=\"#A-算法\" class=\"headerlink\" title=\"A*算法\"></a>A*算法</h2><p>对比 GBFS 和 Dijkstra 算法，两者都采用优先队列作为 openlist，而代价函数的不同导致两者具有不同的优点：GBFS 用节点到目标点的距离作为代价函数，将搜索方向引向目标点，搜索效率高；而 Dijkstra 算法采用起点到当前扩展节点的移动代价作为代价函数，能够确保路径最优。<br>那么可不可以将两者的代价函数进行融合，从而<strong>在保证路径最优的同时提高搜索效率</strong>？答案是肯定的，融合后的算法就是<strong>A*算法</strong>。<br>A<em>算法也是一种启发式算法，它的代价函数表示为：<br><img src=\"https://cdn.nlark.com/yuque/0/2021/svg/1629942/1620725031590-864b17ab-6299-418c-bc94-bd0486529dba.svg#clientId=u4512e8b3-315c-4&from=paste&height=13&id=u5a11f40f&margin=%5Bobject%20Object%5D&originHeight=26&originWidth=174&originalType=url%E2%88%B6=1&status=done&style=none&taskId=u6444210b-d148-4737-8444-6e7a899159f&width=87\"><br>其中 <img src=\"https://cdn.nlark.com/yuque/0/2021/svg/1629942/1620725031612-4bb2e537-3a2a-43f0-9430-720081543412.svg#clientId=u4512e8b3-315c-4&from=paste&height=13&id=ua1c55913&margin=%5Bobject%20Object%5D&originHeight=26&originWidth=39&originalType=url%E2%88%B6=1&status=done&style=none&taskId=u81437d7e-75f3-4519-8ad2-3f4d8947340&width=19.5\"> 为起点到当前扩展节点的移动代价函数， <img src=\"https://cdn.nlark.com/yuque/0/2021/svg/1629942/1620725031588-880c54fd-53e9-4a32-ae42-9b033a83bcc7.svg#clientId=u4512e8b3-315c-4&from=paste&height=13&id=u2774a467&margin=%5Bobject%20Object%5D&originHeight=26&originWidth=41&originalType=url%E2%88%B6=1&status=done&style=none&taskId=u26212a94-ede6-4884-b185-f79bf3560b3&width=20.5\"> 是启发函数，用节点到目标点的距离函数来表示。<br>根据这个式子，可以得到 A</em>算法的几个特点：</p>\n<ul>\n<li>如果令 <img src=\"https://cdn.nlark.com/yuque/0/2021/svg/1629942/1620725031585-3ccd0531-4927-431f-bb82-79cc2f0029e8.svg#clientId=u4512e8b3-315c-4&from=paste&height=13&id=u734ded48&margin=%5Bobject%20Object%5D&originHeight=26&originWidth=79&originalType=url%E2%88%B6=1&status=done&style=none&taskId=u1854bd03-0452-47f9-9cb0-a773eb37eb7&width=39.5\"> ，A<em>算法就退化为 Dijkstra 算法；如果令 <img src=\"https://cdn.nlark.com/yuque/0/2021/svg/1629942/1620725031585-161dbbd5-4e20-44d9-b575-43d61c553747.svg#clientId=u4512e8b3-315c-4&from=paste&height=13&id=u1cba9235&margin=%5Bobject%20Object%5D&originHeight=26&originWidth=77&originalType=url%E2%88%B6=1&status=done&style=none&taskId=u1149f333-b9a7-4bf2-a3f1-b93cd429b0c&width=38.5\">_，_A</em>算法就退化为 GBFS 算法。</li>\n<li>能否找到最优路径的关键是启发函数 <img src=\"https://cdn.nlark.com/yuque/0/2021/svg/1629942/1620725036315-f0c86fa9-aa76-4298-a880-bf792907b269.svg#clientId=u4512e8b3-315c-4&from=paste&height=13&id=u2e57cf76&margin=%5Bobject%20Object%5D&originHeight=26&originWidth=41&originalType=url%E2%88%B6=1&status=done&style=none&taskId=u2548ee5d-b15d-4954-9fe6-004bffcb214&width=20.5\"> 的选取，如果 <img src=\"https://cdn.nlark.com/yuque/0/2021/svg/1629942/1620725036325-3ea21fc5-28b7-4eca-8740-e12dce2238c8.svg#clientId=u4512e8b3-315c-4&from=paste&height=13&id=u7c5a7978&margin=%5Bobject%20Object%5D&originHeight=26&originWidth=41&originalType=url%E2%88%B6=1&status=done&style=none&taskId=u0f640d4a-3324-49b1-8fee-a3ec3ce5d3e&width=20.5\"> 在大部分情况下比从当前节点到目标点的移动代价小，则能找到最优路径。</li>\n<li>由于 A* 算法的启发函数是位置上的距离，因此在不带位置信息的图数据中不适用。</li>\n</ul>","categories":[{"name":"算法","path":"api/categories/算法.json"},{"name":"图论","path":"api/categories/图论.json"}],"tags":[{"name":"图搜索算法","path":"api/tags/图搜索算法.json"}]}