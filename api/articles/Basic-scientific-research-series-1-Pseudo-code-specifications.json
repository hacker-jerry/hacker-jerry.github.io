{"title":"Basic-scientific-research-series-1-Pseudo-code-specifications","slug":"Basic-scientific-research-series-1-Pseudo-code-specifications","date":"2021-04-15T09:21:58.000Z","updated":"2022-05-11T03:21:57.372Z","comments":true,"path":"api/articles/Basic-scientific-research-series-1-Pseudo-code-specifications.json","realPath":null,"excerpt":"记录一下科研论文中的伪代码。<br>转自：https://shuzang.github.io/2021/pseudocode-specification/","covers":["https://cdn.nlark.com/yuque/0/2021/png/1629942/1618478655345-bb9bd29d-b6e6-4b93-b278-d315a9721d31.png#clientId=u7f037a6a-77db-4&from=paste&height=380&id=u70552d91&margin=%5Bobject%20Object%5D&originHeight=759&originWidth=668&originalType=url&status=done&style=none&taskId=uef2d862d-a2fb-4d0c-9f58-61f5f43f3ea&width=334","https://cdn.nlark.com/yuque/0/2021/png/1629942/1618478772434-2de2a8b0-44d4-4fe1-838f-75edf92d8921.png#clientId=u7f037a6a-77db-4&from=paste&height=372&id=u452ff8fa&margin=%5Bobject%20Object%5D&originHeight=743&originWidth=974&originalType=binary&size=52982&status=done&style=none&taskId=u7814261f-55f6-48b7-b9ab-bede03ce98b&width=487","https://cdn.nlark.com/yuque/0/2021/png/1629942/1618478673624-a5337260-9e18-451c-91b3-0eaad9d766bd.png#clientId=u7f037a6a-77db-4&from=paste&height=310&id=u6b501371&margin=%5Bobject%20Object%5D&originHeight=619&originWidth=911&originalType=url&status=done&style=none&taskId=u55db2441-adb1-4199-95e7-79ec5ef27e2&width=455.5"],"cover":"https://cdn.nlark.com/yuque/0/2021/png/1629942/1618478655345-bb9bd29d-b6e6-4b93-b278-d315a9721d31.png#clientId=u7f037a6a-77db-4&from=paste&height=380&id=u70552d91&margin=%5Bobject%20Object%5D&originHeight=759&originWidth=668&originalType=url&status=done&style=none&taskId=uef2d862d-a2fb-4d0c-9f58-61f5f43f3ea&width=334","content":"<p>记录一下科研论文中的伪代码。<br>转自：<a href=\"https://shuzang.github.io/2021/pseudocode-specification/\">https://shuzang.github.io/2021/pseudocode-specification/</a></p>\n<a id=\"more\"></a>\n\n<h2 id=\"伪代码规范\"><a href=\"#伪代码规范\" class=\"headerlink\" title=\"伪代码规范\"></a>伪代码规范</h2><p>伪代码是一种接近自然语言的算法描述形式，其目的是在不涉及具体实现（各种编程语言）的情况下将算法的流程和含义清楚的表达出来，因此它没有一个统一的规范，有的仅仅是在长期的实践过程中形成的一些约定俗成的表达样式。下图是一个简单的例子<a href=\"https://shuzang.github.io/2021/pseudocode-specification/#fn:1\">1</a>，但已经包含了大多数主要元素<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/1629942/1618478655345-bb9bd29d-b6e6-4b93-b278-d315a9721d31.png#clientId=u7f037a6a-77db-4&from=paste&height=380&id=u70552d91&margin=%5Bobject%20Object%5D&originHeight=759&originWidth=668&originalType=url&status=done&style=none&taskId=uef2d862d-a2fb-4d0c-9f58-61f5f43f3ea&width=334\"><br>首先需要一个<strong>标题</strong>来描述整个算法，一般还会有一个与之一起的编号。在上图中，算法的标题为「Acesscontrol algorithm flow」，编号为「Algorithm 1」。标题与编号一般位于算法顶部，但也有人放在底部，编号多按全文的算法总数进行索引，但也可以按章节分别进行索引。<br>其次，在正式的算法流之前需要声明<strong>输入和输出</strong>。通常使用关键字 Input 和 Output 来声明，但也有人使用关键字 Data 和 Result。<br>顺序、选择与循环结构是算法的主体。通常，不同的程序块使用缩进来保持结构清晰，但也有不少人使用垂直连接线进行进一步划分，如上图。另外，和编程语言类似，伪代码中的选择和循环使用 if-then-else、while-do 和 for-do 等关键字和结构来描述<a href=\"https://shuzang.github.io/2021/pseudocode-specification/#fn:2\">2</a>，举例如下，其中，每个程序块结束的 end 关键字有人选择写，也有人选择不写。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/1629942/1618478672970-c669b4dd-61a3-427a-9366-fae3ba74b0e3.png#clientId=u7f037a6a-77db-4&from=paste&height=461&id=u980d4514&margin=%5Bobject%20Object%5D&originHeight=922&originWidth=1121&originalType=url&status=done&style=none&taskId=uebf9d8c3-b7d5-4640-bb35-d608225f8f0&width=560.5\"><br>算法流程结构<br>赋值操作一般使用左箭头「&lt;—」表示。A[i] 用来表示数组 A 的第 i 个元素，A[1…j] 则表示下标从 1 到 j 的子数组；函数调用使用函数名+传入参数的形式；返回值使用 return 关键字，这些都和常规编程语言相同。需要注意的是，未声明而使用的变量都可以视为算法内的局部变量，如果是全局变量则需要进行解释，可以在上下文中，也可以使用注释；注释的形式也和传统语言相同，使用 // 或 /<em>……</em>/。<br>算法整体通常使用三线框包围，但也有少部分人使用一个完整的框。<br>伪代码的语句一般不需要在末尾使用分号，但行首通常会添加行号。</p>\n<h2 id=\"2-LaTeX-包\"><a href=\"#2-LaTeX-包\" class=\"headerlink\" title=\"2. LaTeX 包\"></a>2. LaTeX 包</h2><p>latex 书写伪代码主要有三种排版格式：algorithm+algorithmic、algorithm+algorithmicx 以及 algorithm2e<a href=\"https://shuzang.github.io/2021/pseudocode-specification/#fn:3\">3</a>。我们使用<a href=\"https://www.ctan.org/pkg/algorithm2e\">algorithm2e</a>，它提供了垂直连接线，可以去掉 end 关键字，而且写起来更像编程语言，用着非常舒服。<br>引入 algorithm2e 包使用如下语句</p>\n<figure class=\"highlight latex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs latex\"><span class=\"hljs-tag\">\\<span class=\"hljs-name\">usepackage</span><span class=\"hljs-string\">[options]</span><span class=\"hljs-string\">&#123;algorithm2e&#125;</span></span><br></code></pre></td></tr></table></figure>\n\n<p>几个重要的 options 如下</p>\n<ol>\n<li>ruled：让标题显示在上面，默认会显示到最下面；</li>\n<li>vlined：默认启用垂直连接线；</li>\n<li>linesnumbered：让算法显示行号，不包括 input 和 output 部分；</li>\n<li>noend：程序块结束不打印 end。</li>\n</ol>\n<p>常用命令如下<a href=\"https://shuzang.github.io/2021/pseudocode-specification/#fn:4\">4</a><br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/1629942/1618478772434-2de2a8b0-44d4-4fe1-838f-75edf92d8921.png#clientId=u7f037a6a-77db-4&from=paste&height=372&id=u452ff8fa&margin=%5Bobject%20Object%5D&originHeight=743&originWidth=974&originalType=binary&size=52982&status=done&style=none&taskId=u7814261f-55f6-48b7-b9ab-bede03ce98b&width=487\"><br>一个官方的例子如下</p>\n<figure class=\"highlight latex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs latex\"><span class=\"hljs-tag\">\\<span class=\"hljs-name\">begin</span><span class=\"hljs-string\">&#123;algorithm&#125;</span></span><br>\t<span class=\"hljs-tag\">\\<span class=\"hljs-name\">SetKwData</span><span class=\"hljs-string\">&#123;Left&#125;</span><span class=\"hljs-string\">&#123;left&#125;</span></span><span class=\"hljs-tag\">\\<span class=\"hljs-name\">SetKwData</span><span class=\"hljs-string\">&#123;This&#125;</span><span class=\"hljs-string\">&#123;this&#125;</span></span><span class=\"hljs-tag\">\\<span class=\"hljs-name\">SetKwData</span><span class=\"hljs-string\">&#123;Up&#125;</span><span class=\"hljs-string\">&#123;up&#125;</span></span><br>\t<span class=\"hljs-tag\">\\<span class=\"hljs-name\">SetKwFunction</span><span class=\"hljs-string\">&#123;Union&#125;</span><span class=\"hljs-string\">&#123;Union&#125;</span></span><span class=\"hljs-tag\">\\<span class=\"hljs-name\">SetKwFunction</span><span class=\"hljs-string\">&#123;FindCompress&#125;</span><span class=\"hljs-string\">&#123;FindCompress&#125;</span></span><br>\t<span class=\"hljs-tag\">\\<span class=\"hljs-name\">SetKwInOut</span><span class=\"hljs-string\">&#123;Input&#125;</span><span class=\"hljs-string\">&#123;input&#125;</span></span><span class=\"hljs-tag\">\\<span class=\"hljs-name\">SetKwInOut</span><span class=\"hljs-string\">&#123;Output&#125;</span><span class=\"hljs-string\">&#123;output&#125;</span></span><br><br>\t<span class=\"hljs-tag\">\\<span class=\"hljs-name\">Input</span><span class=\"hljs-string\">&#123;A bitmap $Im$ of size $w\\times l$&#125;</span></span><br>\t<span class=\"hljs-tag\">\\<span class=\"hljs-name\">Output</span><span class=\"hljs-string\">&#123;A partition of the bitmap&#125;</span></span><br>\t<span class=\"hljs-tag\">\\<span class=\"hljs-name\">BlankLine</span></span><br>\t<span class=\"hljs-tag\">\\<span class=\"hljs-name\">emph</span><span class=\"hljs-string\">&#123;special treatment of the first line&#125;</span></span><span class=\"hljs-tag\">\\<span class=\"hljs-name\">;</span></span><br>\t<span class=\"hljs-tag\">\\<span class=\"hljs-name\">For</span><span class=\"hljs-string\">&#123;$i\\leftarrow 2$ \\KwTo $l$&#125;</span><span class=\"hljs-string\">&#123;</span></span><br><span class=\"hljs-tag\"><span class=\"hljs-string\">\t\t\\emph&#123;special treatment of the first element of line $i$&#125;</span></span><span class=\"hljs-tag\">\\<span class=\"hljs-name\">;</span></span><br>\t\t<span class=\"hljs-tag\">\\<span class=\"hljs-name\">For</span><span class=\"hljs-string\">&#123;$j\\leftarrow 2$ \\KwTo $w$&#125;</span><span class=\"hljs-string\">&#123;\\label&#123;forins&#125;</span></span><br>\t\t\t<span class=\"hljs-tag\">\\<span class=\"hljs-name\">Left</span></span><span class=\"hljs-formula\">$<span class=\"hljs-tag\">\\<span class=\"hljs-name\">leftarrow</span></span>$</span> <span class=\"hljs-tag\">\\<span class=\"hljs-name\">FindCompress</span><span class=\"hljs-string\">&#123;$Im[i,j-1]$&#125;</span></span><span class=\"hljs-tag\">\\<span class=\"hljs-name\">;</span></span><br>\t\t\t<span class=\"hljs-tag\">\\<span class=\"hljs-name\">Up</span></span><span class=\"hljs-formula\">$<span class=\"hljs-tag\">\\<span class=\"hljs-name\">leftarrow</span></span>$</span> <span class=\"hljs-tag\">\\<span class=\"hljs-name\">FindCompress</span><span class=\"hljs-string\">&#123;$Im[i-1,]$&#125;</span></span><span class=\"hljs-tag\">\\<span class=\"hljs-name\">;</span></span><br>\t\t\t<span class=\"hljs-tag\">\\<span class=\"hljs-name\">This</span></span><span class=\"hljs-formula\">$<span class=\"hljs-tag\">\\<span class=\"hljs-name\">leftarrow</span></span>$</span> <span class=\"hljs-tag\">\\<span class=\"hljs-name\">FindCompress</span><span class=\"hljs-string\">&#123;$Im[i,j]$&#125;</span></span><span class=\"hljs-tag\">\\<span class=\"hljs-name\">;</span></span><br>\t\t\t<span class=\"hljs-tag\">\\<span class=\"hljs-name\">If</span></span>(<span class=\"hljs-tag\">\\<span class=\"hljs-name\">tcp*</span><span class=\"hljs-string\">[h]</span><span class=\"hljs-string\">&#123;O(\\Left,\\This)==1&#125;</span></span>)&#123;<span class=\"hljs-tag\">\\<span class=\"hljs-name\">Left</span></span> compatible with <span class=\"hljs-tag\">\\<span class=\"hljs-name\">This</span></span>&#125;&#123;<span class=\"hljs-tag\">\\<span class=\"hljs-name\">label</span><span class=\"hljs-string\">&#123;lt&#125;</span></span><br>\t\t\t\t<span class=\"hljs-tag\">\\<span class=\"hljs-name\">lIf</span><span class=\"hljs-string\">&#123;\\Left $&lt;$ \\This&#125;</span><span class=\"hljs-string\">&#123;\\Union&#123;\\Left,\\This&#125;</span></span>&#125;<br>\t\t\t\t<span class=\"hljs-tag\">\\<span class=\"hljs-name\">lElse</span><span class=\"hljs-string\">&#123;\\Union&#123;\\This,\\Left&#125;</span></span>&#125;<br>\t\t\t&#125;<br>\t\t\t<span class=\"hljs-tag\">\\<span class=\"hljs-name\">If</span></span>(<span class=\"hljs-tag\">\\<span class=\"hljs-name\">tcp*</span><span class=\"hljs-string\">[f]</span><span class=\"hljs-string\">&#123;O(\\Up,\\This)==1&#125;</span></span>)&#123;<span class=\"hljs-tag\">\\<span class=\"hljs-name\">Up</span></span> compatible with <span class=\"hljs-tag\">\\<span class=\"hljs-name\">This</span></span>&#125;&#123;<span class=\"hljs-tag\">\\<span class=\"hljs-name\">label</span><span class=\"hljs-string\">&#123;ut&#125;</span></span><br>\t\t\t\t<span class=\"hljs-tag\">\\<span class=\"hljs-name\">lIf</span><span class=\"hljs-string\">&#123;\\Up $&lt;$ \\This&#125;</span><span class=\"hljs-string\">&#123;\\Union&#123;\\Up,\\This&#125;</span></span>&#125;<br>\t\t\t\t<span class=\"hljs-tag\">\\<span class=\"hljs-name\">tcp</span><span class=\"hljs-string\">&#123;\\This is put under \\Up to keep tree as flat as possible&#125;</span></span><span class=\"hljs-tag\">\\<span class=\"hljs-name\">label</span><span class=\"hljs-string\">&#123;cmt&#125;</span></span><br>\t\t\t\t<span class=\"hljs-tag\">\\<span class=\"hljs-name\">lElse</span><span class=\"hljs-string\">&#123;\\Union&#123;\\This,\\Up&#125;</span></span>&#125;<span class=\"hljs-tag\">\\<span class=\"hljs-name\">tcp*</span><span class=\"hljs-string\">[h]</span><span class=\"hljs-string\">&#123;\\This linked to \\Up&#125;</span></span><span class=\"hljs-tag\">\\<span class=\"hljs-name\">label</span><span class=\"hljs-string\">&#123;lelse&#125;</span></span><br>\t\t\t&#125;<br>\t\t&#125;<br>\t\t<span class=\"hljs-tag\">\\<span class=\"hljs-name\">lForEach</span><span class=\"hljs-string\">&#123;element $e$ of the line $i$&#125;</span><span class=\"hljs-string\">&#123;\\FindCompress&#123;p&#125;</span></span>&#125;<br>\t&#125;<br>\t<span class=\"hljs-tag\">\\<span class=\"hljs-name\">caption</span><span class=\"hljs-string\">&#123;disjoint decomposition&#125;</span></span><span class=\"hljs-tag\">\\<span class=\"hljs-name\">label</span><span class=\"hljs-string\">&#123;algo_disjdecomp&#125;</span></span><br><span class=\"hljs-tag\">\\<span class=\"hljs-name\">end</span><span class=\"hljs-string\">&#123;algorithm&#125;</span></span><br><br></code></pre></td></tr></table></figure>\n\n<p>渲染后的样式如下<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/1629942/1618478673624-a5337260-9e18-451c-91b3-0eaad9d766bd.png#clientId=u7f037a6a-77db-4&from=paste&height=310&id=u6b501371&margin=%5Bobject%20Object%5D&originHeight=619&originWidth=911&originalType=url&status=done&style=none&taskId=u55db2441-adb1-4199-95e7-79ec5ef27e2&width=455.5\"><br>注：当前算法选然后条件语句会带有下划线，主要是因为同时使用了 \\ulem 包，产生了冲突，去掉该包即可</p>\n","more":"<h2 id=\"伪代码规范\"><a href=\"#伪代码规范\" class=\"headerlink\" title=\"伪代码规范\"></a>伪代码规范</h2><p>伪代码是一种接近自然语言的算法描述形式，其目的是在不涉及具体实现（各种编程语言）的情况下将算法的流程和含义清楚的表达出来，因此它没有一个统一的规范，有的仅仅是在长期的实践过程中形成的一些约定俗成的表达样式。下图是一个简单的例子<a href=\"https://shuzang.github.io/2021/pseudocode-specification/#fn:1\">1</a>，但已经包含了大多数主要元素<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/1629942/1618478655345-bb9bd29d-b6e6-4b93-b278-d315a9721d31.png#clientId=u7f037a6a-77db-4&from=paste&height=380&id=u70552d91&margin=%5Bobject%20Object%5D&originHeight=759&originWidth=668&originalType=url&status=done&style=none&taskId=uef2d862d-a2fb-4d0c-9f58-61f5f43f3ea&width=334\"><br>首先需要一个<strong>标题</strong>来描述整个算法，一般还会有一个与之一起的编号。在上图中，算法的标题为「Acesscontrol algorithm flow」，编号为「Algorithm 1」。标题与编号一般位于算法顶部，但也有人放在底部，编号多按全文的算法总数进行索引，但也可以按章节分别进行索引。<br>其次，在正式的算法流之前需要声明<strong>输入和输出</strong>。通常使用关键字 Input 和 Output 来声明，但也有人使用关键字 Data 和 Result。<br>顺序、选择与循环结构是算法的主体。通常，不同的程序块使用缩进来保持结构清晰，但也有不少人使用垂直连接线进行进一步划分，如上图。另外，和编程语言类似，伪代码中的选择和循环使用 if-then-else、while-do 和 for-do 等关键字和结构来描述<a href=\"https://shuzang.github.io/2021/pseudocode-specification/#fn:2\">2</a>，举例如下，其中，每个程序块结束的 end 关键字有人选择写，也有人选择不写。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/1629942/1618478672970-c669b4dd-61a3-427a-9366-fae3ba74b0e3.png#clientId=u7f037a6a-77db-4&from=paste&height=461&id=u980d4514&margin=%5Bobject%20Object%5D&originHeight=922&originWidth=1121&originalType=url&status=done&style=none&taskId=uebf9d8c3-b7d5-4640-bb35-d608225f8f0&width=560.5\"><br>算法流程结构<br>赋值操作一般使用左箭头「&lt;—」表示。A[i] 用来表示数组 A 的第 i 个元素，A[1…j] 则表示下标从 1 到 j 的子数组；函数调用使用函数名+传入参数的形式；返回值使用 return 关键字，这些都和常规编程语言相同。需要注意的是，未声明而使用的变量都可以视为算法内的局部变量，如果是全局变量则需要进行解释，可以在上下文中，也可以使用注释；注释的形式也和传统语言相同，使用 // 或 /<em>……</em>/。<br>算法整体通常使用三线框包围，但也有少部分人使用一个完整的框。<br>伪代码的语句一般不需要在末尾使用分号，但行首通常会添加行号。</p>\n<h2 id=\"2-LaTeX-包\"><a href=\"#2-LaTeX-包\" class=\"headerlink\" title=\"2. LaTeX 包\"></a>2. LaTeX 包</h2><p>latex 书写伪代码主要有三种排版格式：algorithm+algorithmic、algorithm+algorithmicx 以及 algorithm2e<a href=\"https://shuzang.github.io/2021/pseudocode-specification/#fn:3\">3</a>。我们使用<a href=\"https://www.ctan.org/pkg/algorithm2e\">algorithm2e</a>，它提供了垂直连接线，可以去掉 end 关键字，而且写起来更像编程语言，用着非常舒服。<br>引入 algorithm2e 包使用如下语句</p>\n<figure class=\"highlight latex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs latex\"><span class=\"hljs-tag\">\\<span class=\"hljs-name\">usepackage</span><span class=\"hljs-string\">[options]</span><span class=\"hljs-string\">&#123;algorithm2e&#125;</span></span><br></code></pre></td></tr></table></figure>\n\n<p>几个重要的 options 如下</p>\n<ol>\n<li>ruled：让标题显示在上面，默认会显示到最下面；</li>\n<li>vlined：默认启用垂直连接线；</li>\n<li>linesnumbered：让算法显示行号，不包括 input 和 output 部分；</li>\n<li>noend：程序块结束不打印 end。</li>\n</ol>\n<p>常用命令如下<a href=\"https://shuzang.github.io/2021/pseudocode-specification/#fn:4\">4</a><br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/1629942/1618478772434-2de2a8b0-44d4-4fe1-838f-75edf92d8921.png#clientId=u7f037a6a-77db-4&from=paste&height=372&id=u452ff8fa&margin=%5Bobject%20Object%5D&originHeight=743&originWidth=974&originalType=binary&size=52982&status=done&style=none&taskId=u7814261f-55f6-48b7-b9ab-bede03ce98b&width=487\"><br>一个官方的例子如下</p>\n<figure class=\"highlight latex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs latex\"><span class=\"hljs-tag\">\\<span class=\"hljs-name\">begin</span><span class=\"hljs-string\">&#123;algorithm&#125;</span></span><br>\t<span class=\"hljs-tag\">\\<span class=\"hljs-name\">SetKwData</span><span class=\"hljs-string\">&#123;Left&#125;</span><span class=\"hljs-string\">&#123;left&#125;</span></span><span class=\"hljs-tag\">\\<span class=\"hljs-name\">SetKwData</span><span class=\"hljs-string\">&#123;This&#125;</span><span class=\"hljs-string\">&#123;this&#125;</span></span><span class=\"hljs-tag\">\\<span class=\"hljs-name\">SetKwData</span><span class=\"hljs-string\">&#123;Up&#125;</span><span class=\"hljs-string\">&#123;up&#125;</span></span><br>\t<span class=\"hljs-tag\">\\<span class=\"hljs-name\">SetKwFunction</span><span class=\"hljs-string\">&#123;Union&#125;</span><span class=\"hljs-string\">&#123;Union&#125;</span></span><span class=\"hljs-tag\">\\<span class=\"hljs-name\">SetKwFunction</span><span class=\"hljs-string\">&#123;FindCompress&#125;</span><span class=\"hljs-string\">&#123;FindCompress&#125;</span></span><br>\t<span class=\"hljs-tag\">\\<span class=\"hljs-name\">SetKwInOut</span><span class=\"hljs-string\">&#123;Input&#125;</span><span class=\"hljs-string\">&#123;input&#125;</span></span><span class=\"hljs-tag\">\\<span class=\"hljs-name\">SetKwInOut</span><span class=\"hljs-string\">&#123;Output&#125;</span><span class=\"hljs-string\">&#123;output&#125;</span></span><br><br>\t<span class=\"hljs-tag\">\\<span class=\"hljs-name\">Input</span><span class=\"hljs-string\">&#123;A bitmap $Im$ of size $w\\times l$&#125;</span></span><br>\t<span class=\"hljs-tag\">\\<span class=\"hljs-name\">Output</span><span class=\"hljs-string\">&#123;A partition of the bitmap&#125;</span></span><br>\t<span class=\"hljs-tag\">\\<span class=\"hljs-name\">BlankLine</span></span><br>\t<span class=\"hljs-tag\">\\<span class=\"hljs-name\">emph</span><span class=\"hljs-string\">&#123;special treatment of the first line&#125;</span></span><span class=\"hljs-tag\">\\<span class=\"hljs-name\">;</span></span><br>\t<span class=\"hljs-tag\">\\<span class=\"hljs-name\">For</span><span class=\"hljs-string\">&#123;$i\\leftarrow 2$ \\KwTo $l$&#125;</span><span class=\"hljs-string\">&#123;</span></span><br><span class=\"hljs-tag\"><span class=\"hljs-string\">\t\t\\emph&#123;special treatment of the first element of line $i$&#125;</span></span><span class=\"hljs-tag\">\\<span class=\"hljs-name\">;</span></span><br>\t\t<span class=\"hljs-tag\">\\<span class=\"hljs-name\">For</span><span class=\"hljs-string\">&#123;$j\\leftarrow 2$ \\KwTo $w$&#125;</span><span class=\"hljs-string\">&#123;\\label&#123;forins&#125;</span></span><br>\t\t\t<span class=\"hljs-tag\">\\<span class=\"hljs-name\">Left</span></span><span class=\"hljs-formula\">$<span class=\"hljs-tag\">\\<span class=\"hljs-name\">leftarrow</span></span>$</span> <span class=\"hljs-tag\">\\<span class=\"hljs-name\">FindCompress</span><span class=\"hljs-string\">&#123;$Im[i,j-1]$&#125;</span></span><span class=\"hljs-tag\">\\<span class=\"hljs-name\">;</span></span><br>\t\t\t<span class=\"hljs-tag\">\\<span class=\"hljs-name\">Up</span></span><span class=\"hljs-formula\">$<span class=\"hljs-tag\">\\<span class=\"hljs-name\">leftarrow</span></span>$</span> <span class=\"hljs-tag\">\\<span class=\"hljs-name\">FindCompress</span><span class=\"hljs-string\">&#123;$Im[i-1,]$&#125;</span></span><span class=\"hljs-tag\">\\<span class=\"hljs-name\">;</span></span><br>\t\t\t<span class=\"hljs-tag\">\\<span class=\"hljs-name\">This</span></span><span class=\"hljs-formula\">$<span class=\"hljs-tag\">\\<span class=\"hljs-name\">leftarrow</span></span>$</span> <span class=\"hljs-tag\">\\<span class=\"hljs-name\">FindCompress</span><span class=\"hljs-string\">&#123;$Im[i,j]$&#125;</span></span><span class=\"hljs-tag\">\\<span class=\"hljs-name\">;</span></span><br>\t\t\t<span class=\"hljs-tag\">\\<span class=\"hljs-name\">If</span></span>(<span class=\"hljs-tag\">\\<span class=\"hljs-name\">tcp*</span><span class=\"hljs-string\">[h]</span><span class=\"hljs-string\">&#123;O(\\Left,\\This)==1&#125;</span></span>)&#123;<span class=\"hljs-tag\">\\<span class=\"hljs-name\">Left</span></span> compatible with <span class=\"hljs-tag\">\\<span class=\"hljs-name\">This</span></span>&#125;&#123;<span class=\"hljs-tag\">\\<span class=\"hljs-name\">label</span><span class=\"hljs-string\">&#123;lt&#125;</span></span><br>\t\t\t\t<span class=\"hljs-tag\">\\<span class=\"hljs-name\">lIf</span><span class=\"hljs-string\">&#123;\\Left $&lt;$ \\This&#125;</span><span class=\"hljs-string\">&#123;\\Union&#123;\\Left,\\This&#125;</span></span>&#125;<br>\t\t\t\t<span class=\"hljs-tag\">\\<span class=\"hljs-name\">lElse</span><span class=\"hljs-string\">&#123;\\Union&#123;\\This,\\Left&#125;</span></span>&#125;<br>\t\t\t&#125;<br>\t\t\t<span class=\"hljs-tag\">\\<span class=\"hljs-name\">If</span></span>(<span class=\"hljs-tag\">\\<span class=\"hljs-name\">tcp*</span><span class=\"hljs-string\">[f]</span><span class=\"hljs-string\">&#123;O(\\Up,\\This)==1&#125;</span></span>)&#123;<span class=\"hljs-tag\">\\<span class=\"hljs-name\">Up</span></span> compatible with <span class=\"hljs-tag\">\\<span class=\"hljs-name\">This</span></span>&#125;&#123;<span class=\"hljs-tag\">\\<span class=\"hljs-name\">label</span><span class=\"hljs-string\">&#123;ut&#125;</span></span><br>\t\t\t\t<span class=\"hljs-tag\">\\<span class=\"hljs-name\">lIf</span><span class=\"hljs-string\">&#123;\\Up $&lt;$ \\This&#125;</span><span class=\"hljs-string\">&#123;\\Union&#123;\\Up,\\This&#125;</span></span>&#125;<br>\t\t\t\t<span class=\"hljs-tag\">\\<span class=\"hljs-name\">tcp</span><span class=\"hljs-string\">&#123;\\This is put under \\Up to keep tree as flat as possible&#125;</span></span><span class=\"hljs-tag\">\\<span class=\"hljs-name\">label</span><span class=\"hljs-string\">&#123;cmt&#125;</span></span><br>\t\t\t\t<span class=\"hljs-tag\">\\<span class=\"hljs-name\">lElse</span><span class=\"hljs-string\">&#123;\\Union&#123;\\This,\\Up&#125;</span></span>&#125;<span class=\"hljs-tag\">\\<span class=\"hljs-name\">tcp*</span><span class=\"hljs-string\">[h]</span><span class=\"hljs-string\">&#123;\\This linked to \\Up&#125;</span></span><span class=\"hljs-tag\">\\<span class=\"hljs-name\">label</span><span class=\"hljs-string\">&#123;lelse&#125;</span></span><br>\t\t\t&#125;<br>\t\t&#125;<br>\t\t<span class=\"hljs-tag\">\\<span class=\"hljs-name\">lForEach</span><span class=\"hljs-string\">&#123;element $e$ of the line $i$&#125;</span><span class=\"hljs-string\">&#123;\\FindCompress&#123;p&#125;</span></span>&#125;<br>\t&#125;<br>\t<span class=\"hljs-tag\">\\<span class=\"hljs-name\">caption</span><span class=\"hljs-string\">&#123;disjoint decomposition&#125;</span></span><span class=\"hljs-tag\">\\<span class=\"hljs-name\">label</span><span class=\"hljs-string\">&#123;algo_disjdecomp&#125;</span></span><br><span class=\"hljs-tag\">\\<span class=\"hljs-name\">end</span><span class=\"hljs-string\">&#123;algorithm&#125;</span></span><br><br></code></pre></td></tr></table></figure>\n\n<p>渲染后的样式如下<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/1629942/1618478673624-a5337260-9e18-451c-91b3-0eaad9d766bd.png#clientId=u7f037a6a-77db-4&from=paste&height=310&id=u6b501371&margin=%5Bobject%20Object%5D&originHeight=619&originWidth=911&originalType=url&status=done&style=none&taskId=u55db2441-adb1-4199-95e7-79ec5ef27e2&width=455.5\"><br>注：当前算法选然后条件语句会带有下划线，主要是因为同时使用了 \\ulem 包，产生了冲突，去掉该包即可</p>","categories":[],"tags":[]}