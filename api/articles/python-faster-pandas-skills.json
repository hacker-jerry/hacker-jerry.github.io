{"title":"python-faster-pandas-skills","slug":"python-faster-pandas-skills","date":"2021-02-04T14:05:42.000Z","updated":"2023-01-02T12:28:38.836Z","comments":true,"path":"api/articles/python-faster-pandas-skills.json","realPath":null,"excerpt":null,"covers":["https://cdn.nlark.com/yuque/0/2021/svg/1629942/1612452799902-870408e1-e8d4-4be6-8e01-4f210cfbfeb2.svg#align=left&display=inline&height=24&margin=%5Bobject%20Object%5D&originHeight=24&originWidth=30&size=0&status=done&style=none&width=30","https://cdn.nlark.com/yuque/0/2021/png/1629942/1612452873550-e4fe3496-3065-4574-a3c6-6166ea59be44.png#align=left&display=inline&height=238&margin=%5Bobject%20Object%5D&name=image.png&originHeight=476&originWidth=1103&size=551802&status=done&style=none&width=551.5","https://cdn.nlark.com/yuque/0/2021/png/1629942/1612452902398-16734510-bd92-4925-8e14-961e74d001a1.png#align=left&display=inline&height=390&margin=%5Bobject%20Object%5D&name=image.png&originHeight=780&originWidth=850&size=291737&status=done&style=none&width=425","https://cdn.nlark.com/yuque/0/2021/png/1629942/1612452927524-0f9ecf6d-55a0-4cb3-a182-a6de89c1aa35.png#align=left&display=inline&height=327&margin=%5Bobject%20Object%5D&name=image.png&originHeight=654&originWidth=1094&size=916957&status=done&style=none&width=547","https://cdn.nlark.com/yuque/0/2021/png/1629942/1612452949828-2ea30a17-ea3c-4304-ae12-da559d11a975.png#align=left&display=inline&height=321&margin=%5Bobject%20Object%5D&name=image.png&originHeight=641&originWidth=767&size=819723&status=done&style=none&width=383.5"],"cover":"https://cdn.nlark.com/yuque/0/2021/svg/1629942/1612452799902-870408e1-e8d4-4be6-8e01-4f210cfbfeb2.svg#align=left&display=inline&height=24&margin=%5Bobject%20Object%5D&originHeight=24&originWidth=30&size=0&status=done&style=none&width=30","content":"<a id=\"more\"></a>\n\n<h1 id=\"numba-加速\"><a href=\"#numba-加速\" class=\"headerlink\" title=\"numba 加速\"></a>numba 加速</h1><p>原文链接：<a href=\"https://zhuanlan.zhihu.com/p/78882641\">https://zhuanlan.zhihu.com/p/78882641</a><br>使用 numba 非常简单，只需要将 numba 装饰器应用到 python 函数中，无需改动原本的 python 代码，numba 会自动完成剩余的工作。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np<br><span class=\"hljs-keyword\">import</span> numba<br><span class=\"hljs-keyword\">from</span> numba <span class=\"hljs-keyword\">import</span> jit<br><span class=\"hljs-meta\">@jit(nopython=True) # jit，numba装饰器中的一种</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">go_fast</span>(<span class=\"hljs-params\">a</span>):</span> <span class=\"hljs-comment\"># 首次调用时，函数被编译为机器代码</span><br>    trace = <span class=\"hljs-number\">0</span><br>    <span class=\"hljs-comment\"># 假设输入变量是numpy数组</span><br>    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(a.shape[<span class=\"hljs-number\">0</span>]):   <span class=\"hljs-comment\"># Numba 擅长处理循环</span><br>        trace += np.tanh(a[i, i])<br>    <span class=\"hljs-keyword\">return</span> a + trace<br></code></pre></td></tr></table></figure>\n\n<p>以上代码是一个 python 函数，用以计算 numpy 数组各个数值的双曲正切值，我们使用了 numba 装饰器，它将这个 python 函数编译为等效的机器代码，可以大大减少运行时间。</p>\n<p>什么情况下使用 numba 呢？</p>\n<ul>\n<li><p>使用 numpy 数组做大量科学计算时</p>\n</li>\n<li><p>使用 for 循环时</p>\n</li>\n</ul>\n<h1 id=\"Vaex-大数据\"><a href=\"#Vaex-大数据\" class=\"headerlink\" title=\"Vaex-大数据\"></a>Vaex-大数据</h1><p>pandas 能应付较大数据集（千万行级别），但当数据量达到十亿百亿行级别，pandas 处理起来就有点力不从心了，可以说非常的慢。<br>官网对 vaex 的介绍可以总结为三点：</p>\n<ol>\n<li>vaex 是一个用处理、展示数据的数据表工具，类似 pandas；</li>\n<li>vaex 采取内存映射、惰性计算，不占用内存，适合处理大数据；</li>\n<li>vaex 可以在百亿级数据集上进行秒级的统计分析和可视化展示；</li>\n</ol>\n<p>vaex 的优势在于：</p>\n<ol>\n<li>性能：处理海量数据，<img src=\"https://cdn.nlark.com/yuque/0/2021/svg/1629942/1612452799902-870408e1-e8d4-4be6-8e01-4f210cfbfeb2.svg#align=left&display=inline&height=24&margin=%5Bobject%20Object%5D&originHeight=24&originWidth=30&size=0&status=done&style=none&width=30\"> 行/秒；</li>\n<li>惰性：快速计算，不占用内存；</li>\n<li>零内存复制：在进行过滤/转换/计算时，不复制内存，在需要时进行流式传输；</li>\n<li>可视化：内含可视化组件；</li>\n<li>API：类似 pandas，拥有丰富的数据处理和计算函数；</li>\n<li>可交互：配合 Jupyter notebook 使用，灵活的交互可视化；</li>\n</ol>\n<p>vaex 支持读取 hdf5、csv、parquet 等文件，使用 read 方法。<strong>hdf5 可以惰性读取，而 csv 只能读到内存中。</strong></p>\n<h2 id=\"读取数据\"><a href=\"#读取数据\" class=\"headerlink\" title=\"读取数据\"></a>读取数据</h2><p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/1629942/1612452873550-e4fe3496-3065-4574-a3c6-6166ea59be44.png#align=left&display=inline&height=238&margin=%5Bobject%20Object%5D&name=image.png&originHeight=476&originWidth=1103&size=551802&status=done&style=none&width=551.5\" alt=\"image.png\"></p>\n<h2 id=\"数据处理\"><a href=\"#数据处理\" class=\"headerlink\" title=\"数据处理\"></a><strong>数据处理</strong></h2><p>有时候我们需要对数据进行各种各样的转换、筛选、计算等，pandas 的每一步处理都会消耗内存，而且时间成本高。除非说使用链式处理，但那样过程就很不清晰。<br>vaex 则全过程都是零内存。因为它的处理过程仅仅产生 expression（表达式），表达式是逻辑表示，不会执行，只有到了最后的生成结果阶段才会执行。而且整个过程数据是流式传输，不会产生内存积压。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/1629942/1612452902398-16734510-bd92-4925-8e14-961e74d001a1.png#align=left&display=inline&height=390&margin=%5Bobject%20Object%5D&name=image.png&originHeight=780&originWidth=850&size=291737&status=done&style=none&width=425\" alt=\"image.png\"></p>\n<p>vaex 的统计计算函数：<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/1629942/1612452927524-0f9ecf6d-55a0-4cb3-a182-a6de89c1aa35.png#align=left&display=inline&height=327&margin=%5Bobject%20Object%5D&name=image.png&originHeight=654&originWidth=1094&size=916957&status=done&style=none&width=547\" alt=\"image.png\"></p>\n<h2 id=\"可视化展示\"><a href=\"#可视化展示\" class=\"headerlink\" title=\"可视化展示\"></a><strong>可视化展示</strong></h2><p>vaex 还可以进行快速可视化展示，即便是上百亿的数据集，依然能秒出图。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/1629942/1612452949828-2ea30a17-ea3c-4304-ae12-da559d11a975.png#align=left&display=inline&height=321&margin=%5Bobject%20Object%5D&name=image.png&originHeight=641&originWidth=767&size=819723&status=done&style=none&width=383.5\" alt=\"image.png\"><br>vaex 可视化函数：<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/1629942/1612452967955-3e04f041-55c6-419f-8d3c-2e4c4e1fa214.png#align=left&display=inline&height=195&margin=%5Bobject%20Object%5D&name=image.png&originHeight=390&originWidth=1108&size=378518&status=done&style=none&width=554\" alt=\"image.png\"><br>附：hdf5 数据集生成代码（4 列 1 亿行数据）</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pgsql\"><span class=\"hljs-keyword\">import</span> pandas <span class=\"hljs-keyword\">as</span> pd<br><span class=\"hljs-keyword\">import</span> vaex<br>df = pd.DataFrame(np.random.rand(<span class=\"hljs-number\">100000000</span>,<span class=\"hljs-number\">4</span>),<span class=\"hljs-keyword\">columns</span>=[<span class=\"hljs-string\">&#x27;col_1&#x27;</span>,<span class=\"hljs-string\">&#x27;col_2&#x27;</span>,<span class=\"hljs-string\">&#x27;col_3&#x27;</span>,<span class=\"hljs-string\">&#x27;col_4&#x27;</span>])<br>df.to_csv(<span class=\"hljs-string\">&#x27;example.csv&#x27;</span>,<span class=\"hljs-keyword\">index</span>=<span class=\"hljs-keyword\">False</span>)<br>vaex.<span class=\"hljs-keyword\">read</span>(<span class=\"hljs-string\">&#x27;example.csv&#x27;</span>,convert=<span class=\"hljs-string\">&#x27;example1.hdf5&#x27;</span>)<br></code></pre></td></tr></table></figure>\n\n<p>注意这里不要用 pandas 直接生成 hdf5，其格式会与 vaex 不兼容。</p>\n","more":"<h1 id=\"numba-加速\"><a href=\"#numba-加速\" class=\"headerlink\" title=\"numba 加速\"></a>numba 加速</h1><p>原文链接：<a href=\"https://zhuanlan.zhihu.com/p/78882641\">https://zhuanlan.zhihu.com/p/78882641</a><br>使用 numba 非常简单，只需要将 numba 装饰器应用到 python 函数中，无需改动原本的 python 代码，numba 会自动完成剩余的工作。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np<br><span class=\"hljs-keyword\">import</span> numba<br><span class=\"hljs-keyword\">from</span> numba <span class=\"hljs-keyword\">import</span> jit<br><span class=\"hljs-meta\">@jit(nopython=True) # jit，numba装饰器中的一种</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">go_fast</span>(<span class=\"hljs-params\">a</span>):</span> <span class=\"hljs-comment\"># 首次调用时，函数被编译为机器代码</span><br>    trace = <span class=\"hljs-number\">0</span><br>    <span class=\"hljs-comment\"># 假设输入变量是numpy数组</span><br>    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(a.shape[<span class=\"hljs-number\">0</span>]):   <span class=\"hljs-comment\"># Numba 擅长处理循环</span><br>        trace += np.tanh(a[i, i])<br>    <span class=\"hljs-keyword\">return</span> a + trace<br></code></pre></td></tr></table></figure>\n\n<p>以上代码是一个 python 函数，用以计算 numpy 数组各个数值的双曲正切值，我们使用了 numba 装饰器，它将这个 python 函数编译为等效的机器代码，可以大大减少运行时间。</p>\n<p>什么情况下使用 numba 呢？</p>\n<ul>\n<li><p>使用 numpy 数组做大量科学计算时</p>\n</li>\n<li><p>使用 for 循环时</p>\n</li>\n</ul>\n<h1 id=\"Vaex-大数据\"><a href=\"#Vaex-大数据\" class=\"headerlink\" title=\"Vaex-大数据\"></a>Vaex-大数据</h1><p>pandas 能应付较大数据集（千万行级别），但当数据量达到十亿百亿行级别，pandas 处理起来就有点力不从心了，可以说非常的慢。<br>官网对 vaex 的介绍可以总结为三点：</p>\n<ol>\n<li>vaex 是一个用处理、展示数据的数据表工具，类似 pandas；</li>\n<li>vaex 采取内存映射、惰性计算，不占用内存，适合处理大数据；</li>\n<li>vaex 可以在百亿级数据集上进行秒级的统计分析和可视化展示；</li>\n</ol>\n<p>vaex 的优势在于：</p>\n<ol>\n<li>性能：处理海量数据，<img src=\"https://cdn.nlark.com/yuque/0/2021/svg/1629942/1612452799902-870408e1-e8d4-4be6-8e01-4f210cfbfeb2.svg#align=left&display=inline&height=24&margin=%5Bobject%20Object%5D&originHeight=24&originWidth=30&size=0&status=done&style=none&width=30\"> 行/秒；</li>\n<li>惰性：快速计算，不占用内存；</li>\n<li>零内存复制：在进行过滤/转换/计算时，不复制内存，在需要时进行流式传输；</li>\n<li>可视化：内含可视化组件；</li>\n<li>API：类似 pandas，拥有丰富的数据处理和计算函数；</li>\n<li>可交互：配合 Jupyter notebook 使用，灵活的交互可视化；</li>\n</ol>\n<p>vaex 支持读取 hdf5、csv、parquet 等文件，使用 read 方法。<strong>hdf5 可以惰性读取，而 csv 只能读到内存中。</strong></p>\n<h2 id=\"读取数据\"><a href=\"#读取数据\" class=\"headerlink\" title=\"读取数据\"></a>读取数据</h2><p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/1629942/1612452873550-e4fe3496-3065-4574-a3c6-6166ea59be44.png#align=left&display=inline&height=238&margin=%5Bobject%20Object%5D&name=image.png&originHeight=476&originWidth=1103&size=551802&status=done&style=none&width=551.5\" alt=\"image.png\"></p>\n<h2 id=\"数据处理\"><a href=\"#数据处理\" class=\"headerlink\" title=\"数据处理\"></a><strong>数据处理</strong></h2><p>有时候我们需要对数据进行各种各样的转换、筛选、计算等，pandas 的每一步处理都会消耗内存，而且时间成本高。除非说使用链式处理，但那样过程就很不清晰。<br>vaex 则全过程都是零内存。因为它的处理过程仅仅产生 expression（表达式），表达式是逻辑表示，不会执行，只有到了最后的生成结果阶段才会执行。而且整个过程数据是流式传输，不会产生内存积压。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/1629942/1612452902398-16734510-bd92-4925-8e14-961e74d001a1.png#align=left&display=inline&height=390&margin=%5Bobject%20Object%5D&name=image.png&originHeight=780&originWidth=850&size=291737&status=done&style=none&width=425\" alt=\"image.png\"></p>\n<p>vaex 的统计计算函数：<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/1629942/1612452927524-0f9ecf6d-55a0-4cb3-a182-a6de89c1aa35.png#align=left&display=inline&height=327&margin=%5Bobject%20Object%5D&name=image.png&originHeight=654&originWidth=1094&size=916957&status=done&style=none&width=547\" alt=\"image.png\"></p>\n<h2 id=\"可视化展示\"><a href=\"#可视化展示\" class=\"headerlink\" title=\"可视化展示\"></a><strong>可视化展示</strong></h2><p>vaex 还可以进行快速可视化展示，即便是上百亿的数据集，依然能秒出图。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/1629942/1612452949828-2ea30a17-ea3c-4304-ae12-da559d11a975.png#align=left&display=inline&height=321&margin=%5Bobject%20Object%5D&name=image.png&originHeight=641&originWidth=767&size=819723&status=done&style=none&width=383.5\" alt=\"image.png\"><br>vaex 可视化函数：<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/1629942/1612452967955-3e04f041-55c6-419f-8d3c-2e4c4e1fa214.png#align=left&display=inline&height=195&margin=%5Bobject%20Object%5D&name=image.png&originHeight=390&originWidth=1108&size=378518&status=done&style=none&width=554\" alt=\"image.png\"><br>附：hdf5 数据集生成代码（4 列 1 亿行数据）</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pgsql\"><span class=\"hljs-keyword\">import</span> pandas <span class=\"hljs-keyword\">as</span> pd<br><span class=\"hljs-keyword\">import</span> vaex<br>df = pd.DataFrame(np.random.rand(<span class=\"hljs-number\">100000000</span>,<span class=\"hljs-number\">4</span>),<span class=\"hljs-keyword\">columns</span>=[<span class=\"hljs-string\">&#x27;col_1&#x27;</span>,<span class=\"hljs-string\">&#x27;col_2&#x27;</span>,<span class=\"hljs-string\">&#x27;col_3&#x27;</span>,<span class=\"hljs-string\">&#x27;col_4&#x27;</span>])<br>df.to_csv(<span class=\"hljs-string\">&#x27;example.csv&#x27;</span>,<span class=\"hljs-keyword\">index</span>=<span class=\"hljs-keyword\">False</span>)<br>vaex.<span class=\"hljs-keyword\">read</span>(<span class=\"hljs-string\">&#x27;example.csv&#x27;</span>,convert=<span class=\"hljs-string\">&#x27;example1.hdf5&#x27;</span>)<br></code></pre></td></tr></table></figure>\n\n<p>注意这里不要用 pandas 直接生成 hdf5，其格式会与 vaex 不兼容。</p>","categories":[{"name":"python","path":"api/categories/python.json"}],"tags":[{"name":"python","path":"api/tags/python.json"},{"name":"pandas","path":"api/tags/pandas.json"},{"name":"数据分析","path":"api/tags/数据分析.json"}]}