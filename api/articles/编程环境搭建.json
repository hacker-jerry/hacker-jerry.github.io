{"title":"编程环境搭建","slug":"编程环境搭建","date":"2022-02-05T12:02:22.000Z","updated":"2022-02-07T10:11:36.175Z","comments":true,"path":"api/articles/编程环境搭建.json","realPath":null,"excerpt":null,"covers":["https://cdn.nlark.com/yuque/0/2022/png/1629942/1644062541079-c7a63b17-c596-481e-89fc-2e78de862d95.png#crop=0&crop=0&crop=1&crop=1&id=pUMSX&originHeight=674&originWidth=1434&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&status=done&style=none&title=","https://cdn.nlark.com/yuque/0/2022/png/1629942/1644062541291-32f78767-b268-40cb-a8a3-7ee831486c64.png#crop=0&crop=0&crop=1&crop=1&id=MRnLV&originHeight=852&originWidth=1698&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&status=done&style=none&title=","https://cdn.nlark.com/yuque/0/2022/png/1629942/1644062541453-80d31bf3-847b-4ebb-ad3e-5e2ae156ff6d.png#crop=0&crop=0&crop=1&crop=1&id=Lp3x7&originHeight=424&originWidth=1708&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&status=done&style=none&title=","https://cdn.nlark.com/yuque/0/2022/png/1629942/1644062541663-f6cc2982-a295-408a-88f3-6136dc8faa70.png#crop=0&crop=0&crop=1&crop=1&id=cFViy&originHeight=1436&originWidth=2198&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&status=done&style=none&title=","https://cdn.nlark.com/yuque/0/2022/png/1629942/1644062541913-5319b75a-dff9-46f5-9dd2-9e36c75d4c9d.png#crop=0&crop=0&crop=1&crop=1&id=gh3sH&originHeight=1266&originWidth=2000&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&status=done&style=none&title=","https://cdn.nlark.com/yuque/0/2022/png/1629942/1644062542072-624b1beb-a718-460e-a69a-c5cff8ab8be2.png#crop=0&crop=0&crop=1&crop=1&id=rrLvh&originHeight=738&originWidth=1862&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&status=done&style=none&title="],"cover":"https://image.hackerjerry.top/uPic/zEH5vV.jpg","content":"<p>写在前面，本文主要基于<a href=\"https://f5soft.site/zh/notes/2021/0214/\">https://f5soft.site/zh/notes/2021/0214/</a> 一文写成，用于记录安装过程中遇到的各种问题，便于日后快速复盘。</p>\n<h1 id=\"安装-python\"><a href=\"#安装-python\" class=\"headerlink\" title=\"安装 python\"></a>安装 python</h1><p>通过 Homebrew 安装 python3.9。<br>系统自带 python2.7 和 python3.8.9,这个作者说安装一下原生支持 arm 的 python,于是我就安装了。<br>通过</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Bash\">brew install python3<br></code></pre></td></tr></table></figure>\n\n<p>即可安装 arm 版本的 3.9.1，其路径在<code>/opt/homebrew/bin/python3</code>。<br><img src=\"https://cdn.nlark.com/yuque/0/2022/png/1629942/1644062541079-c7a63b17-c596-481e-89fc-2e78de862d95.png#crop=0&crop=0&crop=1&crop=1&id=pUMSX&originHeight=674&originWidth=1434&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&status=done&style=none&title=\"><br>安装好之后，需要通过<code>pip3</code>安装一些基本的第三方库。由于这里是 macos-arm64 平台，因此很多库都没有来得及提供该平台的 wheel，导致很多库都需要通过手动编译安装，而且编译过程往往出错。下面是常用库的 arm 版本的安装方法整理：</p>\n<table>\n<thead>\n<tr>\n<th>库名称</th>\n<th>pip3 install 是否需要编译，编译是否成功</th>\n<th>安装方法</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>numpy</td>\n<td>需要编译，安装成功</td>\n<td></td>\n</tr>\n<tr>\n<td>scipy</td>\n<td>不知道是不是高铁上网不好，pip 失败</td>\n<td>brew install scipy</td>\n</tr>\n<tr>\n<td>matplotlib</td>\n<td>需要编译，安装成功</td>\n<td></td>\n</tr>\n<tr>\n<td>pandas</td>\n<td>成功</td>\n<td></td>\n</tr>\n<tr>\n<td>sympy</td>\n<td>成功</td>\n<td></td>\n</tr>\n<tr>\n<td>cv2</td>\n<td>无相应轮子</td>\n<td>brew install opencv (花了巨长时间下载）python 里面 import cv2 即可验证</td>\n</tr>\n<tr>\n<td>pycrypto</td>\n<td>编译成功</td>\n<td></td>\n</tr>\n<tr>\n<td>requests</td>\n<td>编译成功</td>\n<td></td>\n</tr>\n<tr>\n<td>jupyter</td>\n<td>编译成功</td>\n<td></td>\n</tr>\n<tr>\n<td>scapy</td>\n<td>编译成功</td>\n<td></td>\n</tr>\n<tr>\n<td>regex</td>\n<td>直接安装</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<p>首先是 numpy，我一开始使用</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Bash\">matr1x@matr1xdeMacBook-Air ~ % pip3 install numpy<br></code></pre></td></tr></table></figure>\n\n<p>调用的是系统自带的 python3.8 的 pip3，然后它被安装在了<br><img src=\"https://cdn.nlark.com/yuque/0/2022/png/1629942/1644062541291-32f78767-b268-40cb-a8a3-7ee831486c64.png#crop=0&crop=0&crop=1&crop=1&id=MRnLV&originHeight=852&originWidth=1698&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&status=done&style=none&title=\"><br>然后，我发现其实 brew 下也是有 pip3 和 pip3.9 的，应该是 pip3 的顺序系统的比较靠前，然后我使用了</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Bash\">matr1x@matr1xdeMacBook-Air ~ % <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">&#x27;eval &quot;$(/opt/homebrew/bin/brew shellenv)&quot;&#x27;</span> &gt;&gt; ~/.zprofile<br>matr1x@matr1xdeMacBook-Air ~ % <span class=\"hljs-built_in\">eval</span> <span class=\"hljs-string\">&quot;<span class=\"hljs-subst\">$(/opt/homebrew/bin/brew shellenv)</span>&quot;</span><br></code></pre></td></tr></table></figure>\n\n<p>此时发现</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Bash\">matr1x@matr1xdeMacBook-Air ~ % <span class=\"hljs-built_in\">which</span> pip3<br>/opt/homebrew/bin/pip3<br></code></pre></td></tr></table></figure>\n\n<p>再次运行<br><img src=\"https://cdn.nlark.com/yuque/0/2022/png/1629942/1644062541453-80d31bf3-847b-4ebb-ad3e-5e2ae156ff6d.png#crop=0&crop=0&crop=1&crop=1&id=Lp3x7&originHeight=424&originWidth=1708&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&status=done&style=none&title=\"><br>此时查看路径<br><img src=\"https://cdn.nlark.com/yuque/0/2022/png/1629942/1644062541562-605a738a-5482-4757-8967-9478682d10c7.png#crop=0&crop=0&crop=1&crop=1&id=G6Syu&originHeight=322&originWidth=1302&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&status=done&style=none&title=\"></p>\n<h1 id=\"安装-conda\"><a href=\"#安装-conda\" class=\"headerlink\" title=\"安装 conda\"></a>安装 conda</h1><p>由于 Anaconda 没有支持 arm，但是 miniforge 已经支持。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Bash\">brew install --cask miniforge<br></code></pre></td></tr></table></figure>\n\n<p>自动链接，查看结果</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Bash\">matr1x@matr1xdeMacBook-Air ~ % conda list<br><span class=\"hljs-comment\"># packages in environment at /opt/homebrew/Caskroom/miniforge/base:</span><br><span class=\"hljs-comment\">#</span><br><span class=\"hljs-comment\"># Name                    Version                   Build  Channel</span><br>brotlipy                  0.7.0           py39h5161555_1003    conda-forge<br>ca-certificates           2021.10.8            h4653dfc_0    conda-forge<br>certifi                   2021.10.8        py39h2804cbe_1    conda-forge<br>cffi                      1.15.0           py39h52b1de0_0    conda-forge<br>charset-normalizer        2.0.9              pyhd8ed1ab_0    conda-forge<br>colorama                  0.4.4              pyh9f0ad1d_0    conda-forge<br>conda                     4.11.0           py39h2804cbe_0    conda-forge<br>conda-package-handling    1.7.3            py39h5161555_1    conda-forge<br>cryptography              36.0.0           py39hfb8cd70_0    conda-forge<br>idna                      3.1                pyhd3deb0d_0    conda-forge<br>libffi                    3.4.2                h3422bc3_5    conda-forge<br>libzlib                   1.2.11            hee7b306_1013    conda-forge<br>ncurses                   6.2                  h9aa5885_4    conda-forge<br>openssl                   1.1.1l               h3422bc3_0    conda-forge<br>pip                       21.3.1             pyhd8ed1ab_0    conda-forge<br>pycosat                   0.6.3           py39h5161555_1009    conda-forge<br>pycparser                 2.21               pyhd8ed1ab_0    conda-forge<br>pyopenssl                 21.0.0             pyhd8ed1ab_0    conda-forge<br>pysocks                   1.7.1            py39h2804cbe_4    conda-forge<br>python                    3.9.7           h54d631c_3_cpython    conda-forge<br>python_abi                3.9                      2_cp39    conda-forge<br>readline                  8.1                  hedafd6a_0    conda-forge<br>requests                  2.26.0             pyhd8ed1ab_1    conda-forge<br>ruamel_yaml               0.15.80         py39h5161555_1006    conda-forge<br>setuptools                59.4.0           py39h2804cbe_0    conda-forge<br>six                       1.16.0             pyh6c4a22f_0    conda-forge<br>sqlite                    3.37.0               h72a2b83_0    conda-forge<br>tk                        8.6.11               he1e0b03_1    conda-forge<br>tqdm                      4.62.3             pyhd8ed1ab_0    conda-forge<br>tzdata                    2021e                he74cb21_0    conda-forge<br>urllib3                   1.26.7             pyhd8ed1ab_0    conda-forge<br>wheel                     0.37.0             pyhd8ed1ab_1    conda-forge<br>xz                        5.2.5                h642e427_1    conda-forge<br>yaml                      0.2.5                h642e427_0    conda-forge<br>zlib                      1.2.11            hee7b306_1013    conda-forge<br></code></pre></td></tr></table></figure>\n\n<p>可以看到和 pip3 的相比少了很多库。暂时没找到相应的简单方法，只能创建虚拟环境的时候再下一遍了。</p>\n<h1 id=\"安装-tensorflow2-4\"><a href=\"#安装-tensorflow2-4\" class=\"headerlink\" title=\"安装 tensorflow2.4\"></a>安装 tensorflow2.4</h1><p>亲测有效，但无法调用 GPU。<br><a href=\"https://_www.cnblogs.com_practitioners_p_15514567/\">https://www.cnblogs.com/practitioners/p/15514567.html</a><br>先创建 yml，注意，用 vscode 创建。（系统自带的文本编辑器只能导出 trf 格式的文件，很离谱）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Bash\">name: apple_tensorflow<br>  channels:<br>    - conda-forge<br>    - nodefaults<br>  dependencies:<br>    - grpcio<br>    - h5py<br>    - ipython<br>    - numpy<br>    - pip=20.2.4<br>    - python=3.8<br>    - scipy<br>    - termcolor<br>    - typeguard<br>    - wheel<br>    - absl-py<br>    - astunparse<br>    - python-flatbuffers<br>    - gast<br>    - google-pasta<br>    - keras-preprocessing<br>    - opt_einsum<br>    - protobuf<br>    - tensorboard<br>    - tensorflow-estimator<br>    - termcolor<br>    - typing_extensions<br>    - wrapt<br></code></pre></td></tr></table></figure>\n\n<p>然后</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Bash\">conda env create --file=/Users/matr1x/Documents/env.yml  --name=tensorflow<br></code></pre></td></tr></table></figure>\n\n<p>之后激活并安装</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Bash\">(base) matr1x@matr1xdeMacBook-Air ~ % conda activate tensorflow<br>(tensorflow) matr1x@matr1xdeMacBook-Air ~ % pip install --upgrade --force --no-dependencies https://github.com/apple/tensorflow_macos/releases/download/v0.1alpha3/tensorflow_macos-0.1a3-cp38-cp38-macosx_11_0_arm64.whl https://github.com/apple/tensorflow_macos/releases/download/v0.1alpha3/tensorflow_addons_macos-0.1a3-cp38-cp38-macosx_11_0_arm64.whl<br></code></pre></td></tr></table></figure>\n\n<p>测试</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Python\">(tensorflow) matr1x@matr1xdeMacBook-Air ~ % python<br>Python <span class=\"hljs-number\">3.8</span><span class=\"hljs-number\">.12</span> | packaged by conda-forge | (default, Oct <span class=\"hljs-number\">12</span> <span class=\"hljs-number\">2021</span>, <span class=\"hljs-number\">21</span>:<span class=\"hljs-number\">21</span>:<span class=\"hljs-number\">17</span>)<br>[Clang <span class=\"hljs-number\">11.1</span><span class=\"hljs-number\">.0</span> ] on darwin<br>Type <span class=\"hljs-string\">&quot;help&quot;</span>, <span class=\"hljs-string\">&quot;copyright&quot;</span>, <span class=\"hljs-string\">&quot;credits&quot;</span> <span class=\"hljs-keyword\">or</span> <span class=\"hljs-string\">&quot;license&quot;</span> <span class=\"hljs-keyword\">for</span> more information.<br><span class=\"hljs-meta\">&gt;&gt;&gt; </span><span class=\"hljs-keyword\">import</span> tensorflow <span class=\"hljs-keyword\">as</span> tf<br><span class=\"hljs-meta\">&gt;&gt;&gt; </span>print(tf.__version__)<br><span class=\"hljs-number\">2.4</span><span class=\"hljs-number\">.0</span>-rc0<br><span class=\"hljs-meta\">&gt;&gt;&gt; </span><span class=\"hljs-keyword\">from</span> tensorflow.keras <span class=\"hljs-keyword\">import</span> layers<br><span class=\"hljs-meta\">&gt;&gt;&gt; </span><span class=\"hljs-keyword\">from</span> tensorflow.keras <span class=\"hljs-keyword\">import</span> models<br><span class=\"hljs-meta\">&gt;&gt;&gt; </span>model = models.Sequential()<br><span class=\"hljs-meta\">&gt;&gt;&gt; </span>model.add(layers.Conv2D(<span class=\"hljs-number\">32</span>, (<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span>), activation=<span class=\"hljs-string\">&#x27;relu&#x27;</span>, input_shape=(<span class=\"hljs-number\">28</span>, <span class=\"hljs-number\">28</span>, <span class=\"hljs-number\">1</span>)))<br><span class=\"hljs-meta\">&gt;&gt;&gt; </span>model.add(layers.MaxPooling2D((<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span>)))<br><span class=\"hljs-meta\">&gt;&gt;&gt; </span>model.add(layers.Conv2D(<span class=\"hljs-number\">64</span>, (<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span>), activation=<span class=\"hljs-string\">&#x27;relu&#x27;</span>))<br><span class=\"hljs-meta\">&gt;&gt;&gt; </span>model.add(layers.MaxPooling2D((<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span>)))<br><span class=\"hljs-meta\">&gt;&gt;&gt; </span>model.add(layers.Conv2D(<span class=\"hljs-number\">64</span>, (<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span>), activation=<span class=\"hljs-string\">&#x27;relu&#x27;</span>))<br><span class=\"hljs-meta\">&gt;&gt;&gt; </span>model.add(layers.Flatten())<br><span class=\"hljs-meta\">&gt;&gt;&gt; </span>model.add(layers.Dense(<span class=\"hljs-number\">64</span>, activation=<span class=\"hljs-string\">&#x27;relu&#x27;</span>))<br><span class=\"hljs-meta\">&gt;&gt;&gt; </span>model.add(layers.Dense(<span class=\"hljs-number\">10</span>, activation=<span class=\"hljs-string\">&#x27;softmax&#x27;</span>))<br><span class=\"hljs-meta\">&gt;&gt;&gt; </span>model.summary()<br>Model: <span class=\"hljs-string\">&quot;sequential&quot;</span><br>_________________________________________________________________<br>Layer (type)                 Output Shape              Param <span class=\"hljs-comment\">#</span><br>=================================================================<br>conv2d (Conv2D)              (<span class=\"hljs-literal\">None</span>, <span class=\"hljs-number\">26</span>, <span class=\"hljs-number\">26</span>, <span class=\"hljs-number\">32</span>)        <span class=\"hljs-number\">320</span><br>_________________________________________________________________<br>max_pooling2d (MaxPooling2D) (<span class=\"hljs-literal\">None</span>, <span class=\"hljs-number\">13</span>, <span class=\"hljs-number\">13</span>, <span class=\"hljs-number\">32</span>)        <span class=\"hljs-number\">0</span><br>_________________________________________________________________<br>conv2d_1 (Conv2D)            (<span class=\"hljs-literal\">None</span>, <span class=\"hljs-number\">11</span>, <span class=\"hljs-number\">11</span>, <span class=\"hljs-number\">64</span>)        <span class=\"hljs-number\">18496</span><br>_________________________________________________________________<br>max_pooling2d_1 (MaxPooling2 (<span class=\"hljs-literal\">None</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">64</span>)          <span class=\"hljs-number\">0</span><br>_________________________________________________________________<br>conv2d_2 (Conv2D)            (<span class=\"hljs-literal\">None</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">64</span>)          <span class=\"hljs-number\">36928</span><br>_________________________________________________________________<br>flatten (Flatten)            (<span class=\"hljs-literal\">None</span>, <span class=\"hljs-number\">576</span>)               <span class=\"hljs-number\">0</span><br>_________________________________________________________________<br>dense (Dense)                (<span class=\"hljs-literal\">None</span>, <span class=\"hljs-number\">64</span>)                <span class=\"hljs-number\">36928</span><br>_________________________________________________________________<br>dense_1 (Dense)              (<span class=\"hljs-literal\">None</span>, <span class=\"hljs-number\">10</span>)                <span class=\"hljs-number\">650</span><br>=================================================================<br>Total params: <span class=\"hljs-number\">93</span>,<span class=\"hljs-number\">322</span><br>Trainable params: <span class=\"hljs-number\">93</span>,<span class=\"hljs-number\">322</span><br>Non-trainable params: <span class=\"hljs-number\">0</span><br>_________________________________________________________________<br><span class=\"hljs-meta\">&gt;&gt;&gt; </span><span class=\"hljs-keyword\">from</span> tensorflow.keras.datasets <span class=\"hljs-keyword\">import</span> mnist<br><span class=\"hljs-meta\">&gt;&gt;&gt; </span><span class=\"hljs-keyword\">from</span> tensorflow.keras.utils <span class=\"hljs-keyword\">import</span> to_categorical<br><span class=\"hljs-meta\">&gt;&gt;&gt; </span>(train_images, train_labels), (test_images, test_labels) = mnist.load_data()<br><span class=\"hljs-meta\">&gt;&gt;&gt; </span>train_images = train_images.reshape((<span class=\"hljs-number\">60000</span>, <span class=\"hljs-number\">28</span>, <span class=\"hljs-number\">28</span>, <span class=\"hljs-number\">1</span>))<br><span class=\"hljs-meta\">&gt;&gt;&gt; </span>train_images = train_images.astype(<span class=\"hljs-string\">&#x27;float32&#x27;</span>) / <span class=\"hljs-number\">255</span><br><span class=\"hljs-meta\">&gt;&gt;&gt; </span>test_images = test_images.reshape((<span class=\"hljs-number\">10000</span>, <span class=\"hljs-number\">28</span>, <span class=\"hljs-number\">28</span>, <span class=\"hljs-number\">1</span>))<br><span class=\"hljs-meta\">&gt;&gt;&gt; </span>test_images = test_images.astype(<span class=\"hljs-string\">&#x27;float32&#x27;</span>) / <span class=\"hljs-number\">255</span><br><span class=\"hljs-meta\">&gt;&gt;&gt; </span>train_labels = to_categorical(train_labels)<br><span class=\"hljs-meta\">&gt;&gt;&gt; </span>test_labels = to_categorical(test_labels)<br><span class=\"hljs-meta\">&gt;&gt;&gt; </span>model.compile(optimizer=<span class=\"hljs-string\">&#x27;rmsprop&#x27;</span>,<br><span class=\"hljs-meta\">... </span>              loss=<span class=\"hljs-string\">&#x27;categorical_crossentropy&#x27;</span>,<br><span class=\"hljs-meta\">... </span>              metrics=[<span class=\"hljs-string\">&#x27;accuracy&#x27;</span>])<br><span class=\"hljs-meta\">&gt;&gt;&gt; </span>model.fit(train_images, train_labels, epochs=<span class=\"hljs-number\">5</span>, batch_size=<span class=\"hljs-number\">64</span>)<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/1629942/1644062541663-f6cc2982-a295-408a-88f3-6136dc8faa70.png#crop=0&crop=0&crop=1&crop=1&id=cFViy&originHeight=1436&originWidth=2198&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&status=done&style=none&title=\"><br>模型是训练出来了，但是不能调用 gpu。<br><a href=\"https://www.jianshu.com/p/0b5342f4af95\">https://www.jianshu.com/p/0b5342f4af95</a> 这篇文章也提到了，不过说 tf2.5 可以调用 gpu，我先不管了，这个能用就行。<br>而关于 2.5 的 tf，可以查看<a href=\"https://makeoptim.com/deep-learning/tensorflow-metal\">https://makeoptim.com/deep-learning/tensorflow-metal</a><br>and <a href=\"https://_www.icode9.com_content-4-1210377/\">https://www.icode9.com/content-4-1210377.html</a><br>不过得升级到 mac os 12+</p>\n<h1 id=\"安装-java\"><a href=\"#安装-java\" class=\"headerlink\" title=\"安装 java\"></a>安装 java</h1><p>首先退出 conda 环境</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Bash\">conda deactivate<br></code></pre></td></tr></table></figure>\n\n<p>可在官网下载全部的 JDK8 ～ JDK16 的 macos-arm64 版本的 JDK。<br><a href=\"https://www.azul.com/downloads/zulu-community/?package=jdk\">https://www.azul.com/downloads/zulu-community/?package=jdk</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Bash\">(base) matr1x@matr1xdeMacBook-Air ~ % <span class=\"hljs-built_in\">which</span> java<br>/usr/bin/java<br>(base) matr1x@matr1xdeMacBook-Air ~ % file /usr/bin/java<br>/usr/bin/java: Mach-O universal binary with 2 architectures: [x86_64:Mach-O 64-bit executable x86_64] [arm64e:Mach-O 64-bit executable arm64e]<br>/usr/bin/java (<span class=\"hljs-keyword\">for</span> architecture x86_64):  Mach-O 64-bit executable x86_64<br>/usr/bin/java (<span class=\"hljs-keyword\">for</span> architecture arm64e):  Mach-O 64-bit executable arm64e<br>(base) matr1x@matr1xdeMacBook-Air ~ % file /usr/bin/javac<br>/usr/bin/javac: Mach-O universal binary with 2 architectures: [x86_64:Mach-O 64-bit executable x86_64] [arm64e:Mach-O 64-bit executable arm64e]<br>/usr/bin/javac (<span class=\"hljs-keyword\">for</span> architecture x86_64):  Mach-O 64-bit executable x86_64<br>/usr/bin/javac (<span class=\"hljs-keyword\">for</span> architecture arm64e):  Mach-O 64-bit executable arm64e<br></code></pre></td></tr></table></figure>\n\n<p>下载后安装即可。</p>\n<h1 id=\"安装-nodejs\"><a href=\"#安装-nodejs\" class=\"headerlink\" title=\"安装 nodejs\"></a>安装 nodejs</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Bash\">brew install node<br>(base) matr1x@matr1xdeMacBook-Air ~ % node -v<br>v17.4.0<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"安装-PHP\"><a href=\"#安装-PHP\" class=\"headerlink\" title=\"安装 PHP\"></a>安装 PHP</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Bash\">brew install php<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"Terminal-美化\"><a href=\"#Terminal-美化\" class=\"headerlink\" title=\"Terminal 美化\"></a>Terminal 美化</h1><p>非常简单。 1.下载字体，安装，并将终端字体改为它。</p>\n<ul>\n<li><a href=\"%5Bhttps://github.com/romkatv/powerlevel10k-media/raw/master/MesloLGS%5D(https://github.com/romkatv/powerlevel10k-media/raw/master/MesloLGS\">MesloLGS NF Regular.ttf</a> NF Regular.ttf)</li>\n<li><a href=\"%5Bhttps://github.com/romkatv/powerlevel10k-media/raw/master/MesloLGS%5D(https://github.com/romkatv/powerlevel10k-media/raw/master/MesloLGS\">MesloLGS NF Bold.ttf</a> NF Bold.ttf)</li>\n</ul>\n<ol start=\"2\">\n<li>brew install romkatv/powerlevel10k/powerlevel10k</li>\n<li>echo “source $(brew –prefix)/opt/powerlevel10k/powerlevel10k.zsh-theme” &gt;&gt;~/.zshrc</li>\n<li>p10k configure</li>\n</ol>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/1629942/1644062541913-5319b75a-dff9-46f5-9dd2-9e36c75d4c9d.png#crop=0&crop=0&crop=1&crop=1&id=gh3sH&originHeight=1266&originWidth=2000&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&status=done&style=none&title=\"></p>\n<h1 id=\"安装-oh-my-zsh\"><a href=\"#安装-oh-my-zsh\" class=\"headerlink\" title=\"安装 oh-my-zsh\"></a>安装 oh-my-zsh</h1><p>上网搜一下官网，找到命令，安装即可。</p>\n<blockquote>\n<p>由于被墙，因此推荐国内镜像安装。</p>\n</blockquote>\n<p><a href=\"https://blog.csdn.net/qq_39530754/article/details/104714976\">https://blog.csdn.net/qq_39530754/article/details/104714976</a><br>重新安装主题：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Git\">git clone --depth&#x3D;1 https:&#x2F;&#x2F;gitee.com&#x2F;romkatv&#x2F;powerlevel10k.git $&#123;ZSH_CUSTOM:-$HOME&#x2F;.oh-my-zsh&#x2F;custom&#125;&#x2F;themes&#x2F;powerlevel10k<br></code></pre></td></tr></table></figure>\n\n<p>配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Git\">vim ~.&#x2F;zshrc<br>修改<br>ZSH_THEME&#x3D;&quot;powerlevel10k&#x2F;powerlevel10k&quot;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"安装插件\"><a href=\"#安装插件\" class=\"headerlink\" title=\"安装插件\"></a>安装插件</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Git\">git clone https:&#x2F;&#x2F;github.com&#x2F;zsh-users&#x2F;zsh-autosuggestions $&#123;ZSH_CUSTOM:-~&#x2F;.oh-my-zsh&#x2F;custom&#125;&#x2F;plugins&#x2F;zsh-autosuggestions<br>git clone https:&#x2F;&#x2F;github.com&#x2F;zsh-users&#x2F;zsh-syntax-highlighting $&#123;ZSH_CUSTOM:-~&#x2F;.oh-my-zsh&#x2F;custom&#125;&#x2F;plugins&#x2F;zsh-syntax-highlighting<br></code></pre></td></tr></table></figure>\n\n<p>如果暂时无法 clone，将网址替换成镜像地址再次尝试。</p>\n<ul>\n<li><a href=\"https://link.zhihu.com/?target=https://github.com.cnpmjs.org\">github.com.cnpmjs.org</a></li>\n<li><a href=\"https://link.zhihu.com/?target=https://hub.fastgit.org\">https://hub.fastgit.org</a><blockquote>\n<p>GitHub raw 域名并非 <a href=\"https://link.zhihu.com/?target=http://github.com\">http://github.com</a> 而是 <a href=\"https://link.zhihu.com/?target=http://raw.githubusercontent.com\">http://raw.githubusercontent.com</a>，上方的 GitHub 加速如果不能加速这个域名，那么可以使用 Static CDN 提供的反代服务。<br>将 <a href=\"https://link.zhihu.com/?target=http://raw.githubusercontent.com\">http://raw.githubusercontent.com</a> 替换为 <a href=\"https://link.zhihu.com/?target=http://raw.staticdn.net\">http://raw.staticdn.net</a> 即可加速。</p>\n</blockquote>\n</li>\n</ul>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/1629942/1644062542072-624b1beb-a718-460e-a69a-c5cff8ab8be2.png#crop=0&crop=0&crop=1&crop=1&id=rrLvh&originHeight=738&originWidth=1862&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&status=done&style=none&title=\"></p>\n","more":"<p>写在前面，本文主要基于<a href=\"https://f5soft.site/zh/notes/2021/0214/\">https://f5soft.site/zh/notes/2021/0214/</a> 一文写成，用于记录安装过程中遇到的各种问题，便于日后快速复盘。</p>\n<h1 id=\"安装-python\"><a href=\"#安装-python\" class=\"headerlink\" title=\"安装 python\"></a>安装 python</h1><p>通过 Homebrew 安装 python3.9。<br>系统自带 python2.7 和 python3.8.9,这个作者说安装一下原生支持 arm 的 python,于是我就安装了。<br>通过</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Bash\">brew install python3<br></code></pre></td></tr></table></figure>\n\n<p>即可安装 arm 版本的 3.9.1，其路径在<code>/opt/homebrew/bin/python3</code>。<br><img src=\"https://cdn.nlark.com/yuque/0/2022/png/1629942/1644062541079-c7a63b17-c596-481e-89fc-2e78de862d95.png#crop=0&crop=0&crop=1&crop=1&id=pUMSX&originHeight=674&originWidth=1434&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&status=done&style=none&title=\"><br>安装好之后，需要通过<code>pip3</code>安装一些基本的第三方库。由于这里是 macos-arm64 平台，因此很多库都没有来得及提供该平台的 wheel，导致很多库都需要通过手动编译安装，而且编译过程往往出错。下面是常用库的 arm 版本的安装方法整理：</p>\n<table>\n<thead>\n<tr>\n<th>库名称</th>\n<th>pip3 install 是否需要编译，编译是否成功</th>\n<th>安装方法</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>numpy</td>\n<td>需要编译，安装成功</td>\n<td></td>\n</tr>\n<tr>\n<td>scipy</td>\n<td>不知道是不是高铁上网不好，pip 失败</td>\n<td>brew install scipy</td>\n</tr>\n<tr>\n<td>matplotlib</td>\n<td>需要编译，安装成功</td>\n<td></td>\n</tr>\n<tr>\n<td>pandas</td>\n<td>成功</td>\n<td></td>\n</tr>\n<tr>\n<td>sympy</td>\n<td>成功</td>\n<td></td>\n</tr>\n<tr>\n<td>cv2</td>\n<td>无相应轮子</td>\n<td>brew install opencv (花了巨长时间下载）python 里面 import cv2 即可验证</td>\n</tr>\n<tr>\n<td>pycrypto</td>\n<td>编译成功</td>\n<td></td>\n</tr>\n<tr>\n<td>requests</td>\n<td>编译成功</td>\n<td></td>\n</tr>\n<tr>\n<td>jupyter</td>\n<td>编译成功</td>\n<td></td>\n</tr>\n<tr>\n<td>scapy</td>\n<td>编译成功</td>\n<td></td>\n</tr>\n<tr>\n<td>regex</td>\n<td>直接安装</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<p>首先是 numpy，我一开始使用</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Bash\">matr1x@matr1xdeMacBook-Air ~ % pip3 install numpy<br></code></pre></td></tr></table></figure>\n\n<p>调用的是系统自带的 python3.8 的 pip3，然后它被安装在了<br><img src=\"https://cdn.nlark.com/yuque/0/2022/png/1629942/1644062541291-32f78767-b268-40cb-a8a3-7ee831486c64.png#crop=0&crop=0&crop=1&crop=1&id=MRnLV&originHeight=852&originWidth=1698&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&status=done&style=none&title=\"><br>然后，我发现其实 brew 下也是有 pip3 和 pip3.9 的，应该是 pip3 的顺序系统的比较靠前，然后我使用了</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Bash\">matr1x@matr1xdeMacBook-Air ~ % <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">&#x27;eval &quot;$(/opt/homebrew/bin/brew shellenv)&quot;&#x27;</span> &gt;&gt; ~/.zprofile<br>matr1x@matr1xdeMacBook-Air ~ % <span class=\"hljs-built_in\">eval</span> <span class=\"hljs-string\">&quot;<span class=\"hljs-subst\">$(/opt/homebrew/bin/brew shellenv)</span>&quot;</span><br></code></pre></td></tr></table></figure>\n\n<p>此时发现</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Bash\">matr1x@matr1xdeMacBook-Air ~ % <span class=\"hljs-built_in\">which</span> pip3<br>/opt/homebrew/bin/pip3<br></code></pre></td></tr></table></figure>\n\n<p>再次运行<br><img src=\"https://cdn.nlark.com/yuque/0/2022/png/1629942/1644062541453-80d31bf3-847b-4ebb-ad3e-5e2ae156ff6d.png#crop=0&crop=0&crop=1&crop=1&id=Lp3x7&originHeight=424&originWidth=1708&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&status=done&style=none&title=\"><br>此时查看路径<br><img src=\"https://cdn.nlark.com/yuque/0/2022/png/1629942/1644062541562-605a738a-5482-4757-8967-9478682d10c7.png#crop=0&crop=0&crop=1&crop=1&id=G6Syu&originHeight=322&originWidth=1302&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&status=done&style=none&title=\"></p>\n<h1 id=\"安装-conda\"><a href=\"#安装-conda\" class=\"headerlink\" title=\"安装 conda\"></a>安装 conda</h1><p>由于 Anaconda 没有支持 arm，但是 miniforge 已经支持。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Bash\">brew install --cask miniforge<br></code></pre></td></tr></table></figure>\n\n<p>自动链接，查看结果</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Bash\">matr1x@matr1xdeMacBook-Air ~ % conda list<br><span class=\"hljs-comment\"># packages in environment at /opt/homebrew/Caskroom/miniforge/base:</span><br><span class=\"hljs-comment\">#</span><br><span class=\"hljs-comment\"># Name                    Version                   Build  Channel</span><br>brotlipy                  0.7.0           py39h5161555_1003    conda-forge<br>ca-certificates           2021.10.8            h4653dfc_0    conda-forge<br>certifi                   2021.10.8        py39h2804cbe_1    conda-forge<br>cffi                      1.15.0           py39h52b1de0_0    conda-forge<br>charset-normalizer        2.0.9              pyhd8ed1ab_0    conda-forge<br>colorama                  0.4.4              pyh9f0ad1d_0    conda-forge<br>conda                     4.11.0           py39h2804cbe_0    conda-forge<br>conda-package-handling    1.7.3            py39h5161555_1    conda-forge<br>cryptography              36.0.0           py39hfb8cd70_0    conda-forge<br>idna                      3.1                pyhd3deb0d_0    conda-forge<br>libffi                    3.4.2                h3422bc3_5    conda-forge<br>libzlib                   1.2.11            hee7b306_1013    conda-forge<br>ncurses                   6.2                  h9aa5885_4    conda-forge<br>openssl                   1.1.1l               h3422bc3_0    conda-forge<br>pip                       21.3.1             pyhd8ed1ab_0    conda-forge<br>pycosat                   0.6.3           py39h5161555_1009    conda-forge<br>pycparser                 2.21               pyhd8ed1ab_0    conda-forge<br>pyopenssl                 21.0.0             pyhd8ed1ab_0    conda-forge<br>pysocks                   1.7.1            py39h2804cbe_4    conda-forge<br>python                    3.9.7           h54d631c_3_cpython    conda-forge<br>python_abi                3.9                      2_cp39    conda-forge<br>readline                  8.1                  hedafd6a_0    conda-forge<br>requests                  2.26.0             pyhd8ed1ab_1    conda-forge<br>ruamel_yaml               0.15.80         py39h5161555_1006    conda-forge<br>setuptools                59.4.0           py39h2804cbe_0    conda-forge<br>six                       1.16.0             pyh6c4a22f_0    conda-forge<br>sqlite                    3.37.0               h72a2b83_0    conda-forge<br>tk                        8.6.11               he1e0b03_1    conda-forge<br>tqdm                      4.62.3             pyhd8ed1ab_0    conda-forge<br>tzdata                    2021e                he74cb21_0    conda-forge<br>urllib3                   1.26.7             pyhd8ed1ab_0    conda-forge<br>wheel                     0.37.0             pyhd8ed1ab_1    conda-forge<br>xz                        5.2.5                h642e427_1    conda-forge<br>yaml                      0.2.5                h642e427_0    conda-forge<br>zlib                      1.2.11            hee7b306_1013    conda-forge<br></code></pre></td></tr></table></figure>\n\n<p>可以看到和 pip3 的相比少了很多库。暂时没找到相应的简单方法，只能创建虚拟环境的时候再下一遍了。</p>\n<h1 id=\"安装-tensorflow2-4\"><a href=\"#安装-tensorflow2-4\" class=\"headerlink\" title=\"安装 tensorflow2.4\"></a>安装 tensorflow2.4</h1><p>亲测有效，但无法调用 GPU。<br><a href=\"https://_www.cnblogs.com_practitioners_p_15514567/\">https://www.cnblogs.com/practitioners/p/15514567.html</a><br>先创建 yml，注意，用 vscode 创建。（系统自带的文本编辑器只能导出 trf 格式的文件，很离谱）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Bash\">name: apple_tensorflow<br>  channels:<br>    - conda-forge<br>    - nodefaults<br>  dependencies:<br>    - grpcio<br>    - h5py<br>    - ipython<br>    - numpy<br>    - pip=20.2.4<br>    - python=3.8<br>    - scipy<br>    - termcolor<br>    - typeguard<br>    - wheel<br>    - absl-py<br>    - astunparse<br>    - python-flatbuffers<br>    - gast<br>    - google-pasta<br>    - keras-preprocessing<br>    - opt_einsum<br>    - protobuf<br>    - tensorboard<br>    - tensorflow-estimator<br>    - termcolor<br>    - typing_extensions<br>    - wrapt<br></code></pre></td></tr></table></figure>\n\n<p>然后</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Bash\">conda env create --file=/Users/matr1x/Documents/env.yml  --name=tensorflow<br></code></pre></td></tr></table></figure>\n\n<p>之后激活并安装</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Bash\">(base) matr1x@matr1xdeMacBook-Air ~ % conda activate tensorflow<br>(tensorflow) matr1x@matr1xdeMacBook-Air ~ % pip install --upgrade --force --no-dependencies https://github.com/apple/tensorflow_macos/releases/download/v0.1alpha3/tensorflow_macos-0.1a3-cp38-cp38-macosx_11_0_arm64.whl https://github.com/apple/tensorflow_macos/releases/download/v0.1alpha3/tensorflow_addons_macos-0.1a3-cp38-cp38-macosx_11_0_arm64.whl<br></code></pre></td></tr></table></figure>\n\n<p>测试</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Python\">(tensorflow) matr1x@matr1xdeMacBook-Air ~ % python<br>Python <span class=\"hljs-number\">3.8</span><span class=\"hljs-number\">.12</span> | packaged by conda-forge | (default, Oct <span class=\"hljs-number\">12</span> <span class=\"hljs-number\">2021</span>, <span class=\"hljs-number\">21</span>:<span class=\"hljs-number\">21</span>:<span class=\"hljs-number\">17</span>)<br>[Clang <span class=\"hljs-number\">11.1</span><span class=\"hljs-number\">.0</span> ] on darwin<br>Type <span class=\"hljs-string\">&quot;help&quot;</span>, <span class=\"hljs-string\">&quot;copyright&quot;</span>, <span class=\"hljs-string\">&quot;credits&quot;</span> <span class=\"hljs-keyword\">or</span> <span class=\"hljs-string\">&quot;license&quot;</span> <span class=\"hljs-keyword\">for</span> more information.<br><span class=\"hljs-meta\">&gt;&gt;&gt; </span><span class=\"hljs-keyword\">import</span> tensorflow <span class=\"hljs-keyword\">as</span> tf<br><span class=\"hljs-meta\">&gt;&gt;&gt; </span>print(tf.__version__)<br><span class=\"hljs-number\">2.4</span><span class=\"hljs-number\">.0</span>-rc0<br><span class=\"hljs-meta\">&gt;&gt;&gt; </span><span class=\"hljs-keyword\">from</span> tensorflow.keras <span class=\"hljs-keyword\">import</span> layers<br><span class=\"hljs-meta\">&gt;&gt;&gt; </span><span class=\"hljs-keyword\">from</span> tensorflow.keras <span class=\"hljs-keyword\">import</span> models<br><span class=\"hljs-meta\">&gt;&gt;&gt; </span>model = models.Sequential()<br><span class=\"hljs-meta\">&gt;&gt;&gt; </span>model.add(layers.Conv2D(<span class=\"hljs-number\">32</span>, (<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span>), activation=<span class=\"hljs-string\">&#x27;relu&#x27;</span>, input_shape=(<span class=\"hljs-number\">28</span>, <span class=\"hljs-number\">28</span>, <span class=\"hljs-number\">1</span>)))<br><span class=\"hljs-meta\">&gt;&gt;&gt; </span>model.add(layers.MaxPooling2D((<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span>)))<br><span class=\"hljs-meta\">&gt;&gt;&gt; </span>model.add(layers.Conv2D(<span class=\"hljs-number\">64</span>, (<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span>), activation=<span class=\"hljs-string\">&#x27;relu&#x27;</span>))<br><span class=\"hljs-meta\">&gt;&gt;&gt; </span>model.add(layers.MaxPooling2D((<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span>)))<br><span class=\"hljs-meta\">&gt;&gt;&gt; </span>model.add(layers.Conv2D(<span class=\"hljs-number\">64</span>, (<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span>), activation=<span class=\"hljs-string\">&#x27;relu&#x27;</span>))<br><span class=\"hljs-meta\">&gt;&gt;&gt; </span>model.add(layers.Flatten())<br><span class=\"hljs-meta\">&gt;&gt;&gt; </span>model.add(layers.Dense(<span class=\"hljs-number\">64</span>, activation=<span class=\"hljs-string\">&#x27;relu&#x27;</span>))<br><span class=\"hljs-meta\">&gt;&gt;&gt; </span>model.add(layers.Dense(<span class=\"hljs-number\">10</span>, activation=<span class=\"hljs-string\">&#x27;softmax&#x27;</span>))<br><span class=\"hljs-meta\">&gt;&gt;&gt; </span>model.summary()<br>Model: <span class=\"hljs-string\">&quot;sequential&quot;</span><br>_________________________________________________________________<br>Layer (type)                 Output Shape              Param <span class=\"hljs-comment\">#</span><br>=================================================================<br>conv2d (Conv2D)              (<span class=\"hljs-literal\">None</span>, <span class=\"hljs-number\">26</span>, <span class=\"hljs-number\">26</span>, <span class=\"hljs-number\">32</span>)        <span class=\"hljs-number\">320</span><br>_________________________________________________________________<br>max_pooling2d (MaxPooling2D) (<span class=\"hljs-literal\">None</span>, <span class=\"hljs-number\">13</span>, <span class=\"hljs-number\">13</span>, <span class=\"hljs-number\">32</span>)        <span class=\"hljs-number\">0</span><br>_________________________________________________________________<br>conv2d_1 (Conv2D)            (<span class=\"hljs-literal\">None</span>, <span class=\"hljs-number\">11</span>, <span class=\"hljs-number\">11</span>, <span class=\"hljs-number\">64</span>)        <span class=\"hljs-number\">18496</span><br>_________________________________________________________________<br>max_pooling2d_1 (MaxPooling2 (<span class=\"hljs-literal\">None</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">64</span>)          <span class=\"hljs-number\">0</span><br>_________________________________________________________________<br>conv2d_2 (Conv2D)            (<span class=\"hljs-literal\">None</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">64</span>)          <span class=\"hljs-number\">36928</span><br>_________________________________________________________________<br>flatten (Flatten)            (<span class=\"hljs-literal\">None</span>, <span class=\"hljs-number\">576</span>)               <span class=\"hljs-number\">0</span><br>_________________________________________________________________<br>dense (Dense)                (<span class=\"hljs-literal\">None</span>, <span class=\"hljs-number\">64</span>)                <span class=\"hljs-number\">36928</span><br>_________________________________________________________________<br>dense_1 (Dense)              (<span class=\"hljs-literal\">None</span>, <span class=\"hljs-number\">10</span>)                <span class=\"hljs-number\">650</span><br>=================================================================<br>Total params: <span class=\"hljs-number\">93</span>,<span class=\"hljs-number\">322</span><br>Trainable params: <span class=\"hljs-number\">93</span>,<span class=\"hljs-number\">322</span><br>Non-trainable params: <span class=\"hljs-number\">0</span><br>_________________________________________________________________<br><span class=\"hljs-meta\">&gt;&gt;&gt; </span><span class=\"hljs-keyword\">from</span> tensorflow.keras.datasets <span class=\"hljs-keyword\">import</span> mnist<br><span class=\"hljs-meta\">&gt;&gt;&gt; </span><span class=\"hljs-keyword\">from</span> tensorflow.keras.utils <span class=\"hljs-keyword\">import</span> to_categorical<br><span class=\"hljs-meta\">&gt;&gt;&gt; </span>(train_images, train_labels), (test_images, test_labels) = mnist.load_data()<br><span class=\"hljs-meta\">&gt;&gt;&gt; </span>train_images = train_images.reshape((<span class=\"hljs-number\">60000</span>, <span class=\"hljs-number\">28</span>, <span class=\"hljs-number\">28</span>, <span class=\"hljs-number\">1</span>))<br><span class=\"hljs-meta\">&gt;&gt;&gt; </span>train_images = train_images.astype(<span class=\"hljs-string\">&#x27;float32&#x27;</span>) / <span class=\"hljs-number\">255</span><br><span class=\"hljs-meta\">&gt;&gt;&gt; </span>test_images = test_images.reshape((<span class=\"hljs-number\">10000</span>, <span class=\"hljs-number\">28</span>, <span class=\"hljs-number\">28</span>, <span class=\"hljs-number\">1</span>))<br><span class=\"hljs-meta\">&gt;&gt;&gt; </span>test_images = test_images.astype(<span class=\"hljs-string\">&#x27;float32&#x27;</span>) / <span class=\"hljs-number\">255</span><br><span class=\"hljs-meta\">&gt;&gt;&gt; </span>train_labels = to_categorical(train_labels)<br><span class=\"hljs-meta\">&gt;&gt;&gt; </span>test_labels = to_categorical(test_labels)<br><span class=\"hljs-meta\">&gt;&gt;&gt; </span>model.compile(optimizer=<span class=\"hljs-string\">&#x27;rmsprop&#x27;</span>,<br><span class=\"hljs-meta\">... </span>              loss=<span class=\"hljs-string\">&#x27;categorical_crossentropy&#x27;</span>,<br><span class=\"hljs-meta\">... </span>              metrics=[<span class=\"hljs-string\">&#x27;accuracy&#x27;</span>])<br><span class=\"hljs-meta\">&gt;&gt;&gt; </span>model.fit(train_images, train_labels, epochs=<span class=\"hljs-number\">5</span>, batch_size=<span class=\"hljs-number\">64</span>)<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/1629942/1644062541663-f6cc2982-a295-408a-88f3-6136dc8faa70.png#crop=0&crop=0&crop=1&crop=1&id=cFViy&originHeight=1436&originWidth=2198&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&status=done&style=none&title=\"><br>模型是训练出来了，但是不能调用 gpu。<br><a href=\"https://www.jianshu.com/p/0b5342f4af95\">https://www.jianshu.com/p/0b5342f4af95</a> 这篇文章也提到了，不过说 tf2.5 可以调用 gpu，我先不管了，这个能用就行。<br>而关于 2.5 的 tf，可以查看<a href=\"https://makeoptim.com/deep-learning/tensorflow-metal\">https://makeoptim.com/deep-learning/tensorflow-metal</a><br>and <a href=\"https://_www.icode9.com_content-4-1210377/\">https://www.icode9.com/content-4-1210377.html</a><br>不过得升级到 mac os 12+</p>\n<h1 id=\"安装-java\"><a href=\"#安装-java\" class=\"headerlink\" title=\"安装 java\"></a>安装 java</h1><p>首先退出 conda 环境</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Bash\">conda deactivate<br></code></pre></td></tr></table></figure>\n\n<p>可在官网下载全部的 JDK8 ～ JDK16 的 macos-arm64 版本的 JDK。<br><a href=\"https://www.azul.com/downloads/zulu-community/?package=jdk\">https://www.azul.com/downloads/zulu-community/?package=jdk</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Bash\">(base) matr1x@matr1xdeMacBook-Air ~ % <span class=\"hljs-built_in\">which</span> java<br>/usr/bin/java<br>(base) matr1x@matr1xdeMacBook-Air ~ % file /usr/bin/java<br>/usr/bin/java: Mach-O universal binary with 2 architectures: [x86_64:Mach-O 64-bit executable x86_64] [arm64e:Mach-O 64-bit executable arm64e]<br>/usr/bin/java (<span class=\"hljs-keyword\">for</span> architecture x86_64):  Mach-O 64-bit executable x86_64<br>/usr/bin/java (<span class=\"hljs-keyword\">for</span> architecture arm64e):  Mach-O 64-bit executable arm64e<br>(base) matr1x@matr1xdeMacBook-Air ~ % file /usr/bin/javac<br>/usr/bin/javac: Mach-O universal binary with 2 architectures: [x86_64:Mach-O 64-bit executable x86_64] [arm64e:Mach-O 64-bit executable arm64e]<br>/usr/bin/javac (<span class=\"hljs-keyword\">for</span> architecture x86_64):  Mach-O 64-bit executable x86_64<br>/usr/bin/javac (<span class=\"hljs-keyword\">for</span> architecture arm64e):  Mach-O 64-bit executable arm64e<br></code></pre></td></tr></table></figure>\n\n<p>下载后安装即可。</p>\n<h1 id=\"安装-nodejs\"><a href=\"#安装-nodejs\" class=\"headerlink\" title=\"安装 nodejs\"></a>安装 nodejs</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Bash\">brew install node<br>(base) matr1x@matr1xdeMacBook-Air ~ % node -v<br>v17.4.0<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"安装-PHP\"><a href=\"#安装-PHP\" class=\"headerlink\" title=\"安装 PHP\"></a>安装 PHP</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Bash\">brew install php<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"Terminal-美化\"><a href=\"#Terminal-美化\" class=\"headerlink\" title=\"Terminal 美化\"></a>Terminal 美化</h1><p>非常简单。 1.下载字体，安装，并将终端字体改为它。</p>\n<ul>\n<li><a href=\"%5Bhttps://github.com/romkatv/powerlevel10k-media/raw/master/MesloLGS%5D(https://github.com/romkatv/powerlevel10k-media/raw/master/MesloLGS\">MesloLGS NF Regular.ttf</a> NF Regular.ttf)</li>\n<li><a href=\"%5Bhttps://github.com/romkatv/powerlevel10k-media/raw/master/MesloLGS%5D(https://github.com/romkatv/powerlevel10k-media/raw/master/MesloLGS\">MesloLGS NF Bold.ttf</a> NF Bold.ttf)</li>\n</ul>\n<ol start=\"2\">\n<li>brew install romkatv/powerlevel10k/powerlevel10k</li>\n<li>echo “source $(brew –prefix)/opt/powerlevel10k/powerlevel10k.zsh-theme” &gt;&gt;~/.zshrc</li>\n<li>p10k configure</li>\n</ol>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/1629942/1644062541913-5319b75a-dff9-46f5-9dd2-9e36c75d4c9d.png#crop=0&crop=0&crop=1&crop=1&id=gh3sH&originHeight=1266&originWidth=2000&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&status=done&style=none&title=\"></p>\n<h1 id=\"安装-oh-my-zsh\"><a href=\"#安装-oh-my-zsh\" class=\"headerlink\" title=\"安装 oh-my-zsh\"></a>安装 oh-my-zsh</h1><p>上网搜一下官网，找到命令，安装即可。</p>\n<blockquote>\n<p>由于被墙，因此推荐国内镜像安装。</p>\n</blockquote>\n<p><a href=\"https://blog.csdn.net/qq_39530754/article/details/104714976\">https://blog.csdn.net/qq_39530754/article/details/104714976</a><br>重新安装主题：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Git\">git clone --depth&#x3D;1 https:&#x2F;&#x2F;gitee.com&#x2F;romkatv&#x2F;powerlevel10k.git $&#123;ZSH_CUSTOM:-$HOME&#x2F;.oh-my-zsh&#x2F;custom&#125;&#x2F;themes&#x2F;powerlevel10k<br></code></pre></td></tr></table></figure>\n\n<p>配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Git\">vim ~.&#x2F;zshrc<br>修改<br>ZSH_THEME&#x3D;&quot;powerlevel10k&#x2F;powerlevel10k&quot;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"安装插件\"><a href=\"#安装插件\" class=\"headerlink\" title=\"安装插件\"></a>安装插件</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Git\">git clone https:&#x2F;&#x2F;github.com&#x2F;zsh-users&#x2F;zsh-autosuggestions $&#123;ZSH_CUSTOM:-~&#x2F;.oh-my-zsh&#x2F;custom&#125;&#x2F;plugins&#x2F;zsh-autosuggestions<br>git clone https:&#x2F;&#x2F;github.com&#x2F;zsh-users&#x2F;zsh-syntax-highlighting $&#123;ZSH_CUSTOM:-~&#x2F;.oh-my-zsh&#x2F;custom&#125;&#x2F;plugins&#x2F;zsh-syntax-highlighting<br></code></pre></td></tr></table></figure>\n\n<p>如果暂时无法 clone，将网址替换成镜像地址再次尝试。</p>\n<ul>\n<li><a href=\"https://link.zhihu.com/?target=https://github.com.cnpmjs.org\">github.com.cnpmjs.org</a></li>\n<li><a href=\"https://link.zhihu.com/?target=https://hub.fastgit.org\">https://hub.fastgit.org</a><blockquote>\n<p>GitHub raw 域名并非 <a href=\"https://link.zhihu.com/?target=http://github.com\">http://github.com</a> 而是 <a href=\"https://link.zhihu.com/?target=http://raw.githubusercontent.com\">http://raw.githubusercontent.com</a>，上方的 GitHub 加速如果不能加速这个域名，那么可以使用 Static CDN 提供的反代服务。<br>将 <a href=\"https://link.zhihu.com/?target=http://raw.githubusercontent.com\">http://raw.githubusercontent.com</a> 替换为 <a href=\"https://link.zhihu.com/?target=http://raw.staticdn.net\">http://raw.staticdn.net</a> 即可加速。</p>\n</blockquote>\n</li>\n</ul>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/1629942/1644062542072-624b1beb-a718-460e-a69a-c5cff8ab8be2.png#crop=0&crop=0&crop=1&crop=1&id=rrLvh&originHeight=738&originWidth=1862&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&status=done&style=none&title=\"></p>\n","categories":[{"name":"mac","path":"api/categories/mac.json"},{"name":"m1","path":"api/categories/m1.json"}],"tags":[{"name":"踩坑教程","path":"api/tags/踩坑教程.json"}]}