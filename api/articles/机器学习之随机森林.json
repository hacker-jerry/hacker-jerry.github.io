{"title":"机器学习之随机森林","slug":"机器学习之随机森林","date":"2021-04-09T12:33:30.000Z","updated":"2021-12-01T06:39:34.165Z","comments":true,"path":"api/articles/机器学习之随机森林.json","realPath":null,"excerpt":"tags: []<br>categories: []<br>cover: “”<br>​这里记录一下 AI 作品赛里接触到的随机森林算法。","covers":["https://cdn.nlark.com/yuque/0/2021/png/1629942/1617972363693-baaf94c2-5e47-47ff-86d7-e1bc85cd37a1.png#height=588&id=XYnoX&name=image.png&originHeight=732&originWidth=837&originalType=binary%E2%88%B6=1&size=369303&status=done&style=none&width=672","https://cdn.nlark.com/yuque/0/2021/svg/1629942/1618020812451-b0b3a075-5dcb-42d8-bf97-78aa34e4b86e.svg#height=18&id=jf86o&originHeight=18&originWidth=19&originalType=binary%E2%88%B6=1&size=0&status=done&style=none&width=19","https://cdn.nlark.com/yuque/0/2021/svg/1629942/1618020812748-d95f3fa5-1a2f-4372-ad0b-78d11ef80423.svg#height=18&id=QMRXL&originHeight=18&originWidth=23&originalType=binary%E2%88%B6=1&size=0&status=done&style=none&width=23","https://cdn.nlark.com/yuque/0/2021/png/1629942/1617972513293-5c77b524-1b14-46a9-8bdc-5efe40377391.png#height=56&id=dVbT7&originHeight=242&originWidth=757&originalType=binary%E2%88%B6=1&size=0&status=done&style=none&width=176","https://cdn.nlark.com/yuque/0/2021/png/1629942/1617972664572-fbc01cef-2c7e-4e45-931d-3a11327035a4.png#height=73&id=NEETK&originHeight=73&originWidth=1080&originalType=binary%E2%88%B6=1&size=0&status=done&style=none&width=1080","https://cdn.nlark.com/yuque/0/2021/png/1629942/1617972824155-5cececa7-b981-44be-a58e-79bf486c2be2.png#height=58&id=idTVC&margin=%5Bobject%20Object%5D&name=image.png&originHeight=77&originWidth=845&originalType=binary%E2%88%B6=1&size=17368&status=done&style=none&width=641","https://cdn.nlark.com/yuque/0/2021/png/1629942/1618020986002-5cc6c40b-f548-44b0-a517-eaecf2615307.png#height=281&id=iUL7X&margin=%5Bobject%20Object%5D&name=image.png&originHeight=561&originWidth=731&originalType=binary%E2%88%B6=1&size=122786&status=done&style=none&width=365.5","https://cdn.nlark.com/yuque/0/2021/png/1629942/1618021152004-95c115e7-19c1-41fa-8768-49351b990a23.png#height=162&id=iOtB0&margin=%5Bobject%20Object%5D&name=image.png&originHeight=323&originWidth=799&originalType=binary%E2%88%B6=1&size=117004&status=done&style=none&width=399.5","https://cdn.nlark.com/yuque/0/2021/png/1629942/1617974379540-03a43f68-4899-4b4d-b3c9-02806cba1744.png#height=271&id=ImDoE&margin=%5Bobject%20Object%5D&name=image.png&originHeight=542&originWidth=777&originalType=binary%E2%88%B6=1&size=81703&status=done&style=none&width=388.5"],"cover":"https://cdn.nlark.com/yuque/0/2021/png/1629942/1617972363693-baaf94c2-5e47-47ff-86d7-e1bc85cd37a1.png#height=588&id=XYnoX&name=image.png&originHeight=732&originWidth=837&originalType=binary%E2%88%B6=1&size=369303&status=done&style=none&width=672","content":"<p>tags: []<br>categories: []<br>cover: “”<br>​</p>\n<hr>\n<p>这里记录一下 AI 作品赛里接触到的随机森林算法。</p>\n<a id=\"more\"></a>\n\n<h1 id=\"决策树\"><a href=\"#决策树\" class=\"headerlink\" title=\"决策树\"></a>决策树</h1><p>随机森林由许多决策树（decision tree）组成，我们可以将决策树视为一系列关于数据的是/否问题，从而最终得出一个预测类别（或回归情况下的连续值）。 这是一个可解释的模型，因为它非常像我们人类进行分类的过程：在我们做出决定之前（在理想世界中），我们会对可用数据进行一系列的询问。<br>当我们训练决策树时到底发生了什么？可视化可以帮助我们更好地理解决策树，这可以通过 Scikit-Learn 的一个功能来实现（详细信息，请查看 notebook 或这篇文章）。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/1629942/1617972363693-baaf94c2-5e47-47ff-86d7-e1bc85cd37a1.png#height=588&id=XYnoX&name=image.png&originHeight=732&originWidth=837&originalType=binary%E2%88%B6=1&size=369303&status=done&style=none&width=672\" alt=\"image.png\"><br>除叶子节点（彩色终端节点）外，所有节点都有 5 个部分：</p>\n<ul>\n<li>基于某个特征的一个值对数据进行的提问，每个提问都有一个真或假的答案可以分裂节点。根据答案，数据点相应地向下移动。</li>\n<li><strong>gini：</strong>节点的 Gini 不纯度。当我们沿着树向下移动时，平均加权基尼不纯度会减少。</li>\n<li><strong>samples</strong>：节点中的观测数据数量。</li>\n<li><strong>value：</strong>每个类中的样本数。例如，根节点中有 2 个样本属于类 0，有 4 个样本属于类 1。</li>\n<li><strong>class：</strong>该节点中大多数点的分类。在叶节点中，即是对节点中所有样本的预测。</li>\n</ul>\n<p><strong>决策树的特征选择</strong>一般有 3 种量化方法：<strong>信息增益、信息增益率、基尼指数</strong>。</p>\n<h2 id=\"信息增益\"><a href=\"#信息增益\" class=\"headerlink\" title=\"信息增益\"></a>信息增益</h2><p>在信息论中，<strong>熵</strong>表示随机变量不确定性的度量。假设随机变量 X 有有限个取值，取值 <img src=\"https://cdn.nlark.com/yuque/0/2021/svg/1629942/1618020812451-b0b3a075-5dcb-42d8-bf97-78aa34e4b86e.svg#height=18&id=jf86o&originHeight=18&originWidth=19&originalType=binary%E2%88%B6=1&size=0&status=done&style=none&width=19\"> 对应的概率为 <img src=\"https://cdn.nlark.com/yuque/0/2021/svg/1629942/1618020812589-b6f620aa-d6a0-4990-8de0-93dcf01f721e.svg#height=18&id=fdcbK&originHeight=18&originWidth=19&originalType=binary%E2%88%B6=1&size=0&status=done&style=none&width=19\"> ，则 X 的熵定义为：<br><img src=\"https://cdn.nlark.com/yuque/0/2021/svg/1629942/1618020812637-4cffb5ec-a16b-4f43-a641-7df43094a5a3.svg#height=62&id=X43jp&originHeight=62&originWidth=196&originalType=binary%E2%88%B6=1&size=0&status=done&style=none&width=196\"><br>如果某件事<strong>一定发生</strong>（太阳东升西落）或<strong>一定不发生</strong>（钓鱼岛是日本的），则概率为 1 或 0，对应的<strong>熵均为 0</strong>。<br>如果某件事可能发生可能不发生（天要下雨，娘要嫁人），概率介于 0 到 1 之间，熵大于 0。<br>由此可见，<strong>熵越大，随机性越大，结果越不确定</strong>。<br>我们再来看一看<strong>条件熵</strong> <img src=\"https://cdn.nlark.com/yuque/0/2021/svg/1629942/1618020812831-53a78260-e1f7-4fe9-bd8b-1b6cbdd6d85d.svg#height=26&id=PpyfP&originHeight=26&originWidth=74&originalType=binary%E2%88%B6=1&size=0&status=done&style=none&width=74\"> ，<strong>表示引入随机变量 Y 对于消除 X 不确定性的程度</strong>。假如 X、Y 相互独立，则 X 的条件熵和熵有相同的值；否则条件熵一定小于熵。<br>明确了这两个概念，理解信息增益就比较方便了。现在我们有一份数据集 D（例如贷款信息登记表）和特征 A（例如年龄），则<strong>A 的信息增益就是 D 本身的熵与特征 A 给定条件下 D 的条件熵之差</strong>，即：<br><img src=\"https://cdn.nlark.com/yuque/0/2021/svg/1629942/1618020812551-89aeeb77-f470-4d5c-8da4-ec55baca3dff.svg#height=26&id=EE8pQ&originHeight=26&originWidth=248&originalType=binary%E2%88%B6=1&size=0&status=done&style=none&width=248\"><br>数据集 D 的熵是一个常量。信息增益越大，表示条件熵 <img src=\"https://cdn.nlark.com/yuque/0/2021/svg/1629942/1618020812738-fffb9065-834c-444d-9a51-8881c89e799f.svg#height=26&id=tYvso&originHeight=26&originWidth=74&originalType=binary%E2%88%B6=1&size=0&status=done&style=none&width=74\"> 越小，A 消除 D 的不确定性的功劳越大。<br>所以要<strong>优先选择信息增益大的特征，它们具有更强的分类能力。</strong>由此生成决策树，称为<strong>ID3 算法</strong>。</p>\n<h2 id=\"信息增益率\"><a href=\"#信息增益率\" class=\"headerlink\" title=\"信息增益率\"></a><strong>信息增益率</strong></h2><p>当某个特征具有多种候选值时，信息增益容易偏大，造成误差。引入信息增益率可以校正这一问题。<br>信息增益率 <img src=\"https://cdn.nlark.com/yuque/0/2021/svg/1629942/1618020812748-d95f3fa5-1a2f-4372-ad0b-78d11ef80423.svg#height=18&id=QMRXL&originHeight=18&originWidth=23&originalType=binary%E2%88%B6=1&size=0&status=done&style=none&width=23\"> 为信息增益与数据集 D 的熵之比：<br><img src=\"https://cdn.nlark.com/yuque/0/2021/svg/1629942/1618020812852-34299e55-7911-4a19-a1bc-be76774d1af0.svg#height=59&id=lstWO&originHeight=59&originWidth=186&originalType=binary%E2%88%B6=1&size=0&status=done&style=none&width=186\"><br>同样，我们<strong>优先选择信息增益率最大的特征，</strong>由此生成决策树，称为<strong>C4.5 算法。</strong><br><strong>​</strong></p>\n<h2 id=\"基尼不纯度（Gini-Impurity）\"><a href=\"#基尼不纯度（Gini-Impurity）\" class=\"headerlink\" title=\"基尼不纯度（Gini Impurity）\"></a><strong>基尼不纯度（Gini Impurity）</strong></h2><p>节点的基尼不纯度是指，根据节点中样本的分布对样本分类时，从节点中随机选择的样本被分错的概率。<br>如，在根节点中，根据节点中的样本标签有 44.4％的可能性错误地对某个随机选择的数据点进行分类。可以      使用以下等式得出这个值：</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/1629942/1617972513293-5c77b524-1b14-46a9-8bdc-5efe40377391.png#height=56&id=dVbT7&originHeight=242&originWidth=757&originalType=binary%E2%88%B6=1&size=0&status=done&style=none&width=176\"><br>节点 n 的基尼不纯度是<strong>1 减去每个类（二元分类任务中是 2）的样本比例的平方和</strong>。</p>\n<p>例如根节点的基尼不纯度：<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/1629942/1617972664572-fbc01cef-2c7e-4e45-931d-3a11327035a4.png#height=73&id=NEETK&originHeight=73&originWidth=1080&originalType=binary%E2%88%B6=1&size=0&status=done&style=none&width=1080\"></p>\n<p>在每个节点，决策树要在所有特征中搜索用于拆分的值，从而可以<strong>最大限度地减少基尼不纯度</strong>。（拆分节点的另一个<strong>替代方法</strong>是使用<strong>信息增益</strong>）。<br>然后，它以贪婪递归的过程重复这种拆分，直到达到最大深度，或者每个节点仅包含同类的样本。<br>树每层的加权总基尼不纯度（每个节点的基尼不纯度按照该节点中来自父节点的点的比例进行加权）一定是减少的。在树的第二层，总加权基尼不纯度值为 0.333：<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/1629942/1617972824155-5cececa7-b981-44be-a58e-79bf486c2be2.png#height=58&id=idTVC&margin=%5Bobject%20Object%5D&name=image.png&originHeight=77&originWidth=845&originalType=binary%E2%88%B6=1&size=17368&status=done&style=none&width=641\" alt=\"image.png\"><br>最终，最后一层的加权总基尼不纯度变为 0，也意味着每个节点都是完全纯粹的，从节点中随机选择的点不会被错误分类。虽然这一切看起来挺好的，但这意味着模型可能过拟合，因为所有节点都是仅仅使用训练数据构建的。</p>\n<h2 id=\"决策树剪枝\"><a href=\"#决策树剪枝\" class=\"headerlink\" title=\"决策树剪枝\"></a>决策树剪枝</h2><p>决策树生成算法递归产生一棵决策树，直到结束划分。什么时候结束呢？</p>\n<ul>\n<li>样本属于同一种类型</li>\n<li>没有特征可以分割</li>\n</ul>\n<p>这样得到的决策树往往对训练数据分类非常精准，但是对于未知数据表现比较差。<br>原因在于基于训练集构造的决策树过于复杂，<strong>产生过拟合</strong>。所以需要对决策树简化，砍掉多余的分支，提高泛化能力。<br>决策树剪枝一般有两种方法：</p>\n<ul>\n<li><strong>预剪枝</strong>：在树的生成过程中剪枝。<strong>基于贪心策略，可能造成局部最优</strong></li>\n<li><strong>后剪枝</strong>：等树全部生成后剪枝。<strong>运算量较大，但是比较精准</strong></li>\n</ul>\n<p>决策树剪枝往往通过<strong>极小化决策树整体的损失函数实现</strong>。</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/1629942/1618020986002-5cc6c40b-f548-44b0-a517-eaecf2615307.png#height=281&id=iUL7X&margin=%5Bobject%20Object%5D&name=image.png&originHeight=561&originWidth=731&originalType=binary%E2%88%B6=1&size=122786&status=done&style=none&width=365.5\" alt=\"image.png\"><br>假设树 T 有|T|个叶子节点，某一个叶子节点 t 上有 <img src=\"https://cdn.nlark.com/yuque/0/2021/svg/1629942/1618021002264-6488bff2-9519-4ecc-bbdd-6f2f86c34189.svg#height=23&id=p7K03&originHeight=23&originWidth=24&originalType=binary%E2%88%B6=1&size=0&status=done&style=none&width=24\"> 个样本，其中 k 类的样本有 <img src=\"https://cdn.nlark.com/yuque/0/2021/svg/1629942/1618021002341-9e586245-0eb4-43f1-ab4b-e9d2f1514bd9.svg#height=23&id=Jvs0Y&originHeight=23&originWidth=32&originalType=binary%E2%88%B6=1&size=0&status=done&style=none&width=32\"> 个，<img src=\"https://cdn.nlark.com/yuque/0/2021/svg/1629942/1618021002330-b42005d2-d60f-4e39-927c-852a31a4810e.svg#height=26&id=W8yRc&originHeight=26&originWidth=56&originalType=binary%E2%88%B6=1&size=0&status=done&style=none&width=56\"> 为叶子节点 t 的熵， <img src=\"https://cdn.nlark.com/yuque/0/2021/svg/1629942/1618021002461-670ab097-97d8-4674-b83a-a27eed267988.svg#height=21&id=Ihqmy&originHeight=21&originWidth=52&originalType=binary%E2%88%B6=1&size=0&status=done&style=none&width=52\"> 是参数，则决策树的<strong>损失函数</strong>定义为：<br><img src=\"https://cdn.nlark.com/yuque/0/2021/svg/1629942/1618021002388-eb487e2e-6368-4459-b65e-92652294e8b5.svg#height=69&id=GEe9U&originHeight=69&originWidth=264&originalType=binary%E2%88%B6=1&size=0&status=done&style=none&width=264\"><br>其中熵为：<br><img src=\"https://cdn.nlark.com/yuque/0/2021/svg/1629942/1618021002407-578e900c-5b42-4014-a24e-f93208a1d529.svg#height=57&id=M7VkN&originHeight=57&originWidth=246&originalType=binary%E2%88%B6=1&size=0&status=done&style=none&width=246\"><br><strong>损失函数第一项为训练误差，第二项为模型复杂度，</strong>用参数 <img src=\"https://cdn.nlark.com/yuque/0/2021/svg/1629942/1618021002545-b6955ef3-85ad-4594-9a5e-f5a27be46475.svg#height=15&id=JPvdT&originHeight=15&originWidth=13&originalType=binary%E2%88%B6=1&size=0&status=done&style=none&width=13\"> 来衡量二者的比重。</p>\n<h2 id=\"CART-算法\"><a href=\"#CART-算法\" class=\"headerlink\" title=\"CART 算法\"></a>CART 算法</h2><p>CART 表示分类回归决策树，同样由特征选择、树的生成及剪枝组成，可以处理分类和回归任务。<br>相比之下，<strong>ID3 和 C4.5 算法只能处理分类任务</strong>。<br>CART 假设决策树是二叉树，内部结点特征的取值为“是”和“否”，依次递归地二分每个特征。<br>CART 对<strong>回归树</strong>采用<strong>平方误差</strong>最小化准则<strong>，</strong>对<strong>分类树</strong>用<strong>基尼指数</strong>最小化准则。</p>\n<h2 id=\"过拟合–为什么森林比一棵树更好\"><a href=\"#过拟合–为什么森林比一棵树更好\" class=\"headerlink\" title=\"过拟合–为什么森林比一棵树更好\"></a>过拟合–为什么森林比一棵树更好</h2><p><strong>因为这棵树是在训练数据上没有犯错，我们没有限制最大深度（树的层数），因此泛化能力差。</strong><br>过拟合发生在当我们有一个非常灵活的模型（模型具有高能力）时，其本质上是通过紧密拟合来记住训练数据。这样的问题是模型不仅学到了训练数据中的实际关系，还学习了存在的噪声。灵活的模型具有高方差<strong>（variance）</strong>，因为学到的参数（例如决策树的结构）将随着训练数据的不同而变化很大。</p>\n<p>当我们<strong>不限制最大深度时决策树容易过拟合的原因</strong>是它<strong>具有无限的灵活性</strong>，这意味着它可以持续生长，直到它为每个单独的观察点都生成一个叶节点，<strong>达到完美地分类</strong>。<br>如果返回到之前决策树的图像并将最大深度限制为 2（仅进行一次拆分），则分类不再 100％正确。我们减少了决策树的方差，但代价是增加了偏差。<br><strong>限制树的深度</strong>可以<strong>减少方差（好）</strong>并且<strong>增加偏差（坏）</strong>，一种替代方案是，我们可以将许多决策树组合成一个称为随机森林的集成模型（ensemble model）。<br>​</p>\n<h1 id=\"随机森林\"><a href=\"#随机森林\" class=\"headerlink\" title=\"随机森林\"></a>随机森林</h1><p>我们将使用<strong>CART 决策树</strong>作为<strong>弱学习器的 bagging 方法</strong>称为<strong>随机森林</strong>。<br>bagging 是一种在原始数据集上，通过<strong>有放回抽样</strong>分别选出 k 个新数据集，来训练分类器的集成算法。分类器之间没有依赖关系。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/1629942/1618021152004-95c115e7-19c1-41fa-8768-49351b990a23.png#height=162&id=iOtB0&margin=%5Bobject%20Object%5D&name=image.png&originHeight=323&originWidth=799&originalType=binary%E2%88%B6=1&size=117004&status=done&style=none&width=399.5\" alt=\"image.png\"><br>随机森林是由许多决策树组成的模型。这个模型不是简单地平均所有树（我们可以称之为“森林”）的预测，而是使用了两个关键概念，名字中的随机二字也是由此而来：</p>\n<ul>\n<li>在构建树时对训练数据点进行随机抽样</li>\n<li>分割节点时考虑特征的随机子集</li>\n</ul>\n<h2 id=\"随机抽样训练观测数据\"><a href=\"#随机抽样训练观测数据\" class=\"headerlink\" title=\"随机抽样训练观测数据\"></a><strong>随机抽样训练观测数据</strong></h2><p>在训练时，随机森林中的<strong>每棵树</strong>都会<strong>从数据点的随机样本中学习</strong>。<strong>样本被有放回的抽样</strong>，称为<strong>自助抽样法</strong>（<strong>bootstrapping</strong>），这意味着<strong>一些样本将在一棵树中被多次使用</strong>。背后的<strong>想法</strong>是<strong>在不同样本上训练每棵树，尽管每棵树相对于特定训练数据集可能具有高方差，但总体而言，整个森林将具有较低的方差，同时不以增加偏差为代价。</strong><br>在测试时，通过<strong>平均每个决策树的预测</strong>来进行预测。这种<strong>在不同的自助抽样数据子集上训练单个学习器，然后对预测进行平均的过程称为 bagging</strong>，是 bootstrap aggregating 的缩写。</p>\n<h2 id=\"用于拆分节点的随机特征子集\"><a href=\"#用于拆分节点的随机特征子集\" class=\"headerlink\" title=\"用于拆分节点的随机特征子集\"></a><strong>用于拆分节点的随机特征子集</strong></h2><p>随机森林中的另一个主要概念是，<strong>只考虑所有特征的一个子集来拆分每个决策树中的每个节点</strong>。通常将<strong>其设置为 sqrt（n_features）</strong>以进行分类，这意味着<strong>如果有 16 个特征</strong>，则在<strong>每个树中的每个节点处</strong>，<strong>只考虑 4 个随机特征</strong>来拆分节点。（随机森林也可以在每个节点处考虑所有的特征，如回归中常见的那样。这些选项可以在 Scikit-Learn Random Forest 的实现中控制）。<br>如果你能理解一棵单独的决策树，bagging 的理念，以及随机的特征子集，那么你对随机森林的工作方式也就有了很好的理解：</p>\n<blockquote>\n<p>随机森林将成百上千棵决策树组合在一起，在略微不同的观察集上训练每个决策树，在每棵树中仅考虑有限数量的特征来拆分节点。<strong>随机森林的最终预测是通过平均每棵树的预测来得到的</strong>。</p>\n</blockquote>\n<p>想理解为什么随机森林优于单一的决策树，请想象以下场景：你要判断特斯拉的股票是否上涨，现在你身边有十几位对该公司都没有先验知识的分析师。每个分析师都有较低的偏见，因为他们没有任何假设，并且可以从新闻报道的数据集中学习。<br>这似乎是一个理想的情况，但问题是报道中除了真实的信号外也可能包含噪音。 因为分析师们完全根据数据做出预测，即他们具有很高的灵活性，也就意味着他们可能会被无关的信息所左右。分析师们可能会从同一数据集中得出不同的预测。此外，如果提供不同的报道训练集，每个分析师都有高方差，并得出截然不同的预测。<br>解决方案是不依赖于任何一个人，而是汇集每个分析师的投票。此外，与随机森林一样，允许每个分析师仅使用一部分报道，并希望通过采样来消除噪声信息的影响。在现实生活中，我们也依赖于多种信息来源（从不信任亚马逊的单独评论），因此，不仅决策树的思想很直观，而且将它们组合在一起成为随机森林的想法同样如此。</p>\n<h2 id=\"算法特点\"><a href=\"#算法特点\" class=\"headerlink\" title=\"算法特点\"></a>算法特点</h2><p>由于随机性，<strong>随机森林对于降低模型方差效果显著</strong>。故随机森林一般不需要额外剪枝，就能取得较好的泛化性能。</p>\n<p>相对而言，模型对于训练集的拟合程度就会差一些，相比于基于 boosting 的 GBDT 模型，偏差会大一些。</p>\n<p>另外，<strong>随机森林中的树一般会比较深，以尽可能地降低偏差；而 GBDT 树的深度会比较浅，通过减少模型复杂度来降低方差</strong>。</p>\n<p>最后，我们总结一下随机森林都有哪些优点：</p>\n<ul>\n<li>采用了集成算法，精度优于大多数单模型算法</li>\n<li>在测试集上表现良好，两个随机性的引入降低了过拟合风险</li>\n<li>树的组合可以让随机森林处理非线性数据</li>\n<li>训练过程中能检测特征重要性，是常见的<strong>特征筛选</strong>方法</li>\n<li>每棵树可以同时生成，并行效率高，训练速度快</li>\n<li>可以自动处理缺省值</li>\n</ul>\n<h1 id=\"模型评价\"><a href=\"#模型评价\" class=\"headerlink\" title=\"模型评价\"></a>模型评价</h1><p>AUC(area under the curve)是 ROC 曲线下的面积。所以，在理解 AUC 之前，要先了解 ROC 是什么。而 ROC 的计算又需要借助混淆矩阵。</p>\n<blockquote>\n<p>AUC 是一个从 0（最差）到 1（最佳）的度量值，</p>\n</blockquote>\n<p>我们还可以绘制单个决策树（顶部）和随机森林（底部）的 ROC 曲线。<strong>靠近左上角的曲线代表着更好的模型：</strong><br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/1629942/1617974379540-03a43f68-4899-4b4d-b3c9-02806cba1744.png#height=271&id=ImDoE&margin=%5Bobject%20Object%5D&name=image.png&originHeight=542&originWidth=777&originalType=binary%E2%88%B6=1&size=81703&status=done&style=none&width=388.5\" alt=\"image.png\"></p>\n<h1 id=\"问答\"><a href=\"#问答\" class=\"headerlink\" title=\"问答\"></a>问答</h1><h2 id=\"为什么要随机抽样训练集？\"><a href=\"#为什么要随机抽样训练集？\" class=\"headerlink\" title=\"为什么要随机抽样训练集？\"></a><strong>为什么要随机抽样训练集？</strong></h2><p>如果不进行随机抽样，每棵树的训练集都一样，那么最终训练出的树分类结果也是完全一样的，这样的话完全没有 bagging 的必要；</p>\n<h2 id=\"为什么要有放回地抽样？\"><a href=\"#为什么要有放回地抽样？\" class=\"headerlink\" title=\"为什么要有放回地抽样？\"></a><strong>为什么要有放回地抽样？</strong></h2><p>如果不是有放回的抽样，那么每棵树的训练样本都是不同的，都是没有交集的，这样每棵树都是”有偏的”，都是绝对”片面的”（当然这样说可能不对），也就是说每棵树训练出来都是有很大的差异的；而随机森林最后分类取决于多棵树（弱分类器）的投票表决，这种表决应该是”求同”，因此使用完全不同的训练集来训练每棵树这样对最终分类结果是没有帮助的，这样无异于是”盲人摸象”。</p>\n<h2 id=\"随机森林的随机体现在哪里？\"><a href=\"#随机森林的随机体现在哪里？\" class=\"headerlink\" title=\"随机森林的随机体现在哪里？\"></a><strong>随机森林的随机体现在哪里？</strong></h2><p>1）如果训练集大小为 N，对于每棵树而言，随机且有放回地从训练集中的抽取 N 个训练样本（这种采样方式称为 bootstrap sample 方法），作为该树的训练集；</p>\n<blockquote>\n<p>从这里我们可以知道：每棵树的训练集都是不同的，而且里面包含重复的训练样本</p>\n</blockquote>\n<p>2）如果每个样本的特征维度为 M，指定一个常数 m&lt;&lt;M，随机地从 M 个特征中选取 m 个特征子集，每次树进行分裂时，从这 m 个特征中选择最优的；<br>​</p>\n<h2 id=\"这两种随机有什么好处？\"><a href=\"#这两种随机有什么好处？\" class=\"headerlink\" title=\"这两种随机有什么好处？\"></a><strong>这两种随机有什么好处？</strong></h2><p>两个随机性的引入对随机森林的分类性能至关重要。由于它们的引入，使得随机森林不容易陷入过拟合，并且具有很好得抗噪能力（比如：对缺省值不敏感）。</p>\n<h2 id=\"随机森林分类的错误率和什么有关？\"><a href=\"#随机森林分类的错误率和什么有关？\" class=\"headerlink\" title=\"随机森林分类的错误率和什么有关？\"></a><strong>随机森林分类的错误率和什么有关？</strong></h2><ul>\n<li>森林中任意两棵树的相关性：相关性越大，错误率越大；</li>\n<li>森林中每棵树的分类能力：每棵树的分类能力越强，整个森林的错误率越低。</li>\n</ul>\n<p>​</p>\n<p>减小特征选择个数 m，树的相关性和分类能力也会相应的降低；增大 m，两者也会随之增大。所以关键问题是如何选择最优的 m（或者是范围），这也是随机森林唯一的一个参数。<br>​</p>\n","more":"<h1 id=\"决策树\"><a href=\"#决策树\" class=\"headerlink\" title=\"决策树\"></a>决策树</h1><p>随机森林由许多决策树（decision tree）组成，我们可以将决策树视为一系列关于数据的是/否问题，从而最终得出一个预测类别（或回归情况下的连续值）。 这是一个可解释的模型，因为它非常像我们人类进行分类的过程：在我们做出决定之前（在理想世界中），我们会对可用数据进行一系列的询问。<br>当我们训练决策树时到底发生了什么？可视化可以帮助我们更好地理解决策树，这可以通过 Scikit-Learn 的一个功能来实现（详细信息，请查看 notebook 或这篇文章）。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/1629942/1617972363693-baaf94c2-5e47-47ff-86d7-e1bc85cd37a1.png#height=588&id=XYnoX&name=image.png&originHeight=732&originWidth=837&originalType=binary%E2%88%B6=1&size=369303&status=done&style=none&width=672\" alt=\"image.png\"><br>除叶子节点（彩色终端节点）外，所有节点都有 5 个部分：</p>\n<ul>\n<li>基于某个特征的一个值对数据进行的提问，每个提问都有一个真或假的答案可以分裂节点。根据答案，数据点相应地向下移动。</li>\n<li><strong>gini：</strong>节点的 Gini 不纯度。当我们沿着树向下移动时，平均加权基尼不纯度会减少。</li>\n<li><strong>samples</strong>：节点中的观测数据数量。</li>\n<li><strong>value：</strong>每个类中的样本数。例如，根节点中有 2 个样本属于类 0，有 4 个样本属于类 1。</li>\n<li><strong>class：</strong>该节点中大多数点的分类。在叶节点中，即是对节点中所有样本的预测。</li>\n</ul>\n<p><strong>决策树的特征选择</strong>一般有 3 种量化方法：<strong>信息增益、信息增益率、基尼指数</strong>。</p>\n<h2 id=\"信息增益\"><a href=\"#信息增益\" class=\"headerlink\" title=\"信息增益\"></a>信息增益</h2><p>在信息论中，<strong>熵</strong>表示随机变量不确定性的度量。假设随机变量 X 有有限个取值，取值 <img src=\"https://cdn.nlark.com/yuque/0/2021/svg/1629942/1618020812451-b0b3a075-5dcb-42d8-bf97-78aa34e4b86e.svg#height=18&id=jf86o&originHeight=18&originWidth=19&originalType=binary%E2%88%B6=1&size=0&status=done&style=none&width=19\"> 对应的概率为 <img src=\"https://cdn.nlark.com/yuque/0/2021/svg/1629942/1618020812589-b6f620aa-d6a0-4990-8de0-93dcf01f721e.svg#height=18&id=fdcbK&originHeight=18&originWidth=19&originalType=binary%E2%88%B6=1&size=0&status=done&style=none&width=19\"> ，则 X 的熵定义为：<br><img src=\"https://cdn.nlark.com/yuque/0/2021/svg/1629942/1618020812637-4cffb5ec-a16b-4f43-a641-7df43094a5a3.svg#height=62&id=X43jp&originHeight=62&originWidth=196&originalType=binary%E2%88%B6=1&size=0&status=done&style=none&width=196\"><br>如果某件事<strong>一定发生</strong>（太阳东升西落）或<strong>一定不发生</strong>（钓鱼岛是日本的），则概率为 1 或 0，对应的<strong>熵均为 0</strong>。<br>如果某件事可能发生可能不发生（天要下雨，娘要嫁人），概率介于 0 到 1 之间，熵大于 0。<br>由此可见，<strong>熵越大，随机性越大，结果越不确定</strong>。<br>我们再来看一看<strong>条件熵</strong> <img src=\"https://cdn.nlark.com/yuque/0/2021/svg/1629942/1618020812831-53a78260-e1f7-4fe9-bd8b-1b6cbdd6d85d.svg#height=26&id=PpyfP&originHeight=26&originWidth=74&originalType=binary%E2%88%B6=1&size=0&status=done&style=none&width=74\"> ，<strong>表示引入随机变量 Y 对于消除 X 不确定性的程度</strong>。假如 X、Y 相互独立，则 X 的条件熵和熵有相同的值；否则条件熵一定小于熵。<br>明确了这两个概念，理解信息增益就比较方便了。现在我们有一份数据集 D（例如贷款信息登记表）和特征 A（例如年龄），则<strong>A 的信息增益就是 D 本身的熵与特征 A 给定条件下 D 的条件熵之差</strong>，即：<br><img src=\"https://cdn.nlark.com/yuque/0/2021/svg/1629942/1618020812551-89aeeb77-f470-4d5c-8da4-ec55baca3dff.svg#height=26&id=EE8pQ&originHeight=26&originWidth=248&originalType=binary%E2%88%B6=1&size=0&status=done&style=none&width=248\"><br>数据集 D 的熵是一个常量。信息增益越大，表示条件熵 <img src=\"https://cdn.nlark.com/yuque/0/2021/svg/1629942/1618020812738-fffb9065-834c-444d-9a51-8881c89e799f.svg#height=26&id=tYvso&originHeight=26&originWidth=74&originalType=binary%E2%88%B6=1&size=0&status=done&style=none&width=74\"> 越小，A 消除 D 的不确定性的功劳越大。<br>所以要<strong>优先选择信息增益大的特征，它们具有更强的分类能力。</strong>由此生成决策树，称为<strong>ID3 算法</strong>。</p>\n<h2 id=\"信息增益率\"><a href=\"#信息增益率\" class=\"headerlink\" title=\"信息增益率\"></a><strong>信息增益率</strong></h2><p>当某个特征具有多种候选值时，信息增益容易偏大，造成误差。引入信息增益率可以校正这一问题。<br>信息增益率 <img src=\"https://cdn.nlark.com/yuque/0/2021/svg/1629942/1618020812748-d95f3fa5-1a2f-4372-ad0b-78d11ef80423.svg#height=18&id=QMRXL&originHeight=18&originWidth=23&originalType=binary%E2%88%B6=1&size=0&status=done&style=none&width=23\"> 为信息增益与数据集 D 的熵之比：<br><img src=\"https://cdn.nlark.com/yuque/0/2021/svg/1629942/1618020812852-34299e55-7911-4a19-a1bc-be76774d1af0.svg#height=59&id=lstWO&originHeight=59&originWidth=186&originalType=binary%E2%88%B6=1&size=0&status=done&style=none&width=186\"><br>同样，我们<strong>优先选择信息增益率最大的特征，</strong>由此生成决策树，称为<strong>C4.5 算法。</strong><br><strong>​</strong></p>\n<h2 id=\"基尼不纯度（Gini-Impurity）\"><a href=\"#基尼不纯度（Gini-Impurity）\" class=\"headerlink\" title=\"基尼不纯度（Gini Impurity）\"></a><strong>基尼不纯度（Gini Impurity）</strong></h2><p>节点的基尼不纯度是指，根据节点中样本的分布对样本分类时，从节点中随机选择的样本被分错的概率。<br>如，在根节点中，根据节点中的样本标签有 44.4％的可能性错误地对某个随机选择的数据点进行分类。可以      使用以下等式得出这个值：</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/1629942/1617972513293-5c77b524-1b14-46a9-8bdc-5efe40377391.png#height=56&id=dVbT7&originHeight=242&originWidth=757&originalType=binary%E2%88%B6=1&size=0&status=done&style=none&width=176\"><br>节点 n 的基尼不纯度是<strong>1 减去每个类（二元分类任务中是 2）的样本比例的平方和</strong>。</p>\n<p>例如根节点的基尼不纯度：<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/1629942/1617972664572-fbc01cef-2c7e-4e45-931d-3a11327035a4.png#height=73&id=NEETK&originHeight=73&originWidth=1080&originalType=binary%E2%88%B6=1&size=0&status=done&style=none&width=1080\"></p>\n<p>在每个节点，决策树要在所有特征中搜索用于拆分的值，从而可以<strong>最大限度地减少基尼不纯度</strong>。（拆分节点的另一个<strong>替代方法</strong>是使用<strong>信息增益</strong>）。<br>然后，它以贪婪递归的过程重复这种拆分，直到达到最大深度，或者每个节点仅包含同类的样本。<br>树每层的加权总基尼不纯度（每个节点的基尼不纯度按照该节点中来自父节点的点的比例进行加权）一定是减少的。在树的第二层，总加权基尼不纯度值为 0.333：<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/1629942/1617972824155-5cececa7-b981-44be-a58e-79bf486c2be2.png#height=58&id=idTVC&margin=%5Bobject%20Object%5D&name=image.png&originHeight=77&originWidth=845&originalType=binary%E2%88%B6=1&size=17368&status=done&style=none&width=641\" alt=\"image.png\"><br>最终，最后一层的加权总基尼不纯度变为 0，也意味着每个节点都是完全纯粹的，从节点中随机选择的点不会被错误分类。虽然这一切看起来挺好的，但这意味着模型可能过拟合，因为所有节点都是仅仅使用训练数据构建的。</p>\n<h2 id=\"决策树剪枝\"><a href=\"#决策树剪枝\" class=\"headerlink\" title=\"决策树剪枝\"></a>决策树剪枝</h2><p>决策树生成算法递归产生一棵决策树，直到结束划分。什么时候结束呢？</p>\n<ul>\n<li>样本属于同一种类型</li>\n<li>没有特征可以分割</li>\n</ul>\n<p>这样得到的决策树往往对训练数据分类非常精准，但是对于未知数据表现比较差。<br>原因在于基于训练集构造的决策树过于复杂，<strong>产生过拟合</strong>。所以需要对决策树简化，砍掉多余的分支，提高泛化能力。<br>决策树剪枝一般有两种方法：</p>\n<ul>\n<li><strong>预剪枝</strong>：在树的生成过程中剪枝。<strong>基于贪心策略，可能造成局部最优</strong></li>\n<li><strong>后剪枝</strong>：等树全部生成后剪枝。<strong>运算量较大，但是比较精准</strong></li>\n</ul>\n<p>决策树剪枝往往通过<strong>极小化决策树整体的损失函数实现</strong>。</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/1629942/1618020986002-5cc6c40b-f548-44b0-a517-eaecf2615307.png#height=281&id=iUL7X&margin=%5Bobject%20Object%5D&name=image.png&originHeight=561&originWidth=731&originalType=binary%E2%88%B6=1&size=122786&status=done&style=none&width=365.5\" alt=\"image.png\"><br>假设树 T 有|T|个叶子节点，某一个叶子节点 t 上有 <img src=\"https://cdn.nlark.com/yuque/0/2021/svg/1629942/1618021002264-6488bff2-9519-4ecc-bbdd-6f2f86c34189.svg#height=23&id=p7K03&originHeight=23&originWidth=24&originalType=binary%E2%88%B6=1&size=0&status=done&style=none&width=24\"> 个样本，其中 k 类的样本有 <img src=\"https://cdn.nlark.com/yuque/0/2021/svg/1629942/1618021002341-9e586245-0eb4-43f1-ab4b-e9d2f1514bd9.svg#height=23&id=Jvs0Y&originHeight=23&originWidth=32&originalType=binary%E2%88%B6=1&size=0&status=done&style=none&width=32\"> 个，<img src=\"https://cdn.nlark.com/yuque/0/2021/svg/1629942/1618021002330-b42005d2-d60f-4e39-927c-852a31a4810e.svg#height=26&id=W8yRc&originHeight=26&originWidth=56&originalType=binary%E2%88%B6=1&size=0&status=done&style=none&width=56\"> 为叶子节点 t 的熵， <img src=\"https://cdn.nlark.com/yuque/0/2021/svg/1629942/1618021002461-670ab097-97d8-4674-b83a-a27eed267988.svg#height=21&id=Ihqmy&originHeight=21&originWidth=52&originalType=binary%E2%88%B6=1&size=0&status=done&style=none&width=52\"> 是参数，则决策树的<strong>损失函数</strong>定义为：<br><img src=\"https://cdn.nlark.com/yuque/0/2021/svg/1629942/1618021002388-eb487e2e-6368-4459-b65e-92652294e8b5.svg#height=69&id=GEe9U&originHeight=69&originWidth=264&originalType=binary%E2%88%B6=1&size=0&status=done&style=none&width=264\"><br>其中熵为：<br><img src=\"https://cdn.nlark.com/yuque/0/2021/svg/1629942/1618021002407-578e900c-5b42-4014-a24e-f93208a1d529.svg#height=57&id=M7VkN&originHeight=57&originWidth=246&originalType=binary%E2%88%B6=1&size=0&status=done&style=none&width=246\"><br><strong>损失函数第一项为训练误差，第二项为模型复杂度，</strong>用参数 <img src=\"https://cdn.nlark.com/yuque/0/2021/svg/1629942/1618021002545-b6955ef3-85ad-4594-9a5e-f5a27be46475.svg#height=15&id=JPvdT&originHeight=15&originWidth=13&originalType=binary%E2%88%B6=1&size=0&status=done&style=none&width=13\"> 来衡量二者的比重。</p>\n<h2 id=\"CART-算法\"><a href=\"#CART-算法\" class=\"headerlink\" title=\"CART 算法\"></a>CART 算法</h2><p>CART 表示分类回归决策树，同样由特征选择、树的生成及剪枝组成，可以处理分类和回归任务。<br>相比之下，<strong>ID3 和 C4.5 算法只能处理分类任务</strong>。<br>CART 假设决策树是二叉树，内部结点特征的取值为“是”和“否”，依次递归地二分每个特征。<br>CART 对<strong>回归树</strong>采用<strong>平方误差</strong>最小化准则<strong>，</strong>对<strong>分类树</strong>用<strong>基尼指数</strong>最小化准则。</p>\n<h2 id=\"过拟合–为什么森林比一棵树更好\"><a href=\"#过拟合–为什么森林比一棵树更好\" class=\"headerlink\" title=\"过拟合–为什么森林比一棵树更好\"></a>过拟合–为什么森林比一棵树更好</h2><p><strong>因为这棵树是在训练数据上没有犯错，我们没有限制最大深度（树的层数），因此泛化能力差。</strong><br>过拟合发生在当我们有一个非常灵活的模型（模型具有高能力）时，其本质上是通过紧密拟合来记住训练数据。这样的问题是模型不仅学到了训练数据中的实际关系，还学习了存在的噪声。灵活的模型具有高方差<strong>（variance）</strong>，因为学到的参数（例如决策树的结构）将随着训练数据的不同而变化很大。</p>\n<p>当我们<strong>不限制最大深度时决策树容易过拟合的原因</strong>是它<strong>具有无限的灵活性</strong>，这意味着它可以持续生长，直到它为每个单独的观察点都生成一个叶节点，<strong>达到完美地分类</strong>。<br>如果返回到之前决策树的图像并将最大深度限制为 2（仅进行一次拆分），则分类不再 100％正确。我们减少了决策树的方差，但代价是增加了偏差。<br><strong>限制树的深度</strong>可以<strong>减少方差（好）</strong>并且<strong>增加偏差（坏）</strong>，一种替代方案是，我们可以将许多决策树组合成一个称为随机森林的集成模型（ensemble model）。<br>​</p>\n<h1 id=\"随机森林\"><a href=\"#随机森林\" class=\"headerlink\" title=\"随机森林\"></a>随机森林</h1><p>我们将使用<strong>CART 决策树</strong>作为<strong>弱学习器的 bagging 方法</strong>称为<strong>随机森林</strong>。<br>bagging 是一种在原始数据集上，通过<strong>有放回抽样</strong>分别选出 k 个新数据集，来训练分类器的集成算法。分类器之间没有依赖关系。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/1629942/1618021152004-95c115e7-19c1-41fa-8768-49351b990a23.png#height=162&id=iOtB0&margin=%5Bobject%20Object%5D&name=image.png&originHeight=323&originWidth=799&originalType=binary%E2%88%B6=1&size=117004&status=done&style=none&width=399.5\" alt=\"image.png\"><br>随机森林是由许多决策树组成的模型。这个模型不是简单地平均所有树（我们可以称之为“森林”）的预测，而是使用了两个关键概念，名字中的随机二字也是由此而来：</p>\n<ul>\n<li>在构建树时对训练数据点进行随机抽样</li>\n<li>分割节点时考虑特征的随机子集</li>\n</ul>\n<h2 id=\"随机抽样训练观测数据\"><a href=\"#随机抽样训练观测数据\" class=\"headerlink\" title=\"随机抽样训练观测数据\"></a><strong>随机抽样训练观测数据</strong></h2><p>在训练时，随机森林中的<strong>每棵树</strong>都会<strong>从数据点的随机样本中学习</strong>。<strong>样本被有放回的抽样</strong>，称为<strong>自助抽样法</strong>（<strong>bootstrapping</strong>），这意味着<strong>一些样本将在一棵树中被多次使用</strong>。背后的<strong>想法</strong>是<strong>在不同样本上训练每棵树，尽管每棵树相对于特定训练数据集可能具有高方差，但总体而言，整个森林将具有较低的方差，同时不以增加偏差为代价。</strong><br>在测试时，通过<strong>平均每个决策树的预测</strong>来进行预测。这种<strong>在不同的自助抽样数据子集上训练单个学习器，然后对预测进行平均的过程称为 bagging</strong>，是 bootstrap aggregating 的缩写。</p>\n<h2 id=\"用于拆分节点的随机特征子集\"><a href=\"#用于拆分节点的随机特征子集\" class=\"headerlink\" title=\"用于拆分节点的随机特征子集\"></a><strong>用于拆分节点的随机特征子集</strong></h2><p>随机森林中的另一个主要概念是，<strong>只考虑所有特征的一个子集来拆分每个决策树中的每个节点</strong>。通常将<strong>其设置为 sqrt（n_features）</strong>以进行分类，这意味着<strong>如果有 16 个特征</strong>，则在<strong>每个树中的每个节点处</strong>，<strong>只考虑 4 个随机特征</strong>来拆分节点。（随机森林也可以在每个节点处考虑所有的特征，如回归中常见的那样。这些选项可以在 Scikit-Learn Random Forest 的实现中控制）。<br>如果你能理解一棵单独的决策树，bagging 的理念，以及随机的特征子集，那么你对随机森林的工作方式也就有了很好的理解：</p>\n<blockquote>\n<p>随机森林将成百上千棵决策树组合在一起，在略微不同的观察集上训练每个决策树，在每棵树中仅考虑有限数量的特征来拆分节点。<strong>随机森林的最终预测是通过平均每棵树的预测来得到的</strong>。</p>\n</blockquote>\n<p>想理解为什么随机森林优于单一的决策树，请想象以下场景：你要判断特斯拉的股票是否上涨，现在你身边有十几位对该公司都没有先验知识的分析师。每个分析师都有较低的偏见，因为他们没有任何假设，并且可以从新闻报道的数据集中学习。<br>这似乎是一个理想的情况，但问题是报道中除了真实的信号外也可能包含噪音。 因为分析师们完全根据数据做出预测，即他们具有很高的灵活性，也就意味着他们可能会被无关的信息所左右。分析师们可能会从同一数据集中得出不同的预测。此外，如果提供不同的报道训练集，每个分析师都有高方差，并得出截然不同的预测。<br>解决方案是不依赖于任何一个人，而是汇集每个分析师的投票。此外，与随机森林一样，允许每个分析师仅使用一部分报道，并希望通过采样来消除噪声信息的影响。在现实生活中，我们也依赖于多种信息来源（从不信任亚马逊的单独评论），因此，不仅决策树的思想很直观，而且将它们组合在一起成为随机森林的想法同样如此。</p>\n<h2 id=\"算法特点\"><a href=\"#算法特点\" class=\"headerlink\" title=\"算法特点\"></a>算法特点</h2><p>由于随机性，<strong>随机森林对于降低模型方差效果显著</strong>。故随机森林一般不需要额外剪枝，就能取得较好的泛化性能。</p>\n<p>相对而言，模型对于训练集的拟合程度就会差一些，相比于基于 boosting 的 GBDT 模型，偏差会大一些。</p>\n<p>另外，<strong>随机森林中的树一般会比较深，以尽可能地降低偏差；而 GBDT 树的深度会比较浅，通过减少模型复杂度来降低方差</strong>。</p>\n<p>最后，我们总结一下随机森林都有哪些优点：</p>\n<ul>\n<li>采用了集成算法，精度优于大多数单模型算法</li>\n<li>在测试集上表现良好，两个随机性的引入降低了过拟合风险</li>\n<li>树的组合可以让随机森林处理非线性数据</li>\n<li>训练过程中能检测特征重要性，是常见的<strong>特征筛选</strong>方法</li>\n<li>每棵树可以同时生成，并行效率高，训练速度快</li>\n<li>可以自动处理缺省值</li>\n</ul>\n<h1 id=\"模型评价\"><a href=\"#模型评价\" class=\"headerlink\" title=\"模型评价\"></a>模型评价</h1><p>AUC(area under the curve)是 ROC 曲线下的面积。所以，在理解 AUC 之前，要先了解 ROC 是什么。而 ROC 的计算又需要借助混淆矩阵。</p>\n<blockquote>\n<p>AUC 是一个从 0（最差）到 1（最佳）的度量值，</p>\n</blockquote>\n<p>我们还可以绘制单个决策树（顶部）和随机森林（底部）的 ROC 曲线。<strong>靠近左上角的曲线代表着更好的模型：</strong><br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/1629942/1617974379540-03a43f68-4899-4b4d-b3c9-02806cba1744.png#height=271&id=ImDoE&margin=%5Bobject%20Object%5D&name=image.png&originHeight=542&originWidth=777&originalType=binary%E2%88%B6=1&size=81703&status=done&style=none&width=388.5\" alt=\"image.png\"></p>\n<h1 id=\"问答\"><a href=\"#问答\" class=\"headerlink\" title=\"问答\"></a>问答</h1><h2 id=\"为什么要随机抽样训练集？\"><a href=\"#为什么要随机抽样训练集？\" class=\"headerlink\" title=\"为什么要随机抽样训练集？\"></a><strong>为什么要随机抽样训练集？</strong></h2><p>如果不进行随机抽样，每棵树的训练集都一样，那么最终训练出的树分类结果也是完全一样的，这样的话完全没有 bagging 的必要；</p>\n<h2 id=\"为什么要有放回地抽样？\"><a href=\"#为什么要有放回地抽样？\" class=\"headerlink\" title=\"为什么要有放回地抽样？\"></a><strong>为什么要有放回地抽样？</strong></h2><p>如果不是有放回的抽样，那么每棵树的训练样本都是不同的，都是没有交集的，这样每棵树都是”有偏的”，都是绝对”片面的”（当然这样说可能不对），也就是说每棵树训练出来都是有很大的差异的；而随机森林最后分类取决于多棵树（弱分类器）的投票表决，这种表决应该是”求同”，因此使用完全不同的训练集来训练每棵树这样对最终分类结果是没有帮助的，这样无异于是”盲人摸象”。</p>\n<h2 id=\"随机森林的随机体现在哪里？\"><a href=\"#随机森林的随机体现在哪里？\" class=\"headerlink\" title=\"随机森林的随机体现在哪里？\"></a><strong>随机森林的随机体现在哪里？</strong></h2><p>1）如果训练集大小为 N，对于每棵树而言，随机且有放回地从训练集中的抽取 N 个训练样本（这种采样方式称为 bootstrap sample 方法），作为该树的训练集；</p>\n<blockquote>\n<p>从这里我们可以知道：每棵树的训练集都是不同的，而且里面包含重复的训练样本</p>\n</blockquote>\n<p>2）如果每个样本的特征维度为 M，指定一个常数 m&lt;&lt;M，随机地从 M 个特征中选取 m 个特征子集，每次树进行分裂时，从这 m 个特征中选择最优的；<br>​</p>\n<h2 id=\"这两种随机有什么好处？\"><a href=\"#这两种随机有什么好处？\" class=\"headerlink\" title=\"这两种随机有什么好处？\"></a><strong>这两种随机有什么好处？</strong></h2><p>两个随机性的引入对随机森林的分类性能至关重要。由于它们的引入，使得随机森林不容易陷入过拟合，并且具有很好得抗噪能力（比如：对缺省值不敏感）。</p>\n<h2 id=\"随机森林分类的错误率和什么有关？\"><a href=\"#随机森林分类的错误率和什么有关？\" class=\"headerlink\" title=\"随机森林分类的错误率和什么有关？\"></a><strong>随机森林分类的错误率和什么有关？</strong></h2><ul>\n<li>森林中任意两棵树的相关性：相关性越大，错误率越大；</li>\n<li>森林中每棵树的分类能力：每棵树的分类能力越强，整个森林的错误率越低。</li>\n</ul>\n<p>​</p>\n<p>减小特征选择个数 m，树的相关性和分类能力也会相应的降低；增大 m，两者也会随之增大。所以关键问题是如何选择最优的 m（或者是范围），这也是随机森林唯一的一个参数。<br>​</p>","categories":[],"tags":[]}