{"title":"PAT算法刷题（1）","slug":"PAT算法刷题（1）","date":"2021-05-15T15:56:55.000Z","updated":"2021-12-01T05:59:09.250Z","comments":true,"path":"api/articles/PAT算法刷题（1）.json","realPath":null,"excerpt":"​","covers":null,"cover":null,"content":"<p>​</p>\n<a id=\"more\"></a>\n\n<h1 id=\"Tips\"><a href=\"#Tips\" class=\"headerlink\" title=\"Tips\"></a>Tips</h1><ol>\n<li>浮点型不要用 float 定义，而要用 double 定义，因为精度问题，float 只能有效精度为 6 位左右。</li>\n<li>ASCII 码中，小写字母比大写字母的 ASCII 码大 32，具体是 A<del>Z：65</del>90，a<del>z：97</del>122</li>\n<li>位运算符：<ol>\n<li>A&lt;&lt;x 左移，整数 A 按照二进制左移 x 位</li>\n<li>a &amp; b 位与，整数 a 和 b 按二进制对齐，按照位进行<strong>与运算</strong></li>\n<li>a | b 位或，整数 a 和 b 按二进制对齐，按照位进行<strong>或运算</strong></li>\n<li>a ^ b 位异或，按位进行异或运算</li>\n<li>~a，取反，整数 a 的二进制每一位取反</li>\n</ol>\n</li>\n<li>scanf 的格式化输入–只记录几种不常用的<ol>\n<li>long long 的输入 ：%lld</li>\n<li>double 的输入： %lf</li>\n<li>字符串（char 数组）: %s，注意，字符串输入不需要加&amp;进行取址，即 scanf(“%s”,str)是正确的。（因为数组名称本身就代表这个数组第一个元素的地址，所以不需要加取地址）</li>\n</ol>\n</li>\n<li>typedef 是给复杂的数据结构起别名的<ol>\n<li>例 1： typedef long long LL;//给 long long 起别名 LL</li>\n</ol>\n</li>\n<li>一些常用的 math 函数<ol>\n<li>floor(double x)–向下取整</li>\n<li>ceil(double x)–向上取整</li>\n<li>log()–用于返回以自然对数为底的对数<ol>\n<li>注意，c 里面没有对任意底数求对数的函数，必须用换底公式 log_a{b}=log_e{b}/log_e{a}</li>\n</ol>\n</li>\n<li>sin,cos,tan–三角函数，必须是弧度制，即 pi/2 一类的</li>\n<li>asin,acos–返回 double 的三角函数值</li>\n</ol>\n</li>\n<li>switch</li>\n</ol>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-keyword\">switch</span>(表达式)&#123;<br>    <span class=\"hljs-keyword\">case</span> 常量结果<span class=\"hljs-number\">1</span>:<br>        ...<br>        <span class=\"hljs-keyword\">break</span>;<br>    <span class=\"hljs-keyword\">case</span> 结果<span class=\"hljs-number\">2</span>:<br>        ...<br>        <span class=\"hljs-keyword\">break</span>;<br>    <span class=\"hljs-keyword\">default</span>:<br>        ....<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<ol start=\"8\">\n<li>数组初始化<ol>\n<li>比如 <code>int a[10] = &#123;0&#125;;</code>就可以把整个数组都赋值 0，或者<code>int a[10] = &#123;&#125;;</code>也可以做到</li>\n<li>如果数组大小在 10 的 6 次方以上，需要将其定义在主函数之外，即静态存储区申请空间，如<code>int a[1000000];</code></li>\n<li>memset-对数组中每个元素赋值相同值<ol>\n<li>memset(数组名，值，sizeof(数组名))</li>\n<li>建议只使用 memset 赋值 0 和-1，因为它是按字节赋值，比如 int 是 4 个字节</li>\n<li>对于数组赋予其他值（比如 1），请使用 fill 函数</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>gets 识别\\n 作为输入结束，因此使用 scanf 接收完之后，如果要使用 gets，需要先用 getchar()接收整数后的换行符</li>\n<li>strlen()–字符串长度</li>\n<li>strcmp(char a[].char b[])–字符串比较</li>\n<li>strcpy(char a[].char b[])–把 b 字符串数组赋给 a 数组</li>\n<li>字符串处理利器<ol>\n<li>sscanf(char str[],”%d”,&amp; int n)–把字符串数组的内容以%d 的格式写到变量 n 中–从左到右</li>\n<li>sprintf(char str[],”%d”,int n)–把整型变量 n 以%d 的格式写到 str 数组中，从右到左</li>\n</ol>\n</li>\n</ol>\n","more":"<h1 id=\"Tips\"><a href=\"#Tips\" class=\"headerlink\" title=\"Tips\"></a>Tips</h1><ol>\n<li>浮点型不要用 float 定义，而要用 double 定义，因为精度问题，float 只能有效精度为 6 位左右。</li>\n<li>ASCII 码中，小写字母比大写字母的 ASCII 码大 32，具体是 A<del>Z：65</del>90，a<del>z：97</del>122</li>\n<li>位运算符：<ol>\n<li>A&lt;&lt;x 左移，整数 A 按照二进制左移 x 位</li>\n<li>a &amp; b 位与，整数 a 和 b 按二进制对齐，按照位进行<strong>与运算</strong></li>\n<li>a | b 位或，整数 a 和 b 按二进制对齐，按照位进行<strong>或运算</strong></li>\n<li>a ^ b 位异或，按位进行异或运算</li>\n<li>~a，取反，整数 a 的二进制每一位取反</li>\n</ol>\n</li>\n<li>scanf 的格式化输入–只记录几种不常用的<ol>\n<li>long long 的输入 ：%lld</li>\n<li>double 的输入： %lf</li>\n<li>字符串（char 数组）: %s，注意，字符串输入不需要加&amp;进行取址，即 scanf(“%s”,str)是正确的。（因为数组名称本身就代表这个数组第一个元素的地址，所以不需要加取地址）</li>\n</ol>\n</li>\n<li>typedef 是给复杂的数据结构起别名的<ol>\n<li>例 1： typedef long long LL;//给 long long 起别名 LL</li>\n</ol>\n</li>\n<li>一些常用的 math 函数<ol>\n<li>floor(double x)–向下取整</li>\n<li>ceil(double x)–向上取整</li>\n<li>log()–用于返回以自然对数为底的对数<ol>\n<li>注意，c 里面没有对任意底数求对数的函数，必须用换底公式 log_a{b}=log_e{b}/log_e{a}</li>\n</ol>\n</li>\n<li>sin,cos,tan–三角函数，必须是弧度制，即 pi/2 一类的</li>\n<li>asin,acos–返回 double 的三角函数值</li>\n</ol>\n</li>\n<li>switch</li>\n</ol>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-keyword\">switch</span>(表达式)&#123;<br>    <span class=\"hljs-keyword\">case</span> 常量结果<span class=\"hljs-number\">1</span>:<br>        ...<br>        <span class=\"hljs-keyword\">break</span>;<br>    <span class=\"hljs-keyword\">case</span> 结果<span class=\"hljs-number\">2</span>:<br>        ...<br>        <span class=\"hljs-keyword\">break</span>;<br>    <span class=\"hljs-keyword\">default</span>:<br>        ....<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<ol start=\"8\">\n<li>数组初始化<ol>\n<li>比如 <code>int a[10] = &#123;0&#125;;</code>就可以把整个数组都赋值 0，或者<code>int a[10] = &#123;&#125;;</code>也可以做到</li>\n<li>如果数组大小在 10 的 6 次方以上，需要将其定义在主函数之外，即静态存储区申请空间，如<code>int a[1000000];</code></li>\n<li>memset-对数组中每个元素赋值相同值<ol>\n<li>memset(数组名，值，sizeof(数组名))</li>\n<li>建议只使用 memset 赋值 0 和-1，因为它是按字节赋值，比如 int 是 4 个字节</li>\n<li>对于数组赋予其他值（比如 1），请使用 fill 函数</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>gets 识别\\n 作为输入结束，因此使用 scanf 接收完之后，如果要使用 gets，需要先用 getchar()接收整数后的换行符</li>\n<li>strlen()–字符串长度</li>\n<li>strcmp(char a[].char b[])–字符串比较</li>\n<li>strcpy(char a[].char b[])–把 b 字符串数组赋给 a 数组</li>\n<li>字符串处理利器<ol>\n<li>sscanf(char str[],”%d”,&amp; int n)–把字符串数组的内容以%d 的格式写到变量 n 中–从左到右</li>\n<li>sprintf(char str[],”%d”,int n)–把整型变量 n 以%d 的格式写到 str 数组中，从右到左</li>\n</ol>\n</li>\n</ol>","categories":[],"tags":[]}