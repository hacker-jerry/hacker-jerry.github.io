{"title":"交易内存池底层实现","slug":"交易内存池底层实现","date":"2021-04-15T12:29:00.000Z","updated":"2022-02-07T10:30:43.512Z","comments":true,"path":"api/articles/交易内存池底层实现.json","realPath":null,"excerpt":"既然要从头搭建一个区块链网络，交易池是绕不开的一个核心底层。对于它，以下几个问题是需要解决的：用户发起的交易请求（不论以何种方式）是如何转变为实际的交易的；产生的交易如果不能被及时处理，是如何进入交易池的；本地产生的交易和从网络中接收到的交易进入交易池是否有区别；交易池的基本数据结构是怎么样的（优先队列？）从交易池中提取交易进行打包时顺序是怎么样的（调度算法）网络中很多文章提到内存池，指的就是是 txpool","covers":["https://cdn.nlark.com/yuque/0/2021/png/1629942/1618542865374-f0325b19-9838-4ec6-95b4-307a899962bd.png#clientId=u272c35f2-3d2a-4&from=paste&height=321&id=u5bf56761&margin=%5Bobject%20Object%5D&originHeight=538&originWidth=1160&originalType=binary&size=164987&status=done&style=none&taskId=u567ff6dc-553f-4a1c-af77-71fc9a19a73&width=693","https://cdn.nlark.com/yuque/0/2021/png/1629942/1618555946782-660f2f04-fbb0-4010-a9a6-c1097a44d0e2.png#clientId=u272c35f2-3d2a-4&from=paste&height=317&id=uc114cf13&margin=%5Bobject%20Object%5D&originHeight=432&originWidth=826&originalType=url&status=done&style=none&taskId=u8fb70d54-24fd-45a9-880e-9b7951920f0&width=606","https://cdn.nlark.com/yuque/0/2021/png/1629942/1618557745071-1ffc52fc-51a4-40b4-a4a6-9834ee65566b.png#clientId=u272c35f2-3d2a-4&from=paste&height=443&id=u3b9d54f1&margin=%5Bobject%20Object%5D&originHeight=886&originWidth=1716&originalType=url&status=done&style=none&taskId=u8fd870e4-dcb8-44b2-bd3b-a5ba9cd4ba8&width=858","https://cdn.nlark.com/yuque/0/2021/png/1629942/1618493164007-51ddf037-04a1-45f3-bab1-513adb15efa4.png#clientId=u272c35f2-3d2a-4&from=paste&height=264&id=ue6089192&margin=%5Bobject%20Object%5D&originHeight=528&originWidth=1174&originalType=binary&size=236384&status=done&style=none&taskId=uf8820385-fb3b-42bb-ab6f-9ae0571e933&width=587","https://cdn.nlark.com/yuque/0/2021/png/1629942/1618538532731-ffb59787-cf5c-4c3d-b310-080abcd97de6.png#clientId=u272c35f2-3d2a-4&from=paste&height=254&id=u528314c1&margin=%5Bobject%20Object%5D&originHeight=373&originWidth=924&originalType=binary&size=74906&status=done&style=none&taskId=uae16074d-7e82-4415-a530-f8a271e0047&width=629"],"cover":"https://cdn.nlark.com/yuque/0/2021/png/1629942/1618542865374-f0325b19-9838-4ec6-95b4-307a899962bd.png#clientId=u272c35f2-3d2a-4&from=paste&height=321&id=u5bf56761&margin=%5Bobject%20Object%5D&originHeight=538&originWidth=1160&originalType=binary&size=164987&status=done&style=none&taskId=u567ff6dc-553f-4a1c-af77-71fc9a19a73&width=693","content":"<p>既然要从头搭建一个区块链网络，交易池是绕不开的一个核心底层。对于它，以下几个问题是需要解决的：</p>\n<ol>\n<li>用户发起的交易请求（不论以何种方式）是如何转变为实际的交易的；</li>\n<li>产生的交易如果不能被及时处理，是如何进入交易池的；</li>\n<li>本地产生的交易和从网络中接收到的交易进入交易池是否有区别；</li>\n<li>交易池的基本数据结构是怎么样的（优先队列？）</li>\n<li>从交易池中提取交易进行打包时顺序是怎么样的（调度算法）<blockquote>\n<p>网络中很多文章提到内存池，指的就是是 txpool</p>\n</blockquote>\n</li>\n</ol>\n<a id=\"more\"></a>\n\n<h1 id=\"交易形成\"><a href=\"#交易形成\" class=\"headerlink\" title=\"交易形成\"></a>交易形成</h1><p>以下均为作品赛项目的内容。<br>首先，我们的交易请求会赋值到 TxRaw 结构体的一个实例中。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-comment\">//用于接收客户端发来的序列化post原始信息</span><br><span class=\"hljs-keyword\">type</span> TxRaw <span class=\"hljs-keyword\">struct</span> &#123;<br>\t<span class=\"hljs-comment\">//公钥hash</span><br>\tAddress []<span class=\"hljs-keyword\">byte</span> <span class=\"hljs-string\">`json:&quot;address&quot;`</span><br><br>\tFee <span class=\"hljs-keyword\">int</span> <span class=\"hljs-string\">`json:&quot;int&quot;`</span><br><br>\t<span class=\"hljs-comment\">//交易核心</span><br>\tRangeBloom bloom.RangeBloom <span class=\"hljs-string\">`json:&quot;rbloom&quot;`</span><br>\tTimeBloom  bloom.TimeBloom  <span class=\"hljs-string\">`json:&quot;tbloom&quot;`</span><br><br>\t<span class=\"hljs-comment\">//签名相关</span><br>\tPubkey sm2.PublicKey <span class=\"hljs-string\">`json:&quot;pubkey&quot;`</span><br>\tSign   []<span class=\"hljs-keyword\">byte</span>        <span class=\"hljs-string\">`json:&quot;sign&quot;`</span><br><br>\t<span class=\"hljs-comment\">//交易同态密文拼接，用于k-top查找</span><br>\tCipher <span class=\"hljs-keyword\">string</span> <span class=\"hljs-string\">`json:&quot;cipher&quot;`</span><br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<p>然后这个实例被传递到一个 SendTransaction 函数，用来创建一个交易 Tx。创建交易的过程如下：</p>\n<ol>\n<li>根据 Address 字段找到当前账户</li>\n<li>设置交易默认参数</li>\n<li>检查交易签名是否合法</li>\n<li>检查交易是否冲突</li>\n<li>对交易进行序列化，变为可存储和传输的形式。</li>\n<li>提交交易到交易池</li>\n</ol>\n<h1 id=\"交易管理\"><a href=\"#交易管理\" class=\"headerlink\" title=\"交易管理\"></a>交易管理</h1><p>以太坊将交易按状态分为两部分：<strong>可执行交易</strong>和<strong>非可执行交易</strong>。分别记录在 pending 容器中和 queue 容器中。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/1629942/1618542865374-f0325b19-9838-4ec6-95b4-307a899962bd.png#clientId=u272c35f2-3d2a-4&from=paste&height=321&id=u5bf56761&margin=%5Bobject%20Object%5D&originHeight=538&originWidth=1160&originalType=binary&size=164987&status=done&style=none&taskId=u567ff6dc-553f-4a1c-af77-71fc9a19a73&width=693\"><br>如上图所示，交易池先采用一个 txLookup (内部为 map）跟踪所有交易。同时将交易根据本地优先，价格优先原则将交易划分为两部分 queue 和 pending。而这两部交易则按账户分别跟踪。<br>为了不丢失未完成的本地交易，以太坊交易池通过 journal 文件存储和管理当前交易池中的本地交易，并定期更新存储。<br>下图是<strong>交易池对本地待处理交易的磁盘存储管理流程</strong>，涉及加载、实时写入和定期更新维护。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/1629942/1618543666828-ac2e3e32-c72f-4e7c-a240-b7bc1452cdcb.png#clientId=u272c35f2-3d2a-4&from=paste&height=826&id=ufc47fc0d&margin=%5Bobject%20Object%5D&originHeight=1356&originWidth=870&originalType=url&status=done&style=none&taskId=ubb8c227e-5868-49f4-b1ea-77abbe42349&width=530\"></p>\n<h2 id=\"存储交易\"><a href=\"#存储交易\" class=\"headerlink\" title=\"存储交易\"></a>存储交易</h2><p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/1629942/1618555946782-660f2f04-fbb0-4010-a9a6-c1097a44d0e2.png#clientId=u272c35f2-3d2a-4&from=paste&height=317&id=uc114cf13&margin=%5Bobject%20Object%5D&originHeight=432&originWidth=826&originalType=url&status=done&style=none&taskId=u8fb70d54-24fd-45a9-880e-9b7951920f0&width=606\"><br>当交易池新交易来自于本地账户时 ❶，如果已开启记录本地交易，则将此交易加入 journal ❷。到交易池时，将实时存储到 journal 文件中。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-comment\">//core/tx_pool.go:757</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(pool *TxPool)</span> <span class=\"hljs-title\">journalTx</span><span class=\"hljs-params\">(from common.Address, tx *types.Transaction)</span></span> &#123;<br>   <span class=\"hljs-comment\">// Only journal if it&#x27;s enabled and the transaction is local</span><br>   <span class=\"hljs-keyword\">if</span> pool.journal == <span class=\"hljs-literal\">nil</span> || !pool.locals.contains(from) &#123;<span class=\"hljs-comment\">//❶</span><br>      <span class=\"hljs-keyword\">return</span><br>   &#125;<br>   <span class=\"hljs-keyword\">if</span> err := pool.journal.insert(tx); err != <span class=\"hljs-literal\">nil</span> &#123; <span class=\"hljs-comment\">//❷</span><br>      log.Warn(<span class=\"hljs-string\">&quot;Failed to journal local transaction&quot;</span>, <span class=\"hljs-string\">&quot;err&quot;</span>, err)<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>而 journal.insert 则将交易实时写入文件流中 ❸，相当于实时存储到磁盘。而在写入时，是将交易进行 RLP 编码。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-comment\">//core/tx_journal.go:120</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(journal *txJournal)</span> <span class=\"hljs-title\">insert</span><span class=\"hljs-params\">(tx *types.Transaction)</span> <span class=\"hljs-title\">error</span></span> &#123;<br>   <span class=\"hljs-keyword\">if</span> journal.writer == <span class=\"hljs-literal\">nil</span> &#123;<br>      <span class=\"hljs-keyword\">return</span> errNoActiveJournal<br>   &#125;<br>   <span class=\"hljs-keyword\">if</span> err := rlp.Encode(journal.writer, tx); err != <span class=\"hljs-literal\">nil</span> &#123;<span class=\"hljs-comment\">//❸</span><br>      <span class=\"hljs-keyword\">return</span> err<br>   &#125;<br>   <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nil</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>插一嘴，为什么要用 RLP 编码？</p>\n</blockquote>\n<h3 id=\"什么是-RLP\"><a href=\"#什么是-RLP\" class=\"headerlink\" title=\"什么是 RLP\"></a>什么是 RLP</h3><p>RLP(Recursive Length Prefix) 递归长度前缀编码是以太坊中最常使用的序列化格式方法。<br>RLP 旨在<strong>成为高度简约的序列化方法</strong>，<strong>唯一目标</strong>就是<strong>存储嵌套的字节数组</strong>。<br>RLP 只是以嵌套数组形式存储结构型数据，由上层协议来确定数组的含义。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/1629942/1618557745071-1ffc52fc-51a4-40b4-a4a6-9834ee65566b.png#clientId=u272c35f2-3d2a-4&from=paste&height=443&id=u3b9d54f1&margin=%5Bobject%20Object%5D&originHeight=886&originWidth=1716&originalType=url&status=done&style=none&taskId=u8fd870e4-dcb8-44b2-bd3b-a5ba9cd4ba8&width=858\"><br>从图中可以看出，不同类型的数据，将有不同的前缀标识。 前缀也可以理解为报文头，通过报文头可准确获取报文内容。 图中灰色部分则为 RLP 编码输出前缀。</p>\n<h2 id=\"加载已存储交易\"><a href=\"#加载已存储交易\" class=\"headerlink\" title=\"加载已存储交易\"></a>加载已存储交易</h2><p>在交易池首次启动 journal 时，将主动将该文件已存储的交易加载到交易池。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-comment\">//core/tx_journal.go:61</span><br><span class=\"hljs-keyword\">if</span> _, err := os.Stat(journal.path); os.IsNotExist(err) &#123; <span class=\"hljs-comment\">//❶</span><br>   <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nil</span><br>&#125;<br><span class=\"hljs-comment\">// Open the journal for loading any past transactions</span><br>input, err := os.Open(journal.path) <span class=\"hljs-comment\">//❷</span><br><span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> &#123;<br>   <span class=\"hljs-keyword\">return</span> err<br>&#125;<br><span class=\"hljs-keyword\">defer</span> input.Close()<br></code></pre></td></tr></table></figure>\n\n<p>处理时，如果文件不存在则退出 ❶，否则 Open 文件，获得 input 文件流 ❷。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-comment\">//core/tx_journal.go:76</span><br>stream := rlp.NewStream(input, <span class=\"hljs-number\">0</span>)<span class=\"hljs-comment\">//❸</span><br>total, dropped := <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span><br></code></pre></td></tr></table></figure>\n\n<p>因为存储的内容格式是 rlp 编码内容，因此可以直接初始化 rlp 内容流 ❸，为连续解码做准备。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">var</span> (<br>   failure error<br>   batch   types.Transactions<br>)<br><span class=\"hljs-keyword\">for</span> &#123;<br>   tx := <span class=\"hljs-built_in\">new</span>(types.Transaction)<br>   <span class=\"hljs-keyword\">if</span> err = stream.Decode(tx); err != <span class=\"hljs-literal\">nil</span> &#123; <span class=\"hljs-comment\">//❹</span><br>      <span class=\"hljs-keyword\">if</span> err != io.EOF &#123;<br>         failure = err<br>      &#125;<br>      <span class=\"hljs-keyword\">if</span> batch.Len() &gt; <span class=\"hljs-number\">0</span> &#123;<span class=\"hljs-comment\">//❼</span><br>         loadBatch(batch)<br>      &#125;<br>      <span class=\"hljs-keyword\">break</span><br>   &#125;<br>   total++<br><br>   <span class=\"hljs-keyword\">if</span> batch = <span class=\"hljs-built_in\">append</span>(batch, tx); batch.Len() &gt; <span class=\"hljs-number\">1024</span> &#123;<span class=\"hljs-comment\">//❺</span><br>      loadBatch(batch)<span class=\"hljs-comment\">//❻</span><br>      batch = batch[:<span class=\"hljs-number\">0</span>]<br>   &#125;<br>&#125;<br><br>loadBatch := <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(txs types.Transactions)</span></span> &#123;<br>   <span class=\"hljs-keyword\">for</span> _, err := <span class=\"hljs-keyword\">range</span> add(txs) &#123;<br>      <span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> &#123;<br>         log.Debug(<span class=\"hljs-string\">&quot;Failed to add journaled transaction&quot;</span>, <span class=\"hljs-string\">&quot;err&quot;</span>, err)<br>         dropped++ <span class=\"hljs-comment\">//❽</span><br>      &#125;<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>直接进入 for 循环遍历，不断从 stream 中一笔笔地解码出交易 ❹。<br>但交易并非单笔直接载入交易池，而是采用批量提交模式，每 1024 笔交易提交一次 ❺。<br>批量写入，有利于降低交易池在每次写入交易后的更新。一个批次只需要更新（排序与超限处理等）一次。当然在遍历结束时（err==io.EOF）,也需要将当前批次中的交易载入 ❼。<br>loadBatch 就是将交易一批次加入到交易池，并获得交易池的每笔交易的处理情况。如果交易加入失败，则进行计数 ❽。最终在 load 方法执行完毕时，显示交易载入情况。</p>\n<h1 id=\"交易添加到交易池\"><a href=\"#交易添加到交易池\" class=\"headerlink\" title=\"交易添加到交易池\"></a>交易添加到交易池</h1><p>SendTransaction 最后调用 SubmitTransaction 函数将交易提交到交易池，不过，更底层的调用是 AddLocals 函数。<br>这里需要注意，本地交易时调用 AddLocals，而从对等 p2p 节点发来的交易调用的是另一个函数，AddRemotes 函数。调用这两个函数之前都应该验证交易的有效性。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/1629942/1618493164007-51ddf037-04a1-45f3-bab1-513adb15efa4.png#clientId=u272c35f2-3d2a-4&from=paste&height=264&id=ue6089192&margin=%5Bobject%20Object%5D&originHeight=528&originWidth=1174&originalType=binary&size=236384&status=done&style=none&taskId=uf8820385-fb3b-42bb-ab6f-9ae0571e933&width=587\"></p>\n<blockquote>\n<p>因为交易时通过节点的 API 接收，因此此交易被视为一笔来自本地(local)（图中用红球表示），在经过一系列校验和处理后。交易成功进入交易池，随后向已连接的邻近节点发送此交易。<br>当邻近节点，如矿工节点从邻近节点接收到此交易时，在进入交易池之前。会将交易标记为来自远方（remote）的交易（图中用绿球表示）。也需要经过校验和处理后，进入矿工节点的交易池，等待矿工打包到区块中。<br>如果邻近节点，不是矿工，也无妨。因为任何节点会默认将接受到得合法交易及时发送给邻近节点。得益于 P2P 网络，一笔交易平均在 6s 内扩散到整个以太坊公链网络的各个节点中。</p>\n</blockquote>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/1629942/1618538532731-ffb59787-cf5c-4c3d-b310-080abcd97de6.png#clientId=u272c35f2-3d2a-4&from=paste&height=254&id=u528314c1&margin=%5Bobject%20Object%5D&originHeight=373&originWidth=924&originalType=binary&size=74906&status=done&style=none&taskId=uae16074d-7e82-4415-a530-f8a271e0047&width=629\"><br>下面我们来看一下交易池的结构：</p>\n<blockquote>\n<p>这是以太坊的</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-comment\">// TxPool contains all currently known transactions. Transactions</span><br><span class=\"hljs-comment\">// enter the pool when they are received from the network or submitted</span><br><span class=\"hljs-comment\">// locally. They exit the pool when they are included in the blockchain.</span><br><span class=\"hljs-comment\">//</span><br><span class=\"hljs-comment\">// The pool separates processable transactions (which can be applied to the</span><br><span class=\"hljs-comment\">// current state) and future transactions. Transactions move between those</span><br><span class=\"hljs-comment\">// two states over time as they are received and processed.</span><br><span class=\"hljs-keyword\">type</span> TxPool <span class=\"hljs-keyword\">struct</span> &#123;<br>\tconfig      TxPoolConfig<br>\tchainconfig *params.ChainConfig<br>\tchain       blockChain<br>\tgasPrice    *big.Int<br>\ttxFeed      event.Feed<br>\tscope       event.SubscriptionScope<br>\tsigner      types.Signer<br>\tmu          sync.RWMutex<br><br>\tistanbul <span class=\"hljs-keyword\">bool</span> <span class=\"hljs-comment\">// Fork indicator whether we are in the istanbul stage.</span><br><br>\tcurrentState  *state.StateDB <span class=\"hljs-comment\">// Current state in the blockchain head</span><br>\tpendingNonces *txNoncer      <span class=\"hljs-comment\">// Pending state tracking virtual nonces</span><br>\tcurrentMaxGas <span class=\"hljs-keyword\">uint64</span>         <span class=\"hljs-comment\">// Current gas limit for transaction caps</span><br><br>\tlocals  *accountSet <span class=\"hljs-comment\">// Set of local transaction to exempt from eviction rules</span><br>\tjournal *txJournal  <span class=\"hljs-comment\">// Journal of local transaction to back up to disk</span><br><br>\tpending <span class=\"hljs-keyword\">map</span>[common.Address]*txList   <span class=\"hljs-comment\">// All currently processable transactions</span><br>\tqueue   <span class=\"hljs-keyword\">map</span>[common.Address]*txList   <span class=\"hljs-comment\">// Queued but non-processable transactions</span><br>\tbeats   <span class=\"hljs-keyword\">map</span>[common.Address]time.Time <span class=\"hljs-comment\">// Last heartbeat from each known account</span><br>\tall     *txLookup                    <span class=\"hljs-comment\">// All transactions to allow lookups</span><br>\tpriced  *txPricedList                <span class=\"hljs-comment\">// All transactions sorted by price</span><br><br>\tchainHeadCh     <span class=\"hljs-keyword\">chan</span> ChainHeadEvent<br>\tchainHeadSub    event.Subscription<br>\treqResetCh      <span class=\"hljs-keyword\">chan</span> *txpoolResetRequest<br>\treqPromoteCh    <span class=\"hljs-keyword\">chan</span> *accountSet<br>\tqueueTxEventCh  <span class=\"hljs-keyword\">chan</span> *types.Transaction<br>\treorgDoneCh     <span class=\"hljs-keyword\">chan</span> <span class=\"hljs-keyword\">chan</span> <span class=\"hljs-keyword\">struct</span>&#123;&#125;<br>\treorgShutdownCh <span class=\"hljs-keyword\">chan</span> <span class=\"hljs-keyword\">struct</span>&#123;&#125;  <span class=\"hljs-comment\">// requests shutdown of scheduleReorgLoop</span><br>\twg              sync.WaitGroup <span class=\"hljs-comment\">// tracks loop, scheduleReorgLoop</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>其中最核心的是两个字段，pending 和 queue<br><strong>queued 存放未来的、当前无法执行的交易</strong>。以太坊使用 nonce 值决定某个账户的交易顺序，多条交易值 nonce 值必须连续，如果和过去的交易不连续，则无法执行，我们不妨使用 nonce 值，标记交易的号码，nonce 为 10 的交易，称为第 10 号交易。举个例子，当前账户的 nonce 是 10，txpool 中有该账户的第 100 号交易，但 txpool 中没有第 11<del>99 号交易，这些交易的缺失，造成第 100 号交易无法执行，所以第 100 号交易就是未来的交易、不可执行的交易，存放在 queue 中。<br><strong>pending 存放可执行的交易</strong>。比如我们把上面的 11</del>99 号交易补全了，那么 11~100 号交易都可以进入到 pending，因为这些交易都是连续的，都可以打包进区块。<br>当节点收到交易（本地节点发起的或 peer 广播来的）时，会先存放到 queued，txpool 在某些情况下，把 queued 中可执行的交易，转移到 pending 中。<br>其中 config 的结构体为：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-comment\">// TxPoolConfig are the configuration parameters of the transaction pool.</span><br><span class=\"hljs-keyword\">type</span> TxPoolConfig <span class=\"hljs-keyword\">struct</span> &#123;<br>\tLocals    []common.Address <span class=\"hljs-comment\">// Addresses that should be treated by default as local</span><br>\tNoLocals  <span class=\"hljs-keyword\">bool</span>             <span class=\"hljs-comment\">// Whether local transaction handling should be disabled</span><br>\tJournal   <span class=\"hljs-keyword\">string</span>           <span class=\"hljs-comment\">// Journal of local transactions to survive node restarts</span><br>\tRejournal time.Duration    <span class=\"hljs-comment\">// Time interval to regenerate the local transaction journal</span><br><br>\tPriceLimit <span class=\"hljs-keyword\">uint64</span> <span class=\"hljs-comment\">// Minimum gas price to enforce for acceptance into the pool</span><br>\tPriceBump  <span class=\"hljs-keyword\">uint64</span> <span class=\"hljs-comment\">// Minimum price bump percentage to replace an already existing transaction (nonce)</span><br><br>\tAccountSlots <span class=\"hljs-keyword\">uint64</span> <span class=\"hljs-comment\">// Number of executable transaction slots guaranteed per account</span><br>\tGlobalSlots  <span class=\"hljs-keyword\">uint64</span> <span class=\"hljs-comment\">// Maximum number of executable transaction slots for all accounts</span><br>\tAccountQueue <span class=\"hljs-keyword\">uint64</span> <span class=\"hljs-comment\">// Maximum number of non-executable transaction slots permitted per account</span><br>\tGlobalQueue  <span class=\"hljs-keyword\">uint64</span> <span class=\"hljs-comment\">// Maximum number of non-executable transaction slots for all accounts</span><br><br>\tLifetime time.Duration <span class=\"hljs-comment\">// Maximum amount of time non-executable transaction are queued</span><br><br>\t<span class=\"hljs-comment\">// Quorum</span><br>\tTransactionSizeLimit <span class=\"hljs-keyword\">uint64</span> <span class=\"hljs-comment\">// Maximum size allowed for valid transaction (in KB)</span><br>\tMaxCodeSize          <span class=\"hljs-keyword\">uint64</span> <span class=\"hljs-comment\">// Maximum size allowed of contract code that can be deployed (in KB)</span><br><br>&#125;<br><br><span class=\"hljs-keyword\">var</span> DefaultTxPoolConfig = TxPoolConfig&#123;<br>\tJournal:   <span class=\"hljs-string\">&quot;transactions.rlp&quot;</span>,<br>\tRejournal: time.Hour,<br><br>\tPriceLimit: <span class=\"hljs-number\">1</span>,<br>\tPriceBump:  <span class=\"hljs-number\">10</span>,<br><br>\tAccountSlots: <span class=\"hljs-number\">16</span>,<br>\tGlobalSlots:  <span class=\"hljs-number\">4096</span>,<br>\tAccountQueue: <span class=\"hljs-number\">64</span>,<br>\tGlobalQueue:  <span class=\"hljs-number\">1024</span>,<br><br>\tLifetime: <span class=\"hljs-number\">3</span> * time.Hour,<br><br>\t<span class=\"hljs-comment\">// Quorum</span><br>\tTransactionSizeLimit: <span class=\"hljs-number\">64</span>,<br>\tMaxCodeSize:          <span class=\"hljs-number\">24</span>,<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>Locals: 定义了一组视为 local 交易的账户地址。任何来自此清单的交易均被视为 local 交易。</li>\n<li>NoLocals: 是否禁止 local 交易处理。默认为 fasle,允许 local 交易。如果禁止，则来自 local 的交易均视为 remote 交易处理。</li>\n<li>Journal： 存储 local 交易记录的文件名，默认是./transactions.rlp。</li>\n<li>Rejournal：定期将 local 交易存储文件中的时间间隔。默认为每小时一次。</li>\n<li>PriceLimit： remote 交易进入交易池的最低 Price 要求。此设置对 local 交易无效。默认值 1。</li>\n<li>PriceBump：替换交易时所要求的价格上调涨幅比例最低要求。任何低于要求的替换交易均被拒绝。</li>\n<li>AccountSlots： 当交易池中可执行交易（是已在等待矿工打包的交易）量超标时，允许每个账户可以保留在交易池最低交易数。默认值是 16 笔。</li>\n<li>GlobalSlots： 交易池中所允许的可执行交易量上限，高于上限时将释放部分交易。默认是 4096 笔交易。</li>\n<li>AccountQueue：交易池中单个账户非可执行交易上限，默认是 64 笔。</li>\n<li>GlobalQueue： 交易池中所有非可执行交易上限，默认 1024 笔。</li>\n<li>Lifetime： 允许 remote 的非可执行交易可在交易池存活的最长时间。交易池每分钟检查一次，一旦发现有超期的 remote 账户，则移除该账户下的所有非可执行交易。默认为 3 小时。<blockquote>\n<p>参考：<a href=\"https://learnblockchain.cn/books/geth/part2/txpool/txpool.html\">https://learnblockchain.cn/books/geth/part2/txpool/txpool.html</a></p>\n</blockquote>\n</li>\n</ul>\n<p>上面配置中，包含两个重要概念<strong>可执行交易</strong>和<strong>非可执行交易</strong>。可执行交易是指从交易池中择优选出的一部分交易可以被执行，打包到区块中。非可执行交易则相反，任何刚进入交易池的交易均属于非可执行状态，在某一个时刻才会提升为可执行状态。</p>\n<blockquote>\n<p>这是 dag 的</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">type</span> TxPool <span class=\"hljs-keyword\">struct</span> &#123;<br>\t<span class=\"hljs-comment\">// The following variables must only be used atomically.</span><br>\tlastUpdated <span class=\"hljs-keyword\">int64</span> <span class=\"hljs-comment\">// last time pool was updated</span><br><br>\tmtx           sync.RWMutex<br>\tcfg           Config<br>\tpool          <span class=\"hljs-keyword\">map</span>[chainhash.Hash]*TxDesc<br>\torphans       <span class=\"hljs-keyword\">map</span>[chainhash.Hash]*orphanTx<br>\torphansByPrev <span class=\"hljs-keyword\">map</span>[wire.OutPoint]<span class=\"hljs-keyword\">map</span>[chainhash.Hash]*soterutil.Tx<br>\toutpoints     <span class=\"hljs-keyword\">map</span>[wire.OutPoint]*soterutil.Tx<br>\tpennyTotal    <span class=\"hljs-keyword\">float64</span> <span class=\"hljs-comment\">// exponentially decaying total for penny spends.</span><br>\tlastPennyUnix <span class=\"hljs-keyword\">int64</span>   <span class=\"hljs-comment\">// unix time of last ``penny spend&#x27;&#x27;</span><br><br>\t<span class=\"hljs-comment\">// nextExpireScan is the time after which the orphan pool will be</span><br>\t<span class=\"hljs-comment\">// scanned in order to evict orphans.  This is NOT a hard deadline as</span><br>\t<span class=\"hljs-comment\">// the scan will only run when an orphan is added to the pool as opposed</span><br>\t<span class=\"hljs-comment\">// to on an unconditional timer.</span><br>\tnextExpireScan time.Time<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>交易提交到交易池还需要一个 add 函数，逻辑很简单：</p>\n<ol>\n<li>验证交易的有效性</li>\n<li>如果 nonce 已存在，忽略。</li>\n<li>如果 nonce 不存在，不可以替换 pending 中的任何交易，此时将新的交易插入 queue 的末尾</li>\n</ol>\n<p>注：交易中的 nonce 指的是 from 账户发出交易的次数, 从 0 开始递增，同一账户的交易会被依次确认，所以同一个 nonce 代表是同一个交易，会优先选择 price 更高的交易。</p>\n<blockquote>\n<p>这是我们的</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">type</span> TxPool <span class=\"hljs-keyword\">struct</span> &#123;<br>    mtx           sync.RWMutex<br>    config      TxPoolConfig<br>    currentState  *state.StateDB <span class=\"hljs-comment\">// 区块的当前状态</span><br>    locals  *accountSet <span class=\"hljs-comment\">//本地交易</span><br>    journal *txJournal  <span class=\"hljs-comment\">//  用于存储local交易记录的文件</span><br><br>\tpending <span class=\"hljs-keyword\">map</span>[common.Address]*txList   <span class=\"hljs-comment\">// 存放可执行的交易</span><br>\tqueue   <span class=\"hljs-keyword\">map</span>[common.Address]*txList   <span class=\"hljs-comment\">// queued存放未来的、当前无法执行的交易</span><br><br>    chainHeadSub    event.Subscription<span class=\"hljs-comment\">//用于订阅区块</span><br>    reqPromoteCh    <span class=\"hljs-keyword\">chan</span> *accountSet<span class=\"hljs-comment\">//账户集合</span><br>\tqueueTxEventCh  <span class=\"hljs-keyword\">chan</span> *dag.Tx<span class=\"hljs-comment\">//Tx队列事件</span><br>&#125;<br><br><span class=\"hljs-keyword\">type</span> TxPoolConfig <span class=\"hljs-keyword\">struct</span> &#123;<br>\tLocals    []common.Address<br>\tJournal   <span class=\"hljs-keyword\">string</span><br>\tRejournal time.Duration<br><br>\tAccountSlots <span class=\"hljs-keyword\">uint64</span><br>\tGlobalSlots  <span class=\"hljs-keyword\">uint64</span><br>\tAccountQueue <span class=\"hljs-keyword\">uint64</span><br>\tGlobalQueue  <span class=\"hljs-keyword\">uint64</span><br><br>\tLifetime time.Duration<br>&#125;<br><br><span class=\"hljs-keyword\">var</span> DefaultTxPoolConfig = TxPoolConfig&#123;<br>\tJournal:   <span class=\"hljs-string\">&quot;transactions.rlp&quot;</span>,<br>\tRejournal: time.Hour,<br><br>\tAccountSlots: <span class=\"hljs-number\">16</span>,<br>\tGlobalSlots:  <span class=\"hljs-number\">8192</span>,<br>\tAccountQueue: <span class=\"hljs-number\">64</span>,<br>\tGlobalQueue:  <span class=\"hljs-number\">1024</span>,<br><br>\tLifetime: <span class=\"hljs-number\">3</span> * time.Hour,<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>当节点收到交易（本地节点发起的或 peer 广播来的）时，会先存放到 queued，txpool 在某些情况下，把 queued 中可执行的交易，转移到 pending 中。</p>\n<ul>\n<li>Locals: 定义了一组视为 local 交易的账户地址。任何来自此清单的交易均被视为 local 交易。</li>\n<li>Journal： 存储 local 交易记录的文件名，默认是./transactions.rlp。</li>\n<li>Rejournal：定期将 local 交易存储文件中的时间间隔。默认为每小时一次。</li>\n<li>AccountSlots： 当交易池中可执行交易（是已在等待矿工打包的交易）量超标时，允许每个账户可以保留在交易池最低交易数。默认值是 16 笔。</li>\n<li>GlobalSlots： 交易池中所允许的可执行交易量上限，高于上限时将释放部分交易。默认是 8192 笔交易。</li>\n<li>AccountQueue：交易池中单个账户非可执行交易上限，默认是 64 笔。</li>\n<li>GlobalQueue： 交易池中所有非可执行交易上限，默认 1024 笔。</li>\n<li>Lifetime： 允许 remote 的非可执行交易可在交易池存活的最长时间。交易池每分钟检查一次，一旦发现有超期的 remote 账户，则移除该账户下的所有非可执行交易。默认为 3 小时。</li>\n</ul>\n<h2 id=\"链状态\"><a href=\"#链状态\" class=\"headerlink\" title=\"链状态\"></a>链状态</h2><p>在交易池启动后，将订阅链的区块头事件：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-comment\">//core/tx_pool.go:274</span><br>pool.chainHeadSub = pool.chain.SubscribeChainHeadEvent(pool.chainHeadCh)<br></code></pre></td></tr></table></figure>\n\n<p>并开始监听新事件：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-comment\">//core/tx_pool.go:305</span><br><span class=\"hljs-keyword\">for</span> &#123;<br>   <span class=\"hljs-keyword\">select</span> &#123;<br>   <span class=\"hljs-comment\">// Handle ChainHeadEvent</span><br>   <span class=\"hljs-keyword\">case</span> ev := &lt;-pool.chainHeadCh:<br>      <span class=\"hljs-keyword\">if</span> ev.Block != <span class=\"hljs-literal\">nil</span> &#123;<br>         pool.mu.Lock()<br>         <span class=\"hljs-keyword\">if</span> pool.chainconfig.IsHomestead(ev.Block.Number()) &#123;<br>            pool.homestead = <span class=\"hljs-literal\">true</span><br>         &#125;<br>         pool.reset(head.Header(), ev.Block.Header())<br>         head = ev.Block<br><br>         pool.mu.Unlock()<br>      &#125;<br>  <span class=\"hljs-comment\">//...</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>接收到事件后，将执行 func (pool *TxPool) reset(oldHead, newHead *types.Header)方法更新 state 和处理交易。核心是将交易池中已经不符合要求的交易删除并更新整理交易</p>\n<h2 id=\"本地交易\"><a href=\"#本地交易\" class=\"headerlink\" title=\"本地交易\"></a>本地交易</h2><p>在交易池中将交易标记为 local 的有多种用途：</p>\n<ol>\n<li>在本地磁盘存储已发送的交易。这样，本地交易不会丢失，重启节点时可以重新加载到交易池，实时广播出去。</li>\n<li>可以作为外部程序和以太坊沟通的一个渠道。外部程序只需要监听文件内容变化，则可以获得交易清单。</li>\n<li>local 交易可优先于 remote 交易。对交易量的限制等操作，不影响 local 下的账户和交易。</li>\n</ol>\n<p>对应本地交易存储，在启动交易池时根据配置开启本地交易存储能力：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-comment\">//core/tx_pool.go:264</span><br><span class=\"hljs-keyword\">if</span> !config.NoLocals &amp;&amp; config.Journal != <span class=\"hljs-string\">&quot;&quot;</span> &#123;<br>\t\tpool.journal = newTxJournal(config.Journal)<br>\t\t<span class=\"hljs-keyword\">if</span> err := pool.journal.load(pool.AddLocals); err != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t\tlog.Warn(<span class=\"hljs-string\">&quot;Failed to load transaction journal&quot;</span>, <span class=\"hljs-string\">&quot;err&quot;</span>, err)<br>\t\t&#125;<br>    <span class=\"hljs-comment\">//...</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>并从磁盘中加载已有交易到交易池。在新的 local 交易进入交易池时，将被实时写入 journal 文件。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-comment\">// core/tx_pool.go:757</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(pool *TxPool)</span> <span class=\"hljs-title\">journalTx</span><span class=\"hljs-params\">(from common.Address, tx *types.Transaction)</span></span> &#123;<br>   <span class=\"hljs-keyword\">if</span> pool.journal == <span class=\"hljs-literal\">nil</span> || !pool.locals.contains(from) &#123;<br>      <span class=\"hljs-keyword\">return</span><br>   &#125;<br>   <span class=\"hljs-keyword\">if</span> err := pool.journal.insert(tx); err != <span class=\"hljs-literal\">nil</span> &#123;<br>      log.Warn(<span class=\"hljs-string\">&quot;Failed to journal local transaction&quot;</span>, <span class=\"hljs-string\">&quot;err&quot;</span>, err)<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>从上可看到，<strong>只有属于 local 账户的交易才会被记录</strong>。你又没有注意到，如果仅仅是这样的话，journal 文件是否会跟随本地交易而无限增长？答案是否定的，<strong>虽然无法实时从 journal 中移除交易。但是支持定期更新 journal 文件</strong>。<br><strong>journal 并不是保存所有的本地交易以及历史</strong>，他<strong>仅仅是存储当前交易池中存在的本地交易</strong>。因此交易池会定期对 journal 文件执行 rotate，将交易池中的本地交易写入 journal 文件，并丢弃旧数据。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\">journal := time.NewTicker(pool.config.Rejournal)<br><span class=\"hljs-comment\">//...</span><br><span class=\"hljs-comment\">//core/tx_pool.go:353</span><br><span class=\"hljs-keyword\">case</span> &lt;-journal.C:<br>\t\t\t<span class=\"hljs-keyword\">if</span> pool.journal != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t\t\tpool.mu.Lock()<br>\t\t\t\t<span class=\"hljs-keyword\">if</span> err := pool.journal.rotate(pool.local()); err != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t\t\t\tlog.Warn(<span class=\"hljs-string\">&quot;Failed to rotate local tx journal&quot;</span>, <span class=\"hljs-string\">&quot;err&quot;</span>, err)<br>\t\t\t\t&#125;<br>\t\t\t\tpool.mu.Unlock()<br>\t\t\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"新交易信号\"><a href=\"#新交易信号\" class=\"headerlink\" title=\"新交易信号\"></a>新交易信号</h2><p>文章开头，有提到<strong>进入交易池的交易将被广播到网络</strong>中。这<strong>是依赖于交易池支持外部订阅新交易事件信号</strong>。任何<strong>订阅此事件的子模块</strong>，在交易池出现新的可执行交易时，均可实时接受到此事件通知，并获得新交易信息。</p>\n<blockquote>\n<p>需要注意的是并非所有进入交易池的交易均被通知外部，而是只有交易从非可执行状态变成可执行状态后才会发送信号。</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-comment\">//core/tx_pool.go:705</span><br><span class=\"hljs-keyword\">go</span> pool.txFeed.Send(NewTxsEvent&#123;types.Transactions&#123;tx&#125;&#125;)<br><span class=\"hljs-comment\">//core/tx_pool.go:1022</span><br><span class=\"hljs-keyword\">go</span> pool.txFeed.Send(NewTxsEvent&#123;promoted&#125;)<br></code></pre></td></tr></table></figure>\n\n<p>在交易池中，有两处地方才会执行发送信号。<br>一是<strong>交易时用于替换已经存在的可执行交易</strong>时。<br>二是有<strong>新的一批交易从非可执行状态提升到可执行状态后</strong>。<br>外部只需要订阅 SubscribeNewTxsEvent(ch chan&lt;- NewTxsEvent)新可执行交易事件，则可实时接受交易。<br>在 geth 中网络层将<strong>订阅交易事件</strong>，以便实时广播。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-comment\">//eth/handler.go:213</span><br>pm.txsCh = <span class=\"hljs-built_in\">make</span>(<span class=\"hljs-keyword\">chan</span> core.NewTxsEvent, txChanSize)<br>pm.txsSub = pm.txpool.SubscribeNewTxsEvent(pm.txsCh)<br><span class=\"hljs-comment\">//eth/handler.go:781</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(pm *ProtocolManager)</span> <span class=\"hljs-title\">txBroadcastLoop</span><span class=\"hljs-params\">()</span></span> &#123;<br>   <span class=\"hljs-keyword\">for</span> &#123;<br>      <span class=\"hljs-keyword\">select</span> &#123;<br>      <span class=\"hljs-keyword\">case</span> event := &lt;-pm.txsCh:<br>         pm.BroadcastTxs(event.Txs)<br>      <span class=\"hljs-comment\">//...</span><br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>另外是矿工实时订阅交易，以便将交易打包到区块中。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-comment\">//miner/worker.go:207</span><br>worker.txsSub = eth.TxPool().SubscribeNewTxsEvent(worker.txsCh)<br><span class=\"hljs-comment\">//miner/worker.go:462</span><br>txs := <span class=\"hljs-built_in\">make</span>(<span class=\"hljs-keyword\">map</span>[common.Address]types.Transactions)<br><span class=\"hljs-keyword\">for</span> _, tx := <span class=\"hljs-keyword\">range</span> ev.Txs &#123;<br>\t\tacc, _ := types.Sender(w.current.signer, tx)<br>   \ttxs[acc] = <span class=\"hljs-built_in\">append</span>(txs[acc], tx)<br>&#125;<br>txset := types.NewTransactionsByPriceAndNonce(w.current.signer, txs)<br>w.commitTransactions(txset, coinbase, <span class=\"hljs-literal\">nil</span>)<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"清理交易池\"><a href=\"#清理交易池\" class=\"headerlink\" title=\"清理交易池\"></a>清理交易池</h1><p>交易池是完全存在内存中的，因此有大小限制，每当超过一定的阈值就需要清理。实际实现时，pending 的缓冲区容量默认为 4096，queue 的缓冲区容量默认为 1024。<br>清理的时机是交易池满的时候，清理的原则是价格较低的最先清理</p>\n<blockquote>\n<p>但是本项目没有设计要清理交易池</p>\n</blockquote>\n<h1 id=\"惩罚恶意账号\"><a href=\"#惩罚恶意账号\" class=\"headerlink\" title=\"惩罚恶意账号\"></a>惩罚恶意账号</h1><p>这也是 txpool 很重要的一个属性，可以防止恶意账户以发起大量垃圾交易。防止恶意用户造成：</p>\n<ol>\n<li>占用 txpool 空间</li>\n<li>浪费节点大量内存和 CPU</li>\n<li>降低打包性能</li>\n</ol>\n<p>** 只有当交易的总数量超过缓冲区大小时，txpool 才会认为有恶意账户发起大量交易。**pending 和 queued 缓冲区大小不同，但处理策略类似：</p>\n<ol>\n<li>pending 的缓冲区容量是 4096，当 pending 的交易数量多于此时，就会运行检查，每个账号的交易数量是否多于 16，把这些账号搜集出来，进行循环依次清理，什么意思呢？就是每轮只删除（移动到 queued）这些账号的每个账号 1 条交易，然后看数量是否降下来了，不满足再进行下一轮，直到满足。</li>\n<li>queued 的缓冲区容量是 1024，超过之后清理策略和 pending 差不多，但这里可是真删除了。</li>\n</ol>\n<p>该部分功能未抽象成单独的函数，而是在 promoteExecutables()中，就是在每次把 queued 交易转移到 pending 后执行的。<br><strong>本地交易的特权</strong>，txpool 虽然对交易有诸多限制，但如果交易是本节点的账号发起的，以上数量限制等都对他无效。所以，如果你用本节点账号不停的发送交易，并不会被认为是攻击者</p>\n<h1 id=\"回答问题\"><a href=\"#回答问题\" class=\"headerlink\" title=\"回答问题\"></a>回答问题</h1><ol>\n<li>用户发起的交易请求（不论以何种方式）是如何转变为实际的交易的；</li>\n</ol>\n<p>所有与交易请求相关的参数被赋值到一个结构体中，然后进行序列化转变为可存储和传输的形式，最后生成交易并进行签名</p>\n<ol start=\"2\">\n<li>产生的交易如果不能被及时处理，是如何进入交易池的？</li>\n</ol>\n<p>最终是调用一个 add 函数，添加到了一个队列里</p>\n<ol start=\"3\">\n<li>本地产生的交易和从网络中接收到的交易进入交易池是否有区别？</li>\n</ol>\n<p>有区别，底层都是调用 add 函数</p>\n<ol start=\"4\">\n<li>交易池的基本数据结构是怎么样的（优先队列？）</li>\n</ol>\n<p>交易池是一个结构体，核心是 pending 和 queue 两个 map，map 的键是一个地址，值是一个交易链表形成的队列</p>\n<ol start=\"5\">\n<li>从交易池中提取交易进行打包时顺序是怎么样的（调度算法）</li>\n</ol>\n<p>本地优先级大于远程交易</p>\n<p>我们可以理解为区块链底层利用交易池对并发产生的请求做了<strong>异步化</strong>，<strong>交易产生的时刻</strong>和<strong>交易被打包的时刻</strong>是<strong>随机</strong>的。</p>\n<blockquote>\n<p>在实现 TXpool 的时候为了保证数据的一致性会使用大量的锁</p>\n</blockquote>\n","more":"<h1 id=\"交易形成\"><a href=\"#交易形成\" class=\"headerlink\" title=\"交易形成\"></a>交易形成</h1><p>以下均为作品赛项目的内容。<br>首先，我们的交易请求会赋值到 TxRaw 结构体的一个实例中。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-comment\">//用于接收客户端发来的序列化post原始信息</span><br><span class=\"hljs-keyword\">type</span> TxRaw <span class=\"hljs-keyword\">struct</span> &#123;<br>\t<span class=\"hljs-comment\">//公钥hash</span><br>\tAddress []<span class=\"hljs-keyword\">byte</span> <span class=\"hljs-string\">`json:&quot;address&quot;`</span><br><br>\tFee <span class=\"hljs-keyword\">int</span> <span class=\"hljs-string\">`json:&quot;int&quot;`</span><br><br>\t<span class=\"hljs-comment\">//交易核心</span><br>\tRangeBloom bloom.RangeBloom <span class=\"hljs-string\">`json:&quot;rbloom&quot;`</span><br>\tTimeBloom  bloom.TimeBloom  <span class=\"hljs-string\">`json:&quot;tbloom&quot;`</span><br><br>\t<span class=\"hljs-comment\">//签名相关</span><br>\tPubkey sm2.PublicKey <span class=\"hljs-string\">`json:&quot;pubkey&quot;`</span><br>\tSign   []<span class=\"hljs-keyword\">byte</span>        <span class=\"hljs-string\">`json:&quot;sign&quot;`</span><br><br>\t<span class=\"hljs-comment\">//交易同态密文拼接，用于k-top查找</span><br>\tCipher <span class=\"hljs-keyword\">string</span> <span class=\"hljs-string\">`json:&quot;cipher&quot;`</span><br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<p>然后这个实例被传递到一个 SendTransaction 函数，用来创建一个交易 Tx。创建交易的过程如下：</p>\n<ol>\n<li>根据 Address 字段找到当前账户</li>\n<li>设置交易默认参数</li>\n<li>检查交易签名是否合法</li>\n<li>检查交易是否冲突</li>\n<li>对交易进行序列化，变为可存储和传输的形式。</li>\n<li>提交交易到交易池</li>\n</ol>\n<h1 id=\"交易管理\"><a href=\"#交易管理\" class=\"headerlink\" title=\"交易管理\"></a>交易管理</h1><p>以太坊将交易按状态分为两部分：<strong>可执行交易</strong>和<strong>非可执行交易</strong>。分别记录在 pending 容器中和 queue 容器中。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/1629942/1618542865374-f0325b19-9838-4ec6-95b4-307a899962bd.png#clientId=u272c35f2-3d2a-4&from=paste&height=321&id=u5bf56761&margin=%5Bobject%20Object%5D&originHeight=538&originWidth=1160&originalType=binary&size=164987&status=done&style=none&taskId=u567ff6dc-553f-4a1c-af77-71fc9a19a73&width=693\"><br>如上图所示，交易池先采用一个 txLookup (内部为 map）跟踪所有交易。同时将交易根据本地优先，价格优先原则将交易划分为两部分 queue 和 pending。而这两部交易则按账户分别跟踪。<br>为了不丢失未完成的本地交易，以太坊交易池通过 journal 文件存储和管理当前交易池中的本地交易，并定期更新存储。<br>下图是<strong>交易池对本地待处理交易的磁盘存储管理流程</strong>，涉及加载、实时写入和定期更新维护。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/1629942/1618543666828-ac2e3e32-c72f-4e7c-a240-b7bc1452cdcb.png#clientId=u272c35f2-3d2a-4&from=paste&height=826&id=ufc47fc0d&margin=%5Bobject%20Object%5D&originHeight=1356&originWidth=870&originalType=url&status=done&style=none&taskId=ubb8c227e-5868-49f4-b1ea-77abbe42349&width=530\"></p>\n<h2 id=\"存储交易\"><a href=\"#存储交易\" class=\"headerlink\" title=\"存储交易\"></a>存储交易</h2><p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/1629942/1618555946782-660f2f04-fbb0-4010-a9a6-c1097a44d0e2.png#clientId=u272c35f2-3d2a-4&from=paste&height=317&id=uc114cf13&margin=%5Bobject%20Object%5D&originHeight=432&originWidth=826&originalType=url&status=done&style=none&taskId=u8fb70d54-24fd-45a9-880e-9b7951920f0&width=606\"><br>当交易池新交易来自于本地账户时 ❶，如果已开启记录本地交易，则将此交易加入 journal ❷。到交易池时，将实时存储到 journal 文件中。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-comment\">//core/tx_pool.go:757</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(pool *TxPool)</span> <span class=\"hljs-title\">journalTx</span><span class=\"hljs-params\">(from common.Address, tx *types.Transaction)</span></span> &#123;<br>   <span class=\"hljs-comment\">// Only journal if it&#x27;s enabled and the transaction is local</span><br>   <span class=\"hljs-keyword\">if</span> pool.journal == <span class=\"hljs-literal\">nil</span> || !pool.locals.contains(from) &#123;<span class=\"hljs-comment\">//❶</span><br>      <span class=\"hljs-keyword\">return</span><br>   &#125;<br>   <span class=\"hljs-keyword\">if</span> err := pool.journal.insert(tx); err != <span class=\"hljs-literal\">nil</span> &#123; <span class=\"hljs-comment\">//❷</span><br>      log.Warn(<span class=\"hljs-string\">&quot;Failed to journal local transaction&quot;</span>, <span class=\"hljs-string\">&quot;err&quot;</span>, err)<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>而 journal.insert 则将交易实时写入文件流中 ❸，相当于实时存储到磁盘。而在写入时，是将交易进行 RLP 编码。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-comment\">//core/tx_journal.go:120</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(journal *txJournal)</span> <span class=\"hljs-title\">insert</span><span class=\"hljs-params\">(tx *types.Transaction)</span> <span class=\"hljs-title\">error</span></span> &#123;<br>   <span class=\"hljs-keyword\">if</span> journal.writer == <span class=\"hljs-literal\">nil</span> &#123;<br>      <span class=\"hljs-keyword\">return</span> errNoActiveJournal<br>   &#125;<br>   <span class=\"hljs-keyword\">if</span> err := rlp.Encode(journal.writer, tx); err != <span class=\"hljs-literal\">nil</span> &#123;<span class=\"hljs-comment\">//❸</span><br>      <span class=\"hljs-keyword\">return</span> err<br>   &#125;<br>   <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nil</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>插一嘴，为什么要用 RLP 编码？</p>\n</blockquote>\n<h3 id=\"什么是-RLP\"><a href=\"#什么是-RLP\" class=\"headerlink\" title=\"什么是 RLP\"></a>什么是 RLP</h3><p>RLP(Recursive Length Prefix) 递归长度前缀编码是以太坊中最常使用的序列化格式方法。<br>RLP 旨在<strong>成为高度简约的序列化方法</strong>，<strong>唯一目标</strong>就是<strong>存储嵌套的字节数组</strong>。<br>RLP 只是以嵌套数组形式存储结构型数据，由上层协议来确定数组的含义。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/1629942/1618557745071-1ffc52fc-51a4-40b4-a4a6-9834ee65566b.png#clientId=u272c35f2-3d2a-4&from=paste&height=443&id=u3b9d54f1&margin=%5Bobject%20Object%5D&originHeight=886&originWidth=1716&originalType=url&status=done&style=none&taskId=u8fd870e4-dcb8-44b2-bd3b-a5ba9cd4ba8&width=858\"><br>从图中可以看出，不同类型的数据，将有不同的前缀标识。 前缀也可以理解为报文头，通过报文头可准确获取报文内容。 图中灰色部分则为 RLP 编码输出前缀。</p>\n<h2 id=\"加载已存储交易\"><a href=\"#加载已存储交易\" class=\"headerlink\" title=\"加载已存储交易\"></a>加载已存储交易</h2><p>在交易池首次启动 journal 时，将主动将该文件已存储的交易加载到交易池。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-comment\">//core/tx_journal.go:61</span><br><span class=\"hljs-keyword\">if</span> _, err := os.Stat(journal.path); os.IsNotExist(err) &#123; <span class=\"hljs-comment\">//❶</span><br>   <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nil</span><br>&#125;<br><span class=\"hljs-comment\">// Open the journal for loading any past transactions</span><br>input, err := os.Open(journal.path) <span class=\"hljs-comment\">//❷</span><br><span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> &#123;<br>   <span class=\"hljs-keyword\">return</span> err<br>&#125;<br><span class=\"hljs-keyword\">defer</span> input.Close()<br></code></pre></td></tr></table></figure>\n\n<p>处理时，如果文件不存在则退出 ❶，否则 Open 文件，获得 input 文件流 ❷。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-comment\">//core/tx_journal.go:76</span><br>stream := rlp.NewStream(input, <span class=\"hljs-number\">0</span>)<span class=\"hljs-comment\">//❸</span><br>total, dropped := <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span><br></code></pre></td></tr></table></figure>\n\n<p>因为存储的内容格式是 rlp 编码内容，因此可以直接初始化 rlp 内容流 ❸，为连续解码做准备。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">var</span> (<br>   failure error<br>   batch   types.Transactions<br>)<br><span class=\"hljs-keyword\">for</span> &#123;<br>   tx := <span class=\"hljs-built_in\">new</span>(types.Transaction)<br>   <span class=\"hljs-keyword\">if</span> err = stream.Decode(tx); err != <span class=\"hljs-literal\">nil</span> &#123; <span class=\"hljs-comment\">//❹</span><br>      <span class=\"hljs-keyword\">if</span> err != io.EOF &#123;<br>         failure = err<br>      &#125;<br>      <span class=\"hljs-keyword\">if</span> batch.Len() &gt; <span class=\"hljs-number\">0</span> &#123;<span class=\"hljs-comment\">//❼</span><br>         loadBatch(batch)<br>      &#125;<br>      <span class=\"hljs-keyword\">break</span><br>   &#125;<br>   total++<br><br>   <span class=\"hljs-keyword\">if</span> batch = <span class=\"hljs-built_in\">append</span>(batch, tx); batch.Len() &gt; <span class=\"hljs-number\">1024</span> &#123;<span class=\"hljs-comment\">//❺</span><br>      loadBatch(batch)<span class=\"hljs-comment\">//❻</span><br>      batch = batch[:<span class=\"hljs-number\">0</span>]<br>   &#125;<br>&#125;<br><br>loadBatch := <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(txs types.Transactions)</span></span> &#123;<br>   <span class=\"hljs-keyword\">for</span> _, err := <span class=\"hljs-keyword\">range</span> add(txs) &#123;<br>      <span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> &#123;<br>         log.Debug(<span class=\"hljs-string\">&quot;Failed to add journaled transaction&quot;</span>, <span class=\"hljs-string\">&quot;err&quot;</span>, err)<br>         dropped++ <span class=\"hljs-comment\">//❽</span><br>      &#125;<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>直接进入 for 循环遍历，不断从 stream 中一笔笔地解码出交易 ❹。<br>但交易并非单笔直接载入交易池，而是采用批量提交模式，每 1024 笔交易提交一次 ❺。<br>批量写入，有利于降低交易池在每次写入交易后的更新。一个批次只需要更新（排序与超限处理等）一次。当然在遍历结束时（err==io.EOF）,也需要将当前批次中的交易载入 ❼。<br>loadBatch 就是将交易一批次加入到交易池，并获得交易池的每笔交易的处理情况。如果交易加入失败，则进行计数 ❽。最终在 load 方法执行完毕时，显示交易载入情况。</p>\n<h1 id=\"交易添加到交易池\"><a href=\"#交易添加到交易池\" class=\"headerlink\" title=\"交易添加到交易池\"></a>交易添加到交易池</h1><p>SendTransaction 最后调用 SubmitTransaction 函数将交易提交到交易池，不过，更底层的调用是 AddLocals 函数。<br>这里需要注意，本地交易时调用 AddLocals，而从对等 p2p 节点发来的交易调用的是另一个函数，AddRemotes 函数。调用这两个函数之前都应该验证交易的有效性。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/1629942/1618493164007-51ddf037-04a1-45f3-bab1-513adb15efa4.png#clientId=u272c35f2-3d2a-4&from=paste&height=264&id=ue6089192&margin=%5Bobject%20Object%5D&originHeight=528&originWidth=1174&originalType=binary&size=236384&status=done&style=none&taskId=uf8820385-fb3b-42bb-ab6f-9ae0571e933&width=587\"></p>\n<blockquote>\n<p>因为交易时通过节点的 API 接收，因此此交易被视为一笔来自本地(local)（图中用红球表示），在经过一系列校验和处理后。交易成功进入交易池，随后向已连接的邻近节点发送此交易。<br>当邻近节点，如矿工节点从邻近节点接收到此交易时，在进入交易池之前。会将交易标记为来自远方（remote）的交易（图中用绿球表示）。也需要经过校验和处理后，进入矿工节点的交易池，等待矿工打包到区块中。<br>如果邻近节点，不是矿工，也无妨。因为任何节点会默认将接受到得合法交易及时发送给邻近节点。得益于 P2P 网络，一笔交易平均在 6s 内扩散到整个以太坊公链网络的各个节点中。</p>\n</blockquote>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/1629942/1618538532731-ffb59787-cf5c-4c3d-b310-080abcd97de6.png#clientId=u272c35f2-3d2a-4&from=paste&height=254&id=u528314c1&margin=%5Bobject%20Object%5D&originHeight=373&originWidth=924&originalType=binary&size=74906&status=done&style=none&taskId=uae16074d-7e82-4415-a530-f8a271e0047&width=629\"><br>下面我们来看一下交易池的结构：</p>\n<blockquote>\n<p>这是以太坊的</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-comment\">// TxPool contains all currently known transactions. Transactions</span><br><span class=\"hljs-comment\">// enter the pool when they are received from the network or submitted</span><br><span class=\"hljs-comment\">// locally. They exit the pool when they are included in the blockchain.</span><br><span class=\"hljs-comment\">//</span><br><span class=\"hljs-comment\">// The pool separates processable transactions (which can be applied to the</span><br><span class=\"hljs-comment\">// current state) and future transactions. Transactions move between those</span><br><span class=\"hljs-comment\">// two states over time as they are received and processed.</span><br><span class=\"hljs-keyword\">type</span> TxPool <span class=\"hljs-keyword\">struct</span> &#123;<br>\tconfig      TxPoolConfig<br>\tchainconfig *params.ChainConfig<br>\tchain       blockChain<br>\tgasPrice    *big.Int<br>\ttxFeed      event.Feed<br>\tscope       event.SubscriptionScope<br>\tsigner      types.Signer<br>\tmu          sync.RWMutex<br><br>\tistanbul <span class=\"hljs-keyword\">bool</span> <span class=\"hljs-comment\">// Fork indicator whether we are in the istanbul stage.</span><br><br>\tcurrentState  *state.StateDB <span class=\"hljs-comment\">// Current state in the blockchain head</span><br>\tpendingNonces *txNoncer      <span class=\"hljs-comment\">// Pending state tracking virtual nonces</span><br>\tcurrentMaxGas <span class=\"hljs-keyword\">uint64</span>         <span class=\"hljs-comment\">// Current gas limit for transaction caps</span><br><br>\tlocals  *accountSet <span class=\"hljs-comment\">// Set of local transaction to exempt from eviction rules</span><br>\tjournal *txJournal  <span class=\"hljs-comment\">// Journal of local transaction to back up to disk</span><br><br>\tpending <span class=\"hljs-keyword\">map</span>[common.Address]*txList   <span class=\"hljs-comment\">// All currently processable transactions</span><br>\tqueue   <span class=\"hljs-keyword\">map</span>[common.Address]*txList   <span class=\"hljs-comment\">// Queued but non-processable transactions</span><br>\tbeats   <span class=\"hljs-keyword\">map</span>[common.Address]time.Time <span class=\"hljs-comment\">// Last heartbeat from each known account</span><br>\tall     *txLookup                    <span class=\"hljs-comment\">// All transactions to allow lookups</span><br>\tpriced  *txPricedList                <span class=\"hljs-comment\">// All transactions sorted by price</span><br><br>\tchainHeadCh     <span class=\"hljs-keyword\">chan</span> ChainHeadEvent<br>\tchainHeadSub    event.Subscription<br>\treqResetCh      <span class=\"hljs-keyword\">chan</span> *txpoolResetRequest<br>\treqPromoteCh    <span class=\"hljs-keyword\">chan</span> *accountSet<br>\tqueueTxEventCh  <span class=\"hljs-keyword\">chan</span> *types.Transaction<br>\treorgDoneCh     <span class=\"hljs-keyword\">chan</span> <span class=\"hljs-keyword\">chan</span> <span class=\"hljs-keyword\">struct</span>&#123;&#125;<br>\treorgShutdownCh <span class=\"hljs-keyword\">chan</span> <span class=\"hljs-keyword\">struct</span>&#123;&#125;  <span class=\"hljs-comment\">// requests shutdown of scheduleReorgLoop</span><br>\twg              sync.WaitGroup <span class=\"hljs-comment\">// tracks loop, scheduleReorgLoop</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>其中最核心的是两个字段，pending 和 queue<br><strong>queued 存放未来的、当前无法执行的交易</strong>。以太坊使用 nonce 值决定某个账户的交易顺序，多条交易值 nonce 值必须连续，如果和过去的交易不连续，则无法执行，我们不妨使用 nonce 值，标记交易的号码，nonce 为 10 的交易，称为第 10 号交易。举个例子，当前账户的 nonce 是 10，txpool 中有该账户的第 100 号交易，但 txpool 中没有第 11<del>99 号交易，这些交易的缺失，造成第 100 号交易无法执行，所以第 100 号交易就是未来的交易、不可执行的交易，存放在 queue 中。<br><strong>pending 存放可执行的交易</strong>。比如我们把上面的 11</del>99 号交易补全了，那么 11~100 号交易都可以进入到 pending，因为这些交易都是连续的，都可以打包进区块。<br>当节点收到交易（本地节点发起的或 peer 广播来的）时，会先存放到 queued，txpool 在某些情况下，把 queued 中可执行的交易，转移到 pending 中。<br>其中 config 的结构体为：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-comment\">// TxPoolConfig are the configuration parameters of the transaction pool.</span><br><span class=\"hljs-keyword\">type</span> TxPoolConfig <span class=\"hljs-keyword\">struct</span> &#123;<br>\tLocals    []common.Address <span class=\"hljs-comment\">// Addresses that should be treated by default as local</span><br>\tNoLocals  <span class=\"hljs-keyword\">bool</span>             <span class=\"hljs-comment\">// Whether local transaction handling should be disabled</span><br>\tJournal   <span class=\"hljs-keyword\">string</span>           <span class=\"hljs-comment\">// Journal of local transactions to survive node restarts</span><br>\tRejournal time.Duration    <span class=\"hljs-comment\">// Time interval to regenerate the local transaction journal</span><br><br>\tPriceLimit <span class=\"hljs-keyword\">uint64</span> <span class=\"hljs-comment\">// Minimum gas price to enforce for acceptance into the pool</span><br>\tPriceBump  <span class=\"hljs-keyword\">uint64</span> <span class=\"hljs-comment\">// Minimum price bump percentage to replace an already existing transaction (nonce)</span><br><br>\tAccountSlots <span class=\"hljs-keyword\">uint64</span> <span class=\"hljs-comment\">// Number of executable transaction slots guaranteed per account</span><br>\tGlobalSlots  <span class=\"hljs-keyword\">uint64</span> <span class=\"hljs-comment\">// Maximum number of executable transaction slots for all accounts</span><br>\tAccountQueue <span class=\"hljs-keyword\">uint64</span> <span class=\"hljs-comment\">// Maximum number of non-executable transaction slots permitted per account</span><br>\tGlobalQueue  <span class=\"hljs-keyword\">uint64</span> <span class=\"hljs-comment\">// Maximum number of non-executable transaction slots for all accounts</span><br><br>\tLifetime time.Duration <span class=\"hljs-comment\">// Maximum amount of time non-executable transaction are queued</span><br><br>\t<span class=\"hljs-comment\">// Quorum</span><br>\tTransactionSizeLimit <span class=\"hljs-keyword\">uint64</span> <span class=\"hljs-comment\">// Maximum size allowed for valid transaction (in KB)</span><br>\tMaxCodeSize          <span class=\"hljs-keyword\">uint64</span> <span class=\"hljs-comment\">// Maximum size allowed of contract code that can be deployed (in KB)</span><br><br>&#125;<br><br><span class=\"hljs-keyword\">var</span> DefaultTxPoolConfig = TxPoolConfig&#123;<br>\tJournal:   <span class=\"hljs-string\">&quot;transactions.rlp&quot;</span>,<br>\tRejournal: time.Hour,<br><br>\tPriceLimit: <span class=\"hljs-number\">1</span>,<br>\tPriceBump:  <span class=\"hljs-number\">10</span>,<br><br>\tAccountSlots: <span class=\"hljs-number\">16</span>,<br>\tGlobalSlots:  <span class=\"hljs-number\">4096</span>,<br>\tAccountQueue: <span class=\"hljs-number\">64</span>,<br>\tGlobalQueue:  <span class=\"hljs-number\">1024</span>,<br><br>\tLifetime: <span class=\"hljs-number\">3</span> * time.Hour,<br><br>\t<span class=\"hljs-comment\">// Quorum</span><br>\tTransactionSizeLimit: <span class=\"hljs-number\">64</span>,<br>\tMaxCodeSize:          <span class=\"hljs-number\">24</span>,<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>Locals: 定义了一组视为 local 交易的账户地址。任何来自此清单的交易均被视为 local 交易。</li>\n<li>NoLocals: 是否禁止 local 交易处理。默认为 fasle,允许 local 交易。如果禁止，则来自 local 的交易均视为 remote 交易处理。</li>\n<li>Journal： 存储 local 交易记录的文件名，默认是./transactions.rlp。</li>\n<li>Rejournal：定期将 local 交易存储文件中的时间间隔。默认为每小时一次。</li>\n<li>PriceLimit： remote 交易进入交易池的最低 Price 要求。此设置对 local 交易无效。默认值 1。</li>\n<li>PriceBump：替换交易时所要求的价格上调涨幅比例最低要求。任何低于要求的替换交易均被拒绝。</li>\n<li>AccountSlots： 当交易池中可执行交易（是已在等待矿工打包的交易）量超标时，允许每个账户可以保留在交易池最低交易数。默认值是 16 笔。</li>\n<li>GlobalSlots： 交易池中所允许的可执行交易量上限，高于上限时将释放部分交易。默认是 4096 笔交易。</li>\n<li>AccountQueue：交易池中单个账户非可执行交易上限，默认是 64 笔。</li>\n<li>GlobalQueue： 交易池中所有非可执行交易上限，默认 1024 笔。</li>\n<li>Lifetime： 允许 remote 的非可执行交易可在交易池存活的最长时间。交易池每分钟检查一次，一旦发现有超期的 remote 账户，则移除该账户下的所有非可执行交易。默认为 3 小时。<blockquote>\n<p>参考：<a href=\"https://learnblockchain.cn/books/geth/part2/txpool/txpool.html\">https://learnblockchain.cn/books/geth/part2/txpool/txpool.html</a></p>\n</blockquote>\n</li>\n</ul>\n<p>上面配置中，包含两个重要概念<strong>可执行交易</strong>和<strong>非可执行交易</strong>。可执行交易是指从交易池中择优选出的一部分交易可以被执行，打包到区块中。非可执行交易则相反，任何刚进入交易池的交易均属于非可执行状态，在某一个时刻才会提升为可执行状态。</p>\n<blockquote>\n<p>这是 dag 的</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">type</span> TxPool <span class=\"hljs-keyword\">struct</span> &#123;<br>\t<span class=\"hljs-comment\">// The following variables must only be used atomically.</span><br>\tlastUpdated <span class=\"hljs-keyword\">int64</span> <span class=\"hljs-comment\">// last time pool was updated</span><br><br>\tmtx           sync.RWMutex<br>\tcfg           Config<br>\tpool          <span class=\"hljs-keyword\">map</span>[chainhash.Hash]*TxDesc<br>\torphans       <span class=\"hljs-keyword\">map</span>[chainhash.Hash]*orphanTx<br>\torphansByPrev <span class=\"hljs-keyword\">map</span>[wire.OutPoint]<span class=\"hljs-keyword\">map</span>[chainhash.Hash]*soterutil.Tx<br>\toutpoints     <span class=\"hljs-keyword\">map</span>[wire.OutPoint]*soterutil.Tx<br>\tpennyTotal    <span class=\"hljs-keyword\">float64</span> <span class=\"hljs-comment\">// exponentially decaying total for penny spends.</span><br>\tlastPennyUnix <span class=\"hljs-keyword\">int64</span>   <span class=\"hljs-comment\">// unix time of last ``penny spend&#x27;&#x27;</span><br><br>\t<span class=\"hljs-comment\">// nextExpireScan is the time after which the orphan pool will be</span><br>\t<span class=\"hljs-comment\">// scanned in order to evict orphans.  This is NOT a hard deadline as</span><br>\t<span class=\"hljs-comment\">// the scan will only run when an orphan is added to the pool as opposed</span><br>\t<span class=\"hljs-comment\">// to on an unconditional timer.</span><br>\tnextExpireScan time.Time<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>交易提交到交易池还需要一个 add 函数，逻辑很简单：</p>\n<ol>\n<li>验证交易的有效性</li>\n<li>如果 nonce 已存在，忽略。</li>\n<li>如果 nonce 不存在，不可以替换 pending 中的任何交易，此时将新的交易插入 queue 的末尾</li>\n</ol>\n<p>注：交易中的 nonce 指的是 from 账户发出交易的次数, 从 0 开始递增，同一账户的交易会被依次确认，所以同一个 nonce 代表是同一个交易，会优先选择 price 更高的交易。</p>\n<blockquote>\n<p>这是我们的</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">type</span> TxPool <span class=\"hljs-keyword\">struct</span> &#123;<br>    mtx           sync.RWMutex<br>    config      TxPoolConfig<br>    currentState  *state.StateDB <span class=\"hljs-comment\">// 区块的当前状态</span><br>    locals  *accountSet <span class=\"hljs-comment\">//本地交易</span><br>    journal *txJournal  <span class=\"hljs-comment\">//  用于存储local交易记录的文件</span><br><br>\tpending <span class=\"hljs-keyword\">map</span>[common.Address]*txList   <span class=\"hljs-comment\">// 存放可执行的交易</span><br>\tqueue   <span class=\"hljs-keyword\">map</span>[common.Address]*txList   <span class=\"hljs-comment\">// queued存放未来的、当前无法执行的交易</span><br><br>    chainHeadSub    event.Subscription<span class=\"hljs-comment\">//用于订阅区块</span><br>    reqPromoteCh    <span class=\"hljs-keyword\">chan</span> *accountSet<span class=\"hljs-comment\">//账户集合</span><br>\tqueueTxEventCh  <span class=\"hljs-keyword\">chan</span> *dag.Tx<span class=\"hljs-comment\">//Tx队列事件</span><br>&#125;<br><br><span class=\"hljs-keyword\">type</span> TxPoolConfig <span class=\"hljs-keyword\">struct</span> &#123;<br>\tLocals    []common.Address<br>\tJournal   <span class=\"hljs-keyword\">string</span><br>\tRejournal time.Duration<br><br>\tAccountSlots <span class=\"hljs-keyword\">uint64</span><br>\tGlobalSlots  <span class=\"hljs-keyword\">uint64</span><br>\tAccountQueue <span class=\"hljs-keyword\">uint64</span><br>\tGlobalQueue  <span class=\"hljs-keyword\">uint64</span><br><br>\tLifetime time.Duration<br>&#125;<br><br><span class=\"hljs-keyword\">var</span> DefaultTxPoolConfig = TxPoolConfig&#123;<br>\tJournal:   <span class=\"hljs-string\">&quot;transactions.rlp&quot;</span>,<br>\tRejournal: time.Hour,<br><br>\tAccountSlots: <span class=\"hljs-number\">16</span>,<br>\tGlobalSlots:  <span class=\"hljs-number\">8192</span>,<br>\tAccountQueue: <span class=\"hljs-number\">64</span>,<br>\tGlobalQueue:  <span class=\"hljs-number\">1024</span>,<br><br>\tLifetime: <span class=\"hljs-number\">3</span> * time.Hour,<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>当节点收到交易（本地节点发起的或 peer 广播来的）时，会先存放到 queued，txpool 在某些情况下，把 queued 中可执行的交易，转移到 pending 中。</p>\n<ul>\n<li>Locals: 定义了一组视为 local 交易的账户地址。任何来自此清单的交易均被视为 local 交易。</li>\n<li>Journal： 存储 local 交易记录的文件名，默认是./transactions.rlp。</li>\n<li>Rejournal：定期将 local 交易存储文件中的时间间隔。默认为每小时一次。</li>\n<li>AccountSlots： 当交易池中可执行交易（是已在等待矿工打包的交易）量超标时，允许每个账户可以保留在交易池最低交易数。默认值是 16 笔。</li>\n<li>GlobalSlots： 交易池中所允许的可执行交易量上限，高于上限时将释放部分交易。默认是 8192 笔交易。</li>\n<li>AccountQueue：交易池中单个账户非可执行交易上限，默认是 64 笔。</li>\n<li>GlobalQueue： 交易池中所有非可执行交易上限，默认 1024 笔。</li>\n<li>Lifetime： 允许 remote 的非可执行交易可在交易池存活的最长时间。交易池每分钟检查一次，一旦发现有超期的 remote 账户，则移除该账户下的所有非可执行交易。默认为 3 小时。</li>\n</ul>\n<h2 id=\"链状态\"><a href=\"#链状态\" class=\"headerlink\" title=\"链状态\"></a>链状态</h2><p>在交易池启动后，将订阅链的区块头事件：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-comment\">//core/tx_pool.go:274</span><br>pool.chainHeadSub = pool.chain.SubscribeChainHeadEvent(pool.chainHeadCh)<br></code></pre></td></tr></table></figure>\n\n<p>并开始监听新事件：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-comment\">//core/tx_pool.go:305</span><br><span class=\"hljs-keyword\">for</span> &#123;<br>   <span class=\"hljs-keyword\">select</span> &#123;<br>   <span class=\"hljs-comment\">// Handle ChainHeadEvent</span><br>   <span class=\"hljs-keyword\">case</span> ev := &lt;-pool.chainHeadCh:<br>      <span class=\"hljs-keyword\">if</span> ev.Block != <span class=\"hljs-literal\">nil</span> &#123;<br>         pool.mu.Lock()<br>         <span class=\"hljs-keyword\">if</span> pool.chainconfig.IsHomestead(ev.Block.Number()) &#123;<br>            pool.homestead = <span class=\"hljs-literal\">true</span><br>         &#125;<br>         pool.reset(head.Header(), ev.Block.Header())<br>         head = ev.Block<br><br>         pool.mu.Unlock()<br>      &#125;<br>  <span class=\"hljs-comment\">//...</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>接收到事件后，将执行 func (pool *TxPool) reset(oldHead, newHead *types.Header)方法更新 state 和处理交易。核心是将交易池中已经不符合要求的交易删除并更新整理交易</p>\n<h2 id=\"本地交易\"><a href=\"#本地交易\" class=\"headerlink\" title=\"本地交易\"></a>本地交易</h2><p>在交易池中将交易标记为 local 的有多种用途：</p>\n<ol>\n<li>在本地磁盘存储已发送的交易。这样，本地交易不会丢失，重启节点时可以重新加载到交易池，实时广播出去。</li>\n<li>可以作为外部程序和以太坊沟通的一个渠道。外部程序只需要监听文件内容变化，则可以获得交易清单。</li>\n<li>local 交易可优先于 remote 交易。对交易量的限制等操作，不影响 local 下的账户和交易。</li>\n</ol>\n<p>对应本地交易存储，在启动交易池时根据配置开启本地交易存储能力：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-comment\">//core/tx_pool.go:264</span><br><span class=\"hljs-keyword\">if</span> !config.NoLocals &amp;&amp; config.Journal != <span class=\"hljs-string\">&quot;&quot;</span> &#123;<br>\t\tpool.journal = newTxJournal(config.Journal)<br>\t\t<span class=\"hljs-keyword\">if</span> err := pool.journal.load(pool.AddLocals); err != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t\tlog.Warn(<span class=\"hljs-string\">&quot;Failed to load transaction journal&quot;</span>, <span class=\"hljs-string\">&quot;err&quot;</span>, err)<br>\t\t&#125;<br>    <span class=\"hljs-comment\">//...</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>并从磁盘中加载已有交易到交易池。在新的 local 交易进入交易池时，将被实时写入 journal 文件。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-comment\">// core/tx_pool.go:757</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(pool *TxPool)</span> <span class=\"hljs-title\">journalTx</span><span class=\"hljs-params\">(from common.Address, tx *types.Transaction)</span></span> &#123;<br>   <span class=\"hljs-keyword\">if</span> pool.journal == <span class=\"hljs-literal\">nil</span> || !pool.locals.contains(from) &#123;<br>      <span class=\"hljs-keyword\">return</span><br>   &#125;<br>   <span class=\"hljs-keyword\">if</span> err := pool.journal.insert(tx); err != <span class=\"hljs-literal\">nil</span> &#123;<br>      log.Warn(<span class=\"hljs-string\">&quot;Failed to journal local transaction&quot;</span>, <span class=\"hljs-string\">&quot;err&quot;</span>, err)<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>从上可看到，<strong>只有属于 local 账户的交易才会被记录</strong>。你又没有注意到，如果仅仅是这样的话，journal 文件是否会跟随本地交易而无限增长？答案是否定的，<strong>虽然无法实时从 journal 中移除交易。但是支持定期更新 journal 文件</strong>。<br><strong>journal 并不是保存所有的本地交易以及历史</strong>，他<strong>仅仅是存储当前交易池中存在的本地交易</strong>。因此交易池会定期对 journal 文件执行 rotate，将交易池中的本地交易写入 journal 文件，并丢弃旧数据。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\">journal := time.NewTicker(pool.config.Rejournal)<br><span class=\"hljs-comment\">//...</span><br><span class=\"hljs-comment\">//core/tx_pool.go:353</span><br><span class=\"hljs-keyword\">case</span> &lt;-journal.C:<br>\t\t\t<span class=\"hljs-keyword\">if</span> pool.journal != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t\t\tpool.mu.Lock()<br>\t\t\t\t<span class=\"hljs-keyword\">if</span> err := pool.journal.rotate(pool.local()); err != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t\t\t\tlog.Warn(<span class=\"hljs-string\">&quot;Failed to rotate local tx journal&quot;</span>, <span class=\"hljs-string\">&quot;err&quot;</span>, err)<br>\t\t\t\t&#125;<br>\t\t\t\tpool.mu.Unlock()<br>\t\t\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"新交易信号\"><a href=\"#新交易信号\" class=\"headerlink\" title=\"新交易信号\"></a>新交易信号</h2><p>文章开头，有提到<strong>进入交易池的交易将被广播到网络</strong>中。这<strong>是依赖于交易池支持外部订阅新交易事件信号</strong>。任何<strong>订阅此事件的子模块</strong>，在交易池出现新的可执行交易时，均可实时接受到此事件通知，并获得新交易信息。</p>\n<blockquote>\n<p>需要注意的是并非所有进入交易池的交易均被通知外部，而是只有交易从非可执行状态变成可执行状态后才会发送信号。</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-comment\">//core/tx_pool.go:705</span><br><span class=\"hljs-keyword\">go</span> pool.txFeed.Send(NewTxsEvent&#123;types.Transactions&#123;tx&#125;&#125;)<br><span class=\"hljs-comment\">//core/tx_pool.go:1022</span><br><span class=\"hljs-keyword\">go</span> pool.txFeed.Send(NewTxsEvent&#123;promoted&#125;)<br></code></pre></td></tr></table></figure>\n\n<p>在交易池中，有两处地方才会执行发送信号。<br>一是<strong>交易时用于替换已经存在的可执行交易</strong>时。<br>二是有<strong>新的一批交易从非可执行状态提升到可执行状态后</strong>。<br>外部只需要订阅 SubscribeNewTxsEvent(ch chan&lt;- NewTxsEvent)新可执行交易事件，则可实时接受交易。<br>在 geth 中网络层将<strong>订阅交易事件</strong>，以便实时广播。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-comment\">//eth/handler.go:213</span><br>pm.txsCh = <span class=\"hljs-built_in\">make</span>(<span class=\"hljs-keyword\">chan</span> core.NewTxsEvent, txChanSize)<br>pm.txsSub = pm.txpool.SubscribeNewTxsEvent(pm.txsCh)<br><span class=\"hljs-comment\">//eth/handler.go:781</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(pm *ProtocolManager)</span> <span class=\"hljs-title\">txBroadcastLoop</span><span class=\"hljs-params\">()</span></span> &#123;<br>   <span class=\"hljs-keyword\">for</span> &#123;<br>      <span class=\"hljs-keyword\">select</span> &#123;<br>      <span class=\"hljs-keyword\">case</span> event := &lt;-pm.txsCh:<br>         pm.BroadcastTxs(event.Txs)<br>      <span class=\"hljs-comment\">//...</span><br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>另外是矿工实时订阅交易，以便将交易打包到区块中。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-comment\">//miner/worker.go:207</span><br>worker.txsSub = eth.TxPool().SubscribeNewTxsEvent(worker.txsCh)<br><span class=\"hljs-comment\">//miner/worker.go:462</span><br>txs := <span class=\"hljs-built_in\">make</span>(<span class=\"hljs-keyword\">map</span>[common.Address]types.Transactions)<br><span class=\"hljs-keyword\">for</span> _, tx := <span class=\"hljs-keyword\">range</span> ev.Txs &#123;<br>\t\tacc, _ := types.Sender(w.current.signer, tx)<br>   \ttxs[acc] = <span class=\"hljs-built_in\">append</span>(txs[acc], tx)<br>&#125;<br>txset := types.NewTransactionsByPriceAndNonce(w.current.signer, txs)<br>w.commitTransactions(txset, coinbase, <span class=\"hljs-literal\">nil</span>)<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"清理交易池\"><a href=\"#清理交易池\" class=\"headerlink\" title=\"清理交易池\"></a>清理交易池</h1><p>交易池是完全存在内存中的，因此有大小限制，每当超过一定的阈值就需要清理。实际实现时，pending 的缓冲区容量默认为 4096，queue 的缓冲区容量默认为 1024。<br>清理的时机是交易池满的时候，清理的原则是价格较低的最先清理</p>\n<blockquote>\n<p>但是本项目没有设计要清理交易池</p>\n</blockquote>\n<h1 id=\"惩罚恶意账号\"><a href=\"#惩罚恶意账号\" class=\"headerlink\" title=\"惩罚恶意账号\"></a>惩罚恶意账号</h1><p>这也是 txpool 很重要的一个属性，可以防止恶意账户以发起大量垃圾交易。防止恶意用户造成：</p>\n<ol>\n<li>占用 txpool 空间</li>\n<li>浪费节点大量内存和 CPU</li>\n<li>降低打包性能</li>\n</ol>\n<p>** 只有当交易的总数量超过缓冲区大小时，txpool 才会认为有恶意账户发起大量交易。**pending 和 queued 缓冲区大小不同，但处理策略类似：</p>\n<ol>\n<li>pending 的缓冲区容量是 4096，当 pending 的交易数量多于此时，就会运行检查，每个账号的交易数量是否多于 16，把这些账号搜集出来，进行循环依次清理，什么意思呢？就是每轮只删除（移动到 queued）这些账号的每个账号 1 条交易，然后看数量是否降下来了，不满足再进行下一轮，直到满足。</li>\n<li>queued 的缓冲区容量是 1024，超过之后清理策略和 pending 差不多，但这里可是真删除了。</li>\n</ol>\n<p>该部分功能未抽象成单独的函数，而是在 promoteExecutables()中，就是在每次把 queued 交易转移到 pending 后执行的。<br><strong>本地交易的特权</strong>，txpool 虽然对交易有诸多限制，但如果交易是本节点的账号发起的，以上数量限制等都对他无效。所以，如果你用本节点账号不停的发送交易，并不会被认为是攻击者</p>\n<h1 id=\"回答问题\"><a href=\"#回答问题\" class=\"headerlink\" title=\"回答问题\"></a>回答问题</h1><ol>\n<li>用户发起的交易请求（不论以何种方式）是如何转变为实际的交易的；</li>\n</ol>\n<p>所有与交易请求相关的参数被赋值到一个结构体中，然后进行序列化转变为可存储和传输的形式，最后生成交易并进行签名</p>\n<ol start=\"2\">\n<li>产生的交易如果不能被及时处理，是如何进入交易池的？</li>\n</ol>\n<p>最终是调用一个 add 函数，添加到了一个队列里</p>\n<ol start=\"3\">\n<li>本地产生的交易和从网络中接收到的交易进入交易池是否有区别？</li>\n</ol>\n<p>有区别，底层都是调用 add 函数</p>\n<ol start=\"4\">\n<li>交易池的基本数据结构是怎么样的（优先队列？）</li>\n</ol>\n<p>交易池是一个结构体，核心是 pending 和 queue 两个 map，map 的键是一个地址，值是一个交易链表形成的队列</p>\n<ol start=\"5\">\n<li>从交易池中提取交易进行打包时顺序是怎么样的（调度算法）</li>\n</ol>\n<p>本地优先级大于远程交易</p>\n<p>我们可以理解为区块链底层利用交易池对并发产生的请求做了<strong>异步化</strong>，<strong>交易产生的时刻</strong>和<strong>交易被打包的时刻</strong>是<strong>随机</strong>的。</p>\n<blockquote>\n<p>在实现 TXpool 的时候为了保证数据的一致性会使用大量的锁</p>\n</blockquote>","categories":[],"tags":[]}