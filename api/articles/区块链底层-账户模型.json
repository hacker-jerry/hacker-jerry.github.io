{"title":"区块链底层-账户模型","slug":"区块链底层-账户模型","date":"2021-04-17T14:32:44.000Z","updated":"2022-11-05T08:12:43.846Z","comments":true,"path":"api/articles/区块链底层-账户模型.json","realPath":null,"excerpt":"我们采用和以太坊相似的账户模型。","covers":["https://cdn.nlark.com/yuque/0/2021/png/1629942/1619187341401-ce4d1b34-e648-4a85-86fb-617d1b2096b8.png#clientId=u7a530312-f976-4&from=paste&height=318&id=uadb7d967&margin=%5Bobject%20Object%5D&originHeight=1006&originWidth=1062&originalType=url&status=done&style=none&taskId=u8125fdd8-2c02-4142-8ff6-2a5b708f249&width=336"],"cover":"https://cdn.nlark.com/yuque/0/2021/png/1629942/1619187341401-ce4d1b34-e648-4a85-86fb-617d1b2096b8.png#clientId=u7a530312-f976-4&from=paste&height=318&id=uadb7d967&margin=%5Bobject%20Object%5D&originHeight=1006&originWidth=1062&originalType=url&status=done&style=none&taskId=u8125fdd8-2c02-4142-8ff6-2a5b708f249&width=336","content":"<p>我们采用和以太坊相似的账户模型。</p>\n<a id=\"more\"></a>\n\n<h1 id=\"账户数据结构\"><a href=\"#账户数据结构\" class=\"headerlink\" title=\"账户数据结构\"></a>账户数据结构</h1><p>以太坊数据以账户为单位组织，账户数据的变更引起账户状态变化, 从而引起以太坊状态变化。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-comment\">// core/state/state_object.go:100</span><br><span class=\"hljs-keyword\">type</span> Account <span class=\"hljs-keyword\">struct</span> &#123;<br>    Nonce    <span class=\"hljs-keyword\">uint64</span><br>    Balance  *big.Int<br>    Root     common.Hash<br>    CodeHash []<span class=\"hljs-keyword\">byte</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>在密码学领域，Nonce 代表一个只使用一次的数字。它往往是一个随机或伪随机数，以避免重复。 以太坊账户中加入 Nonce，可避免重放攻击（不过不是随机产生）。账户 Nonce 起始值是 0，后续每触发一次账户执行则 Nonce 值计加一次。 其中一处的计数逻辑如下：</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-comment\">// core/state_transition.go:212</span><br>st.state.SetNonce(msg.From(), st.state.GetNonce(sender.Address())+<span class=\"hljs-number\">1</span>)<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>Balance 则记录该账户所拥有的以太（ETH）数量，称为账户余额.</li>\n</ul>\n<p>当然必须保证转账方余额充足，在转移前需要 CanTransfer 检查， 如果余额充足，则执行 Transfer 转移 Value 数量的以太。</p>\n<ul>\n<li>账户状态哈希值 StateRoot，是一颗默克尔压缩前缀树（Merkle Patricia Tree）的根值。可以直接利用 StateRoot 从 Leveldb 中快速读取具体的某个状态数据</li>\n</ul>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/1629942/1619187341401-ce4d1b34-e648-4a85-86fb-617d1b2096b8.png#clientId=u7a530312-f976-4&from=paste&height=318&id=uadb7d967&margin=%5Bobject%20Object%5D&originHeight=1006&originWidth=1062&originalType=url&status=done&style=none&taskId=u8125fdd8-2c02-4142-8ff6-2a5b708f249&width=336\"><br>上图是以太坊账户数据存储结构，账户内部实际只存储关键数据，而合约代码以及合约自身数据则通过对应的哈希值关联。 因为每个账户对象，将作为一个以太坊账户树的一个叶子数据存储， 不能太大。<br>从以太坊作为一个世界态(World State)状态机视角看数据关系如下：<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/1629942/1619187528845-a6a7b2a0-4445-4bd7-839d-ed7715755f7c.png#clientId=u7a530312-f976-4&from=paste&height=125&id=ud8337454&margin=%5Bobject%20Object%5D&originHeight=174&originWidth=955&originalType=url&status=done&style=none&taskId=u96e7177e-6233-4ade-8cc1-94578d56711&width=686.5\"><br>我们通过一段示例代码，感受下以太坊账户数据存储。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">import</span>(...)<br><span class=\"hljs-keyword\">var</span> toAddr =common.HexToAddress<br><span class=\"hljs-keyword\">var</span> toHash =common.BytesToHash<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>  &#123;<br>    statadb, _ := state.New(common.Hash&#123;&#125;,<br>        state.NewDatabase(rawdb.NewMemoryDatabase()))<span class=\"hljs-comment\">// ❶</span><br><br>    acct1:=toAddr(<span class=\"hljs-string\">&quot;0x0bB141C2F7d4d12B1D27E62F86254e6ccEd5FF9a&quot;</span>)<span class=\"hljs-comment\">// ❷</span><br>    acct2:=toAddr(<span class=\"hljs-string\">&quot;0x77de172A492C40217e48Ebb7EEFf9b2d7dF8151B&quot;</span>)<br><br>    statadb.AddBalance(acct1,big.NewInt(<span class=\"hljs-number\">100</span>))<br>    statadb.AddBalance(acct2,big.NewInt(<span class=\"hljs-number\">888</span>))<br><br>    contract:=crypto.CreateAddress(acct1,statadb.GetNonce(acct1))<span class=\"hljs-comment\">// ❸</span><br>    statadb.CreateAccount(contract)<br>    statadb.SetCode(contract,[]<span class=\"hljs-keyword\">byte</span>(<span class=\"hljs-string\">&quot;contract code bytes&quot;</span>))<span class=\"hljs-comment\">// ❹</span><br><br>    statadb.SetNonce(contract,<span class=\"hljs-number\">1</span>)<br>    statadb.SetState(contract,toHash([]<span class=\"hljs-keyword\">byte</span>(<span class=\"hljs-string\">&quot;owner&quot;</span>)),toHash(acct1.Bytes()))<span class=\"hljs-comment\">//❺</span><br>    statadb.SetState(contract,toHash([]<span class=\"hljs-keyword\">byte</span>(<span class=\"hljs-string\">&quot;name&quot;</span>)),toHash([]<span class=\"hljs-keyword\">byte</span>(<span class=\"hljs-string\">&quot;ysqi&quot;</span>)))<br><br>    statadb.SetState(contract,toHash([]<span class=\"hljs-keyword\">byte</span>(<span class=\"hljs-string\">&quot;online&quot;</span>)),toHash([]<span class=\"hljs-keyword\">byte</span>&#123;<span class=\"hljs-number\">1</span>&#125;)<br>    statadb.SetState(contract,toHash([]<span class=\"hljs-keyword\">byte</span>(<span class=\"hljs-string\">&quot;online&quot;</span>)),toHash([]<span class=\"hljs-keyword\">byte</span>&#123;&#125;))<span class=\"hljs-comment\">//❻</span><br><br>    statadb.Commit(<span class=\"hljs-literal\">true</span>)<span class=\"hljs-comment\">// ❼</span><br>    fmt.Println(<span class=\"hljs-keyword\">string</span>(statadb.Dump()))<span class=\"hljs-comment\">// ❽</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>上面代码中，我们创建了三个账户，并且提交到数据库中。最终打印出当前数据中所有账户的数据信息：</p>\n<ul>\n<li>❶ 一行代码涉及多个操作。首先是<strong>创建一个内存 KV 数据库</strong>，再<strong>包装为 stata 数据库实例</strong>， 最后<strong>利用一个空的 DB 级的 StateRoot，初始化一个以太坊 statadb</strong>。</li>\n<li>❷ 定义两个账户 acct1 和 acct2，并分别添加 100 和 888 到账户余额。</li>\n<li>❸ 模拟合约账户的创建过程，由外部账户 acct1 创建合约账户地址，并将此地址载入 statadb。</li>\n<li>❹ 在将合约代码加入刚刚创建的合约账户中，在写入合约代码的同时， 会利用 crypto.Keccak256Hash(code)计算合约代码哈希，保留在账户数据中。</li>\n<li>❺ 模拟合约执行过程，涉及修改合约状态，新增三项状态数据 owner,name 和 online，分别对应不同值。</li>\n<li>❻ 这里和前面不同的是，是给状态 online 赋值为空[]byte{}，因为所有状态的默认值均是[]byte{}， 在提交到数据库时，如 Leveldb 认为这些状态无有效值，会从数据库文件中删除此记录。 因此，此操作实际是一个删除状态 online 操作。</li>\n<li>❼ 上面所有操作，还都<strong>只是发生在 statdb 内存</strong>中，并未真正的写入数据库文件。 <strong>执行 Commit</strong>，才会<strong>将关于 statadb 的所有变更更新到数据库文件</strong>中。</li>\n<li>❽ 一旦提交数据，则可以使用 Dump 命令从数据库中查找此 stata 相关的所有数据，包括所有账户。 并<strong>以 JSON 格式返还</strong>。这里，我们将返还结果直接打印输出。</li>\n</ul>\n<p>代码执行输出结果如下：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs json\">&#123;<br>  <span class=\"hljs-attr\">&quot;root&quot;</span>: <span class=\"hljs-string\">&quot;3a25b0816cf007c0b878ca7a62ba35ee0337fa53703f281c41a791a137519f00&quot;</span>,<br>  <span class=\"hljs-attr\">&quot;accounts&quot;</span>: &#123;<br>    <span class=\"hljs-attr\">&quot;0bb141c2f7d4d12b1d27e62f86254e6cced5ff9a&quot;</span>: &#123;<br>      <span class=\"hljs-attr\">&quot;balance&quot;</span>: <span class=\"hljs-string\">&quot;100&quot;</span>,<br>      <span class=\"hljs-attr\">&quot;nonce&quot;</span>: <span class=\"hljs-number\">0</span>,<br>      <span class=\"hljs-attr\">&quot;root&quot;</span>: <span class=\"hljs-string\">&quot;56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421&quot;</span>,<br>      <span class=\"hljs-attr\">&quot;codeHash&quot;</span>: <span class=\"hljs-string\">&quot;c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470&quot;</span>,<br>      <span class=\"hljs-attr\">&quot;code&quot;</span>: <span class=\"hljs-string\">&quot;&quot;</span>,<br>      <span class=\"hljs-attr\">&quot;storage&quot;</span>: &#123;&#125;<br>    &#125;,<br>    <span class=\"hljs-attr\">&quot;77de172a492c40217e48ebb7eeff9b2d7df8151b&quot;</span>: &#123;<br>      <span class=\"hljs-attr\">&quot;balance&quot;</span>: <span class=\"hljs-string\">&quot;888&quot;</span>,<br>      <span class=\"hljs-attr\">&quot;nonce&quot;</span>: <span class=\"hljs-number\">0</span>,<br>      <span class=\"hljs-attr\">&quot;root&quot;</span>: <span class=\"hljs-string\">&quot;56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421&quot;</span>,<br>      <span class=\"hljs-attr\">&quot;codeHash&quot;</span>: <span class=\"hljs-string\">&quot;c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470&quot;</span>,<br>      <span class=\"hljs-attr\">&quot;code&quot;</span>: <span class=\"hljs-string\">&quot;&quot;</span>,<br>      <span class=\"hljs-attr\">&quot;storage&quot;</span>: &#123;&#125;<br>    &#125;,<br>    <span class=\"hljs-attr\">&quot;80580f576731dc1e1dcc53d80b261e228c447cdd&quot;</span>: &#123;<br>      <span class=\"hljs-attr\">&quot;balance&quot;</span>: <span class=\"hljs-string\">&quot;0&quot;</span>,<br>      <span class=\"hljs-attr\">&quot;nonce&quot;</span>: <span class=\"hljs-number\">1</span>,<br>      <span class=\"hljs-attr\">&quot;root&quot;</span>: <span class=\"hljs-string\">&quot;1f6d937817f2ac217d8b123c4983c45141e50bd0c358c07f3c19c7b526dd4267&quot;</span>,<br>      <span class=\"hljs-attr\">&quot;codeHash&quot;</span>: <span class=\"hljs-string\">&quot;c668dac8131a99c411450ba912234439ace20d1cc1084f8e198fee0a334bc592&quot;</span>,<br>      <span class=\"hljs-attr\">&quot;code&quot;</span>: <span class=\"hljs-string\">&quot;636f6e747261637420636f6465206279746573&quot;</span>,<br>      <span class=\"hljs-attr\">&quot;storage&quot;</span>: &#123;<br>        <span class=\"hljs-attr\">&quot;000000000000000000000000000000000000000000000000000000006e616d65&quot;</span>: <span class=\"hljs-string\">&quot;8479737169&quot;</span>,<br>        <span class=\"hljs-attr\">&quot;0000000000000000000000000000000000000000000000000000006f776e6572&quot;</span>: <span class=\"hljs-string\">&quot;940bb141c2f7d4d12b1d27e62f86254e6cced5ff9a&quot;</span><br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n","more":"<h1 id=\"账户数据结构\"><a href=\"#账户数据结构\" class=\"headerlink\" title=\"账户数据结构\"></a>账户数据结构</h1><p>以太坊数据以账户为单位组织，账户数据的变更引起账户状态变化, 从而引起以太坊状态变化。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-comment\">// core/state/state_object.go:100</span><br><span class=\"hljs-keyword\">type</span> Account <span class=\"hljs-keyword\">struct</span> &#123;<br>    Nonce    <span class=\"hljs-keyword\">uint64</span><br>    Balance  *big.Int<br>    Root     common.Hash<br>    CodeHash []<span class=\"hljs-keyword\">byte</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>在密码学领域，Nonce 代表一个只使用一次的数字。它往往是一个随机或伪随机数，以避免重复。 以太坊账户中加入 Nonce，可避免重放攻击（不过不是随机产生）。账户 Nonce 起始值是 0，后续每触发一次账户执行则 Nonce 值计加一次。 其中一处的计数逻辑如下：</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-comment\">// core/state_transition.go:212</span><br>st.state.SetNonce(msg.From(), st.state.GetNonce(sender.Address())+<span class=\"hljs-number\">1</span>)<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>Balance 则记录该账户所拥有的以太（ETH）数量，称为账户余额.</li>\n</ul>\n<p>当然必须保证转账方余额充足，在转移前需要 CanTransfer 检查， 如果余额充足，则执行 Transfer 转移 Value 数量的以太。</p>\n<ul>\n<li>账户状态哈希值 StateRoot，是一颗默克尔压缩前缀树（Merkle Patricia Tree）的根值。可以直接利用 StateRoot 从 Leveldb 中快速读取具体的某个状态数据</li>\n</ul>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/1629942/1619187341401-ce4d1b34-e648-4a85-86fb-617d1b2096b8.png#clientId=u7a530312-f976-4&from=paste&height=318&id=uadb7d967&margin=%5Bobject%20Object%5D&originHeight=1006&originWidth=1062&originalType=url&status=done&style=none&taskId=u8125fdd8-2c02-4142-8ff6-2a5b708f249&width=336\"><br>上图是以太坊账户数据存储结构，账户内部实际只存储关键数据，而合约代码以及合约自身数据则通过对应的哈希值关联。 因为每个账户对象，将作为一个以太坊账户树的一个叶子数据存储， 不能太大。<br>从以太坊作为一个世界态(World State)状态机视角看数据关系如下：<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/1629942/1619187528845-a6a7b2a0-4445-4bd7-839d-ed7715755f7c.png#clientId=u7a530312-f976-4&from=paste&height=125&id=ud8337454&margin=%5Bobject%20Object%5D&originHeight=174&originWidth=955&originalType=url&status=done&style=none&taskId=u96e7177e-6233-4ade-8cc1-94578d56711&width=686.5\"><br>我们通过一段示例代码，感受下以太坊账户数据存储。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">import</span>(...)<br><span class=\"hljs-keyword\">var</span> toAddr =common.HexToAddress<br><span class=\"hljs-keyword\">var</span> toHash =common.BytesToHash<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>  &#123;<br>    statadb, _ := state.New(common.Hash&#123;&#125;,<br>        state.NewDatabase(rawdb.NewMemoryDatabase()))<span class=\"hljs-comment\">// ❶</span><br><br>    acct1:=toAddr(<span class=\"hljs-string\">&quot;0x0bB141C2F7d4d12B1D27E62F86254e6ccEd5FF9a&quot;</span>)<span class=\"hljs-comment\">// ❷</span><br>    acct2:=toAddr(<span class=\"hljs-string\">&quot;0x77de172A492C40217e48Ebb7EEFf9b2d7dF8151B&quot;</span>)<br><br>    statadb.AddBalance(acct1,big.NewInt(<span class=\"hljs-number\">100</span>))<br>    statadb.AddBalance(acct2,big.NewInt(<span class=\"hljs-number\">888</span>))<br><br>    contract:=crypto.CreateAddress(acct1,statadb.GetNonce(acct1))<span class=\"hljs-comment\">// ❸</span><br>    statadb.CreateAccount(contract)<br>    statadb.SetCode(contract,[]<span class=\"hljs-keyword\">byte</span>(<span class=\"hljs-string\">&quot;contract code bytes&quot;</span>))<span class=\"hljs-comment\">// ❹</span><br><br>    statadb.SetNonce(contract,<span class=\"hljs-number\">1</span>)<br>    statadb.SetState(contract,toHash([]<span class=\"hljs-keyword\">byte</span>(<span class=\"hljs-string\">&quot;owner&quot;</span>)),toHash(acct1.Bytes()))<span class=\"hljs-comment\">//❺</span><br>    statadb.SetState(contract,toHash([]<span class=\"hljs-keyword\">byte</span>(<span class=\"hljs-string\">&quot;name&quot;</span>)),toHash([]<span class=\"hljs-keyword\">byte</span>(<span class=\"hljs-string\">&quot;ysqi&quot;</span>)))<br><br>    statadb.SetState(contract,toHash([]<span class=\"hljs-keyword\">byte</span>(<span class=\"hljs-string\">&quot;online&quot;</span>)),toHash([]<span class=\"hljs-keyword\">byte</span>&#123;<span class=\"hljs-number\">1</span>&#125;)<br>    statadb.SetState(contract,toHash([]<span class=\"hljs-keyword\">byte</span>(<span class=\"hljs-string\">&quot;online&quot;</span>)),toHash([]<span class=\"hljs-keyword\">byte</span>&#123;&#125;))<span class=\"hljs-comment\">//❻</span><br><br>    statadb.Commit(<span class=\"hljs-literal\">true</span>)<span class=\"hljs-comment\">// ❼</span><br>    fmt.Println(<span class=\"hljs-keyword\">string</span>(statadb.Dump()))<span class=\"hljs-comment\">// ❽</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>上面代码中，我们创建了三个账户，并且提交到数据库中。最终打印出当前数据中所有账户的数据信息：</p>\n<ul>\n<li>❶ 一行代码涉及多个操作。首先是<strong>创建一个内存 KV 数据库</strong>，再<strong>包装为 stata 数据库实例</strong>， 最后<strong>利用一个空的 DB 级的 StateRoot，初始化一个以太坊 statadb</strong>。</li>\n<li>❷ 定义两个账户 acct1 和 acct2，并分别添加 100 和 888 到账户余额。</li>\n<li>❸ 模拟合约账户的创建过程，由外部账户 acct1 创建合约账户地址，并将此地址载入 statadb。</li>\n<li>❹ 在将合约代码加入刚刚创建的合约账户中，在写入合约代码的同时， 会利用 crypto.Keccak256Hash(code)计算合约代码哈希，保留在账户数据中。</li>\n<li>❺ 模拟合约执行过程，涉及修改合约状态，新增三项状态数据 owner,name 和 online，分别对应不同值。</li>\n<li>❻ 这里和前面不同的是，是给状态 online 赋值为空[]byte{}，因为所有状态的默认值均是[]byte{}， 在提交到数据库时，如 Leveldb 认为这些状态无有效值，会从数据库文件中删除此记录。 因此，此操作实际是一个删除状态 online 操作。</li>\n<li>❼ 上面所有操作，还都<strong>只是发生在 statdb 内存</strong>中，并未真正的写入数据库文件。 <strong>执行 Commit</strong>，才会<strong>将关于 statadb 的所有变更更新到数据库文件</strong>中。</li>\n<li>❽ 一旦提交数据，则可以使用 Dump 命令从数据库中查找此 stata 相关的所有数据，包括所有账户。 并<strong>以 JSON 格式返还</strong>。这里，我们将返还结果直接打印输出。</li>\n</ul>\n<p>代码执行输出结果如下：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs json\">&#123;<br>  <span class=\"hljs-attr\">&quot;root&quot;</span>: <span class=\"hljs-string\">&quot;3a25b0816cf007c0b878ca7a62ba35ee0337fa53703f281c41a791a137519f00&quot;</span>,<br>  <span class=\"hljs-attr\">&quot;accounts&quot;</span>: &#123;<br>    <span class=\"hljs-attr\">&quot;0bb141c2f7d4d12b1d27e62f86254e6cced5ff9a&quot;</span>: &#123;<br>      <span class=\"hljs-attr\">&quot;balance&quot;</span>: <span class=\"hljs-string\">&quot;100&quot;</span>,<br>      <span class=\"hljs-attr\">&quot;nonce&quot;</span>: <span class=\"hljs-number\">0</span>,<br>      <span class=\"hljs-attr\">&quot;root&quot;</span>: <span class=\"hljs-string\">&quot;56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421&quot;</span>,<br>      <span class=\"hljs-attr\">&quot;codeHash&quot;</span>: <span class=\"hljs-string\">&quot;c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470&quot;</span>,<br>      <span class=\"hljs-attr\">&quot;code&quot;</span>: <span class=\"hljs-string\">&quot;&quot;</span>,<br>      <span class=\"hljs-attr\">&quot;storage&quot;</span>: &#123;&#125;<br>    &#125;,<br>    <span class=\"hljs-attr\">&quot;77de172a492c40217e48ebb7eeff9b2d7df8151b&quot;</span>: &#123;<br>      <span class=\"hljs-attr\">&quot;balance&quot;</span>: <span class=\"hljs-string\">&quot;888&quot;</span>,<br>      <span class=\"hljs-attr\">&quot;nonce&quot;</span>: <span class=\"hljs-number\">0</span>,<br>      <span class=\"hljs-attr\">&quot;root&quot;</span>: <span class=\"hljs-string\">&quot;56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421&quot;</span>,<br>      <span class=\"hljs-attr\">&quot;codeHash&quot;</span>: <span class=\"hljs-string\">&quot;c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470&quot;</span>,<br>      <span class=\"hljs-attr\">&quot;code&quot;</span>: <span class=\"hljs-string\">&quot;&quot;</span>,<br>      <span class=\"hljs-attr\">&quot;storage&quot;</span>: &#123;&#125;<br>    &#125;,<br>    <span class=\"hljs-attr\">&quot;80580f576731dc1e1dcc53d80b261e228c447cdd&quot;</span>: &#123;<br>      <span class=\"hljs-attr\">&quot;balance&quot;</span>: <span class=\"hljs-string\">&quot;0&quot;</span>,<br>      <span class=\"hljs-attr\">&quot;nonce&quot;</span>: <span class=\"hljs-number\">1</span>,<br>      <span class=\"hljs-attr\">&quot;root&quot;</span>: <span class=\"hljs-string\">&quot;1f6d937817f2ac217d8b123c4983c45141e50bd0c358c07f3c19c7b526dd4267&quot;</span>,<br>      <span class=\"hljs-attr\">&quot;codeHash&quot;</span>: <span class=\"hljs-string\">&quot;c668dac8131a99c411450ba912234439ace20d1cc1084f8e198fee0a334bc592&quot;</span>,<br>      <span class=\"hljs-attr\">&quot;code&quot;</span>: <span class=\"hljs-string\">&quot;636f6e747261637420636f6465206279746573&quot;</span>,<br>      <span class=\"hljs-attr\">&quot;storage&quot;</span>: &#123;<br>        <span class=\"hljs-attr\">&quot;000000000000000000000000000000000000000000000000000000006e616d65&quot;</span>: <span class=\"hljs-string\">&quot;8479737169&quot;</span>,<br>        <span class=\"hljs-attr\">&quot;0000000000000000000000000000000000000000000000000000006f776e6572&quot;</span>: <span class=\"hljs-string\">&quot;940bb141c2f7d4d12b1d27e62f86254e6cced5ff9a&quot;</span><br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>","categories":[],"tags":[]}